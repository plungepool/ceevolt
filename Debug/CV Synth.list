
CV Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008658  08008658  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008658  08008658  00018658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008660  08008660  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  20000090  080086f8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  080086f8  00020898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c385  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039ec  00000000  00000000  0003c445  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001620  00000000  00000000  0003fe38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a0  00000000  00000000  00041458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002474b  00000000  00000000  000428f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000137bc  00000000  00000000  00067043  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2649  00000000  00000000  0007a7ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014ce48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f08  00000000  00000000  0014cec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008624 	.word	0x08008624

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008624 	.word	0x08008624

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fccc 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f816 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f9a0 	bl	8000818 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f892 	bl	8000600 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f8be 	bl	800065c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f8ec 	bl	80006bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e4:	f007 fc9a 	bl	8007e1c <MX_USB_HOST_Init>
  MX_TIM4_Init();
 80004e8:	f000 f91e 	bl	8000728 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80004ec:	210c      	movs	r1, #12
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <main+0x34>)
 80004f0:	f004 f906 	bl	8004700 <HAL_TIM_PWM_Start>
  {
//	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
//	  HAL_Delay(1000);

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f4:	f007 fcb8 	bl	8007e68 <MX_USB_HOST_Process>
 80004f8:	e7fc      	b.n	80004f4 <main+0x2c>
 80004fa:	bf00      	nop
 80004fc:	200000c0 	.word	0x200000c0

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b098      	sub	sp, #96	; 0x60
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f007 ffc6 	bl	80084a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 031c 	add.w	r3, r7, #28
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	4b30      	ldr	r3, [pc, #192]	; (80005f8 <SystemClock_Config+0xf8>)
 8000538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053a:	4a2f      	ldr	r2, [pc, #188]	; (80005f8 <SystemClock_Config+0xf8>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000540:	6413      	str	r3, [r2, #64]	; 0x40
 8000542:	4b2d      	ldr	r3, [pc, #180]	; (80005f8 <SystemClock_Config+0xf8>)
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <SystemClock_Config+0xfc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a29      	ldr	r2, [pc, #164]	; (80005fc <SystemClock_Config+0xfc>)
 8000558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800055c:	6013      	str	r3, [r2, #0]
 800055e:	4b27      	ldr	r3, [pc, #156]	; (80005fc <SystemClock_Config+0xfc>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056a:	2301      	movs	r3, #1
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800057e:	2304      	movs	r3, #4
 8000580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000582:	2360      	movs	r3, #96	; 0x60
 8000584:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000586:	2306      	movs	r3, #6
 8000588:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800058a:	2304      	movs	r3, #4
 800058c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000592:	4618      	mov	r0, r3
 8000594:	f003 fa8a 	bl	8003aac <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800059e:	f000 fa39 	bl	8000a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b8:	f107 031c 	add.w	r3, r7, #28
 80005bc:	2101      	movs	r1, #1
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fce4 	bl	8003f8c <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xce>
  {
    Error_Handler();
 80005ca:	f000 fa23 	bl	8000a14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005ce:	2301      	movs	r3, #1
 80005d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80005d2:	2332      	movs	r3, #50	; 0x32
 80005d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fe8c 	bl	80042fc <HAL_RCCEx_PeriphCLKConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xee>
  {
    Error_Handler();
 80005ea:	f000 fa13 	bl	8000a14 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3760      	adds	r7, #96	; 0x60
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_I2C1_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <MX_I2C1_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_I2C1_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_I2C1_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_I2C1_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_I2C1_Init+0x50>)
 800063e:	f002 fc5d 	bl	8002efc <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 f9e4 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000100 	.word	0x20000100
 8000654:	40005400 	.word	0x40005400
 8000658:	000186a0 	.word	0x000186a0

0800065c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000662:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <MX_I2S3_Init+0x58>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <MX_I2S3_Init+0x5c>)
 8000686:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_I2S3_Init+0x54>)
 800069c:	f002 fd66 	bl	800316c <HAL_I2S_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006a6:	f000 f9b5 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200001ac 	.word	0x200001ac
 80006b4:	40003c00 	.word	0x40003c00
 80006b8:	00017700 	.word	0x00017700

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f003 ff33 	bl	8004578 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f97c 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000154 	.word	0x20000154
 8000724:	40013000 	.word	0x40013000

08000728 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08e      	sub	sp, #56	; 0x38
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]
 8000756:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_TIM4_Init+0xe8>)
 800075a:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <MX_TIM4_Init+0xec>)
 800075c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000;
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <MX_TIM4_Init+0xe8>)
 8000760:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000764:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_TIM4_Init+0xe8>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MX_TIM4_Init+0xe8>)
 800076e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000772:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_TIM4_Init+0xe8>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <MX_TIM4_Init+0xe8>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000780:	4823      	ldr	r0, [pc, #140]	; (8000810 <MX_TIM4_Init+0xe8>)
 8000782:	f003 ff5d 	bl	8004640 <HAL_TIM_Base_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800078c:	f000 f942 	bl	8000a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079a:	4619      	mov	r1, r3
 800079c:	481c      	ldr	r0, [pc, #112]	; (8000810 <MX_TIM4_Init+0xe8>)
 800079e:	f004 f8b3 	bl	8004908 <HAL_TIM_ConfigClockSource>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80007a8:	f000 f934 	bl	8000a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007ac:	4818      	ldr	r0, [pc, #96]	; (8000810 <MX_TIM4_Init+0xe8>)
 80007ae:	f003 ff72 	bl	8004696 <HAL_TIM_PWM_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80007b8:	f000 f92c 	bl	8000a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	4619      	mov	r1, r3
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_TIM4_Init+0xe8>)
 80007cc:	f004 fc64 	bl	8005098 <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80007d6:	f000 f91d 	bl	8000a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007da:	2360      	movs	r3, #96	; 0x60
 80007dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80007de:	2332      	movs	r3, #50	; 0x32
 80007e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	220c      	movs	r2, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	4807      	ldr	r0, [pc, #28]	; (8000810 <MX_TIM4_Init+0xe8>)
 80007f2:	f003 ffc3 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80007fc:	f000 f90a 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <MX_TIM4_Init+0xe8>)
 8000802:	f000 fa4d 	bl	8000ca0 <HAL_TIM_MspPostInit>

}
 8000806:	bf00      	nop
 8000808:	3738      	adds	r7, #56	; 0x38
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000c0 	.word	0x200000c0
 8000814:	40000800 	.word	0x40000800

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
 8000832:	4b71      	ldr	r3, [pc, #452]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a70      	ldr	r2, [pc, #448]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 8000838:	f043 0310 	orr.w	r3, r3, #16
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b6e      	ldr	r3, [pc, #440]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0310 	and.w	r3, r3, #16
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	4b6a      	ldr	r3, [pc, #424]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a69      	ldr	r2, [pc, #420]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b67      	ldr	r3, [pc, #412]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b63      	ldr	r3, [pc, #396]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a62      	ldr	r2, [pc, #392]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b60      	ldr	r3, [pc, #384]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b5c      	ldr	r3, [pc, #368]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a5b      	ldr	r2, [pc, #364]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b59      	ldr	r3, [pc, #356]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	4b55      	ldr	r3, [pc, #340]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a54      	ldr	r2, [pc, #336]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b52      	ldr	r3, [pc, #328]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b4e      	ldr	r3, [pc, #312]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a4d      	ldr	r2, [pc, #308]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b4b      	ldr	r3, [pc, #300]	; (80009f8 <MX_GPIO_Init+0x1e0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2108      	movs	r1, #8
 80008da:	4848      	ldr	r0, [pc, #288]	; (80009fc <MX_GPIO_Init+0x1e4>)
 80008dc:	f000 fe04 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	2101      	movs	r1, #1
 80008e4:	4846      	ldr	r0, [pc, #280]	; (8000a00 <MX_GPIO_Init+0x1e8>)
 80008e6:	f000 fdff 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f247 0110 	movw	r1, #28688	; 0x7010
 80008f0:	4844      	ldr	r0, [pc, #272]	; (8000a04 <MX_GPIO_Init+0x1ec>)
 80008f2:	f000 fdf9 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008f6:	2308      	movs	r3, #8
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	483b      	ldr	r0, [pc, #236]	; (80009fc <MX_GPIO_Init+0x1e4>)
 800090e:	f000 fc51 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000912:	2301      	movs	r3, #1
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4835      	ldr	r0, [pc, #212]	; (8000a00 <MX_GPIO_Init+0x1e8>)
 800092a:	f000 fc43 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800092e:	2308      	movs	r3, #8
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093e:	2305      	movs	r3, #5
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	482d      	ldr	r0, [pc, #180]	; (8000a00 <MX_GPIO_Init+0x1e8>)
 800094a:	f000 fc33 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094e:	2301      	movs	r3, #1
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000952:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <MX_GPIO_Init+0x1f0>)
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	482a      	ldr	r0, [pc, #168]	; (8000a0c <MX_GPIO_Init+0x1f4>)
 8000962:	f000 fc27 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000966:	2304      	movs	r3, #4
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4825      	ldr	r0, [pc, #148]	; (8000a10 <MX_GPIO_Init+0x1f8>)
 800097a:	f000 fc1b 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000990:	2305      	movs	r3, #5
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	481d      	ldr	r0, [pc, #116]	; (8000a10 <MX_GPIO_Init+0x1f8>)
 800099c:	f000 fc0a 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin;
 80009a0:	f247 0310 	movw	r3, #28688	; 0x7010
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4812      	ldr	r0, [pc, #72]	; (8000a04 <MX_GPIO_Init+0x1ec>)
 80009ba:	f000 fbfb 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009be:	2320      	movs	r3, #32
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_GPIO_Init+0x1ec>)
 80009d2:	f000 fbef 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_GPIO_Init+0x1f0>)
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_GPIO_Init+0x1e4>)
 80009ea:	f000 fbe3 	bl	80011b4 <HAL_GPIO_Init>

}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	10120000 	.word	0x10120000
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020400 	.word	0x40020400

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <Error_Handler+0x6>

08000a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f000 fb68 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <HAL_I2C_MspInit+0x84>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12c      	bne.n	8000ae8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aaa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab0:	2312      	movs	r3, #18
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000abc:	2304      	movs	r3, #4
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <HAL_I2C_MspInit+0x8c>)
 8000ac8:	f000 fb74 	bl	80011b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400

08000afc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <HAL_I2S_MspInit+0xc0>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d14a      	bne.n	8000bb4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <HAL_I2S_MspInit+0xc4>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a26      	ldr	r2, [pc, #152]	; (8000bc0 <HAL_I2S_MspInit+0xc4>)
 8000b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <HAL_I2S_MspInit+0xc4>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <HAL_I2S_MspInit+0xc4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a1f      	ldr	r2, [pc, #124]	; (8000bc0 <HAL_I2S_MspInit+0xc4>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <HAL_I2S_MspInit+0xc4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_I2S_MspInit+0xc4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <HAL_I2S_MspInit+0xc4>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_I2S_MspInit+0xc4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b72:	2310      	movs	r3, #16
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b82:	2306      	movs	r3, #6
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <HAL_I2S_MspInit+0xc8>)
 8000b8e:	f000 fb11 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b92:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba4:	2306      	movs	r3, #6
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <HAL_I2S_MspInit+0xcc>)
 8000bb0:	f000 fb00 	bl	80011b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40003c00 	.word	0x40003c00
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40020800 	.word	0x40020800

08000bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <HAL_SPI_MspInit+0x84>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d12b      	bne.n	8000c46 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <HAL_SPI_MspInit+0x88>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <HAL_SPI_MspInit+0x88>)
 8000bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_SPI_MspInit+0x88>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_SPI_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <HAL_SPI_MspInit+0x88>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_SPI_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c26:	23e0      	movs	r3, #224	; 0xe0
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c36:	2305      	movs	r3, #5
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <HAL_SPI_MspInit+0x8c>)
 8000c42:	f000 fab7 	bl	80011b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40013000 	.word	0x40013000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000

08000c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <HAL_TIM_Base_MspInit+0x3c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d10d      	bne.n	8000c8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_TIM_Base_MspInit+0x40>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <HAL_TIM_Base_MspInit+0x40>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HAL_TIM_Base_MspInit+0x40>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40000800 	.word	0x40000800
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <HAL_TIM_MspPostInit+0x68>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d11e      	bne.n	8000d00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_TIM_MspPostInit+0x6c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_TIM_MspPostInit+0x6c>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_TIM_MspPostInit+0x6c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_TIM_MspPostInit+0x70>)
 8000cfc:	f000 fa5a 	bl	80011b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40000800 	.word	0x40000800
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020c00 	.word	0x40020c00

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 f8d4 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <OTG_FS_IRQHandler+0x10>)
 8000d6e:	f000 fe63 	bl	8001a38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200005d0 	.word	0x200005d0

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f007 fb3e 	bl	800842c <__errno>
 8000db0:	4602      	mov	r2, r0
 8000db2:	230c      	movs	r3, #12
 8000db4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20020000 	.word	0x20020000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	200000ac 	.word	0x200000ac
 8000de4:	20000898 	.word	0x20000898

08000de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <SystemInit+0x28>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <SystemInit+0x28>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SystemInit+0x28>)
 8000dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e02:	609a      	str	r2, [r3, #8]
#endif
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e1a:	e003      	b.n	8000e24 <LoopCopyDataInit>

08000e1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e22:	3104      	adds	r1, #4

08000e24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e24:	480b      	ldr	r0, [pc, #44]	; (8000e54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e2c:	d3f6      	bcc.n	8000e1c <CopyDataInit>
  ldr  r2, =_sbss
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e30:	e002      	b.n	8000e38 <LoopFillZerobss>

08000e32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e34:	f842 3b04 	str.w	r3, [r2], #4

08000e38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e3c:	d3f9      	bcc.n	8000e32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e3e:	f7ff ffd3 	bl	8000de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e42:	f007 faf9 	bl	8008438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e46:	f7ff fb3f 	bl	80004c8 <main>
  bx  lr    
 8000e4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e50:	08008668 	.word	0x08008668
  ldr  r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e58:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000e5c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000e60:	20000898 	.word	0x20000898

08000e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_Init+0x40>)
 8000e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_Init+0x40>)
 8000e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_Init+0x40>)
 8000e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f94d 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 f808 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fdbe 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023c00 	.word	0x40023c00

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f965 	bl	800119a <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee8:	f000 f92d 	bl	8001146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	200001f4 	.word	0x200001f4

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200001f4 	.word	0x200001f4

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff ffee 	bl	8000f34 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_Delay+0x40>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffde 	bl	8000f34 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000008 	.word	0x20000008

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff29 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff3e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff8e 	bl	8001084 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff31 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa2 	bl	80010ec <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	e16b      	b.n	80014a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f040 815a 	bne.w	80014a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d00b      	beq.n	800120e <HAL_GPIO_Init+0x5a>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d007      	beq.n	800120e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001202:	2b11      	cmp	r3, #17
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b12      	cmp	r3, #18
 800120c:	d130      	bne.n	8001270 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0xfc>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b12      	cmp	r3, #18
 80012ae:	d123      	bne.n	80012f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80b4 	beq.w	80014a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b5f      	ldr	r3, [pc, #380]	; (80014bc <HAL_GPIO_Init+0x308>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a5e      	ldr	r2, [pc, #376]	; (80014bc <HAL_GPIO_Init+0x308>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b5c      	ldr	r3, [pc, #368]	; (80014bc <HAL_GPIO_Init+0x308>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001356:	4a5a      	ldr	r2, [pc, #360]	; (80014c0 <HAL_GPIO_Init+0x30c>)
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	220f      	movs	r2, #15
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a51      	ldr	r2, [pc, #324]	; (80014c4 <HAL_GPIO_Init+0x310>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d02b      	beq.n	80013da <HAL_GPIO_Init+0x226>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <HAL_GPIO_Init+0x314>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d025      	beq.n	80013d6 <HAL_GPIO_Init+0x222>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4f      	ldr	r2, [pc, #316]	; (80014cc <HAL_GPIO_Init+0x318>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d01f      	beq.n	80013d2 <HAL_GPIO_Init+0x21e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4e      	ldr	r2, [pc, #312]	; (80014d0 <HAL_GPIO_Init+0x31c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d019      	beq.n	80013ce <HAL_GPIO_Init+0x21a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4d      	ldr	r2, [pc, #308]	; (80014d4 <HAL_GPIO_Init+0x320>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0x216>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <HAL_GPIO_Init+0x324>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00d      	beq.n	80013c6 <HAL_GPIO_Init+0x212>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4b      	ldr	r2, [pc, #300]	; (80014dc <HAL_GPIO_Init+0x328>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x20e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4a      	ldr	r2, [pc, #296]	; (80014e0 <HAL_GPIO_Init+0x32c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_GPIO_Init+0x20a>
 80013ba:	2307      	movs	r3, #7
 80013bc:	e00e      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013be:	2308      	movs	r3, #8
 80013c0:	e00c      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013c2:	2306      	movs	r3, #6
 80013c4:	e00a      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013c6:	2305      	movs	r3, #5
 80013c8:	e008      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013ca:	2304      	movs	r3, #4
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013da:	2300      	movs	r3, #0
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f002 0203 	and.w	r2, r2, #3
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	4093      	lsls	r3, r2
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ec:	4934      	ldr	r1, [pc, #208]	; (80014c0 <HAL_GPIO_Init+0x30c>)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013fa:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <HAL_GPIO_Init+0x330>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800141e:	4a31      	ldr	r2, [pc, #196]	; (80014e4 <HAL_GPIO_Init+0x330>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001424:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <HAL_GPIO_Init+0x330>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001448:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <HAL_GPIO_Init+0x330>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144e:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <HAL_GPIO_Init+0x330>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001472:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <HAL_GPIO_Init+0x330>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_GPIO_Init+0x330>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800149c:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_GPIO_Init+0x330>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	f67f ae90 	bls.w	80011d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b0:	bf00      	nop
 80014b2:	3724      	adds	r7, #36	; 0x24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40013800 	.word	0x40013800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021800 	.word	0x40021800
 80014e0:	40021c00 	.word	0x40021c00
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800151a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151c:	b08f      	sub	sp, #60	; 0x3c
 800151e:	af0a      	add	r7, sp, #40	; 0x28
 8001520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e054      	b.n	80015d6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f006 fcc6 	bl	8007ed8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2203      	movs	r2, #3
 8001550:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fe82 	bl	8005274 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	687e      	ldr	r6, [r7, #4]
 8001578:	466d      	mov	r5, sp
 800157a:	f106 0410 	add.w	r4, r6, #16
 800157e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001586:	e894 0003 	ldmia.w	r4, {r0, r1}
 800158a:	e885 0003 	stmia.w	r5, {r0, r1}
 800158e:	1d33      	adds	r3, r6, #4
 8001590:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001592:	6838      	ldr	r0, [r7, #0]
 8001594:	f003 fdfc 	bl	8005190 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2101      	movs	r1, #1
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fe79 	bl	8005296 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	687e      	ldr	r6, [r7, #4]
 80015ac:	466d      	mov	r5, sp
 80015ae:	f106 0410 	add.w	r4, r6, #16
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015be:	e885 0003 	stmia.w	r5, {r0, r1}
 80015c2:	1d33      	adds	r3, r6, #4
 80015c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f003 ff8c 	bl	80054e4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015de <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015de:	b590      	push	{r4, r7, lr}
 80015e0:	b089      	sub	sp, #36	; 0x24
 80015e2:	af04      	add	r7, sp, #16
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	4608      	mov	r0, r1
 80015e8:	4611      	mov	r1, r2
 80015ea:	461a      	mov	r2, r3
 80015ec:	4603      	mov	r3, r0
 80015ee:	70fb      	strb	r3, [r7, #3]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70bb      	strb	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_HCD_HC_Init+0x28>
 8001602:	2302      	movs	r3, #2
 8001604:	e07f      	b.n	8001706 <HAL_HCD_HC_Init+0x128>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800160e:	78fa      	ldrb	r2, [r7, #3]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	440b      	add	r3, r1
 800161c:	333d      	adds	r3, #61	; 0x3d
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	3338      	adds	r3, #56	; 0x38
 8001632:	787a      	ldrb	r2, [r7, #1]
 8001634:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001636:	78fa      	ldrb	r2, [r7, #3]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	3340      	adds	r3, #64	; 0x40
 8001646:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001648:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800164a:	78fa      	ldrb	r2, [r7, #3]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	3339      	adds	r3, #57	; 0x39
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	333f      	adds	r3, #63	; 0x3f
 800166e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001672:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	78bb      	ldrb	r3, [r7, #2]
 8001678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800167c:	b2d8      	uxtb	r0, r3
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	333a      	adds	r3, #58	; 0x3a
 800168c:	4602      	mov	r2, r0
 800168e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001690:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001694:	2b00      	cmp	r3, #0
 8001696:	da0a      	bge.n	80016ae <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001698:	78fa      	ldrb	r2, [r7, #3]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	333b      	adds	r3, #59	; 0x3b
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e009      	b.n	80016c2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	333b      	adds	r3, #59	; 0x3b
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	333c      	adds	r3, #60	; 0x3c
 80016d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016d6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	787c      	ldrb	r4, [r7, #1]
 80016de:	78ba      	ldrb	r2, [r7, #2]
 80016e0:	78f9      	ldrb	r1, [r7, #3]
 80016e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	4623      	mov	r3, r4
 80016f4:	f004 f878 	bl	80057e8 <USB_HC_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bd90      	pop	{r4, r7, pc}

0800170e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_HCD_HC_Halt+0x1e>
 8001728:	2302      	movs	r3, #2
 800172a:	e00f      	b.n	800174c <HAL_HCD_HC_Halt+0x3e>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f004 fab4 	bl	8005caa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4603      	mov	r3, r0
 8001764:	70fb      	strb	r3, [r7, #3]
 8001766:	460b      	mov	r3, r1
 8001768:	70bb      	strb	r3, [r7, #2]
 800176a:	4613      	mov	r3, r2
 800176c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	333b      	adds	r3, #59	; 0x3b
 800177e:	78ba      	ldrb	r2, [r7, #2]
 8001780:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	333f      	adds	r3, #63	; 0x3f
 8001792:	787a      	ldrb	r2, [r7, #1]
 8001794:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001796:	7c3b      	ldrb	r3, [r7, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d114      	bne.n	80017c6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	3342      	adds	r3, #66	; 0x42
 80017ac:	2203      	movs	r2, #3
 80017ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	333d      	adds	r3, #61	; 0x3d
 80017c0:	7f3a      	ldrb	r2, [r7, #28]
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	e009      	b.n	80017da <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	3342      	adds	r3, #66	; 0x42
 80017d6:	2202      	movs	r2, #2
 80017d8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017da:	787b      	ldrb	r3, [r7, #1]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	f200 80d6 	bhi.w	800198e <HAL_HCD_HC_SubmitRequest+0x23a>
 80017e2:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	080017f9 	.word	0x080017f9
 80017ec:	08001979 	.word	0x08001979
 80017f0:	08001865 	.word	0x08001865
 80017f4:	080018ef 	.word	0x080018ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017f8:	7c3b      	ldrb	r3, [r7, #16]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	f040 80c9 	bne.w	8001992 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001800:	78bb      	ldrb	r3, [r7, #2]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 80c5 	bne.w	8001992 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001808:	8b3b      	ldrh	r3, [r7, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	3351      	adds	r3, #81	; 0x51
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3351      	adds	r3, #81	; 0x51
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10a      	bne.n	800184e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3342      	adds	r3, #66	; 0x42
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800184c:	e0a1      	b.n	8001992 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	3342      	adds	r3, #66	; 0x42
 800185e:	2202      	movs	r2, #2
 8001860:	701a      	strb	r2, [r3, #0]
      break;
 8001862:	e096      	b.n	8001992 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001864:	78bb      	ldrb	r3, [r7, #2]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d120      	bne.n	80018ac <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	3351      	adds	r3, #81	; 0x51
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10a      	bne.n	8001896 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	3342      	adds	r3, #66	; 0x42
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001894:	e07e      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	3342      	adds	r3, #66	; 0x42
 80018a6:	2202      	movs	r2, #2
 80018a8:	701a      	strb	r2, [r3, #0]
      break;
 80018aa:	e073      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	3350      	adds	r3, #80	; 0x50
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10a      	bne.n	80018d8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c2:	78fa      	ldrb	r2, [r7, #3]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	3342      	adds	r3, #66	; 0x42
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
      break;
 80018d6:	e05d      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	3342      	adds	r3, #66	; 0x42
 80018e8:	2202      	movs	r2, #2
 80018ea:	701a      	strb	r2, [r3, #0]
      break;
 80018ec:	e052      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018ee:	78bb      	ldrb	r3, [r7, #2]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d120      	bne.n	8001936 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	3351      	adds	r3, #81	; 0x51
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10a      	bne.n	8001920 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3342      	adds	r3, #66	; 0x42
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800191e:	e039      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	3342      	adds	r3, #66	; 0x42
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
      break;
 8001934:	e02e      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	3350      	adds	r3, #80	; 0x50
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10a      	bne.n	8001962 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	3342      	adds	r3, #66	; 0x42
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
      break;
 8001960:	e018      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	3342      	adds	r3, #66	; 0x42
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
      break;
 8001976:	e00d      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	3342      	adds	r3, #66	; 0x42
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
      break;
 800198c:	e002      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800198e:	bf00      	nop
 8001990:	e000      	b.n	8001994 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001992:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	3344      	adds	r3, #68	; 0x44
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	8b39      	ldrh	r1, [r7, #24]
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4403      	add	r3, r0
 80019b8:	3348      	adds	r3, #72	; 0x48
 80019ba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	440b      	add	r3, r1
 80019ca:	335c      	adds	r3, #92	; 0x5c
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	440b      	add	r3, r1
 80019de:	334c      	adds	r3, #76	; 0x4c
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	440b      	add	r3, r1
 80019f2:	3339      	adds	r3, #57	; 0x39
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	440b      	add	r3, r1
 8001a06:	335d      	adds	r3, #93	; 0x5d
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	3338      	adds	r3, #56	; 0x38
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	18d1      	adds	r1, r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	f003 ffe8 	bl	80059fc <USB_HC_StartXfer>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop

08001a38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fd05 	bl	800545e <USB_GetMode>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	f040 80ef 	bne.w	8001c3a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fce9 	bl	8005438 <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80e5 	beq.w	8001c38 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fce0 	bl	8005438 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a82:	d104      	bne.n	8001a8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fcd0 	bl	8005438 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aa2:	d104      	bne.n	8001aae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001aac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fcc0 	bl	8005438 <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001abe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ac2:	d104      	bne.n	8001ace <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001acc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fcb0 	bl	8005438 <USB_ReadInterrupts>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d103      	bne.n	8001aea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fca2 	bl	8005438 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001afe:	d115      	bne.n	8001b2c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d108      	bne.n	8001b2c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f006 fa5a 	bl	8007fd4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2101      	movs	r1, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fd98 	bl	800565c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fc81 	bl	8005438 <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b40:	d102      	bne.n	8001b48 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f001 f966 	bl	8002e14 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fc73 	bl	8005438 <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d106      	bne.n	8001b6a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f006 fa1d 	bl	8007f9c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2208      	movs	r2, #8
 8001b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fc62 	bl	8005438 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b7e:	d138      	bne.n	8001bf2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 f87f 	bl	8005c88 <USB_HC_ReadInterrupt>
 8001b8a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e025      	b.n	8001bde <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d018      	beq.n	8001bd8 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	015a      	lsls	r2, r3, #5
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bbc:	d106      	bne.n	8001bcc <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f8cf 	bl	8001d68 <HCD_HC_IN_IRQHandler>
 8001bca:	e005      	b.n	8001bd8 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fcfd 	bl	80025d2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d3d4      	bcc.n	8001b92 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fc1e 	bl	8005438 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b10      	cmp	r3, #16
 8001c04:	d101      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x1d2>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_HCD_IRQHandler+0x1d4>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d014      	beq.n	8001c3a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0210 	bic.w	r2, r2, #16
 8001c1e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f001 f84b 	bl	8002cbc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0210 	orr.w	r2, r2, #16
 8001c34:	619a      	str	r2, [r3, #24]
 8001c36:	e000      	b.n	8001c3a <HAL_HCD_IRQHandler+0x202>
      return;
 8001c38:	bf00      	nop
    }
  }
}
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_HCD_Start+0x16>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e013      	b.n	8001c7e <HAL_HCD_Start+0x3e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 faf5 	bl	8005252 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fd58 	bl	8005724 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_HCD_Stop+0x16>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e00d      	b.n	8001cb8 <HAL_HCD_Stop+0x32>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f004 f939 	bl	8005f20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fcff 	bl	80056d0 <USB_ResetPort>
 8001cd2:	4603      	mov	r3, r0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	335c      	adds	r3, #92	; 0x5c
 8001cf8:	781b      	ldrb	r3, [r3, #0]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	334c      	adds	r3, #76	; 0x4c
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 fd41 	bl	80057c4 <USB_GetCurrentFrame>
 8001d42:	4603      	mov	r3, r0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fd1c 	bl	8005796 <USB_GetHostSpeed>
 8001d5e:	4603      	mov	r3, r0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d119      	bne.n	8001dcc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	461a      	mov	r2, r3
 8001da6:	2304      	movs	r3, #4
 8001da8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	0151      	lsls	r1, r2, #5
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	440a      	add	r2, r1
 8001dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	60d3      	str	r3, [r2, #12]
 8001dca:	e0ce      	b.n	8001f6a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de2:	d12c      	bne.n	8001e3e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	015a      	lsls	r2, r3, #5
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df0:	461a      	mov	r2, r3
 8001df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	335d      	adds	r3, #93	; 0x5d
 8001e08:	2207      	movs	r2, #7
 8001e0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	0151      	lsls	r1, r2, #5
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	440a      	add	r2, r1
 8001e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 ff37 	bl	8005caa <USB_HC_Halt>
 8001e3c:	e095      	b.n	8001f6a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b20      	cmp	r3, #32
 8001e52:	d109      	bne.n	8001e68 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	461a      	mov	r2, r3
 8001e62:	2320      	movs	r3, #32
 8001e64:	6093      	str	r3, [r2, #8]
 8001e66:	e080      	b.n	8001f6a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d134      	bne.n	8001ee8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	0151      	lsls	r1, r2, #5
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	440a      	add	r2, r1
 8001e94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	335d      	adds	r3, #93	; 0x5d
 8001eae:	2205      	movs	r2, #5
 8001eb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2310      	movs	r3, #16
 8001ec2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2308      	movs	r3, #8
 8001ed4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 fee2 	bl	8005caa <USB_HC_Halt>
 8001ee6:	e040      	b.n	8001f6a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efe:	d134      	bne.n	8001f6a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	0151      	lsls	r1, r2, #5
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	440a      	add	r2, r1
 8001f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 febd 	bl	8005caa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2310      	movs	r3, #16
 8001f40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	335d      	adds	r3, #93	; 0x5d
 8001f52:	2208      	movs	r2, #8
 8001f54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	461a      	mov	r2, r3
 8001f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f68:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f80:	d122      	bne.n	8001fc8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	0151      	lsls	r1, r2, #5
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	440a      	add	r2, r1
 8001f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fe7c 	bl	8005caa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fc6:	e300      	b.n	80025ca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	f040 80fd 	bne.w	80021da <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01b      	beq.n	8002020 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3348      	adds	r3, #72	; 0x48
 8001ff8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	0159      	lsls	r1, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	440b      	add	r3, r1
 8002002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800200c:	1ad1      	subs	r1, r2, r3
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4403      	add	r3, r0
 800201c:	334c      	adds	r3, #76	; 0x4c
 800201e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	335d      	adds	r3, #93	; 0x5d
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	3358      	adds	r3, #88	; 0x58
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	461a      	mov	r2, r3
 8002056:	2301      	movs	r3, #1
 8002058:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	440b      	add	r3, r1
 8002068:	333f      	adds	r3, #63	; 0x3f
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	440b      	add	r3, r1
 800207e:	333f      	adds	r3, #63	; 0x3f
 8002080:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002082:	2b02      	cmp	r3, #2
 8002084:	d121      	bne.n	80020ca <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	0151      	lsls	r1, r2, #5
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	440a      	add	r2, r1
 800209c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 fdfa 	bl	8005caa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	461a      	mov	r2, r3
 80020c4:	2310      	movs	r3, #16
 80020c6:	6093      	str	r3, [r2, #8]
 80020c8:	e070      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	333f      	adds	r3, #63	; 0x3f
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d12a      	bne.n	8002136 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	0151      	lsls	r1, r2, #5
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	440a      	add	r2, r1
 80020f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020fe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	335c      	adds	r3, #92	; 0x5c
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	b2d8      	uxtb	r0, r3
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	335c      	adds	r3, #92	; 0x5c
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	4601      	mov	r1, r0
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f005 ff5e 	bl	8007ff0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002134:	e03a      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	333f      	adds	r3, #63	; 0x3f
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d12f      	bne.n	80021ac <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	335c      	adds	r3, #92	; 0x5c
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	3350      	adds	r3, #80	; 0x50
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	f083 0301 	eor.w	r3, r3, #1
 8002176:	b2d8      	uxtb	r0, r3
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	3350      	adds	r3, #80	; 0x50
 8002188:	4602      	mov	r2, r0
 800218a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	b2d8      	uxtb	r0, r3
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	4601      	mov	r1, r0
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f005 ff22 	bl	8007ff0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	3350      	adds	r3, #80	; 0x50
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	f083 0301 	eor.w	r3, r3, #1
 80021c2:	b2d8      	uxtb	r0, r3
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	3350      	adds	r3, #80	; 0x50
 80021d4:	4602      	mov	r2, r0
 80021d6:	701a      	strb	r2, [r3, #0]
}
 80021d8:	e1f7      	b.n	80025ca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	f040 811a 	bne.w	8002426 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	0151      	lsls	r1, r2, #5
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	440a      	add	r2, r1
 8002208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800220c:	f023 0302 	bic.w	r3, r3, #2
 8002210:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	335d      	adds	r3, #93	; 0x5d
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d10a      	bne.n	800223e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	335c      	adds	r3, #92	; 0x5c
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	e0d9      	b.n	80023f2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	335d      	adds	r3, #93	; 0x5d
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d10a      	bne.n	800226a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	335c      	adds	r3, #92	; 0x5c
 8002264:	2205      	movs	r2, #5
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e0c3      	b.n	80023f2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	335d      	adds	r3, #93	; 0x5d
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b06      	cmp	r3, #6
 800227e:	d00a      	beq.n	8002296 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	440b      	add	r3, r1
 800228e:	335d      	adds	r3, #93	; 0x5d
 8002290:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002292:	2b08      	cmp	r3, #8
 8002294:	d156      	bne.n	8002344 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	3358      	adds	r3, #88	; 0x58
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	1c59      	adds	r1, r3, #1
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4403      	add	r3, r0
 80022b8:	3358      	adds	r3, #88	; 0x58
 80022ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	3358      	adds	r3, #88	; 0x58
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d914      	bls.n	80022fc <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	3358      	adds	r3, #88	; 0x58
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	440b      	add	r3, r1
 80022f4:	335c      	adds	r3, #92	; 0x5c
 80022f6:	2204      	movs	r2, #4
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e009      	b.n	8002310 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	335c      	adds	r3, #92	; 0x5c
 800230c:	2202      	movs	r2, #2
 800230e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002326:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800232e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233c:	461a      	mov	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e056      	b.n	80023f2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	335d      	adds	r3, #93	; 0x5d
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d123      	bne.n	80023a2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	335c      	adds	r3, #92	; 0x5c
 800236a:	2202      	movs	r2, #2
 800236c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002384:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800238c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4413      	add	r3, r2
 8002396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	e027      	b.n	80023f2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	335d      	adds	r3, #93	; 0x5d
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b07      	cmp	r3, #7
 80023b6:	d11c      	bne.n	80023f2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	3358      	adds	r3, #88	; 0x58
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	1c59      	adds	r1, r3, #1
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4403      	add	r3, r0
 80023da:	3358      	adds	r3, #88	; 0x58
 80023dc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	335c      	adds	r3, #92	; 0x5c
 80023ee:	2204      	movs	r2, #4
 80023f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fe:	461a      	mov	r2, r3
 8002400:	2302      	movs	r3, #2
 8002402:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	b2d8      	uxtb	r0, r3
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	335c      	adds	r3, #92	; 0x5c
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	4601      	mov	r1, r0
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f005 fde6 	bl	8007ff0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002424:	e0d1      	b.n	80025ca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002438:	2b80      	cmp	r3, #128	; 0x80
 800243a:	d13e      	bne.n	80024ba <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	0151      	lsls	r1, r2, #5
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	440a      	add	r2, r1
 8002452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	3358      	adds	r3, #88	; 0x58
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1c59      	adds	r1, r3, #1
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4403      	add	r3, r0
 800247e:	3358      	adds	r3, #88	; 0x58
 8002480:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	335d      	adds	r3, #93	; 0x5d
 8002492:	2206      	movs	r2, #6
 8002494:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 fc02 	bl	8005caa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	461a      	mov	r2, r3
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	6093      	str	r3, [r2, #8]
}
 80024b8:	e087      	b.n	80025ca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d17c      	bne.n	80025ca <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	333f      	adds	r3, #63	; 0x3f
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d122      	bne.n	800252c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	440b      	add	r3, r1
 80024f4:	3358      	adds	r3, #88	; 0x58
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	0151      	lsls	r1, r2, #5
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	440a      	add	r2, r1
 8002510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f003 fbc0 	bl	8005caa <USB_HC_Halt>
 800252a:	e045      	b.n	80025b8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	440b      	add	r3, r1
 800253a:	333f      	adds	r3, #63	; 0x3f
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	333f      	adds	r3, #63	; 0x3f
 8002552:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002554:	2b02      	cmp	r3, #2
 8002556:	d12f      	bne.n	80025b8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	3358      	adds	r3, #88	; 0x58
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d121      	bne.n	80025b8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	440b      	add	r3, r1
 8002582:	335d      	adds	r3, #93	; 0x5d
 8002584:	2203      	movs	r2, #3
 8002586:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	0151      	lsls	r1, r2, #5
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	440a      	add	r2, r1
 800259e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a2:	f043 0302 	orr.w	r3, r3, #2
 80025a6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 fb79 	bl	8005caa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	461a      	mov	r2, r3
 80025c6:	2310      	movs	r3, #16
 80025c8:	6093      	str	r3, [r2, #8]
}
 80025ca:	bf00      	nop
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d119      	bne.n	8002636 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	461a      	mov	r2, r3
 8002610:	2304      	movs	r3, #4
 8002612:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	0151      	lsls	r1, r2, #5
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	440a      	add	r2, r1
 800262a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800262e:	f043 0302 	orr.w	r3, r3, #2
 8002632:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002634:	e33e      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b20      	cmp	r3, #32
 800264a:	d141      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	461a      	mov	r2, r3
 800265a:	2320      	movs	r3, #32
 800265c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	333d      	adds	r3, #61	; 0x3d
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	f040 831f 	bne.w	8002cb4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	333d      	adds	r3, #61	; 0x3d
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	335c      	adds	r3, #92	; 0x5c
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	0151      	lsls	r1, r2, #5
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	440a      	add	r2, r1
 80026b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 faee 	bl	8005caa <USB_HC_Halt>
}
 80026ce:	e2f1      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	2b40      	cmp	r3, #64	; 0x40
 80026e4:	d13f      	bne.n	8002766 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	335d      	adds	r3, #93	; 0x5d
 80026f6:	2204      	movs	r2, #4
 80026f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	333d      	adds	r3, #61	; 0x3d
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	3358      	adds	r3, #88	; 0x58
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	0151      	lsls	r1, r2, #5
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	440a      	add	r2, r1
 8002738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f003 faac 	bl	8005caa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	461a      	mov	r2, r3
 8002760:	2340      	movs	r3, #64	; 0x40
 8002762:	6093      	str	r3, [r2, #8]
}
 8002764:	e2a6      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800277c:	d122      	bne.n	80027c4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	0151      	lsls	r1, r2, #5
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	440a      	add	r2, r1
 8002794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f003 fa7e 	bl	8005caa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ba:	461a      	mov	r2, r3
 80027bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c0:	6093      	str	r3, [r2, #8]
}
 80027c2:	e277      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d135      	bne.n	8002846 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	440b      	add	r3, r1
 80027e8:	3358      	adds	r3, #88	; 0x58
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	0151      	lsls	r1, r2, #5
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	440a      	add	r2, r1
 8002804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f003 fa46 	bl	8005caa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	461a      	mov	r2, r3
 800282c:	2301      	movs	r3, #1
 800282e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	440b      	add	r3, r1
 800283e:	335d      	adds	r3, #93	; 0x5d
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
}
 8002844:	e236      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b08      	cmp	r3, #8
 800285a:	d12b      	bne.n	80028b4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	461a      	mov	r2, r3
 800286a:	2308      	movs	r3, #8
 800286c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	0151      	lsls	r1, r2, #5
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	440a      	add	r2, r1
 8002884:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f003 fa06 	bl	8005caa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	335d      	adds	r3, #93	; 0x5d
 80028ae:	2205      	movs	r2, #5
 80028b0:	701a      	strb	r2, [r3, #0]
}
 80028b2:	e1ff      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d155      	bne.n	8002976 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	3358      	adds	r3, #88	; 0x58
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	335d      	adds	r3, #93	; 0x5d
 80028ee:	2203      	movs	r2, #3
 80028f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	333d      	adds	r3, #61	; 0x3d
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d114      	bne.n	8002932 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	440b      	add	r3, r1
 8002916:	333c      	adds	r3, #60	; 0x3c
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	440b      	add	r3, r1
 800292c:	333d      	adds	r3, #61	; 0x3d
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	0151      	lsls	r1, r2, #5
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	440a      	add	r2, r1
 8002948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f003 f9a4 	bl	8005caa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296e:	461a      	mov	r2, r3
 8002970:	2310      	movs	r3, #16
 8002972:	6093      	str	r3, [r2, #8]
}
 8002974:	e19e      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002988:	2b80      	cmp	r3, #128	; 0x80
 800298a:	d12b      	bne.n	80029e4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	0151      	lsls	r1, r2, #5
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	440a      	add	r2, r1
 80029a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 f977 	bl	8005caa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	335d      	adds	r3, #93	; 0x5d
 80029cc:	2206      	movs	r2, #6
 80029ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	461a      	mov	r2, r3
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	6093      	str	r3, [r2, #8]
}
 80029e2:	e167      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fa:	d135      	bne.n	8002a68 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	0151      	lsls	r1, r2, #5
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	440a      	add	r2, r1
 8002a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a16:	f043 0302 	orr.w	r3, r3, #2
 8002a1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 f93f 	bl	8005caa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2310      	movs	r3, #16
 8002a3c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	335d      	adds	r3, #93	; 0x5d
 8002a62:	2208      	movs	r2, #8
 8002a64:	701a      	strb	r2, [r3, #0]
}
 8002a66:	e125      	b.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	f040 811a 	bne.w	8002cb4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	0151      	lsls	r1, r2, #5
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	440a      	add	r2, r1
 8002a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a9a:	f023 0302 	bic.w	r3, r3, #2
 8002a9e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	335d      	adds	r3, #93	; 0x5d
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d137      	bne.n	8002b26 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	335c      	adds	r3, #92	; 0x5c
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	333f      	adds	r3, #63	; 0x3f
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d00b      	beq.n	8002af8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	333f      	adds	r3, #63	; 0x3f
 8002af0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	f040 80c5 	bne.w	8002c82 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	3351      	adds	r3, #81	; 0x51
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f083 0301 	eor.w	r3, r3, #1
 8002b0e:	b2d8      	uxtb	r0, r3
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3351      	adds	r3, #81	; 0x51
 8002b20:	4602      	mov	r2, r0
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e0ad      	b.n	8002c82 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	335d      	adds	r3, #93	; 0x5d
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d10a      	bne.n	8002b52 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	335c      	adds	r3, #92	; 0x5c
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e097      	b.n	8002c82 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	335d      	adds	r3, #93	; 0x5d
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d10a      	bne.n	8002b7e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	335c      	adds	r3, #92	; 0x5c
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e081      	b.n	8002c82 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	335d      	adds	r3, #93	; 0x5d
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d10a      	bne.n	8002baa <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	335c      	adds	r3, #92	; 0x5c
 8002ba4:	2205      	movs	r2, #5
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	e06b      	b.n	8002c82 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	335d      	adds	r3, #93	; 0x5d
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b06      	cmp	r3, #6
 8002bbe:	d00a      	beq.n	8002bd6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	335d      	adds	r3, #93	; 0x5d
 8002bd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d155      	bne.n	8002c82 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	3358      	adds	r3, #88	; 0x58
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	1c59      	adds	r1, r3, #1
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4403      	add	r3, r0
 8002bf8:	3358      	adds	r3, #88	; 0x58
 8002bfa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	3358      	adds	r3, #88	; 0x58
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d914      	bls.n	8002c3c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	440b      	add	r3, r1
 8002c20:	3358      	adds	r3, #88	; 0x58
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	335c      	adds	r3, #92	; 0x5c
 8002c36:	2204      	movs	r2, #4
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e009      	b.n	8002c50 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	335c      	adds	r3, #92	; 0x5c
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c66:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c6e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2302      	movs	r3, #2
 8002c92:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	b2d8      	uxtb	r0, r3
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	335c      	adds	r3, #92	; 0x5c
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	4601      	mov	r1, r0
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f005 f99e 	bl	8007ff0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cb4:	bf00      	nop
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	0c5b      	lsrs	r3, r3, #17
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cf0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d003      	beq.n	8002d00 <HCD_RXQLVL_IRQHandler+0x44>
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	f000 8082 	beq.w	8002e02 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002cfe:	e083      	b.n	8002e08 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d07f      	beq.n	8002e06 <HCD_RXQLVL_IRQHandler+0x14a>
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	3344      	adds	r3, #68	; 0x44
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d074      	beq.n	8002e06 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3344      	adds	r3, #68	; 0x44
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	b292      	uxth	r2, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f002 fb55 	bl	80053e6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	3344      	adds	r3, #68	; 0x44
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	18d1      	adds	r1, r2, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4403      	add	r3, r0
 8002d60:	3344      	adds	r3, #68	; 0x44
 8002d62:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	440b      	add	r3, r1
 8002d72:	334c      	adds	r3, #76	; 0x4c
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	18d1      	adds	r1, r2, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4403      	add	r3, r0
 8002d88:	334c      	adds	r3, #76	; 0x4c
 8002d8a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HCD_RXQLVL_IRQHandler+0x154>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d031      	beq.n	8002e06 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002db8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dc0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	3350      	adds	r3, #80	; 0x50
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	f083 0301 	eor.w	r3, r3, #1
 8002dea:	b2d8      	uxtb	r0, r3
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	3350      	adds	r3, #80	; 0x50
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	701a      	strb	r2, [r3, #0]
      break;
 8002e00:	e001      	b.n	8002e06 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002e02:	bf00      	nop
 8002e04:	e000      	b.n	8002e08 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002e06:	bf00      	nop
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3728      	adds	r7, #40	; 0x28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	1ff80000 	.word	0x1ff80000

08002e14 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e40:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d10b      	bne.n	8002e64 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d102      	bne.n	8002e5c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f005 f8ae 	bl	8007fb8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f043 0302 	orr.w	r3, r3, #2
 8002e62:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d132      	bne.n	8002ed4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d126      	bne.n	8002ece <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d113      	bne.n	8002eb0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e92:	d106      	bne.n	8002ea2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2102      	movs	r1, #2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f002 fbde 	bl	800565c <USB_InitFSLSPClkSel>
 8002ea0:	e011      	b.n	8002ec6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f002 fbd7 	bl	800565c <USB_InitFSLSPClkSel>
 8002eae:	e00a      	b.n	8002ec6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d106      	bne.n	8002ec6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ec4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f005 f8a0 	bl	800800c <HAL_HCD_PortEnabled_Callback>
 8002ecc:	e002      	b.n	8002ed4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f005 f8aa 	bl	8008028 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d103      	bne.n	8002ee6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f043 0320 	orr.w	r3, r3, #32
 8002ee4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eec:	461a      	mov	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	6013      	str	r3, [r2, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e11f      	b.n	800314e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fda2 	bl	8000a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	; 0x24
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f60:	f001 f9b8 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8002f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4a7b      	ldr	r2, [pc, #492]	; (8003158 <HAL_I2C_Init+0x25c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d807      	bhi.n	8002f80 <HAL_I2C_Init+0x84>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a7a      	ldr	r2, [pc, #488]	; (800315c <HAL_I2C_Init+0x260>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	bf94      	ite	ls
 8002f78:	2301      	movls	r3, #1
 8002f7a:	2300      	movhi	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e006      	b.n	8002f8e <HAL_I2C_Init+0x92>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a77      	ldr	r2, [pc, #476]	; (8003160 <HAL_I2C_Init+0x264>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bf94      	ite	ls
 8002f88:	2301      	movls	r3, #1
 8002f8a:	2300      	movhi	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0db      	b.n	800314e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a72      	ldr	r2, [pc, #456]	; (8003164 <HAL_I2C_Init+0x268>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0c9b      	lsrs	r3, r3, #18
 8002fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a64      	ldr	r2, [pc, #400]	; (8003158 <HAL_I2C_Init+0x25c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d802      	bhi.n	8002fd0 <HAL_I2C_Init+0xd4>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	e009      	b.n	8002fe4 <HAL_I2C_Init+0xe8>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	4a63      	ldr	r2, [pc, #396]	; (8003168 <HAL_I2C_Init+0x26c>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ff6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4956      	ldr	r1, [pc, #344]	; (8003158 <HAL_I2C_Init+0x25c>)
 8003000:	428b      	cmp	r3, r1
 8003002:	d80d      	bhi.n	8003020 <HAL_I2C_Init+0x124>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1e59      	subs	r1, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	2b04      	cmp	r3, #4
 800301a:	bf38      	it	cc
 800301c:	2304      	movcc	r3, #4
 800301e:	e04f      	b.n	80030c0 <HAL_I2C_Init+0x1c4>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d111      	bne.n	800304c <HAL_I2C_Init+0x150>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e58      	subs	r0, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	440b      	add	r3, r1
 8003036:	fbb0 f3f3 	udiv	r3, r0, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e012      	b.n	8003072 <HAL_I2C_Init+0x176>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1e58      	subs	r0, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	0099      	lsls	r1, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Init+0x17e>
 8003076:	2301      	movs	r3, #1
 8003078:	e022      	b.n	80030c0 <HAL_I2C_Init+0x1c4>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10e      	bne.n	80030a0 <HAL_I2C_Init+0x1a4>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1e58      	subs	r0, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	440b      	add	r3, r1
 8003090:	fbb0 f3f3 	udiv	r3, r0, r3
 8003094:	3301      	adds	r3, #1
 8003096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309e:	e00f      	b.n	80030c0 <HAL_I2C_Init+0x1c4>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e58      	subs	r0, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	0099      	lsls	r1, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	6809      	ldr	r1, [r1, #0]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6911      	ldr	r1, [r2, #16]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68d2      	ldr	r2, [r2, #12]
 80030fa:	4311      	orrs	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	430b      	orrs	r3, r1
 8003102:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	000186a0 	.word	0x000186a0
 800315c:	001e847f 	.word	0x001e847f
 8003160:	003d08ff 	.word	0x003d08ff
 8003164:	431bde83 	.word	0x431bde83
 8003168:	10624dd3 	.word	0x10624dd3

0800316c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e128      	b.n	80033d0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a90      	ldr	r2, [pc, #576]	; (80033d8 <HAL_I2S_Init+0x26c>)
 8003196:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7fd fcaf 	bl	8000afc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031b4:	f023 030f 	bic.w	r3, r3, #15
 80031b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2202      	movs	r2, #2
 80031c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d060      	beq.n	800328c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031d2:	2310      	movs	r3, #16
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	e001      	b.n	80031dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d802      	bhi.n	80031ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031ea:	2001      	movs	r0, #1
 80031ec:	f001 f968 	bl	80044c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80031f0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fa:	d125      	bne.n	8003248 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	fbb2 f2f3 	udiv	r2, r2, r3
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	461a      	mov	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003220:	3305      	adds	r3, #5
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	e01f      	b.n	8003266 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	461a      	mov	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	3305      	adds	r3, #5
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	e00e      	b.n	8003266 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	3305      	adds	r3, #5
 8003264:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4a5c      	ldr	r2, [pc, #368]	; (80033dc <HAL_I2S_Init+0x270>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	08db      	lsrs	r3, r3, #3
 8003270:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	e003      	b.n	8003294 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800328c:	2302      	movs	r3, #2
 800328e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d902      	bls.n	80032a0 <HAL_I2S_Init+0x134>
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	2bff      	cmp	r3, #255	; 0xff
 800329e:	d907      	bls.n	80032b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	f043 0210 	orr.w	r2, r3, #16
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e08f      	b.n	80033d0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	ea42 0103 	orr.w	r1, r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032ce:	f023 030f 	bic.w	r3, r3, #15
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6851      	ldr	r1, [r2, #4]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6892      	ldr	r2, [r2, #8]
 80032da:	4311      	orrs	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68d2      	ldr	r2, [r2, #12]
 80032e0:	4311      	orrs	r1, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6992      	ldr	r2, [r2, #24]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d161      	bne.n	80033c0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a38      	ldr	r2, [pc, #224]	; (80033e0 <HAL_I2S_Init+0x274>)
 8003300:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a37      	ldr	r2, [pc, #220]	; (80033e4 <HAL_I2S_Init+0x278>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d101      	bne.n	8003310 <HAL_I2S_Init+0x1a4>
 800330c:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <HAL_I2S_Init+0x27c>)
 800330e:	e001      	b.n	8003314 <HAL_I2S_Init+0x1a8>
 8003310:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	4932      	ldr	r1, [pc, #200]	; (80033e4 <HAL_I2S_Init+0x278>)
 800331c:	428a      	cmp	r2, r1
 800331e:	d101      	bne.n	8003324 <HAL_I2S_Init+0x1b8>
 8003320:	4a31      	ldr	r2, [pc, #196]	; (80033e8 <HAL_I2S_Init+0x27c>)
 8003322:	e001      	b.n	8003328 <HAL_I2S_Init+0x1bc>
 8003324:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003328:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800332c:	f023 030f 	bic.w	r3, r3, #15
 8003330:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2b      	ldr	r2, [pc, #172]	; (80033e4 <HAL_I2S_Init+0x278>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d101      	bne.n	8003340 <HAL_I2S_Init+0x1d4>
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <HAL_I2S_Init+0x27c>)
 800333e:	e001      	b.n	8003344 <HAL_I2S_Init+0x1d8>
 8003340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003344:	2202      	movs	r2, #2
 8003346:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a25      	ldr	r2, [pc, #148]	; (80033e4 <HAL_I2S_Init+0x278>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_I2S_Init+0x1ea>
 8003352:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <HAL_I2S_Init+0x27c>)
 8003354:	e001      	b.n	800335a <HAL_I2S_Init+0x1ee>
 8003356:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003366:	d003      	beq.n	8003370 <HAL_I2S_Init+0x204>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	e001      	b.n	800337c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	b299      	uxth	r1, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003392:	4303      	orrs	r3, r0
 8003394:	b29b      	uxth	r3, r3
 8003396:	430b      	orrs	r3, r1
 8003398:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800339a:	4313      	orrs	r3, r2
 800339c:	b29a      	uxth	r2, r3
 800339e:	897b      	ldrh	r3, [r7, #10]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033a8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <HAL_I2S_Init+0x278>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d101      	bne.n	80033b8 <HAL_I2S_Init+0x24c>
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <HAL_I2S_Init+0x27c>)
 80033b6:	e001      	b.n	80033bc <HAL_I2S_Init+0x250>
 80033b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033bc:	897a      	ldrh	r2, [r7, #10]
 80033be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3720      	adds	r7, #32
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	080034e3 	.word	0x080034e3
 80033dc:	cccccccd 	.word	0xcccccccd
 80033e0:	080035f9 	.word	0x080035f9
 80033e4:	40003800 	.word	0x40003800
 80033e8:	40003400 	.word	0x40003400

080033ec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	1c9a      	adds	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10e      	bne.n	800347c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800346c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff ffb8 	bl	80033ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	b292      	uxth	r2, r2
 8003498:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	1c9a      	adds	r2, r3, #2
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10e      	bne.n	80034da <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ff93 	bl	8003400 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d13a      	bne.n	8003574 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d109      	bne.n	800351c <I2S_IRQHandler+0x3a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b40      	cmp	r3, #64	; 0x40
 8003514:	d102      	bne.n	800351c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ffb4 	bl	8003484 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d126      	bne.n	8003574 <I2S_IRQHandler+0x92>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b20      	cmp	r3, #32
 8003532:	d11f      	bne.n	8003574 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003542:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f043 0202 	orr.w	r2, r3, #2
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff ff50 	bl	8003414 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b03      	cmp	r3, #3
 800357e:	d136      	bne.n	80035ee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b02      	cmp	r3, #2
 8003588:	d109      	bne.n	800359e <I2S_IRQHandler+0xbc>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b80      	cmp	r3, #128	; 0x80
 8003596:	d102      	bne.n	800359e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff45 	bl	8003428 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d122      	bne.n	80035ee <I2S_IRQHandler+0x10c>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	d11b      	bne.n	80035ee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035c4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	f043 0204 	orr.w	r2, r3, #4
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff13 	bl	8003414 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4aa2      	ldr	r2, [pc, #648]	; (8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003612:	4ba2      	ldr	r3, [pc, #648]	; (800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003614:	e001      	b.n	800361a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003616:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a9b      	ldr	r2, [pc, #620]	; (8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003630:	4b9a      	ldr	r3, [pc, #616]	; (800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003632:	e001      	b.n	8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003634:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003644:	d004      	beq.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 8099 	bne.w	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b02      	cmp	r3, #2
 8003658:	d107      	bne.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f925 	bl	80038b4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d107      	bne.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f9c8 	bl	8003a14 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b40      	cmp	r3, #64	; 0x40
 800368c:	d13a      	bne.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d035      	beq.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a7e      	ldr	r2, [pc, #504]	; (8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80036a2:	4b7e      	ldr	r3, [pc, #504]	; (800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036a4:	e001      	b.n	80036aa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80036a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4979      	ldr	r1, [pc, #484]	; (8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036b2:	428b      	cmp	r3, r1
 80036b4:	d101      	bne.n	80036ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80036b6:	4b79      	ldr	r3, [pc, #484]	; (800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036b8:	e001      	b.n	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80036ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036c2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	f043 0202 	orr.w	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff fe88 	bl	8003414 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b08      	cmp	r3, #8
 800370c:	f040 80be 	bne.w	800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80b8 	beq.w	800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800372a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a59      	ldr	r2, [pc, #356]	; (8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003736:	4b59      	ldr	r3, [pc, #356]	; (800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003738:	e001      	b.n	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800373a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4954      	ldr	r1, [pc, #336]	; (8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003746:	428b      	cmp	r3, r1
 8003748:	d101      	bne.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800374a:	4b54      	ldr	r3, [pc, #336]	; (800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800374c:	e001      	b.n	8003752 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800374e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003752:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003756:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f043 0204 	orr.w	r2, r3, #4
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff fe4a 	bl	8003414 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003780:	e084      	b.n	800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d107      	bne.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f8be 	bl	8003918 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d107      	bne.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f8fd 	bl	80039b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d12f      	bne.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d02a      	beq.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a2e      	ldr	r2, [pc, #184]	; (8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d101      	bne.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037e4:	4b2d      	ldr	r3, [pc, #180]	; (800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037e6:	e001      	b.n	80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4929      	ldr	r1, [pc, #164]	; (8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037f4:	428b      	cmp	r3, r1
 80037f6:	d101      	bne.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037f8:	4b28      	ldr	r3, [pc, #160]	; (800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037fa:	e001      	b.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003800:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003804:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	f043 0202 	orr.w	r2, r3, #2
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff fdfa 	bl	8003414 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b08      	cmp	r3, #8
 8003828:	d131      	bne.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02c      	beq.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a17      	ldr	r2, [pc, #92]	; (8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800383e:	4b17      	ldr	r3, [pc, #92]	; (800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003840:	e001      	b.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003842:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4912      	ldr	r1, [pc, #72]	; (8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800384e:	428b      	cmp	r3, r1
 8003850:	d101      	bne.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003852:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003854:	e001      	b.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800385e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800386e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387c:	f043 0204 	orr.w	r2, r3, #4
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff fdc5 	bl	8003414 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800388a:	e000      	b.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800388c:	bf00      	nop
}
 800388e:	bf00      	nop
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40003800 	.word	0x40003800
 800389c:	40003400 	.word	0x40003400

080038a0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	1c99      	adds	r1, r3, #2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6251      	str	r1, [r2, #36]	; 0x24
 80038c6:	881a      	ldrh	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d113      	bne.n	800390e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d106      	bne.n	800390e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ffc9 	bl	80038a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	1c99      	adds	r1, r3, #2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6251      	str	r1, [r2, #36]	; 0x24
 800392a:	8819      	ldrh	r1, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <I2SEx_TxISR_I2SExt+0x90>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <I2SEx_TxISR_I2SExt+0x22>
 8003936:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <I2SEx_TxISR_I2SExt+0x94>)
 8003938:	e001      	b.n	800393e <I2SEx_TxISR_I2SExt+0x26>
 800393a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393e:	460a      	mov	r2, r1
 8003940:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d121      	bne.n	800399e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <I2SEx_TxISR_I2SExt+0x90>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <I2SEx_TxISR_I2SExt+0x50>
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <I2SEx_TxISR_I2SExt+0x94>)
 8003966:	e001      	b.n	800396c <I2SEx_TxISR_I2SExt+0x54>
 8003968:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	490d      	ldr	r1, [pc, #52]	; (80039a8 <I2SEx_TxISR_I2SExt+0x90>)
 8003974:	428b      	cmp	r3, r1
 8003976:	d101      	bne.n	800397c <I2SEx_TxISR_I2SExt+0x64>
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <I2SEx_TxISR_I2SExt+0x94>)
 800397a:	e001      	b.n	8003980 <I2SEx_TxISR_I2SExt+0x68>
 800397c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003980:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003984:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff81 	bl	80038a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40003800 	.word	0x40003800
 80039ac:	40003400 	.word	0x40003400

080039b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68d8      	ldr	r0, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	1c99      	adds	r1, r3, #2
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039c8:	b282      	uxth	r2, r0
 80039ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d113      	bne.n	8003a0c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ff4a 	bl	80038a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <I2SEx_RxISR_I2SExt+0x90>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <I2SEx_RxISR_I2SExt+0x16>
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <I2SEx_RxISR_I2SExt+0x94>)
 8003a28:	e001      	b.n	8003a2e <I2SEx_RxISR_I2SExt+0x1a>
 8003a2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a2e:	68d8      	ldr	r0, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	1c99      	adds	r1, r3, #2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a3a:	b282      	uxth	r2, r0
 8003a3c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d121      	bne.n	8003a9a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <I2SEx_RxISR_I2SExt+0x90>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <I2SEx_RxISR_I2SExt+0x50>
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <I2SEx_RxISR_I2SExt+0x94>)
 8003a62:	e001      	b.n	8003a68 <I2SEx_RxISR_I2SExt+0x54>
 8003a64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	490d      	ldr	r1, [pc, #52]	; (8003aa4 <I2SEx_RxISR_I2SExt+0x90>)
 8003a70:	428b      	cmp	r3, r1
 8003a72:	d101      	bne.n	8003a78 <I2SEx_RxISR_I2SExt+0x64>
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <I2SEx_RxISR_I2SExt+0x94>)
 8003a76:	e001      	b.n	8003a7c <I2SEx_RxISR_I2SExt+0x68>
 8003a78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a80:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ff03 	bl	80038a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40003800 	.word	0x40003800
 8003aa8:	40003400 	.word	0x40003400

08003aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e25b      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d075      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aca:	4ba3      	ldr	r3, [pc, #652]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d00c      	beq.n	8003af0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ad6:	4ba0      	ldr	r3, [pc, #640]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d112      	bne.n	8003b08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae2:	4b9d      	ldr	r3, [pc, #628]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aee:	d10b      	bne.n	8003b08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af0:	4b99      	ldr	r3, [pc, #612]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d05b      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x108>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d157      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e236      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b10:	d106      	bne.n	8003b20 <HAL_RCC_OscConfig+0x74>
 8003b12:	4b91      	ldr	r3, [pc, #580]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a90      	ldr	r2, [pc, #576]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e01d      	b.n	8003b5c <HAL_RCC_OscConfig+0xb0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x98>
 8003b2a:	4b8b      	ldr	r3, [pc, #556]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a8a      	ldr	r2, [pc, #552]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	4b88      	ldr	r3, [pc, #544]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a87      	ldr	r2, [pc, #540]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e00b      	b.n	8003b5c <HAL_RCC_OscConfig+0xb0>
 8003b44:	4b84      	ldr	r3, [pc, #528]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a83      	ldr	r2, [pc, #524]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	4b81      	ldr	r3, [pc, #516]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a80      	ldr	r2, [pc, #512]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d013      	beq.n	8003b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fd f9e6 	bl	8000f34 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fd f9e2 	bl	8000f34 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	; 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e1fb      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	4b76      	ldr	r3, [pc, #472]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0xc0>
 8003b8a:	e014      	b.n	8003bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fd f9d2 	bl	8000f34 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b94:	f7fd f9ce 	bl	8000f34 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	; 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e1e7      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba6:	4b6c      	ldr	r3, [pc, #432]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0xe8>
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d063      	beq.n	8003c8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bc2:	4b65      	ldr	r3, [pc, #404]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00b      	beq.n	8003be6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bce:	4b62      	ldr	r3, [pc, #392]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d11c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bda:	4b5f      	ldr	r3, [pc, #380]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d116      	bne.n	8003c14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be6:	4b5c      	ldr	r3, [pc, #368]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_RCC_OscConfig+0x152>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e1bb      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfe:	4b56      	ldr	r3, [pc, #344]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4952      	ldr	r1, [pc, #328]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c12:	e03a      	b.n	8003c8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c1c:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <HAL_RCC_OscConfig+0x2b0>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c22:	f7fd f987 	bl	8000f34 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c2a:	f7fd f983 	bl	8000f34 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e19c      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3c:	4b46      	ldr	r3, [pc, #280]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c48:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4940      	ldr	r1, [pc, #256]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	600b      	str	r3, [r1, #0]
 8003c5c:	e015      	b.n	8003c8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c5e:	4b3f      	ldr	r3, [pc, #252]	; (8003d5c <HAL_RCC_OscConfig+0x2b0>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fd f966 	bl	8000f34 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c6c:	f7fd f962 	bl	8000f34 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e17b      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7e:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d030      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d016      	beq.n	8003ccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c9e:	4b30      	ldr	r3, [pc, #192]	; (8003d60 <HAL_RCC_OscConfig+0x2b4>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd f946 	bl	8000f34 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cac:	f7fd f942 	bl	8000f34 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e15b      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cbe:	4b26      	ldr	r3, [pc, #152]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x200>
 8003cca:	e015      	b.n	8003cf8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ccc:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <HAL_RCC_OscConfig+0x2b4>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd2:	f7fd f92f 	bl	8000f34 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cda:	f7fd f92b 	bl	8000f34 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e144      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cec:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a0 	beq.w	8003e46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d06:	2300      	movs	r3, #0
 8003d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0a:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d24:	6413      	str	r3, [r2, #64]	; 0x40
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d32:	2301      	movs	r3, #1
 8003d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <HAL_RCC_OscConfig+0x2b8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d121      	bne.n	8003d86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d42:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <HAL_RCC_OscConfig+0x2b8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a07      	ldr	r2, [pc, #28]	; (8003d64 <HAL_RCC_OscConfig+0x2b8>)
 8003d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d4e:	f7fd f8f1 	bl	8000f34 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d54:	e011      	b.n	8003d7a <HAL_RCC_OscConfig+0x2ce>
 8003d56:	bf00      	nop
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	42470000 	.word	0x42470000
 8003d60:	42470e80 	.word	0x42470e80
 8003d64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d68:	f7fd f8e4 	bl	8000f34 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e0fd      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7a:	4b81      	ldr	r3, [pc, #516]	; (8003f80 <HAL_RCC_OscConfig+0x4d4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d106      	bne.n	8003d9c <HAL_RCC_OscConfig+0x2f0>
 8003d8e:	4b7d      	ldr	r3, [pc, #500]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	4a7c      	ldr	r2, [pc, #496]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9a:	e01c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x32a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	d10c      	bne.n	8003dbe <HAL_RCC_OscConfig+0x312>
 8003da4:	4b77      	ldr	r3, [pc, #476]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a76      	ldr	r2, [pc, #472]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003daa:	f043 0304 	orr.w	r3, r3, #4
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
 8003db0:	4b74      	ldr	r3, [pc, #464]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a73      	ldr	r2, [pc, #460]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbc:	e00b      	b.n	8003dd6 <HAL_RCC_OscConfig+0x32a>
 8003dbe:	4b71      	ldr	r3, [pc, #452]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a70      	ldr	r2, [pc, #448]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dca:	4b6e      	ldr	r3, [pc, #440]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	4a6d      	ldr	r2, [pc, #436]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003dd0:	f023 0304 	bic.w	r3, r3, #4
 8003dd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d015      	beq.n	8003e0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fd f8a9 	bl	8000f34 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f7fd f8a5 	bl	8000f34 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e0bc      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfc:	4b61      	ldr	r3, [pc, #388]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ee      	beq.n	8003de6 <HAL_RCC_OscConfig+0x33a>
 8003e08:	e014      	b.n	8003e34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0a:	f7fd f893 	bl	8000f34 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fd f88f 	bl	8000f34 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e0a6      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e28:	4b56      	ldr	r3, [pc, #344]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ee      	bne.n	8003e12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d105      	bne.n	8003e46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3a:	4b52      	ldr	r3, [pc, #328]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	4a51      	ldr	r2, [pc, #324]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8092 	beq.w	8003f74 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e50:	4b4c      	ldr	r3, [pc, #304]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d05c      	beq.n	8003f16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d141      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e64:	4b48      	ldr	r3, [pc, #288]	; (8003f88 <HAL_RCC_OscConfig+0x4dc>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6a:	f7fd f863 	bl	8000f34 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e72:	f7fd f85f 	bl	8000f34 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e078      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e84:	4b3f      	ldr	r3, [pc, #252]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f0      	bne.n	8003e72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	019b      	lsls	r3, r3, #6
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	085b      	lsrs	r3, r3, #1
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	4933      	ldr	r1, [pc, #204]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eba:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <HAL_RCC_OscConfig+0x4dc>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fd f838 	bl	8000f34 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec8:	f7fd f834 	bl	8000f34 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e04d      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eda:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x41c>
 8003ee6:	e045      	b.n	8003f74 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee8:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <HAL_RCC_OscConfig+0x4dc>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fd f821 	bl	8000f34 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fd f81d 	bl	8000f34 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e036      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f08:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x44a>
 8003f14:	e02e      	b.n	8003f74 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e029      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f22:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <HAL_RCC_OscConfig+0x4d8>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d11c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d115      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d10d      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d106      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40007000 	.word	0x40007000
 8003f84:	40023800 	.word	0x40023800
 8003f88:	42470060 	.word	0x42470060

08003f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0cc      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b68      	ldr	r3, [pc, #416]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d90c      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b65      	ldr	r3, [pc, #404]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b63      	ldr	r3, [pc, #396]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0b8      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d020      	beq.n	8004016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe0:	4b59      	ldr	r3, [pc, #356]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4a58      	ldr	r2, [pc, #352]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff8:	4b53      	ldr	r3, [pc, #332]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a52      	ldr	r2, [pc, #328]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b50      	ldr	r3, [pc, #320]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	494d      	ldr	r1, [pc, #308]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d044      	beq.n	80040ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	4b47      	ldr	r3, [pc, #284]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d119      	bne.n	800406a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e07f      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d003      	beq.n	800404a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004046:	2b03      	cmp	r3, #3
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404a:	4b3f      	ldr	r3, [pc, #252]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e06f      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405a:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e067      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800406a:	4b37      	ldr	r3, [pc, #220]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f023 0203 	bic.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4934      	ldr	r1, [pc, #208]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	4313      	orrs	r3, r2
 800407a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800407c:	f7fc ff5a 	bl	8000f34 <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	e00a      	b.n	800409a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004084:	f7fc ff56 	bl	8000f34 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e04f      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 020c 	and.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d1eb      	bne.n	8004084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ac:	4b25      	ldr	r3, [pc, #148]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d20c      	bcs.n	80040d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b22      	ldr	r3, [pc, #136]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b20      	ldr	r3, [pc, #128]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e032      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e0:	4b19      	ldr	r3, [pc, #100]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4916      	ldr	r1, [pc, #88]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040fe:	4b12      	ldr	r3, [pc, #72]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	490e      	ldr	r1, [pc, #56]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004112:	f000 f821 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8004116:	4601      	mov	r1, r0
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	5cd3      	ldrb	r3, [r2, r3]
 8004126:	fa21 f303 	lsr.w	r3, r1, r3
 800412a:	4a09      	ldr	r2, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 800412c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc feba 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40023c00 	.word	0x40023c00
 8004148:	40023800 	.word	0x40023800
 800414c:	08008640 	.word	0x08008640
 8004150:	20000000 	.word	0x20000000
 8004154:	20000004 	.word	0x20000004

08004158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	2300      	movs	r3, #0
 8004168:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800416e:	4b50      	ldr	r3, [pc, #320]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b04      	cmp	r3, #4
 8004178:	d007      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0x32>
 800417a:	2b08      	cmp	r3, #8
 800417c:	d008      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0x38>
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 808d 	bne.w	800429e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004184:	4b4b      	ldr	r3, [pc, #300]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004186:	60bb      	str	r3, [r7, #8]
       break;
 8004188:	e08c      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418a:	4b4b      	ldr	r3, [pc, #300]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800418c:	60bb      	str	r3, [r7, #8]
      break;
 800418e:	e089      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004190:	4b47      	ldr	r3, [pc, #284]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004198:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800419a:	4b45      	ldr	r3, [pc, #276]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x158>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d023      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a6:	4b42      	ldr	r3, [pc, #264]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	099b      	lsrs	r3, r3, #6
 80041ac:	f04f 0400 	mov.w	r4, #0
 80041b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	ea03 0501 	and.w	r5, r3, r1
 80041bc:	ea04 0602 	and.w	r6, r4, r2
 80041c0:	4a3d      	ldr	r2, [pc, #244]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80041c2:	fb02 f106 	mul.w	r1, r2, r6
 80041c6:	2200      	movs	r2, #0
 80041c8:	fb02 f205 	mul.w	r2, r2, r5
 80041cc:	440a      	add	r2, r1
 80041ce:	493a      	ldr	r1, [pc, #232]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80041d0:	fba5 0101 	umull	r0, r1, r5, r1
 80041d4:	1853      	adds	r3, r2, r1
 80041d6:	4619      	mov	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f04f 0400 	mov.w	r4, #0
 80041de:	461a      	mov	r2, r3
 80041e0:	4623      	mov	r3, r4
 80041e2:	f7fb fff1 	bl	80001c8 <__aeabi_uldivmod>
 80041e6:	4603      	mov	r3, r0
 80041e8:	460c      	mov	r4, r1
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e049      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ee:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	f04f 0400 	mov.w	r4, #0
 80041f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	ea03 0501 	and.w	r5, r3, r1
 8004204:	ea04 0602 	and.w	r6, r4, r2
 8004208:	4629      	mov	r1, r5
 800420a:	4632      	mov	r2, r6
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	f04f 0400 	mov.w	r4, #0
 8004214:	0154      	lsls	r4, r2, #5
 8004216:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800421a:	014b      	lsls	r3, r1, #5
 800421c:	4619      	mov	r1, r3
 800421e:	4622      	mov	r2, r4
 8004220:	1b49      	subs	r1, r1, r5
 8004222:	eb62 0206 	sbc.w	r2, r2, r6
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	f04f 0400 	mov.w	r4, #0
 800422e:	0194      	lsls	r4, r2, #6
 8004230:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004234:	018b      	lsls	r3, r1, #6
 8004236:	1a5b      	subs	r3, r3, r1
 8004238:	eb64 0402 	sbc.w	r4, r4, r2
 800423c:	f04f 0100 	mov.w	r1, #0
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	00e2      	lsls	r2, r4, #3
 8004246:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800424a:	00d9      	lsls	r1, r3, #3
 800424c:	460b      	mov	r3, r1
 800424e:	4614      	mov	r4, r2
 8004250:	195b      	adds	r3, r3, r5
 8004252:	eb44 0406 	adc.w	r4, r4, r6
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	02a2      	lsls	r2, r4, #10
 8004260:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004264:	0299      	lsls	r1, r3, #10
 8004266:	460b      	mov	r3, r1
 8004268:	4614      	mov	r4, r2
 800426a:	4618      	mov	r0, r3
 800426c:	4621      	mov	r1, r4
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f04f 0400 	mov.w	r4, #0
 8004274:	461a      	mov	r2, r3
 8004276:	4623      	mov	r3, r4
 8004278:	f7fb ffa6 	bl	80001c8 <__aeabi_uldivmod>
 800427c:	4603      	mov	r3, r0
 800427e:	460c      	mov	r4, r1
 8004280:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	0c1b      	lsrs	r3, r3, #16
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	3301      	adds	r3, #1
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	60bb      	str	r3, [r7, #8]
      break;
 800429c:	e002      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80042a0:	60bb      	str	r3, [r7, #8]
      break;
 80042a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042a4:	68bb      	ldr	r3, [r7, #8]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800
 80042b4:	00f42400 	.word	0x00f42400
 80042b8:	017d7840 	.word	0x017d7840

080042bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c0:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042c2:	681b      	ldr	r3, [r3, #0]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000000 	.word	0x20000000

080042d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042d8:	f7ff fff0 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 80042dc:	4601      	mov	r1, r0
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0a9b      	lsrs	r3, r3, #10
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4a03      	ldr	r2, [pc, #12]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ea:	5cd3      	ldrb	r3, [r2, r3]
 80042ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	08008650 	.word	0x08008650

080042fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d105      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004320:	2b00      	cmp	r3, #0
 8004322:	d035      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004324:	4b62      	ldr	r3, [pc, #392]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800432a:	f7fc fe03 	bl	8000f34 <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004332:	f7fc fdff 	bl	8000f34 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e0b0      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004344:	4b5b      	ldr	r3, [pc, #364]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	019a      	lsls	r2, r3, #6
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	071b      	lsls	r3, r3, #28
 800435c:	4955      	ldr	r1, [pc, #340]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004364:	4b52      	ldr	r3, [pc, #328]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800436a:	f7fc fde3 	bl	8000f34 <HAL_GetTick>
 800436e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004372:	f7fc fddf 	bl	8000f34 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e090      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004384:	4b4b      	ldr	r3, [pc, #300]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8083 	beq.w	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	4b44      	ldr	r3, [pc, #272]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	4a43      	ldr	r2, [pc, #268]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ac:	6413      	str	r3, [r2, #64]	; 0x40
 80043ae:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043ba:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a3e      	ldr	r2, [pc, #248]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043c6:	f7fc fdb5 	bl	8000f34 <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fc fdb1 	bl	8000f34 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e062      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043e0:	4b35      	ldr	r3, [pc, #212]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ec:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d02f      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	429a      	cmp	r2, r3
 8004408:	d028      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800440a:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004412:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004414:	4b29      	ldr	r3, [pc, #164]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800441a:	4b28      	ldr	r3, [pc, #160]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004420:	4a24      	ldr	r2, [pc, #144]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004426:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d114      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004432:	f7fc fd7f 	bl	8000f34 <HAL_GetTick>
 8004436:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	e00a      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800443a:	f7fc fd7b 	bl	8000f34 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f241 3288 	movw	r2, #5000	; 0x1388
 8004448:	4293      	cmp	r3, r2
 800444a:	d901      	bls.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e02a      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004450:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ee      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004464:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004468:	d10d      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800446a:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800447a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447e:	490d      	ldr	r1, [pc, #52]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004480:	4313      	orrs	r3, r2
 8004482:	608b      	str	r3, [r1, #8]
 8004484:	e005      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	4a0a      	ldr	r2, [pc, #40]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004490:	6093      	str	r3, [r2, #8]
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004494:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449e:	4905      	ldr	r1, [pc, #20]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	42470068 	.word	0x42470068
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40007000 	.word	0x40007000
 80044bc:	42470e40 	.word	0x42470e40

080044c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d13d      	bne.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044de:	4b22      	ldr	r3, [pc, #136]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044e6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d12f      	bne.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044f2:	4b1e      	ldr	r3, [pc, #120]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044f4:	617b      	str	r3, [r7, #20]
          break;
 80044f6:	e02f      	b.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004504:	d108      	bne.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004506:	4b18      	ldr	r3, [pc, #96]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800450e:	4a18      	ldr	r2, [pc, #96]	; (8004570 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	e007      	b.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004518:	4b13      	ldr	r3, [pc, #76]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004528:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800452a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800452e:	099b      	lsrs	r3, r3, #6
 8004530:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800453e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004542:	0f1b      	lsrs	r3, r3, #28
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	617b      	str	r3, [r7, #20]
          break;
 8004550:	e002      	b.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
          break;
 8004556:	bf00      	nop
        }
      }
      break;
 8004558:	bf00      	nop
    }
  }
  return frequency;
 800455a:	697b      	ldr	r3, [r7, #20]
}
 800455c:	4618      	mov	r0, r3
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40023800 	.word	0x40023800
 800456c:	00bb8000 	.word	0x00bb8000
 8004570:	017d7840 	.word	0x017d7840
 8004574:	00f42400 	.word	0x00f42400

08004578 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e056      	b.n	8004638 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7fc fb11 	bl	8000bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	ea42 0103 	orr.w	r1, r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	0c1b      	lsrs	r3, r3, #16
 8004608:	f003 0104 	and.w	r1, r3, #4
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004626:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e01d      	b.n	800468e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc faf8 	bl	8000c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3304      	adds	r3, #4
 800467c:	4619      	mov	r1, r3
 800467e:	4610      	mov	r0, r2
 8004680:	f000 f9fa 	bl	8004a78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e01d      	b.n	80046e4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f815 	bl	80046ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f000 f9cf 	bl	8004a78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2201      	movs	r2, #1
 8004710:	6839      	ldr	r1, [r7, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fc9a 	bl	800504c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a15      	ldr	r2, [pc, #84]	; (8004774 <HAL_TIM_PWM_Start+0x74>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_TIM_PWM_Start+0x2c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a14      	ldr	r2, [pc, #80]	; (8004778 <HAL_TIM_PWM_Start+0x78>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d101      	bne.n	8004730 <HAL_TIM_PWM_Start+0x30>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_TIM_PWM_Start+0x32>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b06      	cmp	r3, #6
 8004756:	d007      	beq.n	8004768 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40010000 	.word	0x40010000
 8004778:	40010400 	.word	0x40010400

0800477c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004792:	2302      	movs	r3, #2
 8004794:	e0b4      	b.n	8004900 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2202      	movs	r2, #2
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b0c      	cmp	r3, #12
 80047aa:	f200 809f 	bhi.w	80048ec <HAL_TIM_PWM_ConfigChannel+0x170>
 80047ae:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80047b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b4:	080047e9 	.word	0x080047e9
 80047b8:	080048ed 	.word	0x080048ed
 80047bc:	080048ed 	.word	0x080048ed
 80047c0:	080048ed 	.word	0x080048ed
 80047c4:	08004829 	.word	0x08004829
 80047c8:	080048ed 	.word	0x080048ed
 80047cc:	080048ed 	.word	0x080048ed
 80047d0:	080048ed 	.word	0x080048ed
 80047d4:	0800486b 	.word	0x0800486b
 80047d8:	080048ed 	.word	0x080048ed
 80047dc:	080048ed 	.word	0x080048ed
 80047e0:	080048ed 	.word	0x080048ed
 80047e4:	080048ab 	.word	0x080048ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 f9e2 	bl	8004bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0208 	orr.w	r2, r2, #8
 8004802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0204 	bic.w	r2, r2, #4
 8004812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6999      	ldr	r1, [r3, #24]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	619a      	str	r2, [r3, #24]
      break;
 8004826:	e062      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fa32 	bl	8004c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6999      	ldr	r1, [r3, #24]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	021a      	lsls	r2, r3, #8
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	619a      	str	r2, [r3, #24]
      break;
 8004868:	e041      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fa87 	bl	8004d84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0208 	orr.w	r2, r2, #8
 8004884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0204 	bic.w	r2, r2, #4
 8004894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69d9      	ldr	r1, [r3, #28]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	61da      	str	r2, [r3, #28]
      break;
 80048a8:	e021      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fadb 	bl	8004e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69da      	ldr	r2, [r3, #28]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69d9      	ldr	r1, [r3, #28]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	021a      	lsls	r2, r3, #8
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	61da      	str	r2, [r3, #28]
      break;
 80048ea:	e000      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80048ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_TIM_ConfigClockSource+0x18>
 800491c:	2302      	movs	r3, #2
 800491e:	e0a6      	b.n	8004a6e <HAL_TIM_ConfigClockSource+0x166>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800493e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004946:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b40      	cmp	r3, #64	; 0x40
 8004956:	d067      	beq.n	8004a28 <HAL_TIM_ConfigClockSource+0x120>
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d80b      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x6c>
 800495c:	2b10      	cmp	r3, #16
 800495e:	d073      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0x140>
 8004960:	2b10      	cmp	r3, #16
 8004962:	d802      	bhi.n	800496a <HAL_TIM_ConfigClockSource+0x62>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d06f      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004968:	e078      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800496a:	2b20      	cmp	r3, #32
 800496c:	d06c      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0x140>
 800496e:	2b30      	cmp	r3, #48	; 0x30
 8004970:	d06a      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004972:	e073      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004974:	2b70      	cmp	r3, #112	; 0x70
 8004976:	d00d      	beq.n	8004994 <HAL_TIM_ConfigClockSource+0x8c>
 8004978:	2b70      	cmp	r3, #112	; 0x70
 800497a:	d804      	bhi.n	8004986 <HAL_TIM_ConfigClockSource+0x7e>
 800497c:	2b50      	cmp	r3, #80	; 0x50
 800497e:	d033      	beq.n	80049e8 <HAL_TIM_ConfigClockSource+0xe0>
 8004980:	2b60      	cmp	r3, #96	; 0x60
 8004982:	d041      	beq.n	8004a08 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004984:	e06a      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800498a:	d066      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x152>
 800498c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004990:	d017      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004992:	e063      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	6899      	ldr	r1, [r3, #8]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f000 fb32 	bl	800500c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	609a      	str	r2, [r3, #8]
      break;
 80049c0:	e04c      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6899      	ldr	r1, [r3, #8]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f000 fb1b 	bl	800500c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049e4:	609a      	str	r2, [r3, #8]
      break;
 80049e6:	e039      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6859      	ldr	r1, [r3, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	461a      	mov	r2, r3
 80049f6:	f000 fa8f 	bl	8004f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2150      	movs	r1, #80	; 0x50
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fae8 	bl	8004fd6 <TIM_ITRx_SetConfig>
      break;
 8004a06:	e029      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	6859      	ldr	r1, [r3, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	461a      	mov	r2, r3
 8004a16:	f000 faae 	bl	8004f76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2160      	movs	r1, #96	; 0x60
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fad8 	bl	8004fd6 <TIM_ITRx_SetConfig>
      break;
 8004a26:	e019      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	461a      	mov	r2, r3
 8004a36:	f000 fa6f 	bl	8004f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2140      	movs	r1, #64	; 0x40
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fac8 	bl	8004fd6 <TIM_ITRx_SetConfig>
      break;
 8004a46:	e009      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f000 fabf 	bl	8004fd6 <TIM_ITRx_SetConfig>
      break;
 8004a58:	e000      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a40      	ldr	r2, [pc, #256]	; (8004b8c <TIM_Base_SetConfig+0x114>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a96:	d00f      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a3d      	ldr	r2, [pc, #244]	; (8004b90 <TIM_Base_SetConfig+0x118>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00b      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a3c      	ldr	r2, [pc, #240]	; (8004b94 <TIM_Base_SetConfig+0x11c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d007      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a3b      	ldr	r2, [pc, #236]	; (8004b98 <TIM_Base_SetConfig+0x120>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a3a      	ldr	r2, [pc, #232]	; (8004b9c <TIM_Base_SetConfig+0x124>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d108      	bne.n	8004aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2f      	ldr	r2, [pc, #188]	; (8004b8c <TIM_Base_SetConfig+0x114>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d02b      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad8:	d027      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a2c      	ldr	r2, [pc, #176]	; (8004b90 <TIM_Base_SetConfig+0x118>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d023      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a2b      	ldr	r2, [pc, #172]	; (8004b94 <TIM_Base_SetConfig+0x11c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d01f      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a2a      	ldr	r2, [pc, #168]	; (8004b98 <TIM_Base_SetConfig+0x120>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d01b      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a29      	ldr	r2, [pc, #164]	; (8004b9c <TIM_Base_SetConfig+0x124>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d017      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a28      	ldr	r2, [pc, #160]	; (8004ba0 <TIM_Base_SetConfig+0x128>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a27      	ldr	r2, [pc, #156]	; (8004ba4 <TIM_Base_SetConfig+0x12c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00f      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a26      	ldr	r2, [pc, #152]	; (8004ba8 <TIM_Base_SetConfig+0x130>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00b      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a25      	ldr	r2, [pc, #148]	; (8004bac <TIM_Base_SetConfig+0x134>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d007      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <TIM_Base_SetConfig+0x138>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d003      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a23      	ldr	r2, [pc, #140]	; (8004bb4 <TIM_Base_SetConfig+0x13c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d108      	bne.n	8004b3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <TIM_Base_SetConfig+0x114>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d003      	beq.n	8004b70 <TIM_Base_SetConfig+0xf8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a0c      	ldr	r2, [pc, #48]	; (8004b9c <TIM_Base_SetConfig+0x124>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d103      	bne.n	8004b78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	615a      	str	r2, [r3, #20]
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800
 8004b98:	40000c00 	.word	0x40000c00
 8004b9c:	40010400 	.word	0x40010400
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40014400 	.word	0x40014400
 8004ba8:	40014800 	.word	0x40014800
 8004bac:	40001800 	.word	0x40001800
 8004bb0:	40001c00 	.word	0x40001c00
 8004bb4:	40002000 	.word	0x40002000

08004bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0201 	bic.w	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0303 	bic.w	r3, r3, #3
 8004bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 0302 	bic.w	r3, r3, #2
 8004c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a20      	ldr	r2, [pc, #128]	; (8004c90 <TIM_OC1_SetConfig+0xd8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <TIM_OC1_SetConfig+0x64>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <TIM_OC1_SetConfig+0xdc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d10c      	bne.n	8004c36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f023 0308 	bic.w	r3, r3, #8
 8004c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f023 0304 	bic.w	r3, r3, #4
 8004c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a15      	ldr	r2, [pc, #84]	; (8004c90 <TIM_OC1_SetConfig+0xd8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_OC1_SetConfig+0x8e>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <TIM_OC1_SetConfig+0xdc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d111      	bne.n	8004c6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400

08004c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0210 	bic.w	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0320 	bic.w	r3, r3, #32
 8004ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a22      	ldr	r2, [pc, #136]	; (8004d7c <TIM_OC2_SetConfig+0xe4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_OC2_SetConfig+0x68>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a21      	ldr	r2, [pc, #132]	; (8004d80 <TIM_OC2_SetConfig+0xe8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d10d      	bne.n	8004d1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a17      	ldr	r2, [pc, #92]	; (8004d7c <TIM_OC2_SetConfig+0xe4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_OC2_SetConfig+0x94>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <TIM_OC2_SetConfig+0xe8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d113      	bne.n	8004d54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40010000 	.word	0x40010000
 8004d80:	40010400 	.word	0x40010400

08004d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0303 	bic.w	r3, r3, #3
 8004dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <TIM_OC3_SetConfig+0xe0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_OC3_SetConfig+0x66>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a20      	ldr	r2, [pc, #128]	; (8004e68 <TIM_OC3_SetConfig+0xe4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d10d      	bne.n	8004e06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a16      	ldr	r2, [pc, #88]	; (8004e64 <TIM_OC3_SetConfig+0xe0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <TIM_OC3_SetConfig+0x92>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a15      	ldr	r2, [pc, #84]	; (8004e68 <TIM_OC3_SetConfig+0xe4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d113      	bne.n	8004e3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	621a      	str	r2, [r3, #32]
}
 8004e58:	bf00      	nop
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40010400 	.word	0x40010400

08004e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	031b      	lsls	r3, r3, #12
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <TIM_OC4_SetConfig+0xa4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_OC4_SetConfig+0x68>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a11      	ldr	r2, [pc, #68]	; (8004f14 <TIM_OC4_SetConfig+0xa8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d109      	bne.n	8004ee8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	019b      	lsls	r3, r3, #6
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	621a      	str	r2, [r3, #32]
}
 8004f02:	bf00      	nop
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40010400 	.word	0x40010400

08004f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	f023 0201 	bic.w	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f023 030a 	bic.w	r3, r3, #10
 8004f54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b087      	sub	sp, #28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f023 0210 	bic.w	r2, r3, #16
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	031b      	lsls	r3, r3, #12
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f043 0307 	orr.w	r3, r3, #7
 8004ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	609a      	str	r2, [r3, #8]
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	021a      	lsls	r2, r3, #8
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	431a      	orrs	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4313      	orrs	r3, r2
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	2201      	movs	r2, #1
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1a      	ldr	r2, [r3, #32]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	43db      	mvns	r3, r3
 800506e:	401a      	ands	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	fa01 f303 	lsl.w	r3, r1, r3
 8005084:	431a      	orrs	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
	...

08005098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e05a      	b.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a21      	ldr	r2, [pc, #132]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d022      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d01d      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d018      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1b      	ldr	r2, [pc, #108]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1a      	ldr	r2, [pc, #104]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00e      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a18      	ldr	r2, [pc, #96]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d009      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a17      	ldr	r2, [pc, #92]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d004      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a15      	ldr	r2, [pc, #84]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d10c      	bne.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	4313      	orrs	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40010000 	.word	0x40010000
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800
 8005180:	40000c00 	.word	0x40000c00
 8005184:	40010400 	.word	0x40010400
 8005188:	40014000 	.word	0x40014000
 800518c:	40001800 	.word	0x40001800

08005190 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005190:	b084      	sub	sp, #16
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	f107 001c 	add.w	r0, r7, #28
 800519e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d122      	bne.n	80051ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d105      	bne.n	80051e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f94a 	bl	800547c <USB_CoreReset>
 80051e8:	4603      	mov	r3, r0
 80051ea:	73fb      	strb	r3, [r7, #15]
 80051ec:	e01a      	b.n	8005224 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f93e 	bl	800547c <USB_CoreReset>
 8005200:	4603      	mov	r3, r0
 8005202:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	639a      	str	r2, [r3, #56]	; 0x38
 8005216:	e005      	b.n	8005224 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	2b01      	cmp	r3, #1
 8005228:	d10b      	bne.n	8005242 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f043 0206 	orr.w	r2, r3, #6
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005242:	7bfb      	ldrb	r3, [r7, #15]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800524e:	b004      	add	sp, #16
 8005250:	4770      	bx	lr

08005252 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f043 0201 	orr.w	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f023 0201 	bic.w	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	460b      	mov	r3, r1
 80052a0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d106      	bne.n	80052c2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
 80052c0:	e00b      	b.n	80052da <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d106      	bne.n	80052d6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60da      	str	r2, [r3, #12]
 80052d4:	e001      	b.n	80052da <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e003      	b.n	80052e2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80052da:	2032      	movs	r0, #50	; 0x32
 80052dc:	f7fb fe36 	bl	8000f4c <HAL_Delay>

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	019b      	lsls	r3, r3, #6
 80052fe:	f043 0220 	orr.w	r2, r3, #32
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3301      	adds	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <USB_FlushTxFifo+0x48>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d901      	bls.n	8005318 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e006      	b.n	8005326 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b20      	cmp	r3, #32
 8005322:	d0f0      	beq.n	8005306 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	00030d40 	.word	0x00030d40

08005338 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2210      	movs	r2, #16
 8005348:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3301      	adds	r3, #1
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a09      	ldr	r2, [pc, #36]	; (8005378 <USB_FlushRxFifo+0x40>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d901      	bls.n	800535c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e006      	b.n	800536a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	2b10      	cmp	r3, #16
 8005366:	d0f0      	beq.n	800534a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	00030d40 	.word	0x00030d40

0800537c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800537c:	b480      	push	{r7}
 800537e:	b089      	sub	sp, #36	; 0x24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	4611      	mov	r1, r2
 8005388:	461a      	mov	r2, r3
 800538a:	460b      	mov	r3, r1
 800538c:	71fb      	strb	r3, [r7, #7]
 800538e:	4613      	mov	r3, r2
 8005390:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800539a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d11a      	bne.n	80053d8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053a2:	88bb      	ldrh	r3, [r7, #4]
 80053a4:	3303      	adds	r3, #3
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e00f      	b.n	80053d0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	031a      	lsls	r2, r3, #12
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053bc:	461a      	mov	r2, r3
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	3304      	adds	r3, #4
 80053c8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	3301      	adds	r3, #1
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d3eb      	bcc.n	80053b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3724      	adds	r7, #36	; 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b089      	sub	sp, #36	; 0x24
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	4613      	mov	r3, r2
 80053f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	3303      	adds	r3, #3
 8005400:	089b      	lsrs	r3, r3, #2
 8005402:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e00b      	b.n	8005422 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	601a      	str	r2, [r3, #0]
    pDest++;
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3304      	adds	r3, #4
 800541a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	3301      	adds	r3, #1
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	429a      	cmp	r2, r3
 8005428:	d3ef      	bcc.n	800540a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800542a:	69fb      	ldr	r3, [r7, #28]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3724      	adds	r7, #36	; 0x24
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4013      	ands	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005450:	68fb      	ldr	r3, [r7, #12]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f003 0301 	and.w	r3, r3, #1
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3301      	adds	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <USB_CoreReset+0x64>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d901      	bls.n	800549a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e01b      	b.n	80054d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	daf2      	bge.n	8005488 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f043 0201 	orr.w	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3301      	adds	r3, #1
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <USB_CoreReset+0x64>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e006      	b.n	80054d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d0f0      	beq.n	80054b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	00030d40 	.word	0x00030d40

080054e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054e4:	b084      	sub	sp, #16
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	f107 001c 	add.w	r0, r7, #28
 80054f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005500:	461a      	mov	r2, r3
 8005502:	2300      	movs	r3, #0
 8005504:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d018      	beq.n	8005568 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	2b01      	cmp	r3, #1
 800553a:	d10a      	bne.n	8005552 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800554a:	f043 0304 	orr.w	r3, r3, #4
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	e014      	b.n	800557c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005560:	f023 0304 	bic.w	r3, r3, #4
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e009      	b.n	800557c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005576:	f023 0304 	bic.w	r3, r3, #4
 800557a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800557c:	2110      	movs	r1, #16
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff feb4 	bl	80052ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fed7 	bl	8005338 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	e015      	b.n	80055bc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559c:	461a      	mov	r2, r3
 800559e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055a2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	461a      	mov	r2, r3
 80055b2:	2300      	movs	r3, #0
 80055b4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3301      	adds	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d3e5      	bcc.n	8005590 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80055c4:	2101      	movs	r1, #1
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f8ac 	bl	8005724 <USB_DriveVbus>

  HAL_Delay(200U);
 80055cc:	20c8      	movs	r0, #200	; 0xc8
 80055ce:	f7fb fcbd 	bl	8000f4c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055de:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a14      	ldr	r2, [pc, #80]	; (8005648 <USB_HostInit+0x164>)
 80055f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a13      	ldr	r2, [pc, #76]	; (800564c <USB_HostInit+0x168>)
 80055fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005602:	e009      	b.n	8005618 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2280      	movs	r2, #128	; 0x80
 8005608:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a10      	ldr	r2, [pc, #64]	; (8005650 <USB_HostInit+0x16c>)
 800560e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a10      	ldr	r2, [pc, #64]	; (8005654 <USB_HostInit+0x170>)
 8005614:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	2b00      	cmp	r3, #0
 800561c:	d105      	bne.n	800562a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	f043 0210 	orr.w	r2, r3, #16
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <USB_HostInit+0x174>)
 8005630:	4313      	orrs	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005642:	b004      	add	sp, #16
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	01000200 	.word	0x01000200
 800564c:	00e00300 	.word	0x00e00300
 8005650:	00600080 	.word	0x00600080
 8005654:	004000e0 	.word	0x004000e0
 8005658:	a3200008 	.word	0xa3200008

0800565c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005694:	4313      	orrs	r3, r2
 8005696:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d107      	bne.n	80056ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056a4:	461a      	mov	r2, r3
 80056a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80056aa:	6053      	str	r3, [r2, #4]
 80056ac:	e009      	b.n	80056c2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d106      	bne.n	80056c2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ba:	461a      	mov	r2, r3
 80056bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80056c0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005700:	2064      	movs	r0, #100	; 0x64
 8005702:	f7fb fc23 	bl	8000f4c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800570e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005712:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005714:	200a      	movs	r0, #10
 8005716:	f7fb fc19 	bl	8000f4c <HAL_Delay>

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005748:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d109      	bne.n	8005768 <USB_DriveVbus+0x44>
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d106      	bne.n	8005768 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005762:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005766:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005772:	d109      	bne.n	8005788 <USB_DriveVbus+0x64>
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005786:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	0c5b      	lsrs	r3, r3, #17
 80057b4:	f003 0303 	and.w	r3, r3, #3
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	b29b      	uxth	r3, r3
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	4608      	mov	r0, r1
 80057f2:	4611      	mov	r1, r2
 80057f4:	461a      	mov	r2, r3
 80057f6:	4603      	mov	r3, r0
 80057f8:	70fb      	strb	r3, [r7, #3]
 80057fa:	460b      	mov	r3, r1
 80057fc:	70bb      	strb	r3, [r7, #2]
 80057fe:	4613      	mov	r3, r2
 8005800:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	461a      	mov	r2, r3
 8005818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800581c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800581e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005822:	2b03      	cmp	r3, #3
 8005824:	d87e      	bhi.n	8005924 <USB_HC_Init+0x13c>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <USB_HC_Init+0x44>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	0800583d 	.word	0x0800583d
 8005830:	080058e7 	.word	0x080058e7
 8005834:	0800583d 	.word	0x0800583d
 8005838:	080058a9 	.word	0x080058a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4413      	add	r3, r2
 8005844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005848:	461a      	mov	r2, r3
 800584a:	f240 439d 	movw	r3, #1181	; 0x49d
 800584e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005850:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005854:	2b00      	cmp	r3, #0
 8005856:	da10      	bge.n	800587a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4413      	add	r3, r2
 8005860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	78fa      	ldrb	r2, [r7, #3]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	440a      	add	r2, r1
 800586e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005876:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005878:	e057      	b.n	800592a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005882:	2b00      	cmp	r3, #0
 8005884:	d051      	beq.n	800592a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4413      	add	r3, r2
 800588e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	78fa      	ldrb	r2, [r7, #3]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	440a      	add	r2, r1
 800589c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80058a4:	60d3      	str	r3, [r2, #12]
      break;
 80058a6:	e040      	b.n	800592a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b4:	461a      	mov	r2, r3
 80058b6:	f240 639d 	movw	r3, #1693	; 0x69d
 80058ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80058bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	da34      	bge.n	800592e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	78fa      	ldrb	r2, [r7, #3]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80058e4:	e023      	b.n	800592e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f2:	461a      	mov	r2, r3
 80058f4:	f240 2325 	movw	r3, #549	; 0x225
 80058f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80058fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da17      	bge.n	8005932 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	440a      	add	r2, r1
 8005918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800591c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005920:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005922:	e006      	b.n	8005932 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]
      break;
 8005928:	e004      	b.n	8005934 <USB_HC_Init+0x14c>
      break;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <USB_HC_Init+0x14c>
      break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <USB_HC_Init+0x14c>
      break;
 8005932:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	2101      	movs	r1, #1
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800594e:	4313      	orrs	r3, r2
 8005950:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800595e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005962:	2b00      	cmp	r3, #0
 8005964:	da03      	bge.n	800596e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	e001      	b.n	8005972 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005972:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d103      	bne.n	8005982 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800597a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	e001      	b.n	8005986 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005986:	787b      	ldrb	r3, [r7, #1]
 8005988:	059b      	lsls	r3, r3, #22
 800598a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800598e:	78bb      	ldrb	r3, [r7, #2]
 8005990:	02db      	lsls	r3, r3, #11
 8005992:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005996:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005998:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800599c:	049b      	lsls	r3, r3, #18
 800599e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80059a2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80059aa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	0159      	lsls	r1, r3, #5
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	440b      	add	r3, r1
 80059b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059bc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059c2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80059c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d10f      	bne.n	80059ec <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	78fa      	ldrb	r2, [r7, #3]
 80059dc:	0151      	lsls	r1, r2, #5
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	440a      	add	r2, r1
 80059e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059ea:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop

080059fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08c      	sub	sp, #48	; 0x30
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	4613      	mov	r3, r2
 8005a08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a18:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d028      	beq.n	8005a78 <USB_HC_StartXfer+0x7c>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	791b      	ldrb	r3, [r3, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d124      	bne.n	8005a78 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10b      	bne.n	8005a4c <USB_HC_StartXfer+0x50>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	795b      	ldrb	r3, [r3, #5]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d107      	bne.n	8005a4c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	4619      	mov	r1, r3
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fa30 	bl	8005ea8 <USB_DoPing>
      return HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e114      	b.n	8005c76 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d112      	bne.n	8005a78 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	6a3a      	ldr	r2, [r7, #32]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a6c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005a70:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d018      	beq.n	8005ab2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	8912      	ldrh	r2, [r2, #8]
 8005a88:	4413      	add	r3, r2
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	8912      	ldrh	r2, [r2, #8]
 8005a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a94:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005a96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a98:	8b7b      	ldrh	r3, [r7, #26]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d90b      	bls.n	8005ab6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005a9e:	8b7b      	ldrh	r3, [r7, #26]
 8005aa0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005aa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	8912      	ldrh	r2, [r2, #8]
 8005aa8:	fb02 f203 	mul.w	r2, r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	611a      	str	r2, [r3, #16]
 8005ab0:	e001      	b.n	8005ab6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	78db      	ldrb	r3, [r3, #3]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d006      	beq.n	8005acc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005abe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	8912      	ldrh	r2, [r2, #8]
 8005ac4:	fb02 f203 	mul.w	r2, r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ad6:	04d9      	lsls	r1, r3, #19
 8005ad8:	4b69      	ldr	r3, [pc, #420]	; (8005c80 <USB_HC_StartXfer+0x284>)
 8005ada:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005adc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	7a9b      	ldrb	r3, [r3, #10]
 8005ae2:	075b      	lsls	r3, r3, #29
 8005ae4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ae8:	69f9      	ldr	r1, [r7, #28]
 8005aea:	0148      	lsls	r0, r1, #5
 8005aec:	6a39      	ldr	r1, [r7, #32]
 8005aee:	4401      	add	r1, r0
 8005af0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005af4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005af6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	68d9      	ldr	r1, [r3, #12]
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0e:	460a      	mov	r2, r1
 8005b10:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bf0c      	ite	eq
 8005b22:	2301      	moveq	r3, #1
 8005b24:	2300      	movne	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	6a3a      	ldr	r2, [r7, #32]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b48:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	7e7b      	ldrb	r3, [r7, #25]
 8005b5a:	075b      	lsls	r3, r3, #29
 8005b5c:	69f9      	ldr	r1, [r7, #28]
 8005b5e:	0148      	lsls	r0, r1, #5
 8005b60:	6a39      	ldr	r1, [r7, #32]
 8005b62:	4401      	add	r1, r0
 8005b64:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a42      	ldr	r2, [pc, #264]	; (8005c84 <USB_HC_StartXfer+0x288>)
 8005b7c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b7e:	4b41      	ldr	r3, [pc, #260]	; (8005c84 <USB_HC_StartXfer+0x288>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b86:	4a3f      	ldr	r2, [pc, #252]	; (8005c84 <USB_HC_StartXfer+0x288>)
 8005b88:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	78db      	ldrb	r3, [r3, #3]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d006      	beq.n	8005ba0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005b92:	4b3c      	ldr	r3, [pc, #240]	; (8005c84 <USB_HC_StartXfer+0x288>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9a:	4a3a      	ldr	r2, [pc, #232]	; (8005c84 <USB_HC_StartXfer+0x288>)
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e005      	b.n	8005bac <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ba0:	4b38      	ldr	r3, [pc, #224]	; (8005c84 <USB_HC_StartXfer+0x288>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ba8:	4a36      	ldr	r2, [pc, #216]	; (8005c84 <USB_HC_StartXfer+0x288>)
 8005baa:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bac:	4b35      	ldr	r3, [pc, #212]	; (8005c84 <USB_HC_StartXfer+0x288>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bb4:	4a33      	ldr	r2, [pc, #204]	; (8005c84 <USB_HC_StartXfer+0x288>)
 8005bb6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4b2f      	ldr	r3, [pc, #188]	; (8005c84 <USB_HC_StartXfer+0x288>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e04f      	b.n	8005c76 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	78db      	ldrb	r3, [r3, #3]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d14a      	bne.n	8005c74 <USB_HC_StartXfer+0x278>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d046      	beq.n	8005c74 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	79db      	ldrb	r3, [r3, #7]
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d830      	bhi.n	8005c50 <USB_HC_StartXfer+0x254>
 8005bee:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <USB_HC_StartXfer+0x1f8>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c05 	.word	0x08005c05
 8005bf8:	08005c29 	.word	0x08005c29
 8005bfc:	08005c05 	.word	0x08005c05
 8005c00:	08005c29 	.word	0x08005c29
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	3303      	adds	r3, #3
 8005c0a:	089b      	lsrs	r3, r3, #2
 8005c0c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c0e:	8afa      	ldrh	r2, [r7, #22]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d91c      	bls.n	8005c54 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f043 0220 	orr.w	r2, r3, #32
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c26:	e015      	b.n	8005c54 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	3303      	adds	r3, #3
 8005c2e:	089b      	lsrs	r3, r3, #2
 8005c30:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c32:	8afa      	ldrh	r2, [r7, #22]
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d90a      	bls.n	8005c58 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c4e:	e003      	b.n	8005c58 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005c50:	bf00      	nop
 8005c52:	e002      	b.n	8005c5a <USB_HC_StartXfer+0x25e>
        break;
 8005c54:	bf00      	nop
 8005c56:	e000      	b.n	8005c5a <USB_HC_StartXfer+0x25e>
        break;
 8005c58:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	68d9      	ldr	r1, [r3, #12]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	785a      	ldrb	r2, [r3, #1]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	b298      	uxth	r0, r3
 8005c68:	2300      	movs	r3, #0
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7ff fb84 	bl	800537c <USB_WritePacket>
  }

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3728      	adds	r7, #40	; 0x28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	1ff80000 	.word	0x1ff80000
 8005c84:	200000b0 	.word	0x200000b0

08005c88 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	b29b      	uxth	r3, r3
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b087      	sub	sp, #28
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	0c9b      	lsrs	r3, r3, #18
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <USB_HC_Halt+0x3a>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d16c      	bne.n	8005dbe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d02:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d143      	bne.n	8005d98 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	0151      	lsls	r1, r2, #5
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	440a      	add	r2, r1
 8005d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	0151      	lsls	r1, r2, #5
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	440a      	add	r2, r1
 8005d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d4e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d6e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	3301      	adds	r3, #1
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d7c:	d81d      	bhi.n	8005dba <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d94:	d0ec      	beq.n	8005d70 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d96:	e080      	b.n	8005e9a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005db6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005db8:	e06f      	b.n	8005e9a <USB_HC_Halt+0x1f0>
          break;
 8005dba:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005dbc:	e06d      	b.n	8005e9a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ddc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d143      	bne.n	8005e76 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e0c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e2c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e4c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	3301      	adds	r3, #1
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e5a:	d81d      	bhi.n	8005e98 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e72:	d0ec      	beq.n	8005e4e <USB_HC_Halt+0x1a4>
 8005e74:	e011      	b.n	8005e9a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e000      	b.n	8005e9a <USB_HC_Halt+0x1f0>
          break;
 8005e98:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	04da      	lsls	r2, r3, #19
 8005ec4:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <USB_DoPing+0x74>)
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	0151      	lsls	r1, r2, #5
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	440a      	add	r2, r1
 8005ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ed8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ef0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ef8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f06:	461a      	mov	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	1ff80000 	.word	0x1ff80000

08005f20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff f99f 	bl	8005274 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005f36:	2110      	movs	r1, #16
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff f9d7 	bl	80052ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff f9fa 	bl	8005338 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005f44:	2300      	movs	r3, #0
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	e01f      	b.n	8005f8a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f70:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	461a      	mov	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	3301      	adds	r3, #1
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b0f      	cmp	r3, #15
 8005f8e:	d9dc      	bls.n	8005f4a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005f90:	2300      	movs	r3, #0
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	e034      	b.n	8006000 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fb4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fbc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	461a      	mov	r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fdc:	d80c      	bhi.n	8005ff8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ff4:	d0ec      	beq.n	8005fd0 <USB_StopHost+0xb0>
 8005ff6:	e000      	b.n	8005ffa <USB_StopHost+0xda>
        break;
 8005ff8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b0f      	cmp	r3, #15
 8006004:	d9c7      	bls.n	8005f96 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600c:	461a      	mov	r2, r3
 800600e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006012:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800601a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff f918 	bl	8005252 <USB_EnableGlobalInt>

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800602c:	b590      	push	{r4, r7, lr}
 800602e:	b089      	sub	sp, #36	; 0x24
 8006030:	af04      	add	r7, sp, #16
 8006032:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006034:	2301      	movs	r3, #1
 8006036:	2202      	movs	r2, #2
 8006038:	2102      	movs	r1, #2
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fc68 	bl	8006910 <USBH_FindInterface>
 8006040:	4603      	mov	r3, r0
 8006042:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	2bff      	cmp	r3, #255	; 0xff
 8006048:	d002      	beq.n	8006050 <USBH_CDC_InterfaceInit+0x24>
 800604a:	7bfb      	ldrb	r3, [r7, #15]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d901      	bls.n	8006054 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006050:	2302      	movs	r3, #2
 8006052:	e13d      	b.n	80062d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fc3d 	bl	80068d8 <USBH_SelectInterface>
 800605e:	4603      	mov	r3, r0
 8006060:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006062:	7bbb      	ldrb	r3, [r7, #14]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006068:	2302      	movs	r3, #2
 800606a:	e131      	b.n	80062d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006072:	2050      	movs	r0, #80	; 0x50
 8006074:	f002 fa04 	bl	8008480 <malloc>
 8006078:	4603      	mov	r3, r0
 800607a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800608c:	2302      	movs	r3, #2
 800608e:	e11f      	b.n	80062d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006090:	2250      	movs	r2, #80	; 0x50
 8006092:	2100      	movs	r1, #0
 8006094:	68b8      	ldr	r0, [r7, #8]
 8006096:	f002 fa03 	bl	80084a0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	211a      	movs	r1, #26
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	4413      	add	r3, r2
 80060a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	b25b      	sxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	da15      	bge.n	80060de <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	211a      	movs	r1, #26
 80060b8:	fb01 f303 	mul.w	r3, r1, r3
 80060bc:	4413      	add	r3, r2
 80060be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060c2:	781a      	ldrb	r2, [r3, #0]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	211a      	movs	r1, #26
 80060ce:	fb01 f303 	mul.w	r3, r1, r3
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060d8:	881a      	ldrh	r2, [r3, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fe36 	bl	8007d56 <USBH_AllocPipe>
 80060ea:	4603      	mov	r3, r0
 80060ec:	461a      	mov	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	7819      	ldrb	r1, [r3, #0]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	7858      	ldrb	r0, [r3, #1]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	8952      	ldrh	r2, [r2, #10]
 800610a:	9202      	str	r2, [sp, #8]
 800610c:	2203      	movs	r2, #3
 800610e:	9201      	str	r2, [sp, #4]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	4623      	mov	r3, r4
 8006114:	4602      	mov	r2, r0
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 fdee 	bl	8007cf8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2200      	movs	r2, #0
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f002 f8fb 	bl	8008320 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800612a:	2300      	movs	r3, #0
 800612c:	2200      	movs	r2, #0
 800612e:	210a      	movs	r1, #10
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fbed 	bl	8006910 <USBH_FindInterface>
 8006136:	4603      	mov	r3, r0
 8006138:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	2bff      	cmp	r3, #255	; 0xff
 800613e:	d002      	beq.n	8006146 <USBH_CDC_InterfaceInit+0x11a>
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d901      	bls.n	800614a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006146:	2302      	movs	r3, #2
 8006148:	e0c2      	b.n	80062d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	211a      	movs	r1, #26
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	4413      	add	r3, r2
 8006156:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b25b      	sxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	da16      	bge.n	8006190 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	211a      	movs	r1, #26
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	4413      	add	r3, r2
 800616e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006172:	781a      	ldrb	r2, [r3, #0]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	211a      	movs	r1, #26
 800617e:	fb01 f303 	mul.w	r3, r1, r3
 8006182:	4413      	add	r3, r2
 8006184:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006188:	881a      	ldrh	r2, [r3, #0]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	835a      	strh	r2, [r3, #26]
 800618e:	e015      	b.n	80061bc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	211a      	movs	r1, #26
 8006196:	fb01 f303 	mul.w	r3, r1, r3
 800619a:	4413      	add	r3, r2
 800619c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	211a      	movs	r1, #26
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061b6:	881a      	ldrh	r2, [r3, #0]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	211a      	movs	r1, #26
 80061c2:	fb01 f303 	mul.w	r3, r1, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b25b      	sxtb	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	da16      	bge.n	8006202 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	211a      	movs	r1, #26
 80061da:	fb01 f303 	mul.w	r3, r1, r3
 80061de:	4413      	add	r3, r2
 80061e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061e4:	781a      	ldrb	r2, [r3, #0]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	211a      	movs	r1, #26
 80061f0:	fb01 f303 	mul.w	r3, r1, r3
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80061fa:	881a      	ldrh	r2, [r3, #0]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	835a      	strh	r2, [r3, #26]
 8006200:	e015      	b.n	800622e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	211a      	movs	r1, #26
 8006208:	fb01 f303 	mul.w	r3, r1, r3
 800620c:	4413      	add	r3, r2
 800620e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006212:	781a      	ldrb	r2, [r3, #0]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	211a      	movs	r1, #26
 800621e:	fb01 f303 	mul.w	r3, r1, r3
 8006222:	4413      	add	r3, r2
 8006224:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006228:	881a      	ldrh	r2, [r3, #0]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	7b9b      	ldrb	r3, [r3, #14]
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 fd8e 	bl	8007d56 <USBH_AllocPipe>
 800623a:	4603      	mov	r3, r0
 800623c:	461a      	mov	r2, r3
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	7bdb      	ldrb	r3, [r3, #15]
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 fd84 	bl	8007d56 <USBH_AllocPipe>
 800624e:	4603      	mov	r3, r0
 8006250:	461a      	mov	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	7b59      	ldrb	r1, [r3, #13]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	7b98      	ldrb	r0, [r3, #14]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	8b12      	ldrh	r2, [r2, #24]
 800626e:	9202      	str	r2, [sp, #8]
 8006270:	2202      	movs	r2, #2
 8006272:	9201      	str	r2, [sp, #4]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	4623      	mov	r3, r4
 8006278:	4602      	mov	r2, r0
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f001 fd3c 	bl	8007cf8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	7b19      	ldrb	r1, [r3, #12]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	7bd8      	ldrb	r0, [r3, #15]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	8b52      	ldrh	r2, [r2, #26]
 8006298:	9202      	str	r2, [sp, #8]
 800629a:	2202      	movs	r2, #2
 800629c:	9201      	str	r2, [sp, #4]
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	4623      	mov	r3, r4
 80062a2:	4602      	mov	r2, r0
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 fd27 	bl	8007cf8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	7b5b      	ldrb	r3, [r3, #13]
 80062b6:	2200      	movs	r2, #0
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f002 f830 	bl	8008320 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	7b1b      	ldrb	r3, [r3, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f002 f829 	bl	8008320 <USBH_LL_SetToggle>

  return USBH_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd90      	pop	{r4, r7, pc}

080062d8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00e      	beq.n	8006310 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 fd1c 	bl	8007d36 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 fd47 	bl	8007d98 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	7b1b      	ldrb	r3, [r3, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00e      	beq.n	8006336 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	7b1b      	ldrb	r3, [r3, #12]
 800631c:	4619      	mov	r1, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 fd09 	bl	8007d36 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	7b1b      	ldrb	r3, [r3, #12]
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 fd34 	bl	8007d98 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	7b5b      	ldrb	r3, [r3, #13]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00e      	beq.n	800635c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	7b5b      	ldrb	r3, [r3, #13]
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 fcf6 	bl	8007d36 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	7b5b      	ldrb	r3, [r3, #13]
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f001 fd21 	bl	8007d98 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00b      	beq.n	8006380 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	4618      	mov	r0, r3
 8006372:	f002 f88d 	bl	8008490 <free>
    phost->pActiveClass->pData = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800637c:	2200      	movs	r2, #0
 800637e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3340      	adds	r3, #64	; 0x40
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f8b1 	bl	800650a <GetLineCoding>
 80063a8:	4603      	mov	r3, r0
 80063aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80063ac:	7afb      	ldrb	r3, [r7, #11]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d105      	bne.n	80063be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063b8:	2102      	movs	r1, #2
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80063be:	7afb      	ldrb	r3, [r7, #11]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d877      	bhi.n	80064dc <USBH_CDC_Process+0x114>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <USBH_CDC_Process+0x2c>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006409 	.word	0x08006409
 80063f8:	0800640f 	.word	0x0800640f
 80063fc:	0800643f 	.word	0x0800643f
 8006400:	080064b3 	.word	0x080064b3
 8006404:	080064c1 	.word	0x080064c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	73fb      	strb	r3, [r7, #15]
      break;
 800640c:	e06d      	b.n	80064ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f897 	bl	8006548 <SetLineCoding>
 800641a:	4603      	mov	r3, r0
 800641c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800642c:	e058      	b.n	80064e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800642e:	7bbb      	ldrb	r3, [r7, #14]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d055      	beq.n	80064e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2204      	movs	r2, #4
 8006438:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800643c:	e050      	b.n	80064e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	3340      	adds	r3, #64	; 0x40
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f860 	bl	800650a <GetLineCoding>
 800644a:	4603      	mov	r3, r0
 800644c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d126      	bne.n	80064a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006466:	791b      	ldrb	r3, [r3, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	d13b      	bne.n	80064e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006476:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006478:	429a      	cmp	r2, r3
 800647a:	d133      	bne.n	80064e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006486:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006488:	429a      	cmp	r2, r3
 800648a:	d12b      	bne.n	80064e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006494:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006496:	429a      	cmp	r2, r3
 8006498:	d124      	bne.n	80064e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f95a 	bl	8006754 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064a0:	e020      	b.n	80064e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d01d      	beq.n	80064e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2204      	movs	r2, #4
 80064ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80064b0:	e018      	b.n	80064e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f867 	bl	8006586 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f8dc 	bl	8006676 <CDC_ProcessReception>
      break;
 80064be:	e014      	b.n	80064ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80064c0:	2100      	movs	r1, #0
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 ffe5 	bl	8007492 <USBH_ClrFeature>
 80064c8:	4603      	mov	r3, r0
 80064ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80064da:	e005      	b.n	80064e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80064dc:	bf00      	nop
 80064de:	e004      	b.n	80064ea <USBH_CDC_Process+0x122>
      break;
 80064e0:	bf00      	nop
 80064e2:	e002      	b.n	80064ea <USBH_CDC_Process+0x122>
      break;
 80064e4:	bf00      	nop
 80064e6:	e000      	b.n	80064ea <USBH_CDC_Process+0x122>
      break;
 80064e8:	bf00      	nop

  }

  return status;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	22a1      	movs	r2, #161	; 0xa1
 8006518:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2221      	movs	r2, #33	; 0x21
 800651e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2207      	movs	r2, #7
 8006530:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2207      	movs	r2, #7
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 f98a 	bl	8007852 <USBH_CtlReq>
 800653e:	4603      	mov	r3, r0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2221      	movs	r2, #33	; 0x21
 8006556:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2207      	movs	r2, #7
 800656e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2207      	movs	r2, #7
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f001 f96b 	bl	8007852 <USBH_CtlReq>
 800657c:	4603      	mov	r3, r0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b086      	sub	sp, #24
 800658a:	af02      	add	r7, sp, #8
 800658c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006598:	2300      	movs	r3, #0
 800659a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d002      	beq.n	80065ac <CDC_ProcessTransmission+0x26>
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d025      	beq.n	80065f6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80065aa:	e060      	b.n	800666e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	8b12      	ldrh	r2, [r2, #24]
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d90c      	bls.n	80065d2 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	69d9      	ldr	r1, [r3, #28]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8b1a      	ldrh	r2, [r3, #24]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	7b58      	ldrb	r0, [r3, #13]
 80065c4:	2301      	movs	r3, #1
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	4603      	mov	r3, r0
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f001 fb51 	bl	8007c72 <USBH_BulkSendData>
 80065d0:	e00c      	b.n	80065ec <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	7b58      	ldrb	r0, [r3, #13]
 80065e0:	2301      	movs	r3, #1
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	4603      	mov	r3, r0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 fb43 	bl	8007c72 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80065f4:	e03b      	b.n	800666e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	7b5b      	ldrb	r3, [r3, #13]
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 fe65 	bl	80082cc <USBH_LL_GetURBState>
 8006602:	4603      	mov	r3, r0
 8006604:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d128      	bne.n	800665e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	8b12      	ldrh	r2, [r2, #24]
 8006614:	4293      	cmp	r3, r2
 8006616:	d90e      	bls.n	8006636 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	8b12      	ldrh	r2, [r2, #24]
 8006620:	1a9a      	subs	r2, r3, r2
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	8b12      	ldrh	r2, [r2, #24]
 800662e:	441a      	add	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	61da      	str	r2, [r3, #28]
 8006634:	e002      	b.n	800663c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800664c:	e00e      	b.n	800666c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f868 	bl	800672c <USBH_CDC_TransmitCallback>
      break;
 800665c:	e006      	b.n	800666c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800665e:	7afb      	ldrb	r3, [r7, #11]
 8006660:	2b02      	cmp	r3, #2
 8006662:	d103      	bne.n	800666c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800666c:	bf00      	nop
  }
}
 800666e:	bf00      	nop
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006688:	2300      	movs	r3, #0
 800668a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006692:	2b03      	cmp	r3, #3
 8006694:	d002      	beq.n	800669c <CDC_ProcessReception+0x26>
 8006696:	2b04      	cmp	r3, #4
 8006698:	d00e      	beq.n	80066b8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800669a:	e043      	b.n	8006724 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	6a19      	ldr	r1, [r3, #32]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	8b5a      	ldrh	r2, [r3, #26]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	7b1b      	ldrb	r3, [r3, #12]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 fb07 	bl	8007cbc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2204      	movs	r2, #4
 80066b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80066b6:	e035      	b.n	8006724 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	7b1b      	ldrb	r3, [r3, #12]
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fe04 	bl	80082cc <USBH_LL_GetURBState>
 80066c4:	4603      	mov	r3, r0
 80066c6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80066c8:	7cfb      	ldrb	r3, [r7, #19]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d129      	bne.n	8006722 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	7b1b      	ldrb	r3, [r3, #12]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 fd67 	bl	80081a8 <USBH_LL_GetLastXferSize>
 80066da:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d016      	beq.n	8006714 <CDC_ProcessReception+0x9e>
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	8b5b      	ldrh	r3, [r3, #26]
 80066ea:	461a      	mov	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d910      	bls.n	8006714 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	1ad2      	subs	r2, r2, r3
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	6a1a      	ldr	r2, [r3, #32]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	441a      	add	r2, r3
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2203      	movs	r2, #3
 800670e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006712:	e006      	b.n	8006722 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f80f 	bl	8006740 <USBH_CDC_ReceiveCallback>
      break;
 8006722:	bf00      	nop
  }
}
 8006724:	bf00      	nop
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4613      	mov	r3, r2
 8006774:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800677c:	2302      	movs	r3, #2
 800677e:	e029      	b.n	80067d4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	79fa      	ldrb	r2, [r7, #7]
 8006784:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 f81f 	bl	80067dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f001 fc39 	bl	8008044 <USBH_LL_Init>

  return USBH_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	e009      	b.n	8006802 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	33e0      	adds	r3, #224	; 0xe0
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	2200      	movs	r2, #0
 80067fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b0e      	cmp	r3, #14
 8006806:	d9f2      	bls.n	80067ee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	e009      	b.n	8006822 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006828:	d3f1      	bcc.n	800680e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2240      	movs	r2, #64	; 0x40
 800684e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d016      	beq.n	80068c6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10e      	bne.n	80068c0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068a8:	1c59      	adds	r1, r3, #1
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	33de      	adds	r3, #222	; 0xde
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
 80068be:	e004      	b.n	80068ca <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80068c0:	2302      	movs	r3, #2
 80068c2:	73fb      	strb	r3, [r7, #15]
 80068c4:	e001      	b.n	80068ca <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80068c6:	2302      	movs	r3, #2
 80068c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d204      	bcs.n	80068fe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	78fa      	ldrb	r2, [r7, #3]
 80068f8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80068fc:	e001      	b.n	8006902 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80068fe:	2302      	movs	r3, #2
 8006900:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	4608      	mov	r0, r1
 800691a:	4611      	mov	r1, r2
 800691c:	461a      	mov	r2, r3
 800691e:	4603      	mov	r3, r0
 8006920:	70fb      	strb	r3, [r7, #3]
 8006922:	460b      	mov	r3, r1
 8006924:	70bb      	strb	r3, [r7, #2]
 8006926:	4613      	mov	r3, r2
 8006928:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800692e:	2300      	movs	r3, #0
 8006930:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006938:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800693a:	e025      	b.n	8006988 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	221a      	movs	r2, #26
 8006940:	fb02 f303 	mul.w	r3, r2, r3
 8006944:	3308      	adds	r3, #8
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	3302      	adds	r3, #2
 800694c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	795b      	ldrb	r3, [r3, #5]
 8006952:	78fa      	ldrb	r2, [r7, #3]
 8006954:	429a      	cmp	r2, r3
 8006956:	d002      	beq.n	800695e <USBH_FindInterface+0x4e>
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	2bff      	cmp	r3, #255	; 0xff
 800695c:	d111      	bne.n	8006982 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006962:	78ba      	ldrb	r2, [r7, #2]
 8006964:	429a      	cmp	r2, r3
 8006966:	d002      	beq.n	800696e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006968:	78bb      	ldrb	r3, [r7, #2]
 800696a:	2bff      	cmp	r3, #255	; 0xff
 800696c:	d109      	bne.n	8006982 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006972:	787a      	ldrb	r2, [r7, #1]
 8006974:	429a      	cmp	r2, r3
 8006976:	d002      	beq.n	800697e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006978:	787b      	ldrb	r3, [r7, #1]
 800697a:	2bff      	cmp	r3, #255	; 0xff
 800697c:	d101      	bne.n	8006982 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800697e:	7dfb      	ldrb	r3, [r7, #23]
 8006980:	e006      	b.n	8006990 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	3301      	adds	r3, #1
 8006986:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d9d6      	bls.n	800693c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800698e:	23ff      	movs	r3, #255	; 0xff
}
 8006990:	4618      	mov	r0, r3
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fb89 	bl	80080bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80069aa:	2101      	movs	r1, #1
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 fca0 	bl	80082f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af04      	add	r7, sp, #16
 80069c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80069c4:	2302      	movs	r3, #2
 80069c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d102      	bne.n	80069de <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2203      	movs	r2, #3
 80069dc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b0b      	cmp	r3, #11
 80069e6:	f200 81b3 	bhi.w	8006d50 <USBH_Process+0x394>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <USBH_Process+0x34>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a21 	.word	0x08006a21
 80069f4:	08006a53 	.word	0x08006a53
 80069f8:	08006abb 	.word	0x08006abb
 80069fc:	08006ceb 	.word	0x08006ceb
 8006a00:	08006d51 	.word	0x08006d51
 8006a04:	08006b5f 	.word	0x08006b5f
 8006a08:	08006c91 	.word	0x08006c91
 8006a0c:	08006b95 	.word	0x08006b95
 8006a10:	08006bb5 	.word	0x08006bb5
 8006a14:	08006bd5 	.word	0x08006bd5
 8006a18:	08006c03 	.word	0x08006c03
 8006a1c:	08006cd3 	.word	0x08006cd3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8193 	beq.w	8006d54 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006a34:	20c8      	movs	r0, #200	; 0xc8
 8006a36:	f001 fca6 	bl	8008386 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fb99 	bl	8008172 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a50:	e180      	b.n	8006d54 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d107      	bne.n	8006a6c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a6a:	e182      	b.n	8006d72 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a76:	d914      	bls.n	8006aa2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a7e:	3301      	adds	r3, #1
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d903      	bls.n	8006a9a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	220d      	movs	r2, #13
 8006a96:	701a      	strb	r2, [r3, #0]
      break;
 8006a98:	e16b      	b.n	8006d72 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
      break;
 8006aa0:	e167      	b.n	8006d72 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006aa8:	f103 020a 	add.w	r2, r3, #10
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006ab2:	200a      	movs	r0, #10
 8006ab4:	f001 fc67 	bl	8008386 <USBH_Delay>
      break;
 8006ab8:	e15b      	b.n	8006d72 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aca:	2104      	movs	r1, #4
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ad0:	2064      	movs	r0, #100	; 0x64
 8006ad2:	f001 fc58 	bl	8008386 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fb26 	bl	8008128 <USBH_LL_GetSpeed>
 8006adc:	4603      	mov	r3, r0
 8006ade:	461a      	mov	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2205      	movs	r2, #5
 8006aea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006aec:	2100      	movs	r1, #0
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 f931 	bl	8007d56 <USBH_AllocPipe>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006afc:	2180      	movs	r1, #128	; 0x80
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 f929 	bl	8007d56 <USBH_AllocPipe>
 8006b04:	4603      	mov	r3, r0
 8006b06:	461a      	mov	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7919      	ldrb	r1, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b20:	b292      	uxth	r2, r2
 8006b22:	9202      	str	r2, [sp, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	9201      	str	r2, [sp, #4]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2280      	movs	r2, #128	; 0x80
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 f8e2 	bl	8007cf8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	7959      	ldrb	r1, [r3, #5]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b48:	b292      	uxth	r2, r2
 8006b4a:	9202      	str	r2, [sp, #8]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	9201      	str	r2, [sp, #4]
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	4603      	mov	r3, r0
 8006b54:	2200      	movs	r2, #0
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 f8ce 	bl	8007cf8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b5c:	e109      	b.n	8006d72 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f90c 	bl	8006d7c <USBH_HandleEnum>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 80f3 	bne.w	8006d58 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d103      	bne.n	8006b8c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2208      	movs	r2, #8
 8006b88:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006b8a:	e0e5      	b.n	8006d58 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2207      	movs	r2, #7
 8006b90:	701a      	strb	r2, [r3, #0]
      break;
 8006b92:	e0e1      	b.n	8006d58 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 80de 	beq.w	8006d5c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2208      	movs	r2, #8
 8006bb0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006bb2:	e0d3      	b.n	8006d5c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fc20 	bl	8007404 <USBH_SetCfg>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f040 80ca 	bne.w	8006d60 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2209      	movs	r2, #9
 8006bd0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bd2:	e0c5      	b.n	8006d60 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006be2:	2101      	movs	r1, #1
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fc30 	bl	800744a <USBH_SetFeature>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f040 80b9 	bne.w	8006d64 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	220a      	movs	r2, #10
 8006bf6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bf8:	e0b4      	b.n	8006d64 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	220a      	movs	r2, #10
 8006bfe:	701a      	strb	r2, [r3, #0]
      break;
 8006c00:	e0b0      	b.n	8006d64 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80ad 	beq.w	8006d68 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]
 8006c1a:	e016      	b.n	8006c4a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006c1c:	7bfa      	ldrb	r2, [r7, #15]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	32de      	adds	r2, #222	; 0xde
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	791a      	ldrb	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d108      	bne.n	8006c44 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006c32:	7bfa      	ldrb	r2, [r7, #15]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	32de      	adds	r2, #222	; 0xde
 8006c38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006c42:	e005      	b.n	8006c50 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	3301      	adds	r3, #1
 8006c48:	73fb      	strb	r3, [r7, #15]
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0e5      	beq.n	8006c1c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d016      	beq.n	8006c88 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d109      	bne.n	8006c80 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2206      	movs	r2, #6
 8006c70:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c78:	2103      	movs	r1, #3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c7e:	e073      	b.n	8006d68 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	220d      	movs	r2, #13
 8006c84:	701a      	strb	r2, [r3, #0]
      break;
 8006c86:	e06f      	b.n	8006d68 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	220d      	movs	r2, #13
 8006c8c:	701a      	strb	r2, [r3, #0]
      break;
 8006c8e:	e06b      	b.n	8006d68 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d017      	beq.n	8006cca <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d103      	bne.n	8006cba <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	220b      	movs	r2, #11
 8006cb6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006cb8:	e058      	b.n	8006d6c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d154      	bne.n	8006d6c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	220d      	movs	r2, #13
 8006cc6:	701a      	strb	r2, [r3, #0]
      break;
 8006cc8:	e050      	b.n	8006d6c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	220d      	movs	r2, #13
 8006cce:	701a      	strb	r2, [r3, #0]
      break;
 8006cd0:	e04c      	b.n	8006d6c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d049      	beq.n	8006d70 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
      }
      break;
 8006ce8:	e042      	b.n	8006d70 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7ff fd72 	bl	80067dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d009      	beq.n	8006d16 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d26:	2105      	movs	r1, #5
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d107      	bne.n	8006d48 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7ff fe2b 	bl	800699c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d46:	e014      	b.n	8006d72 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 f9b7 	bl	80080bc <USBH_LL_Start>
      break;
 8006d4e:	e010      	b.n	8006d72 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006d50:	bf00      	nop
 8006d52:	e00e      	b.n	8006d72 <USBH_Process+0x3b6>
      break;
 8006d54:	bf00      	nop
 8006d56:	e00c      	b.n	8006d72 <USBH_Process+0x3b6>
      break;
 8006d58:	bf00      	nop
 8006d5a:	e00a      	b.n	8006d72 <USBH_Process+0x3b6>
    break;
 8006d5c:	bf00      	nop
 8006d5e:	e008      	b.n	8006d72 <USBH_Process+0x3b6>
      break;
 8006d60:	bf00      	nop
 8006d62:	e006      	b.n	8006d72 <USBH_Process+0x3b6>
      break;
 8006d64:	bf00      	nop
 8006d66:	e004      	b.n	8006d72 <USBH_Process+0x3b6>
      break;
 8006d68:	bf00      	nop
 8006d6a:	e002      	b.n	8006d72 <USBH_Process+0x3b6>
      break;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <USBH_Process+0x3b6>
      break;
 8006d70:	bf00      	nop
  }
  return USBH_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af04      	add	r7, sp, #16
 8006d82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b07      	cmp	r3, #7
 8006d92:	f200 81c1 	bhi.w	8007118 <USBH_HandleEnum+0x39c>
 8006d96:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <USBH_HandleEnum+0x20>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006dbd 	.word	0x08006dbd
 8006da0:	08006e7b 	.word	0x08006e7b
 8006da4:	08006ee5 	.word	0x08006ee5
 8006da8:	08006f73 	.word	0x08006f73
 8006dac:	08006fdd 	.word	0x08006fdd
 8006db0:	0800704d 	.word	0x0800704d
 8006db4:	08007093 	.word	0x08007093
 8006db8:	080070d9 	.word	0x080070d9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006dbc:	2108      	movs	r1, #8
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa50 	bl	8007264 <USBH_Get_DevDesc>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d130      	bne.n	8006e30 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	7919      	ldrb	r1, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006df2:	b292      	uxth	r2, r2
 8006df4:	9202      	str	r2, [sp, #8]
 8006df6:	2200      	movs	r2, #0
 8006df8:	9201      	str	r2, [sp, #4]
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2280      	movs	r2, #128	; 0x80
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 ff79 	bl	8007cf8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7959      	ldrb	r1, [r3, #5]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e1a:	b292      	uxth	r2, r2
 8006e1c:	9202      	str	r2, [sp, #8]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	9201      	str	r2, [sp, #4]
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	4603      	mov	r3, r0
 8006e26:	2200      	movs	r2, #0
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 ff65 	bl	8007cf8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e2e:	e175      	b.n	800711c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	f040 8172 	bne.w	800711c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e3e:	3301      	adds	r3, #1
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d903      	bls.n	8006e5a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	220d      	movs	r2, #13
 8006e56:	701a      	strb	r2, [r3, #0]
      break;
 8006e58:	e160      	b.n	800711c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	795b      	ldrb	r3, [r3, #5]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 ff99 	bl	8007d98 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	791b      	ldrb	r3, [r3, #4]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 ff93 	bl	8007d98 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
      break;
 8006e78:	e150      	b.n	800711c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006e7a:	2112      	movs	r1, #18
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f9f1 	bl	8007264 <USBH_Get_DevDesc>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d103      	bne.n	8006e94 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e92:	e145      	b.n	8007120 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	f040 8142 	bne.w	8007120 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d903      	bls.n	8006ebe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	220d      	movs	r2, #13
 8006eba:	701a      	strb	r2, [r3, #0]
      break;
 8006ebc:	e130      	b.n	8007120 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	795b      	ldrb	r3, [r3, #5]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 ff67 	bl	8007d98 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	791b      	ldrb	r3, [r3, #4]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 ff61 	bl	8007d98 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	701a      	strb	r2, [r3, #0]
      break;
 8006ee2:	e11d      	b.n	8007120 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fa68 	bl	80073bc <USBH_SetAddress>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ef0:	7bbb      	ldrb	r3, [r7, #14]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d132      	bne.n	8006f5c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006ef6:	2002      	movs	r0, #2
 8006ef8:	f001 fa45 	bl	8008386 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2203      	movs	r2, #3
 8006f08:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	7919      	ldrb	r1, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f1e:	b292      	uxth	r2, r2
 8006f20:	9202      	str	r2, [sp, #8]
 8006f22:	2200      	movs	r2, #0
 8006f24:	9201      	str	r2, [sp, #4]
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2280      	movs	r2, #128	; 0x80
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fee3 	bl	8007cf8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	7959      	ldrb	r1, [r3, #5]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f46:	b292      	uxth	r2, r2
 8006f48:	9202      	str	r2, [sp, #8]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	9201      	str	r2, [sp, #4]
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	4603      	mov	r3, r0
 8006f52:	2200      	movs	r2, #0
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fecf 	bl	8007cf8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f5a:	e0e3      	b.n	8007124 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	f040 80e0 	bne.w	8007124 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	220d      	movs	r2, #13
 8006f68:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	705a      	strb	r2, [r3, #1]
      break;
 8006f70:	e0d8      	b.n	8007124 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006f72:	2109      	movs	r1, #9
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f99d 	bl	80072b4 <USBH_Get_CfgDesc>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d103      	bne.n	8006f8c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2204      	movs	r2, #4
 8006f88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f8a:	e0cd      	b.n	8007128 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	f040 80ca 	bne.w	8007128 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d903      	bls.n	8006fb6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	220d      	movs	r2, #13
 8006fb2:	701a      	strb	r2, [r3, #0]
      break;
 8006fb4:	e0b8      	b.n	8007128 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	795b      	ldrb	r3, [r3, #5]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 feeb 	bl	8007d98 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	791b      	ldrb	r3, [r3, #4]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fee5 	bl	8007d98 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
      break;
 8006fda:	e0a5      	b.n	8007128 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f965 	bl	80072b4 <USBH_Get_CfgDesc>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d103      	bne.n	8006ffc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2205      	movs	r2, #5
 8006ff8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ffa:	e097      	b.n	800712c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ffc:	7bbb      	ldrb	r3, [r7, #14]
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	f040 8094 	bne.w	800712c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800700a:	3301      	adds	r3, #1
 800700c:	b2da      	uxtb	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800701a:	2b03      	cmp	r3, #3
 800701c:	d903      	bls.n	8007026 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	220d      	movs	r2, #13
 8007022:	701a      	strb	r2, [r3, #0]
      break;
 8007024:	e082      	b.n	800712c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	795b      	ldrb	r3, [r3, #5]
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 feb3 	bl	8007d98 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	791b      	ldrb	r3, [r3, #4]
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fead 	bl	8007d98 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	701a      	strb	r2, [r3, #0]
      break;
 800704a:	e06f      	b.n	800712c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007052:	2b00      	cmp	r3, #0
 8007054:	d019      	beq.n	800708a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007062:	23ff      	movs	r3, #255	; 0xff
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f949 	bl	80072fc <USBH_Get_StringDesc>
 800706a:	4603      	mov	r3, r0
 800706c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d103      	bne.n	800707c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2206      	movs	r2, #6
 8007078:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800707a:	e059      	b.n	8007130 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	2b03      	cmp	r3, #3
 8007080:	d156      	bne.n	8007130 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2206      	movs	r2, #6
 8007086:	705a      	strb	r2, [r3, #1]
      break;
 8007088:	e052      	b.n	8007130 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2206      	movs	r2, #6
 800708e:	705a      	strb	r2, [r3, #1]
      break;
 8007090:	e04e      	b.n	8007130 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007098:	2b00      	cmp	r3, #0
 800709a:	d019      	beq.n	80070d0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80070a8:	23ff      	movs	r3, #255	; 0xff
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f926 	bl	80072fc <USBH_Get_StringDesc>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d103      	bne.n	80070c2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2207      	movs	r2, #7
 80070be:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80070c0:	e038      	b.n	8007134 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d135      	bne.n	8007134 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2207      	movs	r2, #7
 80070cc:	705a      	strb	r2, [r3, #1]
      break;
 80070ce:	e031      	b.n	8007134 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2207      	movs	r2, #7
 80070d4:	705a      	strb	r2, [r3, #1]
      break;
 80070d6:	e02d      	b.n	8007134 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d017      	beq.n	8007112 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80070ee:	23ff      	movs	r3, #255	; 0xff
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f903 	bl	80072fc <USBH_Get_StringDesc>
 80070f6:	4603      	mov	r3, r0
 80070f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d102      	bne.n	8007106 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007104:	e018      	b.n	8007138 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	2b03      	cmp	r3, #3
 800710a:	d115      	bne.n	8007138 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	73fb      	strb	r3, [r7, #15]
      break;
 8007110:	e012      	b.n	8007138 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]
      break;
 8007116:	e00f      	b.n	8007138 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007118:	bf00      	nop
 800711a:	e00e      	b.n	800713a <USBH_HandleEnum+0x3be>
      break;
 800711c:	bf00      	nop
 800711e:	e00c      	b.n	800713a <USBH_HandleEnum+0x3be>
      break;
 8007120:	bf00      	nop
 8007122:	e00a      	b.n	800713a <USBH_HandleEnum+0x3be>
      break;
 8007124:	bf00      	nop
 8007126:	e008      	b.n	800713a <USBH_HandleEnum+0x3be>
      break;
 8007128:	bf00      	nop
 800712a:	e006      	b.n	800713a <USBH_HandleEnum+0x3be>
      break;
 800712c:	bf00      	nop
 800712e:	e004      	b.n	800713a <USBH_HandleEnum+0x3be>
      break;
 8007130:	bf00      	nop
 8007132:	e002      	b.n	800713a <USBH_HandleEnum+0x3be>
      break;
 8007134:	bf00      	nop
 8007136:	e000      	b.n	800713a <USBH_HandleEnum+0x3be>
      break;
 8007138:	bf00      	nop
  }
  return Status;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f804 	bl	8007186 <USBH_HandleSof>
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b0b      	cmp	r3, #11
 8007196:	d10a      	bne.n	80071ae <USBH_HandleSof+0x28>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3
  }
}
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80071c6:	bf00      	nop
}
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80071e2:	bf00      	nop
}
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 ff58 	bl	80080f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	791b      	ldrb	r3, [r3, #4]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fda5 	bl	8007d98 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	795b      	ldrb	r3, [r3, #5]
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fd9f 	bl	8007d98 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af02      	add	r7, sp, #8
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	b29b      	uxth	r3, r3
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007282:	2100      	movs	r1, #0
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f864 	bl	8007352 <USBH_GetDescriptor>
 800728a:	4603      	mov	r3, r0
 800728c:	73fb      	strb	r3, [r7, #15]
 800728e:	7bfb      	ldrb	r3, [r7, #15]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f203 3026 	addw	r0, r3, #806	; 0x326
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072a0:	78fa      	ldrb	r2, [r7, #3]
 80072a2:	b292      	uxth	r2, r2
 80072a4:	4619      	mov	r1, r3
 80072a6:	f000 f918 	bl	80074da <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	331c      	adds	r3, #28
 80072c4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80072c6:	887b      	ldrh	r3, [r7, #2]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072d0:	2100      	movs	r1, #0
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f83d 	bl	8007352 <USBH_GetDescriptor>
 80072d8:	4603      	mov	r3, r0
 80072da:	72fb      	strb	r3, [r7, #11]
 80072dc:	7afb      	ldrb	r3, [r7, #11]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d107      	bne.n	80072f2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80072e8:	887a      	ldrh	r2, [r7, #2]
 80072ea:	68f9      	ldr	r1, [r7, #12]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 f964 	bl	80075ba <USBH_ParseCfgDesc>
  }

  return status;
 80072f2:	7afb      	ldrb	r3, [r7, #11]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af02      	add	r7, sp, #8
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	607a      	str	r2, [r7, #4]
 8007306:	461a      	mov	r2, r3
 8007308:	460b      	mov	r3, r1
 800730a:	72fb      	strb	r3, [r7, #11]
 800730c:	4613      	mov	r3, r2
 800730e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007310:	7afb      	ldrb	r3, [r7, #11]
 8007312:	b29b      	uxth	r3, r3
 8007314:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007318:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007320:	893b      	ldrh	r3, [r7, #8]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	460b      	mov	r3, r1
 8007326:	2100      	movs	r1, #0
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 f812 	bl	8007352 <USBH_GetDescriptor>
 800732e:	4603      	mov	r3, r0
 8007330:	75fb      	strb	r3, [r7, #23]
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d107      	bne.n	8007348 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800733e:	893a      	ldrh	r2, [r7, #8]
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fa37 	bl	80077b6 <USBH_ParseStringDesc>
  }

  return status;
 8007348:	7dfb      	ldrb	r3, [r7, #23]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	607b      	str	r3, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	72fb      	strb	r3, [r7, #11]
 8007360:	4613      	mov	r3, r2
 8007362:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	789b      	ldrb	r3, [r3, #2]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d11c      	bne.n	80073a6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007372:	b2da      	uxtb	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2206      	movs	r2, #6
 800737c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	893a      	ldrh	r2, [r7, #8]
 8007382:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007384:	893b      	ldrh	r3, [r7, #8]
 8007386:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800738a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800738e:	d104      	bne.n	800739a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f240 4209 	movw	r2, #1033	; 0x409
 8007396:	829a      	strh	r2, [r3, #20]
 8007398:	e002      	b.n	80073a0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8b3a      	ldrh	r2, [r7, #24]
 80073a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80073a6:	8b3b      	ldrh	r3, [r7, #24]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fa50 	bl	8007852 <USBH_CtlReq>
 80073b2:	4603      	mov	r3, r0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	789b      	ldrb	r3, [r3, #2]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d10f      	bne.n	80073f0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2205      	movs	r2, #5
 80073da:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	b29a      	uxth	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80073f0:	2200      	movs	r2, #0
 80073f2:	2100      	movs	r1, #0
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fa2c 	bl	8007852 <USBH_CtlReq>
 80073fa:	4603      	mov	r3, r0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	789b      	ldrb	r3, [r3, #2]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d10e      	bne.n	8007436 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2209      	movs	r2, #9
 8007422:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	887a      	ldrh	r2, [r7, #2]
 8007428:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007436:	2200      	movs	r2, #0
 8007438:	2100      	movs	r1, #0
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa09 	bl	8007852 <USBH_CtlReq>
 8007440:	4603      	mov	r3, r0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b082      	sub	sp, #8
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	460b      	mov	r3, r1
 8007454:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	789b      	ldrb	r3, [r3, #2]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d10f      	bne.n	800747e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2203      	movs	r2, #3
 8007468:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	b29a      	uxth	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800747e:	2200      	movs	r2, #0
 8007480:	2100      	movs	r1, #0
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f9e5 	bl	8007852 <USBH_CtlReq>
 8007488:	4603      	mov	r3, r0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	460b      	mov	r3, r1
 800749c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	789b      	ldrb	r3, [r3, #2]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d10f      	bne.n	80074c6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2202      	movs	r2, #2
 80074aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80074c6:	2200      	movs	r2, #0
 80074c8:	2100      	movs	r1, #0
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f9c1 	bl	8007852 <USBH_CtlReq>
 80074d0:	4603      	mov	r3, r0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	4613      	mov	r3, r2
 80074e6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	781a      	ldrb	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	785a      	ldrb	r2, [r3, #1]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	3302      	adds	r3, #2
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b29a      	uxth	r2, r3
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	3303      	adds	r3, #3
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	b29b      	uxth	r3, r3
 8007508:	021b      	lsls	r3, r3, #8
 800750a:	b29b      	uxth	r3, r3
 800750c:	4313      	orrs	r3, r2
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	791a      	ldrb	r2, [r3, #4]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	795a      	ldrb	r2, [r3, #5]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	799a      	ldrb	r2, [r3, #6]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	79da      	ldrb	r2, [r3, #7]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007534:	88fb      	ldrh	r3, [r7, #6]
 8007536:	2b08      	cmp	r3, #8
 8007538:	d939      	bls.n	80075ae <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	3308      	adds	r3, #8
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	b29a      	uxth	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	3309      	adds	r3, #9
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	021b      	lsls	r3, r3, #8
 800754c:	b29b      	uxth	r3, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	330a      	adds	r3, #10
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b29a      	uxth	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	330b      	adds	r3, #11
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	b29b      	uxth	r3, r3
 8007566:	021b      	lsls	r3, r3, #8
 8007568:	b29b      	uxth	r3, r3
 800756a:	4313      	orrs	r3, r2
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	330c      	adds	r3, #12
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b29a      	uxth	r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	330d      	adds	r3, #13
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	b29b      	uxth	r3, r3
 8007586:	4313      	orrs	r3, r2
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	7b9a      	ldrb	r2, [r3, #14]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	7bda      	ldrb	r2, [r3, #15]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	7c1a      	ldrb	r2, [r3, #16]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	7c5a      	ldrb	r2, [r3, #17]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	745a      	strb	r2, [r3, #17]
  }
}
 80075ae:	bf00      	nop
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b08a      	sub	sp, #40	; 0x28
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	4613      	mov	r3, r2
 80075c6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	781a      	ldrb	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	785a      	ldrb	r2, [r3, #1]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	3302      	adds	r3, #2
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	3303      	adds	r3, #3
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	021b      	lsls	r3, r3, #8
 80075fe:	b29b      	uxth	r3, r3
 8007600:	4313      	orrs	r3, r2
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	791a      	ldrb	r2, [r3, #4]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	795a      	ldrb	r2, [r3, #5]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	799a      	ldrb	r2, [r3, #6]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	79da      	ldrb	r2, [r3, #7]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	7a1a      	ldrb	r2, [r3, #8]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007630:	88fb      	ldrh	r3, [r7, #6]
 8007632:	2b09      	cmp	r3, #9
 8007634:	d95f      	bls.n	80076f6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007636:	2309      	movs	r3, #9
 8007638:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800763e:	e051      	b.n	80076e4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007640:	f107 0316 	add.w	r3, r7, #22
 8007644:	4619      	mov	r1, r3
 8007646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007648:	f000 f8e8 	bl	800781c <USBH_GetNextDesc>
 800764c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b04      	cmp	r3, #4
 8007654:	d146      	bne.n	80076e4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800765a:	221a      	movs	r2, #26
 800765c:	fb02 f303 	mul.w	r3, r2, r3
 8007660:	3308      	adds	r3, #8
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4413      	add	r3, r2
 8007666:	3302      	adds	r3, #2
 8007668:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800766a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800766c:	69f8      	ldr	r0, [r7, #28]
 800766e:	f000 f846 	bl	80076fe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007678:	2300      	movs	r3, #0
 800767a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800767c:	e022      	b.n	80076c4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800767e:	f107 0316 	add.w	r3, r7, #22
 8007682:	4619      	mov	r1, r3
 8007684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007686:	f000 f8c9 	bl	800781c <USBH_GetNextDesc>
 800768a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	785b      	ldrb	r3, [r3, #1]
 8007690:	2b05      	cmp	r3, #5
 8007692:	d117      	bne.n	80076c4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007698:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800769c:	3201      	adds	r2, #1
 800769e:	00d2      	lsls	r2, r2, #3
 80076a0:	211a      	movs	r1, #26
 80076a2:	fb01 f303 	mul.w	r3, r1, r3
 80076a6:	4413      	add	r3, r2
 80076a8:	3308      	adds	r3, #8
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	3304      	adds	r3, #4
 80076b0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80076b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076b4:	69b8      	ldr	r0, [r7, #24]
 80076b6:	f000 f851 	bl	800775c <USBH_ParseEPDesc>
            ep_ix++;
 80076ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80076be:	3301      	adds	r3, #1
 80076c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	791b      	ldrb	r3, [r3, #4]
 80076c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d204      	bcs.n	80076da <USBH_ParseCfgDesc+0x120>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	885a      	ldrh	r2, [r3, #2]
 80076d4:	8afb      	ldrh	r3, [r7, #22]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d8d1      	bhi.n	800767e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80076da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076de:	3301      	adds	r3, #1
 80076e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d804      	bhi.n	80076f6 <USBH_ParseCfgDesc+0x13c>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	885a      	ldrh	r2, [r3, #2]
 80076f0:	8afb      	ldrh	r3, [r7, #22]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d8a4      	bhi.n	8007640 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80076f6:	bf00      	nop
 80076f8:	3728      	adds	r7, #40	; 0x28
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	785a      	ldrb	r2, [r3, #1]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	789a      	ldrb	r2, [r3, #2]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	78da      	ldrb	r2, [r3, #3]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	791a      	ldrb	r2, [r3, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	795a      	ldrb	r2, [r3, #5]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	799a      	ldrb	r2, [r3, #6]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	79da      	ldrb	r2, [r3, #7]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	7a1a      	ldrb	r2, [r3, #8]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	721a      	strb	r2, [r3, #8]
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	785a      	ldrb	r2, [r3, #1]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	789a      	ldrb	r2, [r3, #2]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	78da      	ldrb	r2, [r3, #3]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	3304      	adds	r3, #4
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b29a      	uxth	r2, r3
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	3305      	adds	r3, #5
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	b29b      	uxth	r3, r3
 800779a:	4313      	orrs	r3, r2
 800779c:	b29a      	uxth	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	799a      	ldrb	r2, [r3, #6]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	719a      	strb	r2, [r3, #6]
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b087      	sub	sp, #28
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	4613      	mov	r3, r2
 80077c2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d120      	bne.n	8007810 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	1e9a      	subs	r2, r3, #2
 80077d4:	88fb      	ldrh	r3, [r7, #6]
 80077d6:	4293      	cmp	r3, r2
 80077d8:	bf28      	it	cs
 80077da:	4613      	movcs	r3, r2
 80077dc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3302      	adds	r3, #2
 80077e2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077e4:	2300      	movs	r3, #0
 80077e6:	82fb      	strh	r3, [r7, #22]
 80077e8:	e00b      	b.n	8007802 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077ea:	8afb      	ldrh	r3, [r7, #22]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	781a      	ldrb	r2, [r3, #0]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	3301      	adds	r3, #1
 80077fa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80077fc:	8afb      	ldrh	r3, [r7, #22]
 80077fe:	3302      	adds	r3, #2
 8007800:	82fb      	strh	r3, [r7, #22]
 8007802:	8afa      	ldrh	r2, [r7, #22]
 8007804:	8abb      	ldrh	r3, [r7, #20]
 8007806:	429a      	cmp	r2, r3
 8007808:	d3ef      	bcc.n	80077ea <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
  }
}
 8007810:	bf00      	nop
 8007812:	371c      	adds	r7, #28
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	881a      	ldrh	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	b29b      	uxth	r3, r3
 8007830:	4413      	add	r3, r2
 8007832:	b29a      	uxth	r2, r3
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007844:	68fb      	ldr	r3, [r7, #12]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b086      	sub	sp, #24
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	4613      	mov	r3, r2
 800785e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007860:	2301      	movs	r3, #1
 8007862:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	789b      	ldrb	r3, [r3, #2]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d002      	beq.n	8007872 <USBH_CtlReq+0x20>
 800786c:	2b02      	cmp	r3, #2
 800786e:	d00f      	beq.n	8007890 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007870:	e027      	b.n	80078c2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	88fa      	ldrh	r2, [r7, #6]
 800787c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2202      	movs	r2, #2
 8007888:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800788a:	2301      	movs	r3, #1
 800788c:	75fb      	strb	r3, [r7, #23]
      break;
 800788e:	e018      	b.n	80078c2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f81b 	bl	80078cc <USBH_HandleControl>
 8007896:	4603      	mov	r3, r0
 8007898:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <USBH_CtlReq+0x54>
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d106      	bne.n	80078b4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2201      	movs	r2, #1
 80078aa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	761a      	strb	r2, [r3, #24]
      break;
 80078b2:	e005      	b.n	80078c0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d102      	bne.n	80078c0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	709a      	strb	r2, [r3, #2]
      break;
 80078c0:	bf00      	nop
  }
  return status;
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af02      	add	r7, sp, #8
 80078d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078d8:	2300      	movs	r3, #0
 80078da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7e1b      	ldrb	r3, [r3, #24]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b0a      	cmp	r3, #10
 80078e4:	f200 8158 	bhi.w	8007b98 <USBH_HandleControl+0x2cc>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <USBH_HandleControl+0x24>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	0800791d 	.word	0x0800791d
 80078f4:	08007937 	.word	0x08007937
 80078f8:	080079a1 	.word	0x080079a1
 80078fc:	080079c7 	.word	0x080079c7
 8007900:	080079ff 	.word	0x080079ff
 8007904:	08007a2b 	.word	0x08007a2b
 8007908:	08007a7d 	.word	0x08007a7d
 800790c:	08007a9f 	.word	0x08007a9f
 8007910:	08007adb 	.word	0x08007adb
 8007914:	08007b03 	.word	0x08007b03
 8007918:	08007b41 	.word	0x08007b41
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f103 0110 	add.w	r1, r3, #16
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	795b      	ldrb	r3, [r3, #5]
 8007926:	461a      	mov	r2, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f945 	bl	8007bb8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2202      	movs	r2, #2
 8007932:	761a      	strb	r2, [r3, #24]
      break;
 8007934:	e13b      	b.n	8007bae <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	795b      	ldrb	r3, [r3, #5]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fcc5 	bl	80082cc <USBH_LL_GetURBState>
 8007942:	4603      	mov	r3, r0
 8007944:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d11e      	bne.n	800798a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7c1b      	ldrb	r3, [r3, #16]
 8007950:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007954:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	8adb      	ldrh	r3, [r3, #22]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800795e:	7b7b      	ldrb	r3, [r7, #13]
 8007960:	2b80      	cmp	r3, #128	; 0x80
 8007962:	d103      	bne.n	800796c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2203      	movs	r2, #3
 8007968:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800796a:	e117      	b.n	8007b9c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2205      	movs	r2, #5
 8007970:	761a      	strb	r2, [r3, #24]
      break;
 8007972:	e113      	b.n	8007b9c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007974:	7b7b      	ldrb	r3, [r7, #13]
 8007976:	2b80      	cmp	r3, #128	; 0x80
 8007978:	d103      	bne.n	8007982 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2209      	movs	r2, #9
 800797e:	761a      	strb	r2, [r3, #24]
      break;
 8007980:	e10c      	b.n	8007b9c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2207      	movs	r2, #7
 8007986:	761a      	strb	r2, [r3, #24]
      break;
 8007988:	e108      	b.n	8007b9c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	2b04      	cmp	r3, #4
 800798e:	d003      	beq.n	8007998 <USBH_HandleControl+0xcc>
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b02      	cmp	r3, #2
 8007994:	f040 8102 	bne.w	8007b9c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	220b      	movs	r2, #11
 800799c:	761a      	strb	r2, [r3, #24]
      break;
 800799e:	e0fd      	b.n	8007b9c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6899      	ldr	r1, [r3, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	899a      	ldrh	r2, [r3, #12]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	791b      	ldrb	r3, [r3, #4]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f93c 	bl	8007c36 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2204      	movs	r2, #4
 80079c2:	761a      	strb	r2, [r3, #24]
      break;
 80079c4:	e0f3      	b.n	8007bae <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	791b      	ldrb	r3, [r3, #4]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fc7d 	bl	80082cc <USBH_LL_GetURBState>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d102      	bne.n	80079e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2209      	movs	r2, #9
 80079e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b05      	cmp	r3, #5
 80079e6:	d102      	bne.n	80079ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80079e8:	2303      	movs	r3, #3
 80079ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079ec:	e0d8      	b.n	8007ba0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	f040 80d5 	bne.w	8007ba0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	220b      	movs	r2, #11
 80079fa:	761a      	strb	r2, [r3, #24]
      break;
 80079fc:	e0d0      	b.n	8007ba0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6899      	ldr	r1, [r3, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	899a      	ldrh	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	7958      	ldrb	r0, [r3, #5]
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	4603      	mov	r3, r0
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f8eb 	bl	8007bec <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2206      	movs	r2, #6
 8007a26:	761a      	strb	r2, [r3, #24]
      break;
 8007a28:	e0c1      	b.n	8007bae <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	795b      	ldrb	r3, [r3, #5]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fc4b 	bl	80082cc <USBH_LL_GetURBState>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d103      	bne.n	8007a48 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2207      	movs	r2, #7
 8007a44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a46:	e0ad      	b.n	8007ba4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b05      	cmp	r3, #5
 8007a4c:	d105      	bne.n	8007a5a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	220c      	movs	r2, #12
 8007a52:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a54:	2303      	movs	r3, #3
 8007a56:	73fb      	strb	r3, [r7, #15]
      break;
 8007a58:	e0a4      	b.n	8007ba4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d103      	bne.n	8007a68 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2205      	movs	r2, #5
 8007a64:	761a      	strb	r2, [r3, #24]
      break;
 8007a66:	e09d      	b.n	8007ba4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	f040 809a 	bne.w	8007ba4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	220b      	movs	r2, #11
 8007a74:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a76:	2302      	movs	r3, #2
 8007a78:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7a:	e093      	b.n	8007ba4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	791b      	ldrb	r3, [r3, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	2100      	movs	r1, #0
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f8d6 	bl	8007c36 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2208      	movs	r2, #8
 8007a9a:	761a      	strb	r2, [r3, #24]

      break;
 8007a9c:	e087      	b.n	8007bae <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	791b      	ldrb	r3, [r3, #4]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fc11 	bl	80082cc <USBH_LL_GetURBState>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d105      	bne.n	8007ac0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	220d      	movs	r2, #13
 8007ab8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007abe:	e073      	b.n	8007ba8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d103      	bne.n	8007ace <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	220b      	movs	r2, #11
 8007aca:	761a      	strb	r2, [r3, #24]
      break;
 8007acc:	e06c      	b.n	8007ba8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b05      	cmp	r3, #5
 8007ad2:	d169      	bne.n	8007ba8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad8:	e066      	b.n	8007ba8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	795a      	ldrb	r2, [r3, #5]
 8007ade:	2301      	movs	r3, #1
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f87f 	bl	8007bec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	220a      	movs	r2, #10
 8007afe:	761a      	strb	r2, [r3, #24]
      break;
 8007b00:	e055      	b.n	8007bae <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	795b      	ldrb	r3, [r3, #5]
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fbdf 	bl	80082cc <USBH_LL_GetURBState>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d105      	bne.n	8007b24 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	220d      	movs	r2, #13
 8007b20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b22:	e043      	b.n	8007bac <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d103      	bne.n	8007b32 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2209      	movs	r2, #9
 8007b2e:	761a      	strb	r2, [r3, #24]
      break;
 8007b30:	e03c      	b.n	8007bac <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d139      	bne.n	8007bac <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	220b      	movs	r2, #11
 8007b3c:	761a      	strb	r2, [r3, #24]
      break;
 8007b3e:	e035      	b.n	8007bac <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	7e5b      	ldrb	r3, [r3, #25]
 8007b44:	3301      	adds	r3, #1
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	765a      	strb	r2, [r3, #25]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7e5b      	ldrb	r3, [r3, #25]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d806      	bhi.n	8007b62 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b60:	e025      	b.n	8007bae <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b68:	2106      	movs	r1, #6
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	795b      	ldrb	r3, [r3, #5]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f90c 	bl	8007d98 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	791b      	ldrb	r3, [r3, #4]
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f906 	bl	8007d98 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b92:	2302      	movs	r3, #2
 8007b94:	73fb      	strb	r3, [r7, #15]
      break;
 8007b96:	e00a      	b.n	8007bae <USBH_HandleControl+0x2e2>

    default:
      break;
 8007b98:	bf00      	nop
 8007b9a:	e008      	b.n	8007bae <USBH_HandleControl+0x2e2>
      break;
 8007b9c:	bf00      	nop
 8007b9e:	e006      	b.n	8007bae <USBH_HandleControl+0x2e2>
      break;
 8007ba0:	bf00      	nop
 8007ba2:	e004      	b.n	8007bae <USBH_HandleControl+0x2e2>
      break;
 8007ba4:	bf00      	nop
 8007ba6:	e002      	b.n	8007bae <USBH_HandleControl+0x2e2>
      break;
 8007ba8:	bf00      	nop
 8007baa:	e000      	b.n	8007bae <USBH_HandleControl+0x2e2>
      break;
 8007bac:	bf00      	nop
  }

  return status;
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af04      	add	r7, sp, #16
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bc6:	79f9      	ldrb	r1, [r7, #7]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9303      	str	r3, [sp, #12]
 8007bcc:	2308      	movs	r3, #8
 8007bce:	9302      	str	r3, [sp, #8]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	9301      	str	r3, [sp, #4]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	2200      	movs	r2, #0
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 fb44 	bl	800826a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af04      	add	r7, sp, #16
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	80fb      	strh	r3, [r7, #6]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c10:	7979      	ldrb	r1, [r7, #5]
 8007c12:	7e3b      	ldrb	r3, [r7, #24]
 8007c14:	9303      	str	r3, [sp, #12]
 8007c16:	88fb      	ldrh	r3, [r7, #6]
 8007c18:	9302      	str	r3, [sp, #8]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	9301      	str	r3, [sp, #4]
 8007c1e:	2301      	movs	r3, #1
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	2300      	movs	r3, #0
 8007c24:	2200      	movs	r2, #0
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 fb1f 	bl	800826a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b088      	sub	sp, #32
 8007c3a:	af04      	add	r7, sp, #16
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	4611      	mov	r1, r2
 8007c42:	461a      	mov	r2, r3
 8007c44:	460b      	mov	r3, r1
 8007c46:	80fb      	strh	r3, [r7, #6]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c4c:	7979      	ldrb	r1, [r7, #5]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	9303      	str	r3, [sp, #12]
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	9302      	str	r3, [sp, #8]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	2201      	movs	r2, #1
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 fb01 	bl	800826a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007c68:	2300      	movs	r3, #0

}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b088      	sub	sp, #32
 8007c76:	af04      	add	r7, sp, #16
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	461a      	mov	r2, r3
 8007c80:	460b      	mov	r3, r1
 8007c82:	80fb      	strh	r3, [r7, #6]
 8007c84:	4613      	mov	r3, r2
 8007c86:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c96:	7979      	ldrb	r1, [r7, #5]
 8007c98:	7e3b      	ldrb	r3, [r7, #24]
 8007c9a:	9303      	str	r3, [sp, #12]
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	9302      	str	r3, [sp, #8]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	9301      	str	r3, [sp, #4]
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	2302      	movs	r3, #2
 8007caa:	2200      	movs	r2, #0
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 fadc 	bl	800826a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af04      	add	r7, sp, #16
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	461a      	mov	r2, r3
 8007cca:	460b      	mov	r3, r1
 8007ccc:	80fb      	strh	r3, [r7, #6]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007cd2:	7979      	ldrb	r1, [r7, #5]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	9303      	str	r3, [sp, #12]
 8007cd8:	88fb      	ldrh	r3, [r7, #6]
 8007cda:	9302      	str	r3, [sp, #8]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fabe 	bl	800826a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af04      	add	r7, sp, #16
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	4608      	mov	r0, r1
 8007d02:	4611      	mov	r1, r2
 8007d04:	461a      	mov	r2, r3
 8007d06:	4603      	mov	r3, r0
 8007d08:	70fb      	strb	r3, [r7, #3]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70bb      	strb	r3, [r7, #2]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007d12:	7878      	ldrb	r0, [r7, #1]
 8007d14:	78ba      	ldrb	r2, [r7, #2]
 8007d16:	78f9      	ldrb	r1, [r7, #3]
 8007d18:	8b3b      	ldrh	r3, [r7, #24]
 8007d1a:	9302      	str	r3, [sp, #8]
 8007d1c:	7d3b      	ldrb	r3, [r7, #20]
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	7c3b      	ldrb	r3, [r7, #16]
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	4603      	mov	r3, r0
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa51 	bl	80081ce <USBH_LL_OpenPipe>

  return USBH_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007d42:	78fb      	ldrb	r3, [r7, #3]
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fa70 	bl	800822c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f836 	bl	8007dd4 <USBH_GetFreePipe>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d6c:	89fb      	ldrh	r3, [r7, #14]
 8007d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d00a      	beq.n	8007d8c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007d76:	78fa      	ldrb	r2, [r7, #3]
 8007d78:	89fb      	ldrh	r3, [r7, #14]
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	33e0      	adds	r3, #224	; 0xe0
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d8c:	89fb      	ldrh	r3, [r7, #14]
 8007d8e:	b2db      	uxtb	r3, r3
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007da4:	78fb      	ldrb	r3, [r7, #3]
 8007da6:	2b0a      	cmp	r3, #10
 8007da8:	d80d      	bhi.n	8007dc6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	33e0      	adds	r3, #224	; 0xe0
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	33e0      	adds	r3, #224	; 0xe0
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]
 8007de4:	e00f      	b.n	8007e06 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	33e0      	adds	r3, #224	; 0xe0
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d102      	bne.n	8007e00 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	e007      	b.n	8007e10 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	3301      	adds	r3, #1
 8007e04:	73fb      	strb	r3, [r7, #15]
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	2b0a      	cmp	r3, #10
 8007e0a:	d9ec      	bls.n	8007de6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007e20:	2201      	movs	r2, #1
 8007e22:	490e      	ldr	r1, [pc, #56]	; (8007e5c <MX_USB_HOST_Init+0x40>)
 8007e24:	480e      	ldr	r0, [pc, #56]	; (8007e60 <MX_USB_HOST_Init+0x44>)
 8007e26:	f7fe fc9f 	bl	8006768 <USBH_Init>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007e30:	f7f8 fdf0 	bl	8000a14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007e34:	490b      	ldr	r1, [pc, #44]	; (8007e64 <MX_USB_HOST_Init+0x48>)
 8007e36:	480a      	ldr	r0, [pc, #40]	; (8007e60 <MX_USB_HOST_Init+0x44>)
 8007e38:	f7fe fd24 	bl	8006884 <USBH_RegisterClass>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e42:	f7f8 fde7 	bl	8000a14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e46:	4806      	ldr	r0, [pc, #24]	; (8007e60 <MX_USB_HOST_Init+0x44>)
 8007e48:	f7fe fda8 	bl	800699c <USBH_Start>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e52:	f7f8 fddf 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e56:	bf00      	nop
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	08007e7d 	.word	0x08007e7d
 8007e60:	200001f8 	.word	0x200001f8
 8007e64:	2000000c 	.word	0x2000000c

08007e68 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e6c:	4802      	ldr	r0, [pc, #8]	; (8007e78 <MX_USB_HOST_Process+0x10>)
 8007e6e:	f7fe fda5 	bl	80069bc <USBH_Process>
}
 8007e72:	bf00      	nop
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	200001f8 	.word	0x200001f8

08007e7c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	460b      	mov	r3, r1
 8007e86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d819      	bhi.n	8007ec4 <USBH_UserProcess+0x48>
 8007e90:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <USBH_UserProcess+0x1c>)
 8007e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e96:	bf00      	nop
 8007e98:	08007ec5 	.word	0x08007ec5
 8007e9c:	08007eb5 	.word	0x08007eb5
 8007ea0:	08007ec5 	.word	0x08007ec5
 8007ea4:	08007ebd 	.word	0x08007ebd
 8007ea8:	08007ead 	.word	0x08007ead
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007eac:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <USBH_UserProcess+0x58>)
 8007eae:	2203      	movs	r2, #3
 8007eb0:	701a      	strb	r2, [r3, #0]
  break;
 8007eb2:	e008      	b.n	8007ec6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007eb4:	4b07      	ldr	r3, [pc, #28]	; (8007ed4 <USBH_UserProcess+0x58>)
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	701a      	strb	r2, [r3, #0]
  break;
 8007eba:	e004      	b.n	8007ec6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007ebc:	4b05      	ldr	r3, [pc, #20]	; (8007ed4 <USBH_UserProcess+0x58>)
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	701a      	strb	r2, [r3, #0]
  break;
 8007ec2:	e000      	b.n	8007ec6 <USBH_UserProcess+0x4a>

  default:
  break;
 8007ec4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	200000b4 	.word	0x200000b4

08007ed8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08a      	sub	sp, #40	; 0x28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ee0:	f107 0314 	add.w	r3, r7, #20
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	601a      	str	r2, [r3, #0]
 8007ee8:	605a      	str	r2, [r3, #4]
 8007eea:	609a      	str	r2, [r3, #8]
 8007eec:	60da      	str	r2, [r3, #12]
 8007eee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ef8:	d147      	bne.n	8007f8a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007efa:	2300      	movs	r3, #0
 8007efc:	613b      	str	r3, [r7, #16]
 8007efe:	4b25      	ldr	r3, [pc, #148]	; (8007f94 <HAL_HCD_MspInit+0xbc>)
 8007f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f02:	4a24      	ldr	r2, [pc, #144]	; (8007f94 <HAL_HCD_MspInit+0xbc>)
 8007f04:	f043 0301 	orr.w	r3, r3, #1
 8007f08:	6313      	str	r3, [r2, #48]	; 0x30
 8007f0a:	4b22      	ldr	r3, [pc, #136]	; (8007f94 <HAL_HCD_MspInit+0xbc>)
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	613b      	str	r3, [r7, #16]
 8007f14:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f20:	2300      	movs	r3, #0
 8007f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f24:	f107 0314 	add.w	r3, r7, #20
 8007f28:	4619      	mov	r1, r3
 8007f2a:	481b      	ldr	r0, [pc, #108]	; (8007f98 <HAL_HCD_MspInit+0xc0>)
 8007f2c:	f7f9 f942 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007f30:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f36:	2302      	movs	r3, #2
 8007f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f42:	230a      	movs	r3, #10
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f46:	f107 0314 	add.w	r3, r7, #20
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4812      	ldr	r0, [pc, #72]	; (8007f98 <HAL_HCD_MspInit+0xc0>)
 8007f4e:	f7f9 f931 	bl	80011b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f52:	4b10      	ldr	r3, [pc, #64]	; (8007f94 <HAL_HCD_MspInit+0xbc>)
 8007f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f56:	4a0f      	ldr	r2, [pc, #60]	; (8007f94 <HAL_HCD_MspInit+0xbc>)
 8007f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f5c:	6353      	str	r3, [r2, #52]	; 0x34
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	4b0c      	ldr	r3, [pc, #48]	; (8007f94 <HAL_HCD_MspInit+0xbc>)
 8007f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f66:	4a0b      	ldr	r2, [pc, #44]	; (8007f94 <HAL_HCD_MspInit+0xbc>)
 8007f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8007f6e:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <HAL_HCD_MspInit+0xbc>)
 8007f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	2043      	movs	r0, #67	; 0x43
 8007f80:	f7f9 f8e1 	bl	8001146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f84:	2043      	movs	r0, #67	; 0x43
 8007f86:	f7f9 f8fa 	bl	800117e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f8a:	bf00      	nop
 8007f8c:	3728      	adds	r7, #40	; 0x28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	40023800 	.word	0x40023800
 8007f98:	40020000 	.word	0x40020000

08007f9c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7ff f8d9 	bl	8007162 <USBH_LL_IncTimer>
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff f911 	bl	80071ee <USBH_LL_Connect>
}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7ff f91a 	bl	800721c <USBH_LL_Disconnect>
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800801a:	4618      	mov	r0, r3
 800801c:	f7ff f8cb 	bl	80071b6 <USBH_LL_PortEnabled>
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff f8cb 	bl	80071d2 <USBH_LL_PortDisabled>
}
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008052:	2b01      	cmp	r3, #1
 8008054:	d12a      	bne.n	80080ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008056:	4a18      	ldr	r2, [pc, #96]	; (80080b8 <USBH_LL_Init+0x74>)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a15      	ldr	r2, [pc, #84]	; (80080b8 <USBH_LL_Init+0x74>)
 8008062:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008066:	4b14      	ldr	r3, [pc, #80]	; (80080b8 <USBH_LL_Init+0x74>)
 8008068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800806c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800806e:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <USBH_LL_Init+0x74>)
 8008070:	2208      	movs	r2, #8
 8008072:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008074:	4b10      	ldr	r3, [pc, #64]	; (80080b8 <USBH_LL_Init+0x74>)
 8008076:	2201      	movs	r2, #1
 8008078:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800807a:	4b0f      	ldr	r3, [pc, #60]	; (80080b8 <USBH_LL_Init+0x74>)
 800807c:	2200      	movs	r2, #0
 800807e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008080:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <USBH_LL_Init+0x74>)
 8008082:	2202      	movs	r2, #2
 8008084:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008086:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <USBH_LL_Init+0x74>)
 8008088:	2200      	movs	r2, #0
 800808a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800808c:	480a      	ldr	r0, [pc, #40]	; (80080b8 <USBH_LL_Init+0x74>)
 800808e:	f7f9 fa44 	bl	800151a <HAL_HCD_Init>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008098:	f7f8 fcbc 	bl	8000a14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800809c:	4806      	ldr	r0, [pc, #24]	; (80080b8 <USBH_LL_Init+0x74>)
 800809e:	f7f9 fe47 	bl	8001d30 <HAL_HCD_GetCurrentFrame>
 80080a2:	4603      	mov	r3, r0
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff f84c 	bl	8007144 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	200005d0 	.word	0x200005d0

080080bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7f9 fdb4 	bl	8001c40 <HAL_HCD_Start>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 f95c 	bl	800839c <USBH_Get_USB_Status>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008108:	4618      	mov	r0, r3
 800810a:	f7f9 fdbc 	bl	8001c86 <HAL_HCD_Stop>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f941 	bl	800839c <USBH_Get_USB_Status>
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008130:	2301      	movs	r3, #1
 8008132:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800813a:	4618      	mov	r0, r3
 800813c:	f7f9 fe06 	bl	8001d4c <HAL_HCD_GetCurrentSpeed>
 8008140:	4603      	mov	r3, r0
 8008142:	2b01      	cmp	r3, #1
 8008144:	d007      	beq.n	8008156 <USBH_LL_GetSpeed+0x2e>
 8008146:	2b01      	cmp	r3, #1
 8008148:	d302      	bcc.n	8008150 <USBH_LL_GetSpeed+0x28>
 800814a:	2b02      	cmp	r3, #2
 800814c:	d006      	beq.n	800815c <USBH_LL_GetSpeed+0x34>
 800814e:	e008      	b.n	8008162 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
    break;
 8008154:	e008      	b.n	8008168 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008156:	2301      	movs	r3, #1
 8008158:	73fb      	strb	r3, [r7, #15]
    break;
 800815a:	e005      	b.n	8008168 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800815c:	2302      	movs	r3, #2
 800815e:	73fb      	strb	r3, [r7, #15]
    break;
 8008160:	e002      	b.n	8008168 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008162:	2301      	movs	r3, #1
 8008164:	73fb      	strb	r3, [r7, #15]
    break;
 8008166:	bf00      	nop
  }
  return  speed;
 8008168:	7bfb      	ldrb	r3, [r7, #15]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008188:	4618      	mov	r0, r3
 800818a:	f7f9 fd99 	bl	8001cc0 <HAL_HCD_ResetPort>
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	4618      	mov	r0, r3
 8008196:	f000 f901 	bl	800839c <USBH_Get_USB_Status>
 800819a:	4603      	mov	r3, r0
 800819c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800819e:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ba:	78fa      	ldrb	r2, [r7, #3]
 80081bc:	4611      	mov	r1, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f7f9 fda1 	bl	8001d06 <HAL_HCD_HC_GetXferCount>
 80081c4:	4603      	mov	r3, r0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081ce:	b590      	push	{r4, r7, lr}
 80081d0:	b089      	sub	sp, #36	; 0x24
 80081d2:	af04      	add	r7, sp, #16
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	4608      	mov	r0, r1
 80081d8:	4611      	mov	r1, r2
 80081da:	461a      	mov	r2, r3
 80081dc:	4603      	mov	r3, r0
 80081de:	70fb      	strb	r3, [r7, #3]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70bb      	strb	r3, [r7, #2]
 80081e4:	4613      	mov	r3, r2
 80081e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081f6:	787c      	ldrb	r4, [r7, #1]
 80081f8:	78ba      	ldrb	r2, [r7, #2]
 80081fa:	78f9      	ldrb	r1, [r7, #3]
 80081fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081fe:	9302      	str	r3, [sp, #8]
 8008200:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	f897 3020 	ldrb.w	r3, [r7, #32]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	4623      	mov	r3, r4
 800820e:	f7f9 f9e6 	bl	80015de <HAL_HCD_HC_Init>
 8008212:	4603      	mov	r3, r0
 8008214:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	4618      	mov	r0, r3
 800821a:	f000 f8bf 	bl	800839c <USBH_Get_USB_Status>
 800821e:	4603      	mov	r3, r0
 8008220:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008222:	7bbb      	ldrb	r3, [r7, #14]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	bd90      	pop	{r4, r7, pc}

0800822c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008246:	78fa      	ldrb	r2, [r7, #3]
 8008248:	4611      	mov	r1, r2
 800824a:	4618      	mov	r0, r3
 800824c:	f7f9 fa5f 	bl	800170e <HAL_HCD_HC_Halt>
 8008250:	4603      	mov	r3, r0
 8008252:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	4618      	mov	r0, r3
 8008258:	f000 f8a0 	bl	800839c <USBH_Get_USB_Status>
 800825c:	4603      	mov	r3, r0
 800825e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008260:	7bbb      	ldrb	r3, [r7, #14]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800826a:	b590      	push	{r4, r7, lr}
 800826c:	b089      	sub	sp, #36	; 0x24
 800826e:	af04      	add	r7, sp, #16
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	4608      	mov	r0, r1
 8008274:	4611      	mov	r1, r2
 8008276:	461a      	mov	r2, r3
 8008278:	4603      	mov	r3, r0
 800827a:	70fb      	strb	r3, [r7, #3]
 800827c:	460b      	mov	r3, r1
 800827e:	70bb      	strb	r3, [r7, #2]
 8008280:	4613      	mov	r3, r2
 8008282:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008292:	787c      	ldrb	r4, [r7, #1]
 8008294:	78ba      	ldrb	r2, [r7, #2]
 8008296:	78f9      	ldrb	r1, [r7, #3]
 8008298:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800829c:	9303      	str	r3, [sp, #12]
 800829e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	4623      	mov	r3, r4
 80082ae:	f7f9 fa51 	bl	8001754 <HAL_HCD_HC_SubmitRequest>
 80082b2:	4603      	mov	r3, r0
 80082b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 f86f 	bl	800839c <USBH_Get_USB_Status>
 80082be:	4603      	mov	r3, r0
 80082c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd90      	pop	{r4, r7, pc}

080082cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	4611      	mov	r1, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7f9 fcfa 	bl	8001cdc <HAL_HCD_HC_GetURBState>
 80082e8:	4603      	mov	r3, r0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008304:	2b01      	cmp	r3, #1
 8008306:	d103      	bne.n	8008310 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	4618      	mov	r0, r3
 800830c:	f000 f872 	bl	80083f4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008310:	20c8      	movs	r0, #200	; 0xc8
 8008312:	f7f8 fe1b 	bl	8000f4c <HAL_Delay>
  return USBH_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
 800832c:	4613      	mov	r3, r2
 800832e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008336:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008338:	78fa      	ldrb	r2, [r7, #3]
 800833a:	68f9      	ldr	r1, [r7, #12]
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	440b      	add	r3, r1
 8008346:	333b      	adds	r3, #59	; 0x3b
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800834e:	78fa      	ldrb	r2, [r7, #3]
 8008350:	68f9      	ldr	r1, [r7, #12]
 8008352:	4613      	mov	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	440b      	add	r3, r1
 800835c:	3350      	adds	r3, #80	; 0x50
 800835e:	78ba      	ldrb	r2, [r7, #2]
 8008360:	701a      	strb	r2, [r3, #0]
 8008362:	e009      	b.n	8008378 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008364:	78fa      	ldrb	r2, [r7, #3]
 8008366:	68f9      	ldr	r1, [r7, #12]
 8008368:	4613      	mov	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	440b      	add	r3, r1
 8008372:	3351      	adds	r3, #81	; 0x51
 8008374:	78ba      	ldrb	r2, [r7, #2]
 8008376:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7f8 fddc 	bl	8000f4c <HAL_Delay>
}
 8008394:	bf00      	nop
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d817      	bhi.n	80083e0 <USBH_Get_USB_Status+0x44>
 80083b0:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <USBH_Get_USB_Status+0x1c>)
 80083b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b6:	bf00      	nop
 80083b8:	080083c9 	.word	0x080083c9
 80083bc:	080083cf 	.word	0x080083cf
 80083c0:	080083d5 	.word	0x080083d5
 80083c4:	080083db 	.word	0x080083db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73fb      	strb	r3, [r7, #15]
    break;
 80083cc:	e00b      	b.n	80083e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80083ce:	2302      	movs	r3, #2
 80083d0:	73fb      	strb	r3, [r7, #15]
    break;
 80083d2:	e008      	b.n	80083e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083d4:	2301      	movs	r3, #1
 80083d6:	73fb      	strb	r3, [r7, #15]
    break;
 80083d8:	e005      	b.n	80083e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083da:	2302      	movs	r3, #2
 80083dc:	73fb      	strb	r3, [r7, #15]
    break;
 80083de:	e002      	b.n	80083e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083e0:	2302      	movs	r3, #2
 80083e2:	73fb      	strb	r3, [r7, #15]
    break;
 80083e4:	bf00      	nop
  }
  return usb_status;
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d102      	bne.n	800840e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008408:	2301      	movs	r3, #1
 800840a:	73fb      	strb	r3, [r7, #15]
 800840c:	e001      	b.n	8008412 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	461a      	mov	r2, r3
 8008416:	2101      	movs	r1, #1
 8008418:	4803      	ldr	r0, [pc, #12]	; (8008428 <MX_DriverVbusFS+0x34>)
 800841a:	f7f9 f865 	bl	80014e8 <HAL_GPIO_WritePin>
}
 800841e:	bf00      	nop
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	40020800 	.word	0x40020800

0800842c <__errno>:
 800842c:	4b01      	ldr	r3, [pc, #4]	; (8008434 <__errno+0x8>)
 800842e:	6818      	ldr	r0, [r3, #0]
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	2000002c 	.word	0x2000002c

08008438 <__libc_init_array>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	4e0d      	ldr	r6, [pc, #52]	; (8008470 <__libc_init_array+0x38>)
 800843c:	4c0d      	ldr	r4, [pc, #52]	; (8008474 <__libc_init_array+0x3c>)
 800843e:	1ba4      	subs	r4, r4, r6
 8008440:	10a4      	asrs	r4, r4, #2
 8008442:	2500      	movs	r5, #0
 8008444:	42a5      	cmp	r5, r4
 8008446:	d109      	bne.n	800845c <__libc_init_array+0x24>
 8008448:	4e0b      	ldr	r6, [pc, #44]	; (8008478 <__libc_init_array+0x40>)
 800844a:	4c0c      	ldr	r4, [pc, #48]	; (800847c <__libc_init_array+0x44>)
 800844c:	f000 f8ea 	bl	8008624 <_init>
 8008450:	1ba4      	subs	r4, r4, r6
 8008452:	10a4      	asrs	r4, r4, #2
 8008454:	2500      	movs	r5, #0
 8008456:	42a5      	cmp	r5, r4
 8008458:	d105      	bne.n	8008466 <__libc_init_array+0x2e>
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008460:	4798      	blx	r3
 8008462:	3501      	adds	r5, #1
 8008464:	e7ee      	b.n	8008444 <__libc_init_array+0xc>
 8008466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800846a:	4798      	blx	r3
 800846c:	3501      	adds	r5, #1
 800846e:	e7f2      	b.n	8008456 <__libc_init_array+0x1e>
 8008470:	08008660 	.word	0x08008660
 8008474:	08008660 	.word	0x08008660
 8008478:	08008660 	.word	0x08008660
 800847c:	08008664 	.word	0x08008664

08008480 <malloc>:
 8008480:	4b02      	ldr	r3, [pc, #8]	; (800848c <malloc+0xc>)
 8008482:	4601      	mov	r1, r0
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	f000 b861 	b.w	800854c <_malloc_r>
 800848a:	bf00      	nop
 800848c:	2000002c 	.word	0x2000002c

08008490 <free>:
 8008490:	4b02      	ldr	r3, [pc, #8]	; (800849c <free+0xc>)
 8008492:	4601      	mov	r1, r0
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	f000 b80b 	b.w	80084b0 <_free_r>
 800849a:	bf00      	nop
 800849c:	2000002c 	.word	0x2000002c

080084a0 <memset>:
 80084a0:	4402      	add	r2, r0
 80084a2:	4603      	mov	r3, r0
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d100      	bne.n	80084aa <memset+0xa>
 80084a8:	4770      	bx	lr
 80084aa:	f803 1b01 	strb.w	r1, [r3], #1
 80084ae:	e7f9      	b.n	80084a4 <memset+0x4>

080084b0 <_free_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4605      	mov	r5, r0
 80084b4:	2900      	cmp	r1, #0
 80084b6:	d045      	beq.n	8008544 <_free_r+0x94>
 80084b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084bc:	1f0c      	subs	r4, r1, #4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bfb8      	it	lt
 80084c2:	18e4      	addlt	r4, r4, r3
 80084c4:	f000 f8ac 	bl	8008620 <__malloc_lock>
 80084c8:	4a1f      	ldr	r2, [pc, #124]	; (8008548 <_free_r+0x98>)
 80084ca:	6813      	ldr	r3, [r2, #0]
 80084cc:	4610      	mov	r0, r2
 80084ce:	b933      	cbnz	r3, 80084de <_free_r+0x2e>
 80084d0:	6063      	str	r3, [r4, #4]
 80084d2:	6014      	str	r4, [r2, #0]
 80084d4:	4628      	mov	r0, r5
 80084d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084da:	f000 b8a2 	b.w	8008622 <__malloc_unlock>
 80084de:	42a3      	cmp	r3, r4
 80084e0:	d90c      	bls.n	80084fc <_free_r+0x4c>
 80084e2:	6821      	ldr	r1, [r4, #0]
 80084e4:	1862      	adds	r2, r4, r1
 80084e6:	4293      	cmp	r3, r2
 80084e8:	bf04      	itt	eq
 80084ea:	681a      	ldreq	r2, [r3, #0]
 80084ec:	685b      	ldreq	r3, [r3, #4]
 80084ee:	6063      	str	r3, [r4, #4]
 80084f0:	bf04      	itt	eq
 80084f2:	1852      	addeq	r2, r2, r1
 80084f4:	6022      	streq	r2, [r4, #0]
 80084f6:	6004      	str	r4, [r0, #0]
 80084f8:	e7ec      	b.n	80084d4 <_free_r+0x24>
 80084fa:	4613      	mov	r3, r2
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	b10a      	cbz	r2, 8008504 <_free_r+0x54>
 8008500:	42a2      	cmp	r2, r4
 8008502:	d9fa      	bls.n	80084fa <_free_r+0x4a>
 8008504:	6819      	ldr	r1, [r3, #0]
 8008506:	1858      	adds	r0, r3, r1
 8008508:	42a0      	cmp	r0, r4
 800850a:	d10b      	bne.n	8008524 <_free_r+0x74>
 800850c:	6820      	ldr	r0, [r4, #0]
 800850e:	4401      	add	r1, r0
 8008510:	1858      	adds	r0, r3, r1
 8008512:	4282      	cmp	r2, r0
 8008514:	6019      	str	r1, [r3, #0]
 8008516:	d1dd      	bne.n	80084d4 <_free_r+0x24>
 8008518:	6810      	ldr	r0, [r2, #0]
 800851a:	6852      	ldr	r2, [r2, #4]
 800851c:	605a      	str	r2, [r3, #4]
 800851e:	4401      	add	r1, r0
 8008520:	6019      	str	r1, [r3, #0]
 8008522:	e7d7      	b.n	80084d4 <_free_r+0x24>
 8008524:	d902      	bls.n	800852c <_free_r+0x7c>
 8008526:	230c      	movs	r3, #12
 8008528:	602b      	str	r3, [r5, #0]
 800852a:	e7d3      	b.n	80084d4 <_free_r+0x24>
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	1821      	adds	r1, r4, r0
 8008530:	428a      	cmp	r2, r1
 8008532:	bf04      	itt	eq
 8008534:	6811      	ldreq	r1, [r2, #0]
 8008536:	6852      	ldreq	r2, [r2, #4]
 8008538:	6062      	str	r2, [r4, #4]
 800853a:	bf04      	itt	eq
 800853c:	1809      	addeq	r1, r1, r0
 800853e:	6021      	streq	r1, [r4, #0]
 8008540:	605c      	str	r4, [r3, #4]
 8008542:	e7c7      	b.n	80084d4 <_free_r+0x24>
 8008544:	bd38      	pop	{r3, r4, r5, pc}
 8008546:	bf00      	nop
 8008548:	200000b8 	.word	0x200000b8

0800854c <_malloc_r>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	1ccd      	adds	r5, r1, #3
 8008550:	f025 0503 	bic.w	r5, r5, #3
 8008554:	3508      	adds	r5, #8
 8008556:	2d0c      	cmp	r5, #12
 8008558:	bf38      	it	cc
 800855a:	250c      	movcc	r5, #12
 800855c:	2d00      	cmp	r5, #0
 800855e:	4606      	mov	r6, r0
 8008560:	db01      	blt.n	8008566 <_malloc_r+0x1a>
 8008562:	42a9      	cmp	r1, r5
 8008564:	d903      	bls.n	800856e <_malloc_r+0x22>
 8008566:	230c      	movs	r3, #12
 8008568:	6033      	str	r3, [r6, #0]
 800856a:	2000      	movs	r0, #0
 800856c:	bd70      	pop	{r4, r5, r6, pc}
 800856e:	f000 f857 	bl	8008620 <__malloc_lock>
 8008572:	4a21      	ldr	r2, [pc, #132]	; (80085f8 <_malloc_r+0xac>)
 8008574:	6814      	ldr	r4, [r2, #0]
 8008576:	4621      	mov	r1, r4
 8008578:	b991      	cbnz	r1, 80085a0 <_malloc_r+0x54>
 800857a:	4c20      	ldr	r4, [pc, #128]	; (80085fc <_malloc_r+0xb0>)
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	b91b      	cbnz	r3, 8008588 <_malloc_r+0x3c>
 8008580:	4630      	mov	r0, r6
 8008582:	f000 f83d 	bl	8008600 <_sbrk_r>
 8008586:	6020      	str	r0, [r4, #0]
 8008588:	4629      	mov	r1, r5
 800858a:	4630      	mov	r0, r6
 800858c:	f000 f838 	bl	8008600 <_sbrk_r>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d124      	bne.n	80085de <_malloc_r+0x92>
 8008594:	230c      	movs	r3, #12
 8008596:	6033      	str	r3, [r6, #0]
 8008598:	4630      	mov	r0, r6
 800859a:	f000 f842 	bl	8008622 <__malloc_unlock>
 800859e:	e7e4      	b.n	800856a <_malloc_r+0x1e>
 80085a0:	680b      	ldr	r3, [r1, #0]
 80085a2:	1b5b      	subs	r3, r3, r5
 80085a4:	d418      	bmi.n	80085d8 <_malloc_r+0x8c>
 80085a6:	2b0b      	cmp	r3, #11
 80085a8:	d90f      	bls.n	80085ca <_malloc_r+0x7e>
 80085aa:	600b      	str	r3, [r1, #0]
 80085ac:	50cd      	str	r5, [r1, r3]
 80085ae:	18cc      	adds	r4, r1, r3
 80085b0:	4630      	mov	r0, r6
 80085b2:	f000 f836 	bl	8008622 <__malloc_unlock>
 80085b6:	f104 000b 	add.w	r0, r4, #11
 80085ba:	1d23      	adds	r3, r4, #4
 80085bc:	f020 0007 	bic.w	r0, r0, #7
 80085c0:	1ac3      	subs	r3, r0, r3
 80085c2:	d0d3      	beq.n	800856c <_malloc_r+0x20>
 80085c4:	425a      	negs	r2, r3
 80085c6:	50e2      	str	r2, [r4, r3]
 80085c8:	e7d0      	b.n	800856c <_malloc_r+0x20>
 80085ca:	428c      	cmp	r4, r1
 80085cc:	684b      	ldr	r3, [r1, #4]
 80085ce:	bf16      	itet	ne
 80085d0:	6063      	strne	r3, [r4, #4]
 80085d2:	6013      	streq	r3, [r2, #0]
 80085d4:	460c      	movne	r4, r1
 80085d6:	e7eb      	b.n	80085b0 <_malloc_r+0x64>
 80085d8:	460c      	mov	r4, r1
 80085da:	6849      	ldr	r1, [r1, #4]
 80085dc:	e7cc      	b.n	8008578 <_malloc_r+0x2c>
 80085de:	1cc4      	adds	r4, r0, #3
 80085e0:	f024 0403 	bic.w	r4, r4, #3
 80085e4:	42a0      	cmp	r0, r4
 80085e6:	d005      	beq.n	80085f4 <_malloc_r+0xa8>
 80085e8:	1a21      	subs	r1, r4, r0
 80085ea:	4630      	mov	r0, r6
 80085ec:	f000 f808 	bl	8008600 <_sbrk_r>
 80085f0:	3001      	adds	r0, #1
 80085f2:	d0cf      	beq.n	8008594 <_malloc_r+0x48>
 80085f4:	6025      	str	r5, [r4, #0]
 80085f6:	e7db      	b.n	80085b0 <_malloc_r+0x64>
 80085f8:	200000b8 	.word	0x200000b8
 80085fc:	200000bc 	.word	0x200000bc

08008600 <_sbrk_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4c06      	ldr	r4, [pc, #24]	; (800861c <_sbrk_r+0x1c>)
 8008604:	2300      	movs	r3, #0
 8008606:	4605      	mov	r5, r0
 8008608:	4608      	mov	r0, r1
 800860a:	6023      	str	r3, [r4, #0]
 800860c:	f7f8 fbb6 	bl	8000d7c <_sbrk>
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	d102      	bne.n	800861a <_sbrk_r+0x1a>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	b103      	cbz	r3, 800861a <_sbrk_r+0x1a>
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	20000894 	.word	0x20000894

08008620 <__malloc_lock>:
 8008620:	4770      	bx	lr

08008622 <__malloc_unlock>:
 8008622:	4770      	bx	lr

08008624 <_init>:
 8008624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008626:	bf00      	nop
 8008628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800862a:	bc08      	pop	{r3}
 800862c:	469e      	mov	lr, r3
 800862e:	4770      	bx	lr

08008630 <_fini>:
 8008630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008632:	bf00      	nop
 8008634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008636:	bc08      	pop	{r3}
 8008638:	469e      	mov	lr, r3
 800863a:	4770      	bx	lr
