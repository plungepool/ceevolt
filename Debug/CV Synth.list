
CV Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a128  0800a128  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a130  0800a130  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a130  0800a130  0001a130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a134  0800a134  0001a134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  20000090  0800a1c8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008fc  0800a1c8  000208fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c76c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cfc  00000000  00000000  0003c82c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001448  00000000  00000000  00040528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  00041970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000255d2  00000000  00000000  00042c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000131d7  00000000  00000000  000681fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce1fa  00000000  00000000  0007b3d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001495cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c34  00000000  00000000  00149648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a020 	.word	0x0800a020

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a020 	.word	0x0800a020

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fd8e 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f838 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f992 	bl	80008a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000580:	f000 f970 	bl	8000864 <MX_DMA_Init>
  MX_I2C1_Init();
 8000584:	f000 f8b2 	bl	80006ec <MX_I2C1_Init>
  MX_I2S3_Init();
 8000588:	f000 f8de 	bl	8000748 <MX_I2S3_Init>
  MX_SPI1_Init();
 800058c:	f000 f90a 	bl	80007a4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000590:	f008 face 	bl	8008b30 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f93c 	bl	8000810 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	  	  HAL_UART_Receive_DMA(&huart2, RxData, 3);
 8000598:	2203      	movs	r2, #3
 800059a:	4910      	ldr	r1, [pc, #64]	; (80005dc <main+0x6c>)
 800059c:	4810      	ldr	r0, [pc, #64]	; (80005e0 <main+0x70>)
 800059e:	f004 fd99 	bl	80050d4 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005a2:	f008 faeb 	bl	8008b7c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    		//HAL_UART_Transmit(&huart2, TxData, 13, 10);
    		printf("\n");
 80005a6:	200a      	movs	r0, #10
 80005a8:	f008 fecc 	bl	8009344 <putchar>

    printf("Status is 0x%X, pitch is 0x%X, velocity is 0x%X \n", RxData[0], RxData[1], RxData[2]);
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <main+0x6c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <main+0x6c>)
 80005b6:	785b      	ldrb	r3, [r3, #1]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <main+0x6c>)
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <main+0x74>)
 80005c4:	f008 fea6 	bl	8009314 <iprintf>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <main+0x78>)
 80005ce:	f001 fc4a 	bl	8001e66 <HAL_GPIO_TogglePin>
    HAL_Delay(2000);
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	f000 fdcf 	bl	8001178 <HAL_Delay>
    MX_USB_HOST_Process();
 80005da:	e7e2      	b.n	80005a2 <main+0x32>
 80005dc:	200001cc 	.word	0x200001cc
 80005e0:	200001d0 	.word	0x200001d0
 80005e4:	0800a038 	.word	0x0800a038
 80005e8:	40020c00 	.word	0x40020c00

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b098      	sub	sp, #96	; 0x60
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f008 fdda 	bl	80091b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemClock_Config+0xf8>)
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	4a2f      	ldr	r2, [pc, #188]	; (80006e4 <SystemClock_Config+0xf8>)
 8000628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062c:	6413      	str	r3, [r2, #64]	; 0x40
 800062e:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <SystemClock_Config+0xf8>)
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <SystemClock_Config+0xfc>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a29      	ldr	r2, [pc, #164]	; (80006e8 <SystemClock_Config+0xfc>)
 8000644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000648:	6013      	str	r3, [r2, #0]
 800064a:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <SystemClock_Config+0xfc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000656:	2301      	movs	r3, #1
 8000658:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000664:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066a:	2304      	movs	r3, #4
 800066c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800066e:	2360      	movs	r3, #96	; 0x60
 8000670:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000672:	2306      	movs	r3, #6
 8000674:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000676:	2304      	movs	r3, #4
 8000678:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fed6 	bl	8004430 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800068a:	f000 fa09 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2101      	movs	r1, #1
 80006ac:	4618      	mov	r0, r3
 80006ae:	f004 f92f 	bl	8004910 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006b8:	f000 f9f2 	bl	8000aa0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006bc:	2301      	movs	r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80006c0:	2332      	movs	r3, #50	; 0x32
 80006c2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 fb11 	bl	8004cf4 <HAL_RCCEx_PeriphCLKConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80006d8:	f000 f9e2 	bl	8000aa0 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3760      	adds	r7, #96	; 0x60
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f003 f8a9 	bl	8003880 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 f9b4 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000120 	.word	0x20000120
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_I2S3_Init+0x54>)
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <MX_I2S3_Init+0x58>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2S3_Init+0x54>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_I2S3_Init+0x54>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_I2S3_Init+0x54>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_I2S3_Init+0x54>)
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_I2S3_Init+0x54>)
 8000770:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000774:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_I2S3_Init+0x54>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_I2S3_Init+0x54>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_I2S3_Init+0x54>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2S3_Init+0x54>)
 800078a:	f003 f9b1 	bl	8003af0 <HAL_I2S_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000794:	f000 f984 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000210 	.word	0x20000210
 80007a0:	40003c00 	.word	0x40003c00

080007a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_SPI1_Init+0x64>)
 80007aa:	4a18      	ldr	r2, [pc, #96]	; (800080c <MX_SPI1_Init+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_SPI1_Init+0x64>)
 80007b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_SPI1_Init+0x64>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_SPI1_Init+0x64>)
 80007f0:	220a      	movs	r2, #10
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_SPI1_Init+0x64>)
 80007f6:	f004 fbbb 	bl	8004f70 <HAL_SPI_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000800:	f000 f94e 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000174 	.word	0x20000174
 800080c:	40013000 	.word	0x40013000

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART2_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800081c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000848:	f004 fbf6 	bl	8005038 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f925 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200001d0 	.word	0x200001d0
 8000860:	40004400 	.word	0x40004400

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_DMA_Init+0x3c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <MX_DMA_Init+0x3c>)
 8000874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_DMA_Init+0x3c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2010      	movs	r0, #16
 800088c:	f000 fd71 	bl	8001372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000890:	2010      	movs	r0, #16
 8000892:	f000 fd8a 	bl	80013aa <HAL_NVIC_EnableIRQ>

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	4b71      	ldr	r3, [pc, #452]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a70      	ldr	r2, [pc, #448]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b6e      	ldr	r3, [pc, #440]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0310 	and.w	r3, r3, #16
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	4b6a      	ldr	r3, [pc, #424]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a69      	ldr	r2, [pc, #420]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b67      	ldr	r3, [pc, #412]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b63      	ldr	r3, [pc, #396]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a62      	ldr	r2, [pc, #392]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b60      	ldr	r3, [pc, #384]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b5c      	ldr	r3, [pc, #368]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a5b      	ldr	r2, [pc, #364]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b59      	ldr	r3, [pc, #356]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b55      	ldr	r3, [pc, #340]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a54      	ldr	r2, [pc, #336]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b52      	ldr	r3, [pc, #328]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b4e      	ldr	r3, [pc, #312]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a4d      	ldr	r2, [pc, #308]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <MX_GPIO_Init+0x1e0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2108      	movs	r1, #8
 8000966:	4848      	ldr	r0, [pc, #288]	; (8000a88 <MX_GPIO_Init+0x1e4>)
 8000968:	f001 fa64 	bl	8001e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2101      	movs	r1, #1
 8000970:	4846      	ldr	r0, [pc, #280]	; (8000a8c <MX_GPIO_Init+0x1e8>)
 8000972:	f001 fa5f 	bl	8001e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000976:	2200      	movs	r2, #0
 8000978:	f24f 0110 	movw	r1, #61456	; 0xf010
 800097c:	4844      	ldr	r0, [pc, #272]	; (8000a90 <MX_GPIO_Init+0x1ec>)
 800097e:	f001 fa59 	bl	8001e34 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000982:	2308      	movs	r3, #8
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	483b      	ldr	r0, [pc, #236]	; (8000a88 <MX_GPIO_Init+0x1e4>)
 800099a:	f001 f8b1 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800099e:	2301      	movs	r3, #1
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4835      	ldr	r0, [pc, #212]	; (8000a8c <MX_GPIO_Init+0x1e8>)
 80009b6:	f001 f8a3 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009ba:	2308      	movs	r3, #8
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ca:	2305      	movs	r3, #5
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	482d      	ldr	r0, [pc, #180]	; (8000a8c <MX_GPIO_Init+0x1e8>)
 80009d6:	f001 f893 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009da:	2301      	movs	r3, #1
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009de:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <MX_GPIO_Init+0x1f0>)
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	482a      	ldr	r0, [pc, #168]	; (8000a98 <MX_GPIO_Init+0x1f4>)
 80009ee:	f001 f887 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009f2:	2304      	movs	r3, #4
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4825      	ldr	r0, [pc, #148]	; (8000a9c <MX_GPIO_Init+0x1f8>)
 8000a06:	f001 f87b 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481d      	ldr	r0, [pc, #116]	; (8000a9c <MX_GPIO_Init+0x1f8>)
 8000a28:	f001 f86a 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a2c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a30:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4812      	ldr	r0, [pc, #72]	; (8000a90 <MX_GPIO_Init+0x1ec>)
 8000a46:	f001 f85b 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a4a:	2320      	movs	r3, #32
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_GPIO_Init+0x1ec>)
 8000a5e:	f001 f84f 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_GPIO_Init+0x1f0>)
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0x1e4>)
 8000a76:	f001 f843 	bl	8001b00 <HAL_GPIO_Init>

}
 8000a7a:	bf00      	nop
 8000a7c:	3730      	adds	r7, #48	; 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	10120000 	.word	0x10120000
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <Error_Handler+0x6>

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae6:	2007      	movs	r0, #7
 8000ae8:	f000 fc38 	bl	800135c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <HAL_I2C_MspInit+0x84>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d12c      	bne.n	8000b74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3c:	2312      	movs	r3, #18
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <HAL_I2C_MspInit+0x8c>)
 8000b54:	f000 ffd4 	bl	8001b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_I2C_MspInit+0x88>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020400 	.word	0x40020400

08000b88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <HAL_I2S_MspInit+0xc0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d14a      	bne.n	8000c40 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <HAL_I2S_MspInit+0xc4>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <HAL_I2S_MspInit+0xc4>)
 8000bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <HAL_I2S_MspInit+0xc4>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_I2S_MspInit+0xc4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <HAL_I2S_MspInit+0xc4>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_I2S_MspInit+0xc4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_I2S_MspInit+0xc4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <HAL_I2S_MspInit+0xc4>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_I2S_MspInit+0xc4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bfe:	2310      	movs	r3, #16
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c0e:	2306      	movs	r3, #6
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <HAL_I2S_MspInit+0xc8>)
 8000c1a:	f000 ff71 	bl	8001b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c1e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c30:	2306      	movs	r3, #6
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <HAL_I2S_MspInit+0xcc>)
 8000c3c:	f000 ff60 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40003c00 	.word	0x40003c00
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020800 	.word	0x40020800

08000c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_SPI_MspInit+0x84>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12b      	bne.n	8000cd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_SPI_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cb2:	23e0      	movs	r3, #224	; 0xe0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_SPI_MspInit+0x8c>)
 8000cce:	f000 ff17 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40013000 	.word	0x40013000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a34      	ldr	r2, [pc, #208]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d162      	bne.n	8000dd0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a32      	ldr	r2, [pc, #200]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d42:	230c      	movs	r3, #12
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d52:	2307      	movs	r3, #7
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4820      	ldr	r0, [pc, #128]	; (8000de0 <HAL_UART_MspInit+0xf8>)
 8000d5e:	f000 fecf 	bl	8001b00 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <HAL_UART_MspInit+0x100>)
 8000d66:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d82:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d96:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000da4:	480f      	ldr	r0, [pc, #60]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000da6:	f000 fb1b 	bl	80013e0 <HAL_DMA_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000db0:	f7ff fe76 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2026      	movs	r0, #38	; 0x26
 8000dc6:	f000 fad4 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dca:	2026      	movs	r0, #38	; 0x26
 8000dcc:	f000 faed 	bl	80013aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	200000c0 	.word	0x200000c0
 8000de8:	40026088 	.word	0x40026088

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 f97e 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <DMA1_Stream5_IRQHandler+0x10>)
 8000e46:	f000 fbf3 	bl	8001630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200000c0 	.word	0x200000c0

08000e54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <USART2_IRQHandler+0x10>)
 8000e5a:	f004 f9bb 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001d0 	.word	0x200001d0

08000e68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <OTG_FS_IRQHandler+0x10>)
 8000e6e:	f001 faa5 	bl	80023bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000634 	.word	0x20000634

08000e7c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <ITM_SendChar+0x48>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <ITM_SendChar+0x48>)
 8000e8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e90:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <ITM_SendChar+0x4c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <ITM_SendChar+0x4c>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000e9e:	bf00      	nop
 8000ea0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f8      	beq.n	8000ea0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000eae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	6013      	str	r3, [r2, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000edfc 	.word	0xe000edfc
 8000ec8:	e0000e00 	.word	0xe0000e00

08000ecc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e00a      	b.n	8000ef4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ede:	f3af 8000 	nop.w
 8000ee2:	4601      	mov	r1, r0
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	60ba      	str	r2, [r7, #8]
 8000eea:	b2ca      	uxtb	r2, r1
 8000eec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbf0      	blt.n	8000ede <_read+0x12>
	}

return len;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e009      	b.n	8000f2c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	60ba      	str	r2, [r7, #8]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ffab 	bl	8000e7c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dbf1      	blt.n	8000f18 <_write+0x12>
	}
	return len;
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_close>:

int _close(int file)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
	return -1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f66:	605a      	str	r2, [r3, #4]
	return 0;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_isatty>:

int _isatty(int file)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
	return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f008 f8b2 	bl	8009140 <__errno>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	230c      	movs	r3, #12
 8000fe0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20020000 	.word	0x20020000
 8001008:	00000400 	.word	0x00000400
 800100c:	200000ac 	.word	0x200000ac
 8001010:	20000900 	.word	0x20000900

08001014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <SystemInit+0x28>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101e:	4a07      	ldr	r2, [pc, #28]	; (800103c <SystemInit+0x28>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <SystemInit+0x28>)
 800102a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800102e:	609a      	str	r2, [r3, #8]
#endif
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001078 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001044:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001046:	e003      	b.n	8001050 <LoopCopyDataInit>

08001048 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800104a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800104c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800104e:	3104      	adds	r1, #4

08001050 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001050:	480b      	ldr	r0, [pc, #44]	; (8001080 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001054:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001056:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001058:	d3f6      	bcc.n	8001048 <CopyDataInit>
  ldr  r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800105c:	e002      	b.n	8001064 <LoopFillZerobss>

0800105e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800105e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001060:	f842 3b04 	str.w	r3, [r2], #4

08001064 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001066:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001068:	d3f9      	bcc.n	800105e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800106a:	f7ff ffd3 	bl	8001014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f008 f86d 	bl	800914c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff fa7d 	bl	8000570 <main>
  bx  lr    
 8001076:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001078:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800107c:	0800a138 	.word	0x0800a138
  ldr  r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001084:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001088:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800108c:	200008fc 	.word	0x200008fc

08001090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC_IRQHandler>
	...

08001094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HAL_Init+0x40>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_Init+0x40>)
 80010aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_Init+0x40>)
 80010b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f94d 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 f808 	bl	80010d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff fcee 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023c00 	.word	0x40023c00

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x54>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x58>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f965 	bl	80013c6 <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001114:	f000 f92d 	bl	8001372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x5c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20000008 	.word	0x20000008
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	20000258 	.word	0x20000258

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000258 	.word	0x20000258

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_Delay+0x40>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffde 	bl	8001160 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000008 	.word	0x20000008

080011bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d8:	4013      	ands	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <__NVIC_GetPriorityGrouping+0x18>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	f003 0307 	and.w	r3, r3, #7
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	db0b      	blt.n	800124a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f003 021f 	and.w	r2, r3, #31
 8001238:	4907      	ldr	r1, [pc, #28]	; (8001258 <__NVIC_EnableIRQ+0x38>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	2001      	movs	r0, #1
 8001242:	fa00 f202 	lsl.w	r2, r0, r2
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000e100 	.word	0xe000e100

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001328:	d301      	bcc.n	800132e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e00f      	b.n	800134e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <SysTick_Config+0x40>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	210f      	movs	r1, #15
 8001338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800133c:	f7ff ff8e 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <SysTick_Config+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <SysTick_Config+0x40>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff29 	bl	80011bc <__NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001384:	f7ff ff3e 	bl	8001204 <__NVIC_GetPriorityGrouping>
 8001388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff ff8e 	bl	80012b0 <NVIC_EncodePriority>
 8001394:	4602      	mov	r2, r0
 8001396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5d 	bl	800125c <__NVIC_SetPriority>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff31 	bl	8001220 <__NVIC_EnableIRQ>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffa2 	bl	8001318 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff feb8 	bl	8001160 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e099      	b.n	8001530 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800141c:	e00f      	b.n	800143e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800141e:	f7ff fe9f 	bl	8001160 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b05      	cmp	r3, #5
 800142a:	d908      	bls.n	800143e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2220      	movs	r2, #32
 8001430:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2203      	movs	r2, #3
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e078      	b.n	8001530 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1e8      	bne.n	800141e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	4b38      	ldr	r3, [pc, #224]	; (8001538 <HAL_DMA_Init+0x158>)
 8001458:	4013      	ands	r3, r2
 800145a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800146a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4313      	orrs	r3, r2
 800148e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	2b04      	cmp	r3, #4
 8001496:	d107      	bne.n	80014a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4313      	orrs	r3, r2
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f023 0307 	bic.w	r3, r3, #7
 80014be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d117      	bne.n	8001502 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4313      	orrs	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00e      	beq.n	8001502 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fa91 	bl	8001a0c <DMA_CheckFifoParam>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2240      	movs	r2, #64	; 0x40
 80014f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014fe:	2301      	movs	r3, #1
 8001500:	e016      	b.n	8001530 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fa48 	bl	80019a0 <DMA_CalcBaseAndBitshift>
 8001510:	4603      	mov	r3, r0
 8001512:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001518:	223f      	movs	r2, #63	; 0x3f
 800151a:	409a      	lsls	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	f010803f 	.word	0xf010803f

0800153c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001552:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_DMA_Start_IT+0x26>
 800155e:	2302      	movs	r3, #2
 8001560:	e040      	b.n	80015e4 <HAL_DMA_Start_IT+0xa8>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d12f      	bne.n	80015d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 f9da 	bl	8001944 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001594:	223f      	movs	r2, #63	; 0x3f
 8001596:	409a      	lsls	r2, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0216 	orr.w	r2, r2, #22
 80015aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d007      	beq.n	80015c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0208 	orr.w	r2, r2, #8
 80015c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e005      	b.n	80015e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015de:	2302      	movs	r3, #2
 80015e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d004      	beq.n	800160a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00c      	b.n	8001624 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2205      	movs	r2, #5
 800160e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0201 	bic.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800163c:	4b92      	ldr	r3, [pc, #584]	; (8001888 <HAL_DMA_IRQHandler+0x258>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a92      	ldr	r2, [pc, #584]	; (800188c <HAL_DMA_IRQHandler+0x25c>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	0a9b      	lsrs	r3, r3, #10
 8001648:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165a:	2208      	movs	r2, #8
 800165c:	409a      	lsls	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d01a      	beq.n	800169c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0204 	bic.w	r2, r2, #4
 8001682:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001688:	2208      	movs	r2, #8
 800168a:	409a      	lsls	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	f043 0201 	orr.w	r2, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	2201      	movs	r2, #1
 80016a2:	409a      	lsls	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d012      	beq.n	80016d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00b      	beq.n	80016d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016be:	2201      	movs	r2, #1
 80016c0:	409a      	lsls	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ca:	f043 0202 	orr.w	r2, r3, #2
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	2204      	movs	r2, #4
 80016d8:	409a      	lsls	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d012      	beq.n	8001708 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00b      	beq.n	8001708 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f4:	2204      	movs	r2, #4
 80016f6:	409a      	lsls	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001700:	f043 0204 	orr.w	r2, r3, #4
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170c:	2210      	movs	r2, #16
 800170e:	409a      	lsls	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d043      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d03c      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172a:	2210      	movs	r2, #16
 800172c:	409a      	lsls	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d018      	beq.n	8001772 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d108      	bne.n	8001760 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d024      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
 800175e:	e01f      	b.n	80017a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001764:	2b00      	cmp	r3, #0
 8001766:	d01b      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	4798      	blx	r3
 8001770:	e016      	b.n	80017a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0208 	bic.w	r2, r2, #8
 800178e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a4:	2220      	movs	r2, #32
 80017a6:	409a      	lsls	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 808e 	beq.w	80018ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 8086 	beq.w	80018ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c6:	2220      	movs	r2, #32
 80017c8:	409a      	lsls	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b05      	cmp	r3, #5
 80017d8:	d136      	bne.n	8001848 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0216 	bic.w	r2, r2, #22
 80017e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d103      	bne.n	800180a <HAL_DMA_IRQHandler+0x1da>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0208 	bic.w	r2, r2, #8
 8001818:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181e:	223f      	movs	r2, #63	; 0x3f
 8001820:	409a      	lsls	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800183a:	2b00      	cmp	r3, #0
 800183c:	d07d      	beq.n	800193a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3
        }
        return;
 8001846:	e078      	b.n	800193a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d01c      	beq.n	8001890 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d108      	bne.n	8001876 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	2b00      	cmp	r3, #0
 800186a:	d030      	beq.n	80018ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
 8001874:	e02b      	b.n	80018ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187a:	2b00      	cmp	r3, #0
 800187c:	d027      	beq.n	80018ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
 8001886:	e022      	b.n	80018ce <HAL_DMA_IRQHandler+0x29e>
 8001888:	20000000 	.word	0x20000000
 800188c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0210 	bic.w	r2, r2, #16
 80018ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d032      	beq.n	800193c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d022      	beq.n	8001928 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2205      	movs	r2, #5
 80018e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0201 	bic.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	3301      	adds	r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	429a      	cmp	r2, r3
 8001904:	d307      	bcc.n	8001916 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f2      	bne.n	80018fa <HAL_DMA_IRQHandler+0x2ca>
 8001914:	e000      	b.n	8001918 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001916:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
 8001938:	e000      	b.n	800193c <HAL_DMA_IRQHandler+0x30c>
        return;
 800193a:	bf00      	nop
    }
  }
}
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop

08001944 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001960:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b40      	cmp	r3, #64	; 0x40
 8001970:	d108      	bne.n	8001984 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001982:	e007      	b.n	8001994 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	60da      	str	r2, [r3, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3b10      	subs	r3, #16
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <DMA_CalcBaseAndBitshift+0x64>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019ba:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <DMA_CalcBaseAndBitshift+0x68>)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d909      	bls.n	80019e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	1d1a      	adds	r2, r3, #4
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	659a      	str	r2, [r3, #88]	; 0x58
 80019e0:	e007      	b.n	80019f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019ea:	f023 0303 	bic.w	r3, r3, #3
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	aaaaaaab 	.word	0xaaaaaaab
 8001a08:	0800a088 	.word	0x0800a088

08001a0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d11f      	bne.n	8001a66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d855      	bhi.n	8001ad8 <DMA_CheckFifoParam+0xcc>
 8001a2c:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <DMA_CheckFifoParam+0x28>)
 8001a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a32:	bf00      	nop
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a57 	.word	0x08001a57
 8001a3c:	08001a45 	.word	0x08001a45
 8001a40:	08001ad9 	.word	0x08001ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d045      	beq.n	8001adc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a54:	e042      	b.n	8001adc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a5e:	d13f      	bne.n	8001ae0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a64:	e03c      	b.n	8001ae0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6e:	d121      	bne.n	8001ab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d836      	bhi.n	8001ae4 <DMA_CheckFifoParam+0xd8>
 8001a76:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <DMA_CheckFifoParam+0x70>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001a93 	.word	0x08001a93
 8001a84:	08001a8d 	.word	0x08001a8d
 8001a88:	08001aa5 	.word	0x08001aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a90:	e02f      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d024      	beq.n	8001ae8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa2:	e021      	b.n	8001ae8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aac:	d11e      	bne.n	8001aec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ab2:	e01b      	b.n	8001aec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d902      	bls.n	8001ac0 <DMA_CheckFifoParam+0xb4>
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d003      	beq.n	8001ac6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001abe:	e018      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac4:	e015      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00e      	beq.n	8001af0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad6:	e00b      	b.n	8001af0 <DMA_CheckFifoParam+0xe4>
      break;
 8001ad8:	bf00      	nop
 8001ada:	e00a      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;
 8001adc:	bf00      	nop
 8001ade:	e008      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ae0:	bf00      	nop
 8001ae2:	e006      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ae4:	bf00      	nop
 8001ae6:	e004      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ae8:	bf00      	nop
 8001aea:	e002      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001aec:	bf00      	nop
 8001aee:	e000      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;
 8001af0:	bf00      	nop
    }
  } 
  
  return status; 
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	e16b      	b.n	8001df4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	f040 815a 	bne.w	8001dee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d00b      	beq.n	8001b5a <HAL_GPIO_Init+0x5a>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d007      	beq.n	8001b5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4e:	2b11      	cmp	r3, #17
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b12      	cmp	r3, #18
 8001b58:	d130      	bne.n	8001bbc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0201 	and.w	r2, r3, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0xfc>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b12      	cmp	r3, #18
 8001bfa:	d123      	bne.n	8001c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	08da      	lsrs	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	69b9      	ldr	r1, [r7, #24]
 8001c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0203 	and.w	r2, r3, #3
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80b4 	beq.w	8001dee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b5f      	ldr	r3, [pc, #380]	; (8001e08 <HAL_GPIO_Init+0x308>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a5e      	ldr	r2, [pc, #376]	; (8001e08 <HAL_GPIO_Init+0x308>)
 8001c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b5c      	ldr	r3, [pc, #368]	; (8001e08 <HAL_GPIO_Init+0x308>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca2:	4a5a      	ldr	r2, [pc, #360]	; (8001e0c <HAL_GPIO_Init+0x30c>)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a51      	ldr	r2, [pc, #324]	; (8001e10 <HAL_GPIO_Init+0x310>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d02b      	beq.n	8001d26 <HAL_GPIO_Init+0x226>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a50      	ldr	r2, [pc, #320]	; (8001e14 <HAL_GPIO_Init+0x314>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d025      	beq.n	8001d22 <HAL_GPIO_Init+0x222>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4f      	ldr	r2, [pc, #316]	; (8001e18 <HAL_GPIO_Init+0x318>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01f      	beq.n	8001d1e <HAL_GPIO_Init+0x21e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4e      	ldr	r2, [pc, #312]	; (8001e1c <HAL_GPIO_Init+0x31c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d019      	beq.n	8001d1a <HAL_GPIO_Init+0x21a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4d      	ldr	r2, [pc, #308]	; (8001e20 <HAL_GPIO_Init+0x320>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0x216>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4c      	ldr	r2, [pc, #304]	; (8001e24 <HAL_GPIO_Init+0x324>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00d      	beq.n	8001d12 <HAL_GPIO_Init+0x212>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4b      	ldr	r2, [pc, #300]	; (8001e28 <HAL_GPIO_Init+0x328>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x20e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4a      	ldr	r2, [pc, #296]	; (8001e2c <HAL_GPIO_Init+0x32c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_GPIO_Init+0x20a>
 8001d06:	2307      	movs	r3, #7
 8001d08:	e00e      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	e00c      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d0e:	2306      	movs	r3, #6
 8001d10:	e00a      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d12:	2305      	movs	r3, #5
 8001d14:	e008      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e004      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d26:	2300      	movs	r3, #0
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	f002 0203 	and.w	r2, r2, #3
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	4093      	lsls	r3, r2
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d38:	4934      	ldr	r1, [pc, #208]	; (8001e0c <HAL_GPIO_Init+0x30c>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d46:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d6a:	4a31      	ldr	r2, [pc, #196]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d70:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d94:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de8:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	f67f ae90 	bls.w	8001b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3724      	adds	r7, #36	; 0x24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40021400 	.word	0x40021400
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40021c00 	.word	0x40021c00
 8001e30:	40013c00 	.word	0x40013c00

08001e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
 8001e40:	4613      	mov	r3, r2
 8001e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e44:	787b      	ldrb	r3, [r7, #1]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e50:	e003      	b.n	8001e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e52:	887b      	ldrh	r3, [r7, #2]
 8001e54:	041a      	lsls	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	619a      	str	r2, [r3, #24]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	401a      	ands	r2, r3
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d104      	bne.n	8001e8a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e80:	887b      	ldrh	r3, [r7, #2]
 8001e82:	041a      	lsls	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9e:	b08f      	sub	sp, #60	; 0x3c
 8001ea0:	af0a      	add	r7, sp, #40	; 0x28
 8001ea2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e054      	b.n	8001f58 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d106      	bne.n	8001ece <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f006 fe8f 	bl	8008bec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 f84b 	bl	8005f88 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	687e      	ldr	r6, [r7, #4]
 8001efa:	466d      	mov	r5, sp
 8001efc:	f106 0410 	add.w	r4, r6, #16
 8001f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f10:	1d33      	adds	r3, r6, #4
 8001f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f14:	6838      	ldr	r0, [r7, #0]
 8001f16:	f003 ffc5 	bl	8005ea4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 f842 	bl	8005faa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	687e      	ldr	r6, [r7, #4]
 8001f2e:	466d      	mov	r5, sp
 8001f30:	f106 0410 	add.w	r4, r6, #16
 8001f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f40:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f44:	1d33      	adds	r3, r6, #4
 8001f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f48:	6838      	ldr	r0, [r7, #0]
 8001f4a:	f004 f955 	bl	80061f8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f60 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af04      	add	r7, sp, #16
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	4608      	mov	r0, r1
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	70fb      	strb	r3, [r7, #3]
 8001f72:	460b      	mov	r3, r1
 8001f74:	70bb      	strb	r3, [r7, #2]
 8001f76:	4613      	mov	r3, r2
 8001f78:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_HCD_HC_Init+0x28>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e07f      	b.n	8002088 <HAL_HCD_HC_Init+0x128>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	333d      	adds	r3, #61	; 0x3d
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3338      	adds	r3, #56	; 0x38
 8001fb4:	787a      	ldrb	r2, [r7, #1]
 8001fb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3340      	adds	r3, #64	; 0x40
 8001fc8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fca:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3339      	adds	r3, #57	; 0x39
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	333f      	adds	r3, #63	; 0x3f
 8001ff0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ff4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	78bb      	ldrb	r3, [r7, #2]
 8001ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ffe:	b2d8      	uxtb	r0, r3
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	333a      	adds	r3, #58	; 0x3a
 800200e:	4602      	mov	r2, r0
 8002010:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002012:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002016:	2b00      	cmp	r3, #0
 8002018:	da0a      	bge.n	8002030 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	440b      	add	r3, r1
 8002028:	333b      	adds	r3, #59	; 0x3b
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	e009      	b.n	8002044 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	333b      	adds	r3, #59	; 0x3b
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	333c      	adds	r3, #60	; 0x3c
 8002054:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002058:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	787c      	ldrb	r4, [r7, #1]
 8002060:	78ba      	ldrb	r2, [r7, #2]
 8002062:	78f9      	ldrb	r1, [r7, #3]
 8002064:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002066:	9302      	str	r3, [sp, #8]
 8002068:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	4623      	mov	r3, r4
 8002076:	f004 fa41 	bl	80064fc <USB_HC_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bd90      	pop	{r4, r7, pc}

08002090 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_HCD_HC_Halt+0x1e>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e00f      	b.n	80020ce <HAL_HCD_HC_Halt+0x3e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f004 fc7d 	bl	80069be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	4608      	mov	r0, r1
 80020e2:	4611      	mov	r1, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	70fb      	strb	r3, [r7, #3]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70bb      	strb	r3, [r7, #2]
 80020ee:	4613      	mov	r3, r2
 80020f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	333b      	adds	r3, #59	; 0x3b
 8002102:	78ba      	ldrb	r2, [r7, #2]
 8002104:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	333f      	adds	r3, #63	; 0x3f
 8002116:	787a      	ldrb	r2, [r7, #1]
 8002118:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800211a:	7c3b      	ldrb	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d114      	bne.n	800214a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3342      	adds	r3, #66	; 0x42
 8002130:	2203      	movs	r2, #3
 8002132:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	333d      	adds	r3, #61	; 0x3d
 8002144:	7f3a      	ldrb	r2, [r7, #28]
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e009      	b.n	800215e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	3342      	adds	r3, #66	; 0x42
 800215a:	2202      	movs	r2, #2
 800215c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800215e:	787b      	ldrb	r3, [r7, #1]
 8002160:	2b03      	cmp	r3, #3
 8002162:	f200 80d6 	bhi.w	8002312 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002166:	a201      	add	r2, pc, #4	; (adr r2, 800216c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	0800217d 	.word	0x0800217d
 8002170:	080022fd 	.word	0x080022fd
 8002174:	080021e9 	.word	0x080021e9
 8002178:	08002273 	.word	0x08002273
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800217c:	7c3b      	ldrb	r3, [r7, #16]
 800217e:	2b01      	cmp	r3, #1
 8002180:	f040 80c9 	bne.w	8002316 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002184:	78bb      	ldrb	r3, [r7, #2]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 80c5 	bne.w	8002316 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800218c:	8b3b      	ldrh	r3, [r7, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	440b      	add	r3, r1
 80021a0:	3351      	adds	r3, #81	; 0x51
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	3351      	adds	r3, #81	; 0x51
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	3342      	adds	r3, #66	; 0x42
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021d0:	e0a1      	b.n	8002316 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	3342      	adds	r3, #66	; 0x42
 80021e2:	2202      	movs	r2, #2
 80021e4:	701a      	strb	r2, [r3, #0]
      break;
 80021e6:	e096      	b.n	8002316 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80021e8:	78bb      	ldrb	r3, [r7, #2]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d120      	bne.n	8002230 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	440b      	add	r3, r1
 80021fc:	3351      	adds	r3, #81	; 0x51
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10a      	bne.n	800221a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	3342      	adds	r3, #66	; 0x42
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002218:	e07e      	b.n	8002318 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	3342      	adds	r3, #66	; 0x42
 800222a:	2202      	movs	r2, #2
 800222c:	701a      	strb	r2, [r3, #0]
      break;
 800222e:	e073      	b.n	8002318 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	3350      	adds	r3, #80	; 0x50
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	440b      	add	r3, r1
 8002254:	3342      	adds	r3, #66	; 0x42
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
      break;
 800225a:	e05d      	b.n	8002318 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	3342      	adds	r3, #66	; 0x42
 800226c:	2202      	movs	r2, #2
 800226e:	701a      	strb	r2, [r3, #0]
      break;
 8002270:	e052      	b.n	8002318 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002272:	78bb      	ldrb	r3, [r7, #2]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d120      	bne.n	80022ba <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	3351      	adds	r3, #81	; 0x51
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10a      	bne.n	80022a4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	3342      	adds	r3, #66	; 0x42
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022a2:	e039      	b.n	8002318 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	3342      	adds	r3, #66	; 0x42
 80022b4:	2202      	movs	r2, #2
 80022b6:	701a      	strb	r2, [r3, #0]
      break;
 80022b8:	e02e      	b.n	8002318 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	3350      	adds	r3, #80	; 0x50
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	3342      	adds	r3, #66	; 0x42
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
      break;
 80022e4:	e018      	b.n	8002318 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	440b      	add	r3, r1
 80022f4:	3342      	adds	r3, #66	; 0x42
 80022f6:	2202      	movs	r2, #2
 80022f8:	701a      	strb	r2, [r3, #0]
      break;
 80022fa:	e00d      	b.n	8002318 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	3342      	adds	r3, #66	; 0x42
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
      break;
 8002310:	e002      	b.n	8002318 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002312:	bf00      	nop
 8002314:	e000      	b.n	8002318 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002316:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	3344      	adds	r3, #68	; 0x44
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800232c:	78fa      	ldrb	r2, [r7, #3]
 800232e:	8b39      	ldrh	r1, [r7, #24]
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4403      	add	r3, r0
 800233c:	3348      	adds	r3, #72	; 0x48
 800233e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	335c      	adds	r3, #92	; 0x5c
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	334c      	adds	r3, #76	; 0x4c
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	3339      	adds	r3, #57	; 0x39
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	335d      	adds	r3, #93	; 0x5d
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	3338      	adds	r3, #56	; 0x38
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	18d1      	adds	r1, r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	f004 f9b0 	bl	8006710 <USB_HC_StartXfer>
 80023b0:	4603      	mov	r3, r0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop

080023bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fecd 	bl	8006172 <USB_GetMode>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b01      	cmp	r3, #1
 80023dc:	f040 80ef 	bne.w	80025be <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 feb1 	bl	800614c <USB_ReadInterrupts>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80e5 	beq.w	80025bc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fea8 	bl	800614c <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002406:	d104      	bne.n	8002412 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002410:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f003 fe98 	bl	800614c <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002426:	d104      	bne.n	8002432 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002430:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f003 fe88 	bl	800614c <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002446:	d104      	bne.n	8002452 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002450:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f003 fe78 	bl	800614c <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d103      	bne.n	800246e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2202      	movs	r2, #2
 800246c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fe6a 	bl	800614c <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800247e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002482:	d115      	bne.n	80024b0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800248c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d108      	bne.n	80024b0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f006 fc22 	bl	8008ce8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 ff60 	bl	8006370 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f003 fe49 	bl	800614c <USB_ReadInterrupts>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c4:	d102      	bne.n	80024cc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f001 f966 	bl	8003798 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 fe3b 	bl	800614c <USB_ReadInterrupts>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d106      	bne.n	80024ee <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f006 fbe5 	bl	8008cb0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2208      	movs	r2, #8
 80024ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 fe2a 	bl	800614c <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002502:	d138      	bne.n	8002576 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f004 fa47 	bl	800699c <USB_HC_ReadInterrupt>
 800250e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	e025      	b.n	8002562 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d018      	beq.n	800255c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800253c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002540:	d106      	bne.n	8002550 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f8cf 	bl	80026ec <HCD_HC_IN_IRQHandler>
 800254e:	e005      	b.n	800255c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fcfd 	bl	8002f56 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	d3d4      	bcc.n	8002516 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f003 fde6 	bl	800614c <USB_ReadInterrupts>
 8002580:	4603      	mov	r3, r0
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b10      	cmp	r3, #16
 8002588:	d101      	bne.n	800258e <HAL_HCD_IRQHandler+0x1d2>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_HCD_IRQHandler+0x1d4>
 800258e:	2300      	movs	r3, #0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d014      	beq.n	80025be <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0210 	bic.w	r2, r2, #16
 80025a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f001 f84b 	bl	8003640 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699a      	ldr	r2, [r3, #24]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0210 	orr.w	r2, r2, #16
 80025b8:	619a      	str	r2, [r3, #24]
 80025ba:	e000      	b.n	80025be <HAL_HCD_IRQHandler+0x202>
      return;
 80025bc:	bf00      	nop
    }
  }
}
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_HCD_Start+0x16>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e013      	b.n	8002602 <HAL_HCD_Start+0x3e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fcbd 	bl	8005f66 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 ff20 	bl	8006438 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_HCD_Stop+0x16>
 800261c:	2302      	movs	r3, #2
 800261e:	e00d      	b.n	800263c <HAL_HCD_Stop+0x32>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f004 fb01 	bl	8006c34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f003 fec7 	bl	80063e4 <USB_ResetPort>
 8002656:	4603      	mov	r3, r0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	440b      	add	r3, r1
 800267a:	335c      	adds	r3, #92	; 0x5c
 800267c:	781b      	ldrb	r3, [r3, #0]
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	440b      	add	r3, r1
 80026a4:	334c      	adds	r3, #76	; 0x4c
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f003 ff09 	bl	80064d8 <USB_GetCurrentFrame>
 80026c6:	4603      	mov	r3, r0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 fee4 	bl	80064aa <USB_GetHostSpeed>
 80026e2:	4603      	mov	r3, r0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b04      	cmp	r3, #4
 800271a:	d119      	bne.n	8002750 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	461a      	mov	r2, r3
 800272a:	2304      	movs	r3, #4
 800272c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	0151      	lsls	r1, r2, #5
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	440a      	add	r2, r1
 8002744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	60d3      	str	r3, [r2, #12]
 800274e:	e0ce      	b.n	80028ee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002766:	d12c      	bne.n	80027c2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	461a      	mov	r2, r3
 8002776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	335d      	adds	r3, #93	; 0x5d
 800278c:	2207      	movs	r2, #7
 800278e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	0151      	lsls	r1, r2, #5
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	440a      	add	r2, r1
 80027a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027aa:	f043 0302 	orr.w	r3, r3, #2
 80027ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 f8ff 	bl	80069be <USB_HC_Halt>
 80027c0:	e095      	b.n	80028ee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d109      	bne.n	80027ec <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	461a      	mov	r2, r3
 80027e6:	2320      	movs	r3, #32
 80027e8:	6093      	str	r3, [r2, #8]
 80027ea:	e080      	b.n	80028ee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d134      	bne.n	800286c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4413      	add	r3, r2
 800280a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	0151      	lsls	r1, r2, #5
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	440a      	add	r2, r1
 8002818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	335d      	adds	r3, #93	; 0x5d
 8002832:	2205      	movs	r2, #5
 8002834:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	461a      	mov	r2, r3
 8002844:	2310      	movs	r3, #16
 8002846:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	2308      	movs	r3, #8
 8002858:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f004 f8aa 	bl	80069be <USB_HC_Halt>
 800286a:	e040      	b.n	80028ee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002882:	d134      	bne.n	80028ee <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	0151      	lsls	r1, r2, #5
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	440a      	add	r2, r1
 800289a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800289e:	f043 0302 	orr.w	r3, r3, #2
 80028a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 f885 	bl	80069be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	461a      	mov	r2, r3
 80028c2:	2310      	movs	r3, #16
 80028c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	335d      	adds	r3, #93	; 0x5d
 80028d6:	2208      	movs	r2, #8
 80028d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	461a      	mov	r2, r3
 80028e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ec:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002904:	d122      	bne.n	800294c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	0151      	lsls	r1, r2, #5
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	440a      	add	r2, r1
 800291c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f004 f844 	bl	80069be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	461a      	mov	r2, r3
 8002944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002948:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800294a:	e300      	b.n	8002f4e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	f040 80fd 	bne.w	8002b5e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	3348      	adds	r3, #72	; 0x48
 800297c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	0159      	lsls	r1, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	440b      	add	r3, r1
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002990:	1ad1      	subs	r1, r2, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4403      	add	r3, r0
 80029a0:	334c      	adds	r3, #76	; 0x4c
 80029a2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	335d      	adds	r3, #93	; 0x5d
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	3358      	adds	r3, #88	; 0x58
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	461a      	mov	r2, r3
 80029da:	2301      	movs	r3, #1
 80029dc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	333f      	adds	r3, #63	; 0x3f
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	333f      	adds	r3, #63	; 0x3f
 8002a04:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d121      	bne.n	8002a4e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	0151      	lsls	r1, r2, #5
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	440a      	add	r2, r1
 8002a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 ffc2 	bl	80069be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	461a      	mov	r2, r3
 8002a48:	2310      	movs	r3, #16
 8002a4a:	6093      	str	r3, [r2, #8]
 8002a4c:	e070      	b.n	8002b30 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	333f      	adds	r3, #63	; 0x3f
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d12a      	bne.n	8002aba <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	0151      	lsls	r1, r2, #5
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	440a      	add	r2, r1
 8002a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a82:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	440b      	add	r3, r1
 8002a92:	335c      	adds	r3, #92	; 0x5c
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	b2d8      	uxtb	r0, r3
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	335c      	adds	r3, #92	; 0x5c
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4601      	mov	r1, r0
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f006 f926 	bl	8008d04 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ab8:	e03a      	b.n	8002b30 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	333f      	adds	r3, #63	; 0x3f
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d12f      	bne.n	8002b30 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	335c      	adds	r3, #92	; 0x5c
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	440b      	add	r3, r1
 8002af2:	3350      	adds	r3, #80	; 0x50
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	f083 0301 	eor.w	r3, r3, #1
 8002afa:	b2d8      	uxtb	r0, r3
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	3350      	adds	r3, #80	; 0x50
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	b2d8      	uxtb	r0, r3
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	335c      	adds	r3, #92	; 0x5c
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	4601      	mov	r1, r0
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f006 f8ea 	bl	8008d04 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3350      	adds	r3, #80	; 0x50
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	f083 0301 	eor.w	r3, r3, #1
 8002b46:	b2d8      	uxtb	r0, r3
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	3350      	adds	r3, #80	; 0x50
 8002b58:	4602      	mov	r2, r0
 8002b5a:	701a      	strb	r2, [r3, #0]
}
 8002b5c:	e1f7      	b.n	8002f4e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	f040 811a 	bne.w	8002daa <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	0151      	lsls	r1, r2, #5
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	440a      	add	r2, r1
 8002b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b90:	f023 0302 	bic.w	r3, r3, #2
 8002b94:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	335d      	adds	r3, #93	; 0x5d
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10a      	bne.n	8002bc2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	335c      	adds	r3, #92	; 0x5c
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	e0d9      	b.n	8002d76 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	335d      	adds	r3, #93	; 0x5d
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d10a      	bne.n	8002bee <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	335c      	adds	r3, #92	; 0x5c
 8002be8:	2205      	movs	r2, #5
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e0c3      	b.n	8002d76 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	335d      	adds	r3, #93	; 0x5d
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d00a      	beq.n	8002c1a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	335d      	adds	r3, #93	; 0x5d
 8002c14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d156      	bne.n	8002cc8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	440b      	add	r3, r1
 8002c28:	3358      	adds	r3, #88	; 0x58
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	1c59      	adds	r1, r3, #1
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4403      	add	r3, r0
 8002c3c:	3358      	adds	r3, #88	; 0x58
 8002c3e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3358      	adds	r3, #88	; 0x58
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d914      	bls.n	8002c80 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	3358      	adds	r3, #88	; 0x58
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	440b      	add	r3, r1
 8002c78:	335c      	adds	r3, #92	; 0x5c
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e009      	b.n	8002c94 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	335c      	adds	r3, #92	; 0x5c
 8002c90:	2202      	movs	r2, #2
 8002c92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002caa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cb2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e056      	b.n	8002d76 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	335d      	adds	r3, #93	; 0x5d
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d123      	bne.n	8002d26 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	335c      	adds	r3, #92	; 0x5c
 8002cee:	2202      	movs	r2, #2
 8002cf0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d08:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d10:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	e027      	b.n	8002d76 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	440b      	add	r3, r1
 8002d34:	335d      	adds	r3, #93	; 0x5d
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b07      	cmp	r3, #7
 8002d3a:	d11c      	bne.n	8002d76 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	3358      	adds	r3, #88	; 0x58
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	1c59      	adds	r1, r3, #1
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4403      	add	r3, r0
 8002d5e:	3358      	adds	r3, #88	; 0x58
 8002d60:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	440b      	add	r3, r1
 8002d70:	335c      	adds	r3, #92	; 0x5c
 8002d72:	2204      	movs	r2, #4
 8002d74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d82:	461a      	mov	r2, r3
 8002d84:	2302      	movs	r3, #2
 8002d86:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	b2d8      	uxtb	r0, r3
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	335c      	adds	r3, #92	; 0x5c
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4601      	mov	r1, r0
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f005 ffae 	bl	8008d04 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002da8:	e0d1      	b.n	8002f4e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b80      	cmp	r3, #128	; 0x80
 8002dbe:	d13e      	bne.n	8002e3e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	0151      	lsls	r1, r2, #5
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	440a      	add	r2, r1
 8002dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	3358      	adds	r3, #88	; 0x58
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	1c59      	adds	r1, r3, #1
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4403      	add	r3, r0
 8002e02:	3358      	adds	r3, #88	; 0x58
 8002e04:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	440b      	add	r3, r1
 8002e14:	335d      	adds	r3, #93	; 0x5d
 8002e16:	2206      	movs	r2, #6
 8002e18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fdca 	bl	80069be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	461a      	mov	r2, r3
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	6093      	str	r3, [r2, #8]
}
 8002e3c:	e087      	b.n	8002f4e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d17c      	bne.n	8002f4e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	440b      	add	r3, r1
 8002e62:	333f      	adds	r3, #63	; 0x3f
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d122      	bne.n	8002eb0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	3358      	adds	r3, #88	; 0x58
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	0151      	lsls	r1, r2, #5
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	440a      	add	r2, r1
 8002e94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f003 fd88 	bl	80069be <USB_HC_Halt>
 8002eae:	e045      	b.n	8002f3c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	333f      	adds	r3, #63	; 0x3f
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	333f      	adds	r3, #63	; 0x3f
 8002ed6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d12f      	bne.n	8002f3c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	3358      	adds	r3, #88	; 0x58
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d121      	bne.n	8002f3c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	335d      	adds	r3, #93	; 0x5d
 8002f08:	2203      	movs	r2, #3
 8002f0a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	0151      	lsls	r1, r2, #5
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	440a      	add	r2, r1
 8002f22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f26:	f043 0302 	orr.w	r3, r3, #2
 8002f2a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 fd41 	bl	80069be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2310      	movs	r3, #16
 8002f4c:	6093      	str	r3, [r2, #8]
}
 8002f4e:	bf00      	nop
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d119      	bne.n	8002fba <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	461a      	mov	r2, r3
 8002f94:	2304      	movs	r3, #4
 8002f96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	0151      	lsls	r1, r2, #5
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	440a      	add	r2, r1
 8002fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002fb8:	e33e      	b.n	8003638 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d141      	bne.n	8003054 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2320      	movs	r3, #32
 8002fe0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	333d      	adds	r3, #61	; 0x3d
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	f040 831f 	bne.w	8003638 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	333d      	adds	r3, #61	; 0x3d
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	335c      	adds	r3, #92	; 0x5c
 800301e:	2202      	movs	r2, #2
 8003020:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	0151      	lsls	r1, r2, #5
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	440a      	add	r2, r1
 8003038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f003 fcb6 	bl	80069be <USB_HC_Halt>
}
 8003052:	e2f1      	b.n	8003638 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d13f      	bne.n	80030ea <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	335d      	adds	r3, #93	; 0x5d
 800307a:	2204      	movs	r2, #4
 800307c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	440b      	add	r3, r1
 800308c:	333d      	adds	r3, #61	; 0x3d
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	3358      	adds	r3, #88	; 0x58
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	0151      	lsls	r1, r2, #5
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	440a      	add	r2, r1
 80030bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f003 fc74 	bl	80069be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e2:	461a      	mov	r2, r3
 80030e4:	2340      	movs	r3, #64	; 0x40
 80030e6:	6093      	str	r3, [r2, #8]
}
 80030e8:	e2a6      	b.n	8003638 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003100:	d122      	bne.n	8003148 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	0151      	lsls	r1, r2, #5
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	440a      	add	r2, r1
 8003118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f003 fc46 	bl	80069be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313e:	461a      	mov	r2, r3
 8003140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003144:	6093      	str	r3, [r2, #8]
}
 8003146:	e277      	b.n	8003638 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d135      	bne.n	80031ca <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	3358      	adds	r3, #88	; 0x58
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4413      	add	r3, r2
 800317a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	0151      	lsls	r1, r2, #5
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	440a      	add	r2, r1
 8003188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f003 fc0e 	bl	80069be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	461a      	mov	r2, r3
 80031b0:	2301      	movs	r3, #1
 80031b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	335d      	adds	r3, #93	; 0x5d
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
}
 80031c8:	e236      	b.n	8003638 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d12b      	bne.n	8003238 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ec:	461a      	mov	r2, r3
 80031ee:	2308      	movs	r3, #8
 80031f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	0151      	lsls	r1, r2, #5
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	440a      	add	r2, r1
 8003208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f003 fbce 	bl	80069be <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	335d      	adds	r3, #93	; 0x5d
 8003232:	2205      	movs	r2, #5
 8003234:	701a      	strb	r2, [r3, #0]
}
 8003236:	e1ff      	b.n	8003638 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b10      	cmp	r3, #16
 800324c:	d155      	bne.n	80032fa <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	3358      	adds	r3, #88	; 0x58
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	440b      	add	r3, r1
 8003270:	335d      	adds	r3, #93	; 0x5d
 8003272:	2203      	movs	r2, #3
 8003274:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	440b      	add	r3, r1
 8003284:	333d      	adds	r3, #61	; 0x3d
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d114      	bne.n	80032b6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	440b      	add	r3, r1
 800329a:	333c      	adds	r3, #60	; 0x3c
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	440b      	add	r3, r1
 80032b0:	333d      	adds	r3, #61	; 0x3d
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	0151      	lsls	r1, r2, #5
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	440a      	add	r2, r1
 80032cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032d0:	f043 0302 	orr.w	r3, r3, #2
 80032d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f003 fb6c 	bl	80069be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	2310      	movs	r3, #16
 80032f6:	6093      	str	r3, [r2, #8]
}
 80032f8:	e19e      	b.n	8003638 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4413      	add	r3, r2
 8003302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b80      	cmp	r3, #128	; 0x80
 800330e:	d12b      	bne.n	8003368 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	0151      	lsls	r1, r2, #5
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	440a      	add	r2, r1
 8003326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f003 fb3f 	bl	80069be <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	335d      	adds	r3, #93	; 0x5d
 8003350:	2206      	movs	r2, #6
 8003352:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	461a      	mov	r2, r3
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	6093      	str	r3, [r2, #8]
}
 8003366:	e167      	b.n	8003638 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4413      	add	r3, r2
 8003370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337e:	d135      	bne.n	80033ec <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	0151      	lsls	r1, r2, #5
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	440a      	add	r2, r1
 8003396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800339a:	f043 0302 	orr.w	r3, r3, #2
 800339e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fb07 	bl	80069be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	461a      	mov	r2, r3
 80033be:	2310      	movs	r3, #16
 80033c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	461a      	mov	r2, r3
 80033d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	335d      	adds	r3, #93	; 0x5d
 80033e6:	2208      	movs	r2, #8
 80033e8:	701a      	strb	r2, [r3, #0]
}
 80033ea:	e125      	b.n	8003638 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b02      	cmp	r3, #2
 8003400:	f040 811a 	bne.w	8003638 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	0151      	lsls	r1, r2, #5
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	440a      	add	r2, r1
 800341a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800341e:	f023 0302 	bic.w	r3, r3, #2
 8003422:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	440b      	add	r3, r1
 8003432:	335d      	adds	r3, #93	; 0x5d
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d137      	bne.n	80034aa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	440b      	add	r3, r1
 8003448:	335c      	adds	r3, #92	; 0x5c
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	440b      	add	r3, r1
 800345c:	333f      	adds	r3, #63	; 0x3f
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d00b      	beq.n	800347c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	440b      	add	r3, r1
 8003472:	333f      	adds	r3, #63	; 0x3f
 8003474:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003476:	2b03      	cmp	r3, #3
 8003478:	f040 80c5 	bne.w	8003606 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	440b      	add	r3, r1
 800348a:	3351      	adds	r3, #81	; 0x51
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	f083 0301 	eor.w	r3, r3, #1
 8003492:	b2d8      	uxtb	r0, r3
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	440b      	add	r3, r1
 80034a2:	3351      	adds	r3, #81	; 0x51
 80034a4:	4602      	mov	r2, r0
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	e0ad      	b.n	8003606 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	440b      	add	r3, r1
 80034b8:	335d      	adds	r3, #93	; 0x5d
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d10a      	bne.n	80034d6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	335c      	adds	r3, #92	; 0x5c
 80034d0:	2202      	movs	r2, #2
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	e097      	b.n	8003606 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	440b      	add	r3, r1
 80034e4:	335d      	adds	r3, #93	; 0x5d
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d10a      	bne.n	8003502 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	440b      	add	r3, r1
 80034fa:	335c      	adds	r3, #92	; 0x5c
 80034fc:	2202      	movs	r2, #2
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e081      	b.n	8003606 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	440b      	add	r3, r1
 8003510:	335d      	adds	r3, #93	; 0x5d
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b05      	cmp	r3, #5
 8003516:	d10a      	bne.n	800352e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	440b      	add	r3, r1
 8003526:	335c      	adds	r3, #92	; 0x5c
 8003528:	2205      	movs	r2, #5
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e06b      	b.n	8003606 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	440b      	add	r3, r1
 800353c:	335d      	adds	r3, #93	; 0x5d
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b06      	cmp	r3, #6
 8003542:	d00a      	beq.n	800355a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	440b      	add	r3, r1
 8003552:	335d      	adds	r3, #93	; 0x5d
 8003554:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003556:	2b08      	cmp	r3, #8
 8003558:	d155      	bne.n	8003606 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	440b      	add	r3, r1
 8003568:	3358      	adds	r3, #88	; 0x58
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	1c59      	adds	r1, r3, #1
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4403      	add	r3, r0
 800357c:	3358      	adds	r3, #88	; 0x58
 800357e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	3358      	adds	r3, #88	; 0x58
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d914      	bls.n	80035c0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	3358      	adds	r3, #88	; 0x58
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	335c      	adds	r3, #92	; 0x5c
 80035ba:	2204      	movs	r2, #4
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e009      	b.n	80035d4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	440b      	add	r3, r1
 80035ce:	335c      	adds	r3, #92	; 0x5c
 80035d0:	2202      	movs	r2, #2
 80035d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003600:	461a      	mov	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4413      	add	r3, r2
 800360e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003612:	461a      	mov	r2, r3
 8003614:	2302      	movs	r3, #2
 8003616:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	b2d8      	uxtb	r0, r3
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	440b      	add	r3, r1
 800362a:	335c      	adds	r3, #92	; 0x5c
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	4601      	mov	r1, r0
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f005 fb66 	bl	8008d04 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003638:	bf00      	nop
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	0c5b      	lsrs	r3, r3, #17
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003674:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d003      	beq.n	8003684 <HCD_RXQLVL_IRQHandler+0x44>
 800367c:	2b05      	cmp	r3, #5
 800367e:	f000 8082 	beq.w	8003786 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003682:	e083      	b.n	800378c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d07f      	beq.n	800378a <HCD_RXQLVL_IRQHandler+0x14a>
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	440b      	add	r3, r1
 8003698:	3344      	adds	r3, #68	; 0x44
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d074      	beq.n	800378a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	440b      	add	r3, r1
 80036b2:	3344      	adds	r3, #68	; 0x44
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	b292      	uxth	r2, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	f002 fd1d 	bl	80060fa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	440b      	add	r3, r1
 80036ce:	3344      	adds	r3, #68	; 0x44
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	18d1      	adds	r1, r2, r3
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4403      	add	r3, r0
 80036e4:	3344      	adds	r3, #68	; 0x44
 80036e6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	440b      	add	r3, r1
 80036f6:	334c      	adds	r3, #76	; 0x4c
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	18d1      	adds	r1, r2, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4403      	add	r3, r0
 800370c:	334c      	adds	r3, #76	; 0x4c
 800370e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HCD_RXQLVL_IRQHandler+0x154>)
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d031      	beq.n	800378a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	4413      	add	r3, r2
 800372e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800373c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003744:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	461a      	mov	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	440b      	add	r3, r1
 8003766:	3350      	adds	r3, #80	; 0x50
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	f083 0301 	eor.w	r3, r3, #1
 800376e:	b2d8      	uxtb	r0, r3
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	440b      	add	r3, r1
 800377e:	3350      	adds	r3, #80	; 0x50
 8003780:	4602      	mov	r2, r0
 8003782:	701a      	strb	r2, [r3, #0]
      break;
 8003784:	e001      	b.n	800378a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800378a:	bf00      	nop
  }
}
 800378c:	bf00      	nop
 800378e:	3728      	adds	r7, #40	; 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	1ff80000 	.word	0x1ff80000

08003798 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037c4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d10b      	bne.n	80037e8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d102      	bne.n	80037e0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f005 fa76 	bl	8008ccc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f043 0302 	orr.w	r3, r3, #2
 80037e6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d132      	bne.n	8003858 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b04      	cmp	r3, #4
 8003802:	d126      	bne.n	8003852 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d113      	bne.n	8003834 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003812:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003816:	d106      	bne.n	8003826 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f002 fda6 	bl	8006370 <USB_InitFSLSPClkSel>
 8003824:	e011      	b.n	800384a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2101      	movs	r1, #1
 800382c:	4618      	mov	r0, r3
 800382e:	f002 fd9f 	bl	8006370 <USB_InitFSLSPClkSel>
 8003832:	e00a      	b.n	800384a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d106      	bne.n	800384a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003842:	461a      	mov	r2, r3
 8003844:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003848:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f005 fa68 	bl	8008d20 <HAL_HCD_PortEnabled_Callback>
 8003850:	e002      	b.n	8003858 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f005 fa72 	bl	8008d3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b20      	cmp	r3, #32
 8003860:	d103      	bne.n	800386a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f043 0320 	orr.w	r3, r3, #32
 8003868:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003870:	461a      	mov	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	6013      	str	r3, [r2, #0]
}
 8003876:	bf00      	nop
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e11f      	b.n	8003ad2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd f926 	bl	8000af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2224      	movs	r2, #36	; 0x24
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e4:	f001 f9de 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 80038e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4a7b      	ldr	r2, [pc, #492]	; (8003adc <HAL_I2C_Init+0x25c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d807      	bhi.n	8003904 <HAL_I2C_Init+0x84>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a7a      	ldr	r2, [pc, #488]	; (8003ae0 <HAL_I2C_Init+0x260>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	bf94      	ite	ls
 80038fc:	2301      	movls	r3, #1
 80038fe:	2300      	movhi	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e006      	b.n	8003912 <HAL_I2C_Init+0x92>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a77      	ldr	r2, [pc, #476]	; (8003ae4 <HAL_I2C_Init+0x264>)
 8003908:	4293      	cmp	r3, r2
 800390a:	bf94      	ite	ls
 800390c:	2301      	movls	r3, #1
 800390e:	2300      	movhi	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0db      	b.n	8003ad2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a72      	ldr	r2, [pc, #456]	; (8003ae8 <HAL_I2C_Init+0x268>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	0c9b      	lsrs	r3, r3, #18
 8003924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a64      	ldr	r2, [pc, #400]	; (8003adc <HAL_I2C_Init+0x25c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d802      	bhi.n	8003954 <HAL_I2C_Init+0xd4>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3301      	adds	r3, #1
 8003952:	e009      	b.n	8003968 <HAL_I2C_Init+0xe8>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	4a63      	ldr	r2, [pc, #396]	; (8003aec <HAL_I2C_Init+0x26c>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	3301      	adds	r3, #1
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	430b      	orrs	r3, r1
 800396e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800397a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4956      	ldr	r1, [pc, #344]	; (8003adc <HAL_I2C_Init+0x25c>)
 8003984:	428b      	cmp	r3, r1
 8003986:	d80d      	bhi.n	80039a4 <HAL_I2C_Init+0x124>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e59      	subs	r1, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fbb1 f3f3 	udiv	r3, r1, r3
 8003996:	3301      	adds	r3, #1
 8003998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399c:	2b04      	cmp	r3, #4
 800399e:	bf38      	it	cc
 80039a0:	2304      	movcc	r3, #4
 80039a2:	e04f      	b.n	8003a44 <HAL_I2C_Init+0x1c4>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d111      	bne.n	80039d0 <HAL_I2C_Init+0x150>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1e58      	subs	r0, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	440b      	add	r3, r1
 80039ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80039be:	3301      	adds	r3, #1
 80039c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf0c      	ite	eq
 80039c8:	2301      	moveq	r3, #1
 80039ca:	2300      	movne	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	e012      	b.n	80039f6 <HAL_I2C_Init+0x176>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1e58      	subs	r0, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	0099      	lsls	r1, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Init+0x17e>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e022      	b.n	8003a44 <HAL_I2C_Init+0x1c4>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10e      	bne.n	8003a24 <HAL_I2C_Init+0x1a4>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1e58      	subs	r0, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6859      	ldr	r1, [r3, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	440b      	add	r3, r1
 8003a14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a22:	e00f      	b.n	8003a44 <HAL_I2C_Init+0x1c4>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1e58      	subs	r0, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	0099      	lsls	r1, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	6809      	ldr	r1, [r1, #0]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69da      	ldr	r2, [r3, #28]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6911      	ldr	r1, [r2, #16]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68d2      	ldr	r2, [r2, #12]
 8003a7e:	4311      	orrs	r1, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	000186a0 	.word	0x000186a0
 8003ae0:	001e847f 	.word	0x001e847f
 8003ae4:	003d08ff 	.word	0x003d08ff
 8003ae8:	431bde83 	.word	0x431bde83
 8003aec:	10624dd3 	.word	0x10624dd3

08003af0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e128      	b.n	8003d54 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a90      	ldr	r2, [pc, #576]	; (8003d5c <HAL_I2S_Init+0x26c>)
 8003b1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7fd f833 	bl	8000b88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2202      	movs	r2, #2
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b38:	f023 030f 	bic.w	r3, r3, #15
 8003b3c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2202      	movs	r2, #2
 8003b44:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d060      	beq.n	8003c10 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b56:	2310      	movs	r3, #16
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e001      	b.n	8003b60 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d802      	bhi.n	8003b6e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f001 f9a2 	bl	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b74:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7e:	d125      	bne.n	8003bcc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d010      	beq.n	8003baa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	3305      	adds	r3, #5
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	e01f      	b.n	8003bea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc6:	3305      	adds	r3, #5
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	e00e      	b.n	8003bea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	461a      	mov	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	3305      	adds	r3, #5
 8003be8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4a5c      	ldr	r2, [pc, #368]	; (8003d60 <HAL_I2S_Init+0x270>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	08db      	lsrs	r3, r3, #3
 8003bf4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	e003      	b.n	8003c18 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c10:	2302      	movs	r3, #2
 8003c12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d902      	bls.n	8003c24 <HAL_I2S_Init+0x134>
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	2bff      	cmp	r3, #255	; 0xff
 8003c22:	d907      	bls.n	8003c34 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	f043 0210 	orr.w	r2, r3, #16
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e08f      	b.n	8003d54 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	ea42 0103 	orr.w	r1, r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c52:	f023 030f 	bic.w	r3, r3, #15
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6851      	ldr	r1, [r2, #4]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6892      	ldr	r2, [r2, #8]
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68d2      	ldr	r2, [r2, #12]
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6992      	ldr	r2, [r2, #24]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c76:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d161      	bne.n	8003d44 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a38      	ldr	r2, [pc, #224]	; (8003d64 <HAL_I2S_Init+0x274>)
 8003c84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a37      	ldr	r2, [pc, #220]	; (8003d68 <HAL_I2S_Init+0x278>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <HAL_I2S_Init+0x1a4>
 8003c90:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <HAL_I2S_Init+0x27c>)
 8003c92:	e001      	b.n	8003c98 <HAL_I2S_Init+0x1a8>
 8003c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	4932      	ldr	r1, [pc, #200]	; (8003d68 <HAL_I2S_Init+0x278>)
 8003ca0:	428a      	cmp	r2, r1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_I2S_Init+0x1b8>
 8003ca4:	4a31      	ldr	r2, [pc, #196]	; (8003d6c <HAL_I2S_Init+0x27c>)
 8003ca6:	e001      	b.n	8003cac <HAL_I2S_Init+0x1bc>
 8003ca8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003cac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003cb0:	f023 030f 	bic.w	r3, r3, #15
 8003cb4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a2b      	ldr	r2, [pc, #172]	; (8003d68 <HAL_I2S_Init+0x278>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d101      	bne.n	8003cc4 <HAL_I2S_Init+0x1d4>
 8003cc0:	4b2a      	ldr	r3, [pc, #168]	; (8003d6c <HAL_I2S_Init+0x27c>)
 8003cc2:	e001      	b.n	8003cc8 <HAL_I2S_Init+0x1d8>
 8003cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc8:	2202      	movs	r2, #2
 8003cca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a25      	ldr	r2, [pc, #148]	; (8003d68 <HAL_I2S_Init+0x278>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_I2S_Init+0x1ea>
 8003cd6:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_I2S_Init+0x27c>)
 8003cd8:	e001      	b.n	8003cde <HAL_I2S_Init+0x1ee>
 8003cda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cea:	d003      	beq.n	8003cf4 <HAL_I2S_Init+0x204>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d103      	bne.n	8003cfc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	e001      	b.n	8003d00 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	b299      	uxth	r1, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003d16:	4303      	orrs	r3, r0
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	897b      	ldrh	r3, [r7, #10]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d2c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <HAL_I2S_Init+0x278>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d101      	bne.n	8003d3c <HAL_I2S_Init+0x24c>
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_I2S_Init+0x27c>)
 8003d3a:	e001      	b.n	8003d40 <HAL_I2S_Init+0x250>
 8003d3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d40:	897a      	ldrh	r2, [r7, #10]
 8003d42:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	08003e67 	.word	0x08003e67
 8003d60:	cccccccd 	.word	0xcccccccd
 8003d64:	08003f7d 	.word	0x08003f7d
 8003d68:	40003800 	.word	0x40003800
 8003d6c:	40003400 	.word	0x40003400

08003d70 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	881a      	ldrh	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	1c9a      	adds	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10e      	bne.n	8003e00 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003df0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ffb8 	bl	8003d70 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	b292      	uxth	r2, r2
 8003e1c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	1c9a      	adds	r2, r3, #2
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10e      	bne.n	8003e5e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e4e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff ff93 	bl	8003d84 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b086      	sub	sp, #24
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d13a      	bne.n	8003ef8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d109      	bne.n	8003ea0 <I2S_IRQHandler+0x3a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d102      	bne.n	8003ea0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ffb4 	bl	8003e08 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	d126      	bne.n	8003ef8 <I2S_IRQHandler+0x92>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d11f      	bne.n	8003ef8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ec6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	f043 0202 	orr.w	r2, r3, #2
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ff50 	bl	8003d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d136      	bne.n	8003f72 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d109      	bne.n	8003f22 <I2S_IRQHandler+0xbc>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f18:	2b80      	cmp	r3, #128	; 0x80
 8003f1a:	d102      	bne.n	8003f22 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff ff45 	bl	8003dac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d122      	bne.n	8003f72 <I2S_IRQHandler+0x10c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d11b      	bne.n	8003f72 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f48:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	f043 0204 	orr.w	r2, r3, #4
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff ff13 	bl	8003d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f72:	bf00      	nop
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4aa2      	ldr	r2, [pc, #648]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d101      	bne.n	8003f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f96:	4ba2      	ldr	r3, [pc, #648]	; (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f98:	e001      	b.n	8003f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a9b      	ldr	r2, [pc, #620]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003fb4:	4b9a      	ldr	r3, [pc, #616]	; (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fb6:	e001      	b.n	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc8:	d004      	beq.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 8099 	bne.w	8004106 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d107      	bne.n	8003fee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f925 	bl	8004238 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d107      	bne.n	8004008 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f9c8 	bl	8004398 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d13a      	bne.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d035      	beq.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a7e      	ldr	r2, [pc, #504]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004026:	4b7e      	ldr	r3, [pc, #504]	; (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004028:	e001      	b.n	800402e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800402a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4979      	ldr	r1, [pc, #484]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004036:	428b      	cmp	r3, r1
 8004038:	d101      	bne.n	800403e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800403a:	4b79      	ldr	r3, [pc, #484]	; (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800403c:	e001      	b.n	8004042 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800403e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004042:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004046:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004056:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f043 0202 	orr.w	r2, r3, #2
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fe88 	bl	8003d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b08      	cmp	r3, #8
 8004090:	f040 80be 	bne.w	8004210 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80b8 	beq.w	8004210 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a59      	ldr	r2, [pc, #356]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80040ba:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040bc:	e001      	b.n	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80040be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4954      	ldr	r1, [pc, #336]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040ca:	428b      	cmp	r3, r1
 80040cc:	d101      	bne.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80040ce:	4b54      	ldr	r3, [pc, #336]	; (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040d0:	e001      	b.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80040d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040dc:	2300      	movs	r3, #0
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f043 0204 	orr.w	r2, r3, #4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff fe4a 	bl	8003d98 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004104:	e084      	b.n	8004210 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b02      	cmp	r3, #2
 800410e:	d107      	bne.n	8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f8be 	bl	800429c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8fd 	bl	8004334 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d12f      	bne.n	80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d02a      	beq.n	80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800415c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a2e      	ldr	r2, [pc, #184]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d101      	bne.n	800416c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004168:	4b2d      	ldr	r3, [pc, #180]	; (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800416a:	e001      	b.n	8004170 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800416c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4929      	ldr	r1, [pc, #164]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004178:	428b      	cmp	r3, r1
 800417a:	d101      	bne.n	8004180 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800417c:	4b28      	ldr	r3, [pc, #160]	; (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800417e:	e001      	b.n	8004184 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004184:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004188:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f043 0202 	orr.w	r2, r3, #2
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff fdfa 	bl	8003d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d131      	bne.n	8004212 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02c      	beq.n	8004212 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a17      	ldr	r2, [pc, #92]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80041c2:	4b17      	ldr	r3, [pc, #92]	; (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041c4:	e001      	b.n	80041ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80041c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4912      	ldr	r1, [pc, #72]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041d2:	428b      	cmp	r3, r1
 80041d4:	d101      	bne.n	80041da <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041d8:	e001      	b.n	80041de <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80041da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041f2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004200:	f043 0204 	orr.w	r2, r3, #4
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff fdc5 	bl	8003d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800420e:	e000      	b.n	8004212 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004210:	bf00      	nop
}
 8004212:	bf00      	nop
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40003800 	.word	0x40003800
 8004220:	40003400 	.word	0x40003400

08004224 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	1c99      	adds	r1, r3, #2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6251      	str	r1, [r2, #36]	; 0x24
 800424a:	881a      	ldrh	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d113      	bne.n	8004292 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004278:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ffc9 	bl	8004224 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	1c99      	adds	r1, r3, #2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6251      	str	r1, [r2, #36]	; 0x24
 80042ae:	8819      	ldrh	r1, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1d      	ldr	r2, [pc, #116]	; (800432c <I2SEx_TxISR_I2SExt+0x90>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <I2SEx_TxISR_I2SExt+0x22>
 80042ba:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <I2SEx_TxISR_I2SExt+0x94>)
 80042bc:	e001      	b.n	80042c2 <I2SEx_TxISR_I2SExt+0x26>
 80042be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042c2:	460a      	mov	r2, r1
 80042c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d121      	bne.n	8004322 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a12      	ldr	r2, [pc, #72]	; (800432c <I2SEx_TxISR_I2SExt+0x90>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d101      	bne.n	80042ec <I2SEx_TxISR_I2SExt+0x50>
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <I2SEx_TxISR_I2SExt+0x94>)
 80042ea:	e001      	b.n	80042f0 <I2SEx_TxISR_I2SExt+0x54>
 80042ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	490d      	ldr	r1, [pc, #52]	; (800432c <I2SEx_TxISR_I2SExt+0x90>)
 80042f8:	428b      	cmp	r3, r1
 80042fa:	d101      	bne.n	8004300 <I2SEx_TxISR_I2SExt+0x64>
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <I2SEx_TxISR_I2SExt+0x94>)
 80042fe:	e001      	b.n	8004304 <I2SEx_TxISR_I2SExt+0x68>
 8004300:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004304:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004308:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff ff81 	bl	8004224 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40003800 	.word	0x40003800
 8004330:	40003400 	.word	0x40003400

08004334 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68d8      	ldr	r0, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	1c99      	adds	r1, r3, #2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800434c:	b282      	uxth	r2, r0
 800434e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d113      	bne.n	8004390 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004376:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff ff4a 	bl	8004224 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a20      	ldr	r2, [pc, #128]	; (8004428 <I2SEx_RxISR_I2SExt+0x90>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d101      	bne.n	80043ae <I2SEx_RxISR_I2SExt+0x16>
 80043aa:	4b20      	ldr	r3, [pc, #128]	; (800442c <I2SEx_RxISR_I2SExt+0x94>)
 80043ac:	e001      	b.n	80043b2 <I2SEx_RxISR_I2SExt+0x1a>
 80043ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043b2:	68d8      	ldr	r0, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	1c99      	adds	r1, r3, #2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80043be:	b282      	uxth	r2, r0
 80043c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d121      	bne.n	800441e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a12      	ldr	r2, [pc, #72]	; (8004428 <I2SEx_RxISR_I2SExt+0x90>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d101      	bne.n	80043e8 <I2SEx_RxISR_I2SExt+0x50>
 80043e4:	4b11      	ldr	r3, [pc, #68]	; (800442c <I2SEx_RxISR_I2SExt+0x94>)
 80043e6:	e001      	b.n	80043ec <I2SEx_RxISR_I2SExt+0x54>
 80043e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	490d      	ldr	r1, [pc, #52]	; (8004428 <I2SEx_RxISR_I2SExt+0x90>)
 80043f4:	428b      	cmp	r3, r1
 80043f6:	d101      	bne.n	80043fc <I2SEx_RxISR_I2SExt+0x64>
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <I2SEx_RxISR_I2SExt+0x94>)
 80043fa:	e001      	b.n	8004400 <I2SEx_RxISR_I2SExt+0x68>
 80043fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004400:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004404:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff ff03 	bl	8004224 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40003800 	.word	0x40003800
 800442c:	40003400 	.word	0x40003400

08004430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e25b      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d075      	beq.n	800453a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444e:	4ba3      	ldr	r3, [pc, #652]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b04      	cmp	r3, #4
 8004458:	d00c      	beq.n	8004474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800445a:	4ba0      	ldr	r3, [pc, #640]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004462:	2b08      	cmp	r3, #8
 8004464:	d112      	bne.n	800448c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004466:	4b9d      	ldr	r3, [pc, #628]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004472:	d10b      	bne.n	800448c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004474:	4b99      	ldr	r3, [pc, #612]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d05b      	beq.n	8004538 <HAL_RCC_OscConfig+0x108>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d157      	bne.n	8004538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e236      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004494:	d106      	bne.n	80044a4 <HAL_RCC_OscConfig+0x74>
 8004496:	4b91      	ldr	r3, [pc, #580]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a90      	ldr	r2, [pc, #576]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e01d      	b.n	80044e0 <HAL_RCC_OscConfig+0xb0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x98>
 80044ae:	4b8b      	ldr	r3, [pc, #556]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a8a      	ldr	r2, [pc, #552]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	4b88      	ldr	r3, [pc, #544]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a87      	ldr	r2, [pc, #540]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	e00b      	b.n	80044e0 <HAL_RCC_OscConfig+0xb0>
 80044c8:	4b84      	ldr	r3, [pc, #528]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a83      	ldr	r2, [pc, #524]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	4b81      	ldr	r3, [pc, #516]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a80      	ldr	r2, [pc, #512]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d013      	beq.n	8004510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7fc fe3a 	bl	8001160 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f0:	f7fc fe36 	bl	8001160 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e1fb      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004502:	4b76      	ldr	r3, [pc, #472]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0xc0>
 800450e:	e014      	b.n	800453a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004510:	f7fc fe26 	bl	8001160 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004518:	f7fc fe22 	bl	8001160 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	; 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e1e7      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452a:	4b6c      	ldr	r3, [pc, #432]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0xe8>
 8004536:	e000      	b.n	800453a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d063      	beq.n	800460e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004546:	4b65      	ldr	r3, [pc, #404]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00b      	beq.n	800456a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004552:	4b62      	ldr	r3, [pc, #392]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800455a:	2b08      	cmp	r3, #8
 800455c:	d11c      	bne.n	8004598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455e:	4b5f      	ldr	r3, [pc, #380]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d116      	bne.n	8004598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456a:	4b5c      	ldr	r3, [pc, #368]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_RCC_OscConfig+0x152>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d001      	beq.n	8004582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e1bb      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004582:	4b56      	ldr	r3, [pc, #344]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4952      	ldr	r1, [pc, #328]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004596:	e03a      	b.n	800460e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d020      	beq.n	80045e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a0:	4b4f      	ldr	r3, [pc, #316]	; (80046e0 <HAL_RCC_OscConfig+0x2b0>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fc fddb 	bl	8001160 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ae:	f7fc fdd7 	bl	8001160 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e19c      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c0:	4b46      	ldr	r3, [pc, #280]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045cc:	4b43      	ldr	r3, [pc, #268]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4940      	ldr	r1, [pc, #256]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	600b      	str	r3, [r1, #0]
 80045e0:	e015      	b.n	800460e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e2:	4b3f      	ldr	r3, [pc, #252]	; (80046e0 <HAL_RCC_OscConfig+0x2b0>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fc fdba 	bl	8001160 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f0:	f7fc fdb6 	bl	8001160 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e17b      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004602:	4b36      	ldr	r3, [pc, #216]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d030      	beq.n	800467c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d016      	beq.n	8004650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004622:	4b30      	ldr	r3, [pc, #192]	; (80046e4 <HAL_RCC_OscConfig+0x2b4>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004628:	f7fc fd9a 	bl	8001160 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004630:	f7fc fd96 	bl	8001160 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e15b      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x200>
 800464e:	e015      	b.n	800467c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004650:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <HAL_RCC_OscConfig+0x2b4>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004656:	f7fc fd83 	bl	8001160 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465e:	f7fc fd7f 	bl	8001160 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e144      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004670:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80a0 	beq.w	80047ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800468a:	2300      	movs	r3, #0
 800468c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10f      	bne.n	80046ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	4a0e      	ldr	r2, [pc, #56]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80046a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a8:	6413      	str	r3, [r2, #64]	; 0x40
 80046aa:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b6:	2301      	movs	r3, #1
 80046b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_OscConfig+0x2b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d121      	bne.n	800470a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c6:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <HAL_RCC_OscConfig+0x2b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <HAL_RCC_OscConfig+0x2b8>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d2:	f7fc fd45 	bl	8001160 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d8:	e011      	b.n	80046fe <HAL_RCC_OscConfig+0x2ce>
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800
 80046e0:	42470000 	.word	0x42470000
 80046e4:	42470e80 	.word	0x42470e80
 80046e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ec:	f7fc fd38 	bl	8001160 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e0fd      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fe:	4b81      	ldr	r3, [pc, #516]	; (8004904 <HAL_RCC_OscConfig+0x4d4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d106      	bne.n	8004720 <HAL_RCC_OscConfig+0x2f0>
 8004712:	4b7d      	ldr	r3, [pc, #500]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	4a7c      	ldr	r2, [pc, #496]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	6713      	str	r3, [r2, #112]	; 0x70
 800471e:	e01c      	b.n	800475a <HAL_RCC_OscConfig+0x32a>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b05      	cmp	r3, #5
 8004726:	d10c      	bne.n	8004742 <HAL_RCC_OscConfig+0x312>
 8004728:	4b77      	ldr	r3, [pc, #476]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	4a76      	ldr	r2, [pc, #472]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 800472e:	f043 0304 	orr.w	r3, r3, #4
 8004732:	6713      	str	r3, [r2, #112]	; 0x70
 8004734:	4b74      	ldr	r3, [pc, #464]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	4a73      	ldr	r2, [pc, #460]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	6713      	str	r3, [r2, #112]	; 0x70
 8004740:	e00b      	b.n	800475a <HAL_RCC_OscConfig+0x32a>
 8004742:	4b71      	ldr	r3, [pc, #452]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a70      	ldr	r2, [pc, #448]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	6713      	str	r3, [r2, #112]	; 0x70
 800474e:	4b6e      	ldr	r3, [pc, #440]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	4a6d      	ldr	r2, [pc, #436]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 8004754:	f023 0304 	bic.w	r3, r3, #4
 8004758:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d015      	beq.n	800478e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004762:	f7fc fcfd 	bl	8001160 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004768:	e00a      	b.n	8004780 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7fc fcf9 	bl	8001160 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f241 3288 	movw	r2, #5000	; 0x1388
 8004778:	4293      	cmp	r3, r2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e0bc      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004780:	4b61      	ldr	r3, [pc, #388]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ee      	beq.n	800476a <HAL_RCC_OscConfig+0x33a>
 800478c:	e014      	b.n	80047b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478e:	f7fc fce7 	bl	8001160 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004794:	e00a      	b.n	80047ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004796:	f7fc fce3 	bl	8001160 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e0a6      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ac:	4b56      	ldr	r3, [pc, #344]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ee      	bne.n	8004796 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047b8:	7dfb      	ldrb	r3, [r7, #23]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d105      	bne.n	80047ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047be:	4b52      	ldr	r3, [pc, #328]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a51      	ldr	r2, [pc, #324]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 80047c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8092 	beq.w	80048f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047d4:	4b4c      	ldr	r3, [pc, #304]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 030c 	and.w	r3, r3, #12
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d05c      	beq.n	800489a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d141      	bne.n	800486c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e8:	4b48      	ldr	r3, [pc, #288]	; (800490c <HAL_RCC_OscConfig+0x4dc>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7fc fcb7 	bl	8001160 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f6:	f7fc fcb3 	bl	8001160 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e078      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004808:	4b3f      	ldr	r3, [pc, #252]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f0      	bne.n	80047f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	019b      	lsls	r3, r3, #6
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	3b01      	subs	r3, #1
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	061b      	lsls	r3, r3, #24
 8004838:	4933      	ldr	r1, [pc, #204]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 800483a:	4313      	orrs	r3, r2
 800483c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800483e:	4b33      	ldr	r3, [pc, #204]	; (800490c <HAL_RCC_OscConfig+0x4dc>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004844:	f7fc fc8c 	bl	8001160 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800484c:	f7fc fc88 	bl	8001160 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e04d      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485e:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x41c>
 800486a:	e045      	b.n	80048f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486c:	4b27      	ldr	r3, [pc, #156]	; (800490c <HAL_RCC_OscConfig+0x4dc>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004872:	f7fc fc75 	bl	8001160 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800487a:	f7fc fc71 	bl	8001160 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e036      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488c:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x44a>
 8004898:	e02e      	b.n	80048f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e029      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048a6:	4b18      	ldr	r3, [pc, #96]	; (8004908 <HAL_RCC_OscConfig+0x4d8>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d11c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d115      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048ce:	4013      	ands	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d10d      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d106      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40007000 	.word	0x40007000
 8004908:	40023800 	.word	0x40023800
 800490c:	42470060 	.word	0x42470060

08004910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e0cc      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004924:	4b68      	ldr	r3, [pc, #416]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d90c      	bls.n	800494c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b65      	ldr	r3, [pc, #404]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b63      	ldr	r3, [pc, #396]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0b8      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d020      	beq.n	800499a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004964:	4b59      	ldr	r3, [pc, #356]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4a58      	ldr	r2, [pc, #352]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800496e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800497c:	4b53      	ldr	r3, [pc, #332]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4a52      	ldr	r2, [pc, #328]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004988:	4b50      	ldr	r3, [pc, #320]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	494d      	ldr	r1, [pc, #308]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d044      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d107      	bne.n	80049be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ae:	4b47      	ldr	r3, [pc, #284]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d119      	bne.n	80049ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e07f      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d003      	beq.n	80049ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d107      	bne.n	80049de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ce:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e06f      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049de:	4b3b      	ldr	r3, [pc, #236]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e067      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ee:	4b37      	ldr	r3, [pc, #220]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f023 0203 	bic.w	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4934      	ldr	r1, [pc, #208]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a00:	f7fc fbae 	bl	8001160 <HAL_GetTick>
 8004a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a08:	f7fc fbaa 	bl	8001160 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e04f      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1e:	4b2b      	ldr	r3, [pc, #172]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 020c 	and.w	r2, r3, #12
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d1eb      	bne.n	8004a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a30:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d20c      	bcs.n	8004a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3e:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a46:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e032      	b.n	8004abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4916      	ldr	r1, [pc, #88]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a82:	4b12      	ldr	r3, [pc, #72]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	490e      	ldr	r1, [pc, #56]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a96:	f000 f821 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8004a9a:	4601      	mov	r1, r0
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa8:	5cd3      	ldrb	r3, [r2, r3]
 8004aaa:	fa21 f303 	lsr.w	r3, r1, r3
 8004aae:	4a09      	ldr	r2, [pc, #36]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ab2:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fc fb0e 	bl	80010d8 <HAL_InitTick>

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40023c00 	.word	0x40023c00
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	0800a070 	.word	0x0800a070
 8004ad4:	20000000 	.word	0x20000000
 8004ad8:	20000004 	.word	0x20000004

08004adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	2300      	movs	r3, #0
 8004aec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af2:	4b63      	ldr	r3, [pc, #396]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d007      	beq.n	8004b0e <HAL_RCC_GetSysClockFreq+0x32>
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d008      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x38>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f040 80b4 	bne.w	8004c70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b08:	4b5e      	ldr	r3, [pc, #376]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b0a:	60bb      	str	r3, [r7, #8]
       break;
 8004b0c:	e0b3      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b0e:	4b5e      	ldr	r3, [pc, #376]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004b10:	60bb      	str	r3, [r7, #8]
      break;
 8004b12:	e0b0      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b14:	4b5a      	ldr	r3, [pc, #360]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b1e:	4b58      	ldr	r3, [pc, #352]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d04a      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2a:	4b55      	ldr	r3, [pc, #340]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	099b      	lsrs	r3, r3, #6
 8004b30:	f04f 0400 	mov.w	r4, #0
 8004b34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	ea03 0501 	and.w	r5, r3, r1
 8004b40:	ea04 0602 	and.w	r6, r4, r2
 8004b44:	4629      	mov	r1, r5
 8004b46:	4632      	mov	r2, r6
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	f04f 0400 	mov.w	r4, #0
 8004b50:	0154      	lsls	r4, r2, #5
 8004b52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b56:	014b      	lsls	r3, r1, #5
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	1b49      	subs	r1, r1, r5
 8004b5e:	eb62 0206 	sbc.w	r2, r2, r6
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	f04f 0400 	mov.w	r4, #0
 8004b6a:	0194      	lsls	r4, r2, #6
 8004b6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b70:	018b      	lsls	r3, r1, #6
 8004b72:	1a5b      	subs	r3, r3, r1
 8004b74:	eb64 0402 	sbc.w	r4, r4, r2
 8004b78:	f04f 0100 	mov.w	r1, #0
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	00e2      	lsls	r2, r4, #3
 8004b82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b86:	00d9      	lsls	r1, r3, #3
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4614      	mov	r4, r2
 8004b8c:	195b      	adds	r3, r3, r5
 8004b8e:	eb44 0406 	adc.w	r4, r4, r6
 8004b92:	f04f 0100 	mov.w	r1, #0
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	0262      	lsls	r2, r4, #9
 8004b9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ba0:	0259      	lsls	r1, r3, #9
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4614      	mov	r4, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	4621      	mov	r1, r4
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f04f 0400 	mov.w	r4, #0
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4623      	mov	r3, r4
 8004bb4:	f7fb fb5c 	bl	8000270 <__aeabi_uldivmod>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	e049      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc0:	4b2f      	ldr	r3, [pc, #188]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	099b      	lsrs	r3, r3, #6
 8004bc6:	f04f 0400 	mov.w	r4, #0
 8004bca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	ea03 0501 	and.w	r5, r3, r1
 8004bd6:	ea04 0602 	and.w	r6, r4, r2
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4632      	mov	r2, r6
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	f04f 0400 	mov.w	r4, #0
 8004be6:	0154      	lsls	r4, r2, #5
 8004be8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bec:	014b      	lsls	r3, r1, #5
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	1b49      	subs	r1, r1, r5
 8004bf4:	eb62 0206 	sbc.w	r2, r2, r6
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	f04f 0400 	mov.w	r4, #0
 8004c00:	0194      	lsls	r4, r2, #6
 8004c02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c06:	018b      	lsls	r3, r1, #6
 8004c08:	1a5b      	subs	r3, r3, r1
 8004c0a:	eb64 0402 	sbc.w	r4, r4, r2
 8004c0e:	f04f 0100 	mov.w	r1, #0
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	00e2      	lsls	r2, r4, #3
 8004c18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c1c:	00d9      	lsls	r1, r3, #3
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4614      	mov	r4, r2
 8004c22:	195b      	adds	r3, r3, r5
 8004c24:	eb44 0406 	adc.w	r4, r4, r6
 8004c28:	f04f 0100 	mov.w	r1, #0
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	02a2      	lsls	r2, r4, #10
 8004c32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c36:	0299      	lsls	r1, r3, #10
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4614      	mov	r4, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	4621      	mov	r1, r4
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f04f 0400 	mov.w	r4, #0
 8004c46:	461a      	mov	r2, r3
 8004c48:	4623      	mov	r3, r4
 8004c4a:	f7fb fb11 	bl	8000270 <__aeabi_uldivmod>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	460c      	mov	r4, r1
 8004c52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	0c1b      	lsrs	r3, r3, #16
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	3301      	adds	r3, #1
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6c:	60bb      	str	r3, [r7, #8]
      break;
 8004c6e:	e002      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c72:	60bb      	str	r3, [r7, #8]
      break;
 8004c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c76:	68bb      	ldr	r3, [r7, #8]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c80:	40023800 	.word	0x40023800
 8004c84:	00f42400 	.word	0x00f42400
 8004c88:	007a1200 	.word	0x007a1200

08004c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c90:	4b03      	ldr	r3, [pc, #12]	; (8004ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c92:	681b      	ldr	r3, [r3, #0]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	20000000 	.word	0x20000000

08004ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ca8:	f7ff fff0 	bl	8004c8c <HAL_RCC_GetHCLKFreq>
 8004cac:	4601      	mov	r1, r0
 8004cae:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	0a9b      	lsrs	r3, r3, #10
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	4a03      	ldr	r2, [pc, #12]	; (8004cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cba:	5cd3      	ldrb	r3, [r2, r3]
 8004cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	0800a080 	.word	0x0800a080

08004ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cd0:	f7ff ffdc 	bl	8004c8c <HAL_RCC_GetHCLKFreq>
 8004cd4:	4601      	mov	r1, r0
 8004cd6:	4b05      	ldr	r3, [pc, #20]	; (8004cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	0b5b      	lsrs	r3, r3, #13
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	4a03      	ldr	r2, [pc, #12]	; (8004cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ce2:	5cd3      	ldrb	r3, [r2, r3]
 8004ce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	0800a080 	.word	0x0800a080

08004cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d035      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d1c:	4b62      	ldr	r3, [pc, #392]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d22:	f7fc fa1d 	bl	8001160 <HAL_GetTick>
 8004d26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d2a:	f7fc fa19 	bl	8001160 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e0b0      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d3c:	4b5b      	ldr	r3, [pc, #364]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f0      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	019a      	lsls	r2, r3, #6
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	071b      	lsls	r3, r3, #28
 8004d54:	4955      	ldr	r1, [pc, #340]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d5c:	4b52      	ldr	r3, [pc, #328]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d62:	f7fc f9fd 	bl	8001160 <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d68:	e008      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d6a:	f7fc f9f9 	bl	8001160 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e090      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d7c:	4b4b      	ldr	r3, [pc, #300]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 8083 	beq.w	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	4b44      	ldr	r3, [pc, #272]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	4a43      	ldr	r2, [pc, #268]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da4:	6413      	str	r3, [r2, #64]	; 0x40
 8004da6:	4b41      	ldr	r3, [pc, #260]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004db2:	4b3f      	ldr	r3, [pc, #252]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a3e      	ldr	r2, [pc, #248]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dbe:	f7fc f9cf 	bl	8001160 <HAL_GetTick>
 8004dc2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dc6:	f7fc f9cb 	bl	8001160 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e062      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dd8:	4b35      	ldr	r3, [pc, #212]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f0      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004de4:	4b31      	ldr	r3, [pc, #196]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d02f      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d028      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e02:	4b2a      	ldr	r3, [pc, #168]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e0c:	4b29      	ldr	r3, [pc, #164]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e12:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e18:	4a24      	ldr	r2, [pc, #144]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e1e:	4b23      	ldr	r3, [pc, #140]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d114      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e2a:	f7fc f999 	bl	8001160 <HAL_GetTick>
 8004e2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e30:	e00a      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e32:	f7fc f995 	bl	8001160 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e02a      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e48:	4b18      	ldr	r3, [pc, #96]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ee      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e60:	d10d      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e62:	4b12      	ldr	r3, [pc, #72]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e76:	490d      	ldr	r1, [pc, #52]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]
 8004e7c:	e005      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e88:	6093      	str	r3, [r2, #8]
 8004e8a:	4b08      	ldr	r3, [pc, #32]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e96:	4905      	ldr	r1, [pc, #20]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	42470068 	.word	0x42470068
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40007000 	.word	0x40007000
 8004eb4:	42470e40 	.word	0x42470e40

08004eb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d13d      	bne.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ed6:	4b22      	ldr	r3, [pc, #136]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ede:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d12f      	bne.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004eea:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004eec:	617b      	str	r3, [r7, #20]
          break;
 8004eee:	e02f      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004efc:	d108      	bne.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004efe:	4b18      	ldr	r3, [pc, #96]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e007      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f18:	4a14      	ldr	r2, [pc, #80]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f20:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f34:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f3a:	0f1b      	lsrs	r3, r3, #28
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f46:	617b      	str	r3, [r7, #20]
          break;
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
          break;
 8004f4e:	bf00      	nop
        }
      }
      break;
 8004f50:	bf00      	nop
    }
  }
  return frequency;
 8004f52:	697b      	ldr	r3, [r7, #20]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40023800 	.word	0x40023800
 8004f64:	00bb8000 	.word	0x00bb8000
 8004f68:	007a1200 	.word	0x007a1200
 8004f6c:	00f42400 	.word	0x00f42400

08004f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e056      	b.n	8005030 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fb fe5b 	bl	8000c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	ea42 0103 	orr.w	r1, r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	0c1b      	lsrs	r3, r3, #16
 8005000:	f003 0104 	and.w	r1, r3, #4
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69da      	ldr	r2, [r3, #28]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800501e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e03f      	b.n	80050ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fb fe42 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2224      	movs	r2, #36	; 0x24
 8005068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800507a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fb95 	bl	80057ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005090:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695a      	ldr	r2, [r3, #20]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d166      	bne.n	80051bc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_UART_Receive_DMA+0x26>
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e05f      	b.n	80051be <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_UART_Receive_DMA+0x38>
 8005108:	2302      	movs	r3, #2
 800510a:	e058      	b.n	80051be <HAL_UART_Receive_DMA+0xea>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	88fa      	ldrh	r2, [r7, #6]
 800511e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2222      	movs	r2, #34	; 0x22
 800512a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	4a25      	ldr	r2, [pc, #148]	; (80051c8 <HAL_UART_Receive_DMA+0xf4>)
 8005134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513a:	4a24      	ldr	r2, [pc, #144]	; (80051cc <HAL_UART_Receive_DMA+0xf8>)
 800513c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005142:	4a23      	ldr	r2, [pc, #140]	; (80051d0 <HAL_UART_Receive_DMA+0xfc>)
 8005144:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514a:	2200      	movs	r2, #0
 800514c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800514e:	f107 0308 	add.w	r3, r7, #8
 8005152:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	f7fc f9e9 	bl	800153c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005196:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	e000      	b.n	80051be <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80051bc:	2302      	movs	r3, #2
  }
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	08005425 	.word	0x08005425
 80051cc:	0800548d 	.word	0x0800548d
 80051d0:	080054a9 	.word	0x080054a9

080051d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10d      	bne.n	8005226 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <HAL_UART_IRQHandler+0x52>
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa42 	bl	80056a8 <UART_Receive_IT>
      return;
 8005224:	e0d1      	b.n	80053ca <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80b0 	beq.w	800538e <HAL_UART_IRQHandler+0x1ba>
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d105      	bne.n	8005244 <HAL_UART_IRQHandler+0x70>
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80a5 	beq.w	800538e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_UART_IRQHandler+0x90>
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	f043 0201 	orr.w	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_UART_IRQHandler+0xb0>
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527c:	f043 0202 	orr.w	r2, r3, #2
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_UART_IRQHandler+0xd0>
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	f043 0204 	orr.w	r2, r3, #4
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00f      	beq.n	80052ce <HAL_UART_IRQHandler+0xfa>
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <HAL_UART_IRQHandler+0xee>
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	f043 0208 	orr.w	r2, r3, #8
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d078      	beq.n	80053c8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <HAL_UART_IRQHandler+0x11c>
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f9dc 	bl	80056a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	bf0c      	ite	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	2300      	movne	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <HAL_UART_IRQHandler+0x144>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d031      	beq.n	800537c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f925 	bl	8005568 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d123      	bne.n	8005374 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800533a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005340:	2b00      	cmp	r3, #0
 8005342:	d013      	beq.n	800536c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	4a21      	ldr	r2, [pc, #132]	; (80053d0 <HAL_UART_IRQHandler+0x1fc>)
 800534a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005350:	4618      	mov	r0, r3
 8005352:	f7fc f94b 	bl	80015ec <HAL_DMA_Abort_IT>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d016      	beq.n	800538a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005366:	4610      	mov	r0, r2
 8005368:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536a:	e00e      	b.n	800538a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f84f 	bl	8005410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005372:	e00a      	b.n	800538a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f84b 	bl	8005410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537a:	e006      	b.n	800538a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f847 	bl	8005410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005388:	e01e      	b.n	80053c8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800538a:	bf00      	nop
    return;
 800538c:	e01c      	b.n	80053c8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <HAL_UART_IRQHandler+0x1d6>
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f912 	bl	80055cc <UART_Transmit_IT>
    return;
 80053a8:	e00f      	b.n	80053ca <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <HAL_UART_IRQHandler+0x1f6>
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f95a 	bl	8005678 <UART_EndTransmit_IT>
    return;
 80053c4:	bf00      	nop
 80053c6:	e000      	b.n	80053ca <HAL_UART_IRQHandler+0x1f6>
    return;
 80053c8:	bf00      	nop
  }
}
 80053ca:	3720      	adds	r7, #32
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	080055a5 	.word	0x080055a5

080053d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d11e      	bne.n	800547e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005454:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005474:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7ff ffb2 	bl	80053e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f7ff ffae 	bl	80053fc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c4:	2b80      	cmp	r3, #128	; 0x80
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b21      	cmp	r3, #33	; 0x21
 80054da:	d108      	bne.n	80054ee <UART_DMAError+0x46>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2200      	movs	r2, #0
 80054e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80054e8:	68b8      	ldr	r0, [r7, #8]
 80054ea:	f000 f827 	bl	800553c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b40      	cmp	r3, #64	; 0x40
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b22      	cmp	r3, #34	; 0x22
 800550e:	d108      	bne.n	8005522 <UART_DMAError+0x7a>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2200      	movs	r2, #0
 800551a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800551c:	68b8      	ldr	r0, [r7, #8]
 800551e:	f000 f823 	bl	8005568 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005526:	f043 0210 	orr.w	r2, r3, #16
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800552e:	68b8      	ldr	r0, [r7, #8]
 8005530:	f7ff ff6e 	bl	8005410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005552:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800557e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff ff26 	bl	8005410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b21      	cmp	r3, #33	; 0x21
 80055de:	d144      	bne.n	800566a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e8:	d11a      	bne.n	8005620 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055fe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	621a      	str	r2, [r3, #32]
 8005612:	e00e      	b.n	8005632 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	621a      	str	r2, [r3, #32]
 800561e:	e008      	b.n	8005632 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	1c59      	adds	r1, r3, #1
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6211      	str	r1, [r2, #32]
 800562a:	781a      	ldrb	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29b      	uxth	r3, r3
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	4619      	mov	r1, r3
 8005640:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10f      	bne.n	8005666 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005654:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005664:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e000      	b.n	800566c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800566a:	2302      	movs	r3, #2
  }
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800568e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fe9b 	bl	80053d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b22      	cmp	r3, #34	; 0x22
 80056ba:	d171      	bne.n	80057a0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c4:	d123      	bne.n	800570e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10e      	bne.n	80056f2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	629a      	str	r2, [r3, #40]	; 0x28
 80056f0:	e029      	b.n	8005746 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	629a      	str	r2, [r3, #40]	; 0x28
 800570c:	e01b      	b.n	8005746 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10a      	bne.n	800572c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6858      	ldr	r0, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	1c59      	adds	r1, r3, #1
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6291      	str	r1, [r2, #40]	; 0x28
 8005726:	b2c2      	uxtb	r2, r0
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	e00c      	b.n	8005746 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	1c58      	adds	r0, r3, #1
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	6288      	str	r0, [r1, #40]	; 0x28
 800573e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29b      	uxth	r3, r3
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	4619      	mov	r1, r3
 8005754:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005756:	2b00      	cmp	r3, #0
 8005758:	d120      	bne.n	800579c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0220 	bic.w	r2, r2, #32
 8005768:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005778:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff fe28 	bl	80053e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	e002      	b.n	80057a2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	e000      	b.n	80057a2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
  }
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80057ee:	f023 030c 	bic.w	r3, r3, #12
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	430b      	orrs	r3, r1
 80057fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581a:	f040 818b 	bne.w	8005b34 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4ac1      	ldr	r2, [pc, #772]	; (8005b28 <UART_SetConfig+0x37c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d005      	beq.n	8005834 <UART_SetConfig+0x88>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4abf      	ldr	r2, [pc, #764]	; (8005b2c <UART_SetConfig+0x380>)
 800582e:	4293      	cmp	r3, r2
 8005830:	f040 80bd 	bne.w	80059ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005834:	f7ff fa4a 	bl	8004ccc <HAL_RCC_GetPCLK2Freq>
 8005838:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	461d      	mov	r5, r3
 800583e:	f04f 0600 	mov.w	r6, #0
 8005842:	46a8      	mov	r8, r5
 8005844:	46b1      	mov	r9, r6
 8005846:	eb18 0308 	adds.w	r3, r8, r8
 800584a:	eb49 0409 	adc.w	r4, r9, r9
 800584e:	4698      	mov	r8, r3
 8005850:	46a1      	mov	r9, r4
 8005852:	eb18 0805 	adds.w	r8, r8, r5
 8005856:	eb49 0906 	adc.w	r9, r9, r6
 800585a:	f04f 0100 	mov.w	r1, #0
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005866:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800586a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800586e:	4688      	mov	r8, r1
 8005870:	4691      	mov	r9, r2
 8005872:	eb18 0005 	adds.w	r0, r8, r5
 8005876:	eb49 0106 	adc.w	r1, r9, r6
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	461d      	mov	r5, r3
 8005880:	f04f 0600 	mov.w	r6, #0
 8005884:	196b      	adds	r3, r5, r5
 8005886:	eb46 0406 	adc.w	r4, r6, r6
 800588a:	461a      	mov	r2, r3
 800588c:	4623      	mov	r3, r4
 800588e:	f7fa fcef 	bl	8000270 <__aeabi_uldivmod>
 8005892:	4603      	mov	r3, r0
 8005894:	460c      	mov	r4, r1
 8005896:	461a      	mov	r2, r3
 8005898:	4ba5      	ldr	r3, [pc, #660]	; (8005b30 <UART_SetConfig+0x384>)
 800589a:	fba3 2302 	umull	r2, r3, r3, r2
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	461d      	mov	r5, r3
 80058a8:	f04f 0600 	mov.w	r6, #0
 80058ac:	46a9      	mov	r9, r5
 80058ae:	46b2      	mov	sl, r6
 80058b0:	eb19 0309 	adds.w	r3, r9, r9
 80058b4:	eb4a 040a 	adc.w	r4, sl, sl
 80058b8:	4699      	mov	r9, r3
 80058ba:	46a2      	mov	sl, r4
 80058bc:	eb19 0905 	adds.w	r9, r9, r5
 80058c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80058c4:	f04f 0100 	mov.w	r1, #0
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058d8:	4689      	mov	r9, r1
 80058da:	4692      	mov	sl, r2
 80058dc:	eb19 0005 	adds.w	r0, r9, r5
 80058e0:	eb4a 0106 	adc.w	r1, sl, r6
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	461d      	mov	r5, r3
 80058ea:	f04f 0600 	mov.w	r6, #0
 80058ee:	196b      	adds	r3, r5, r5
 80058f0:	eb46 0406 	adc.w	r4, r6, r6
 80058f4:	461a      	mov	r2, r3
 80058f6:	4623      	mov	r3, r4
 80058f8:	f7fa fcba 	bl	8000270 <__aeabi_uldivmod>
 80058fc:	4603      	mov	r3, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	461a      	mov	r2, r3
 8005902:	4b8b      	ldr	r3, [pc, #556]	; (8005b30 <UART_SetConfig+0x384>)
 8005904:	fba3 1302 	umull	r1, r3, r3, r2
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	2164      	movs	r1, #100	; 0x64
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	3332      	adds	r3, #50	; 0x32
 8005916:	4a86      	ldr	r2, [pc, #536]	; (8005b30 <UART_SetConfig+0x384>)
 8005918:	fba2 2303 	umull	r2, r3, r2, r3
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005924:	4498      	add	r8, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	461d      	mov	r5, r3
 800592a:	f04f 0600 	mov.w	r6, #0
 800592e:	46a9      	mov	r9, r5
 8005930:	46b2      	mov	sl, r6
 8005932:	eb19 0309 	adds.w	r3, r9, r9
 8005936:	eb4a 040a 	adc.w	r4, sl, sl
 800593a:	4699      	mov	r9, r3
 800593c:	46a2      	mov	sl, r4
 800593e:	eb19 0905 	adds.w	r9, r9, r5
 8005942:	eb4a 0a06 	adc.w	sl, sl, r6
 8005946:	f04f 0100 	mov.w	r1, #0
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005952:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005956:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800595a:	4689      	mov	r9, r1
 800595c:	4692      	mov	sl, r2
 800595e:	eb19 0005 	adds.w	r0, r9, r5
 8005962:	eb4a 0106 	adc.w	r1, sl, r6
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	461d      	mov	r5, r3
 800596c:	f04f 0600 	mov.w	r6, #0
 8005970:	196b      	adds	r3, r5, r5
 8005972:	eb46 0406 	adc.w	r4, r6, r6
 8005976:	461a      	mov	r2, r3
 8005978:	4623      	mov	r3, r4
 800597a:	f7fa fc79 	bl	8000270 <__aeabi_uldivmod>
 800597e:	4603      	mov	r3, r0
 8005980:	460c      	mov	r4, r1
 8005982:	461a      	mov	r2, r3
 8005984:	4b6a      	ldr	r3, [pc, #424]	; (8005b30 <UART_SetConfig+0x384>)
 8005986:	fba3 1302 	umull	r1, r3, r3, r2
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	2164      	movs	r1, #100	; 0x64
 800598e:	fb01 f303 	mul.w	r3, r1, r3
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	3332      	adds	r3, #50	; 0x32
 8005998:	4a65      	ldr	r2, [pc, #404]	; (8005b30 <UART_SetConfig+0x384>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	f003 0207 	and.w	r2, r3, #7
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4442      	add	r2, r8
 80059aa:	609a      	str	r2, [r3, #8]
 80059ac:	e26f      	b.n	8005e8e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059ae:	f7ff f979 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 80059b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	461d      	mov	r5, r3
 80059b8:	f04f 0600 	mov.w	r6, #0
 80059bc:	46a8      	mov	r8, r5
 80059be:	46b1      	mov	r9, r6
 80059c0:	eb18 0308 	adds.w	r3, r8, r8
 80059c4:	eb49 0409 	adc.w	r4, r9, r9
 80059c8:	4698      	mov	r8, r3
 80059ca:	46a1      	mov	r9, r4
 80059cc:	eb18 0805 	adds.w	r8, r8, r5
 80059d0:	eb49 0906 	adc.w	r9, r9, r6
 80059d4:	f04f 0100 	mov.w	r1, #0
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059e8:	4688      	mov	r8, r1
 80059ea:	4691      	mov	r9, r2
 80059ec:	eb18 0005 	adds.w	r0, r8, r5
 80059f0:	eb49 0106 	adc.w	r1, r9, r6
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	461d      	mov	r5, r3
 80059fa:	f04f 0600 	mov.w	r6, #0
 80059fe:	196b      	adds	r3, r5, r5
 8005a00:	eb46 0406 	adc.w	r4, r6, r6
 8005a04:	461a      	mov	r2, r3
 8005a06:	4623      	mov	r3, r4
 8005a08:	f7fa fc32 	bl	8000270 <__aeabi_uldivmod>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	460c      	mov	r4, r1
 8005a10:	461a      	mov	r2, r3
 8005a12:	4b47      	ldr	r3, [pc, #284]	; (8005b30 <UART_SetConfig+0x384>)
 8005a14:	fba3 2302 	umull	r2, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	461d      	mov	r5, r3
 8005a22:	f04f 0600 	mov.w	r6, #0
 8005a26:	46a9      	mov	r9, r5
 8005a28:	46b2      	mov	sl, r6
 8005a2a:	eb19 0309 	adds.w	r3, r9, r9
 8005a2e:	eb4a 040a 	adc.w	r4, sl, sl
 8005a32:	4699      	mov	r9, r3
 8005a34:	46a2      	mov	sl, r4
 8005a36:	eb19 0905 	adds.w	r9, r9, r5
 8005a3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a3e:	f04f 0100 	mov.w	r1, #0
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a52:	4689      	mov	r9, r1
 8005a54:	4692      	mov	sl, r2
 8005a56:	eb19 0005 	adds.w	r0, r9, r5
 8005a5a:	eb4a 0106 	adc.w	r1, sl, r6
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	461d      	mov	r5, r3
 8005a64:	f04f 0600 	mov.w	r6, #0
 8005a68:	196b      	adds	r3, r5, r5
 8005a6a:	eb46 0406 	adc.w	r4, r6, r6
 8005a6e:	461a      	mov	r2, r3
 8005a70:	4623      	mov	r3, r4
 8005a72:	f7fa fbfd 	bl	8000270 <__aeabi_uldivmod>
 8005a76:	4603      	mov	r3, r0
 8005a78:	460c      	mov	r4, r1
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	4b2c      	ldr	r3, [pc, #176]	; (8005b30 <UART_SetConfig+0x384>)
 8005a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	2164      	movs	r1, #100	; 0x64
 8005a86:	fb01 f303 	mul.w	r3, r1, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	3332      	adds	r3, #50	; 0x32
 8005a90:	4a27      	ldr	r2, [pc, #156]	; (8005b30 <UART_SetConfig+0x384>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a9e:	4498      	add	r8, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	461d      	mov	r5, r3
 8005aa4:	f04f 0600 	mov.w	r6, #0
 8005aa8:	46a9      	mov	r9, r5
 8005aaa:	46b2      	mov	sl, r6
 8005aac:	eb19 0309 	adds.w	r3, r9, r9
 8005ab0:	eb4a 040a 	adc.w	r4, sl, sl
 8005ab4:	4699      	mov	r9, r3
 8005ab6:	46a2      	mov	sl, r4
 8005ab8:	eb19 0905 	adds.w	r9, r9, r5
 8005abc:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ac0:	f04f 0100 	mov.w	r1, #0
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005acc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ad0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ad4:	4689      	mov	r9, r1
 8005ad6:	4692      	mov	sl, r2
 8005ad8:	eb19 0005 	adds.w	r0, r9, r5
 8005adc:	eb4a 0106 	adc.w	r1, sl, r6
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	461d      	mov	r5, r3
 8005ae6:	f04f 0600 	mov.w	r6, #0
 8005aea:	196b      	adds	r3, r5, r5
 8005aec:	eb46 0406 	adc.w	r4, r6, r6
 8005af0:	461a      	mov	r2, r3
 8005af2:	4623      	mov	r3, r4
 8005af4:	f7fa fbbc 	bl	8000270 <__aeabi_uldivmod>
 8005af8:	4603      	mov	r3, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	461a      	mov	r2, r3
 8005afe:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <UART_SetConfig+0x384>)
 8005b00:	fba3 1302 	umull	r1, r3, r3, r2
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	2164      	movs	r1, #100	; 0x64
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	3332      	adds	r3, #50	; 0x32
 8005b12:	4a07      	ldr	r2, [pc, #28]	; (8005b30 <UART_SetConfig+0x384>)
 8005b14:	fba2 2303 	umull	r2, r3, r2, r3
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	f003 0207 	and.w	r2, r3, #7
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4442      	add	r2, r8
 8005b24:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005b26:	e1b2      	b.n	8005e8e <UART_SetConfig+0x6e2>
 8005b28:	40011000 	.word	0x40011000
 8005b2c:	40011400 	.word	0x40011400
 8005b30:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4ad7      	ldr	r2, [pc, #860]	; (8005e98 <UART_SetConfig+0x6ec>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d005      	beq.n	8005b4a <UART_SetConfig+0x39e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4ad6      	ldr	r2, [pc, #856]	; (8005e9c <UART_SetConfig+0x6f0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	f040 80d1 	bne.w	8005cec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b4a:	f7ff f8bf 	bl	8004ccc <HAL_RCC_GetPCLK2Freq>
 8005b4e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	469a      	mov	sl, r3
 8005b54:	f04f 0b00 	mov.w	fp, #0
 8005b58:	46d0      	mov	r8, sl
 8005b5a:	46d9      	mov	r9, fp
 8005b5c:	eb18 0308 	adds.w	r3, r8, r8
 8005b60:	eb49 0409 	adc.w	r4, r9, r9
 8005b64:	4698      	mov	r8, r3
 8005b66:	46a1      	mov	r9, r4
 8005b68:	eb18 080a 	adds.w	r8, r8, sl
 8005b6c:	eb49 090b 	adc.w	r9, r9, fp
 8005b70:	f04f 0100 	mov.w	r1, #0
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b7c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b80:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b84:	4688      	mov	r8, r1
 8005b86:	4691      	mov	r9, r2
 8005b88:	eb1a 0508 	adds.w	r5, sl, r8
 8005b8c:	eb4b 0609 	adc.w	r6, fp, r9
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4619      	mov	r1, r3
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	f04f 0400 	mov.w	r4, #0
 8005ba2:	0094      	lsls	r4, r2, #2
 8005ba4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ba8:	008b      	lsls	r3, r1, #2
 8005baa:	461a      	mov	r2, r3
 8005bac:	4623      	mov	r3, r4
 8005bae:	4628      	mov	r0, r5
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	f7fa fb5d 	bl	8000270 <__aeabi_uldivmod>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	460c      	mov	r4, r1
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4bb8      	ldr	r3, [pc, #736]	; (8005ea0 <UART_SetConfig+0x6f4>)
 8005bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	469b      	mov	fp, r3
 8005bcc:	f04f 0c00 	mov.w	ip, #0
 8005bd0:	46d9      	mov	r9, fp
 8005bd2:	46e2      	mov	sl, ip
 8005bd4:	eb19 0309 	adds.w	r3, r9, r9
 8005bd8:	eb4a 040a 	adc.w	r4, sl, sl
 8005bdc:	4699      	mov	r9, r3
 8005bde:	46a2      	mov	sl, r4
 8005be0:	eb19 090b 	adds.w	r9, r9, fp
 8005be4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bfc:	4689      	mov	r9, r1
 8005bfe:	4692      	mov	sl, r2
 8005c00:	eb1b 0509 	adds.w	r5, fp, r9
 8005c04:	eb4c 060a 	adc.w	r6, ip, sl
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	f04f 0400 	mov.w	r4, #0
 8005c1a:	0094      	lsls	r4, r2, #2
 8005c1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c20:	008b      	lsls	r3, r1, #2
 8005c22:	461a      	mov	r2, r3
 8005c24:	4623      	mov	r3, r4
 8005c26:	4628      	mov	r0, r5
 8005c28:	4631      	mov	r1, r6
 8005c2a:	f7fa fb21 	bl	8000270 <__aeabi_uldivmod>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	460c      	mov	r4, r1
 8005c32:	461a      	mov	r2, r3
 8005c34:	4b9a      	ldr	r3, [pc, #616]	; (8005ea0 <UART_SetConfig+0x6f4>)
 8005c36:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	2164      	movs	r1, #100	; 0x64
 8005c3e:	fb01 f303 	mul.w	r3, r1, r3
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	3332      	adds	r3, #50	; 0x32
 8005c48:	4a95      	ldr	r2, [pc, #596]	; (8005ea0 <UART_SetConfig+0x6f4>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c54:	4498      	add	r8, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	469b      	mov	fp, r3
 8005c5a:	f04f 0c00 	mov.w	ip, #0
 8005c5e:	46d9      	mov	r9, fp
 8005c60:	46e2      	mov	sl, ip
 8005c62:	eb19 0309 	adds.w	r3, r9, r9
 8005c66:	eb4a 040a 	adc.w	r4, sl, sl
 8005c6a:	4699      	mov	r9, r3
 8005c6c:	46a2      	mov	sl, r4
 8005c6e:	eb19 090b 	adds.w	r9, r9, fp
 8005c72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c76:	f04f 0100 	mov.w	r1, #0
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c8a:	4689      	mov	r9, r1
 8005c8c:	4692      	mov	sl, r2
 8005c8e:	eb1b 0509 	adds.w	r5, fp, r9
 8005c92:	eb4c 060a 	adc.w	r6, ip, sl
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	f04f 0400 	mov.w	r4, #0
 8005ca8:	0094      	lsls	r4, r2, #2
 8005caa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cae:	008b      	lsls	r3, r1, #2
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	f7fa fada 	bl	8000270 <__aeabi_uldivmod>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4b77      	ldr	r3, [pc, #476]	; (8005ea0 <UART_SetConfig+0x6f4>)
 8005cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	2164      	movs	r1, #100	; 0x64
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	3332      	adds	r3, #50	; 0x32
 8005cd6:	4a72      	ldr	r2, [pc, #456]	; (8005ea0 <UART_SetConfig+0x6f4>)
 8005cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	f003 020f 	and.w	r2, r3, #15
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4442      	add	r2, r8
 8005ce8:	609a      	str	r2, [r3, #8]
 8005cea:	e0d0      	b.n	8005e8e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cec:	f7fe ffda 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 8005cf0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	469a      	mov	sl, r3
 8005cf6:	f04f 0b00 	mov.w	fp, #0
 8005cfa:	46d0      	mov	r8, sl
 8005cfc:	46d9      	mov	r9, fp
 8005cfe:	eb18 0308 	adds.w	r3, r8, r8
 8005d02:	eb49 0409 	adc.w	r4, r9, r9
 8005d06:	4698      	mov	r8, r3
 8005d08:	46a1      	mov	r9, r4
 8005d0a:	eb18 080a 	adds.w	r8, r8, sl
 8005d0e:	eb49 090b 	adc.w	r9, r9, fp
 8005d12:	f04f 0100 	mov.w	r1, #0
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d26:	4688      	mov	r8, r1
 8005d28:	4691      	mov	r9, r2
 8005d2a:	eb1a 0508 	adds.w	r5, sl, r8
 8005d2e:	eb4b 0609 	adc.w	r6, fp, r9
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4619      	mov	r1, r3
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	f04f 0400 	mov.w	r4, #0
 8005d44:	0094      	lsls	r4, r2, #2
 8005d46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d4a:	008b      	lsls	r3, r1, #2
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4623      	mov	r3, r4
 8005d50:	4628      	mov	r0, r5
 8005d52:	4631      	mov	r1, r6
 8005d54:	f7fa fa8c 	bl	8000270 <__aeabi_uldivmod>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4b50      	ldr	r3, [pc, #320]	; (8005ea0 <UART_SetConfig+0x6f4>)
 8005d60:	fba3 2302 	umull	r2, r3, r3, r2
 8005d64:	095b      	lsrs	r3, r3, #5
 8005d66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	469b      	mov	fp, r3
 8005d6e:	f04f 0c00 	mov.w	ip, #0
 8005d72:	46d9      	mov	r9, fp
 8005d74:	46e2      	mov	sl, ip
 8005d76:	eb19 0309 	adds.w	r3, r9, r9
 8005d7a:	eb4a 040a 	adc.w	r4, sl, sl
 8005d7e:	4699      	mov	r9, r3
 8005d80:	46a2      	mov	sl, r4
 8005d82:	eb19 090b 	adds.w	r9, r9, fp
 8005d86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d8a:	f04f 0100 	mov.w	r1, #0
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d9e:	4689      	mov	r9, r1
 8005da0:	4692      	mov	sl, r2
 8005da2:	eb1b 0509 	adds.w	r5, fp, r9
 8005da6:	eb4c 060a 	adc.w	r6, ip, sl
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	4619      	mov	r1, r3
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	f04f 0400 	mov.w	r4, #0
 8005dbc:	0094      	lsls	r4, r2, #2
 8005dbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dc2:	008b      	lsls	r3, r1, #2
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4623      	mov	r3, r4
 8005dc8:	4628      	mov	r0, r5
 8005dca:	4631      	mov	r1, r6
 8005dcc:	f7fa fa50 	bl	8000270 <__aeabi_uldivmod>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4b32      	ldr	r3, [pc, #200]	; (8005ea0 <UART_SetConfig+0x6f4>)
 8005dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	2164      	movs	r1, #100	; 0x64
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	3332      	adds	r3, #50	; 0x32
 8005dea:	4a2d      	ldr	r2, [pc, #180]	; (8005ea0 <UART_SetConfig+0x6f4>)
 8005dec:	fba2 2303 	umull	r2, r3, r2, r3
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005df6:	4498      	add	r8, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	469b      	mov	fp, r3
 8005dfc:	f04f 0c00 	mov.w	ip, #0
 8005e00:	46d9      	mov	r9, fp
 8005e02:	46e2      	mov	sl, ip
 8005e04:	eb19 0309 	adds.w	r3, r9, r9
 8005e08:	eb4a 040a 	adc.w	r4, sl, sl
 8005e0c:	4699      	mov	r9, r3
 8005e0e:	46a2      	mov	sl, r4
 8005e10:	eb19 090b 	adds.w	r9, r9, fp
 8005e14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e18:	f04f 0100 	mov.w	r1, #0
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e2c:	4689      	mov	r9, r1
 8005e2e:	4692      	mov	sl, r2
 8005e30:	eb1b 0509 	adds.w	r5, fp, r9
 8005e34:	eb4c 060a 	adc.w	r6, ip, sl
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	f04f 0300 	mov.w	r3, #0
 8005e46:	f04f 0400 	mov.w	r4, #0
 8005e4a:	0094      	lsls	r4, r2, #2
 8005e4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e50:	008b      	lsls	r3, r1, #2
 8005e52:	461a      	mov	r2, r3
 8005e54:	4623      	mov	r3, r4
 8005e56:	4628      	mov	r0, r5
 8005e58:	4631      	mov	r1, r6
 8005e5a:	f7fa fa09 	bl	8000270 <__aeabi_uldivmod>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	460c      	mov	r4, r1
 8005e62:	461a      	mov	r2, r3
 8005e64:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <UART_SetConfig+0x6f4>)
 8005e66:	fba3 1302 	umull	r1, r3, r3, r2
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	2164      	movs	r1, #100	; 0x64
 8005e6e:	fb01 f303 	mul.w	r3, r1, r3
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	3332      	adds	r3, #50	; 0x32
 8005e78:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <UART_SetConfig+0x6f4>)
 8005e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	f003 020f 	and.w	r2, r3, #15
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4442      	add	r2, r8
 8005e8a:	609a      	str	r2, [r3, #8]
}
 8005e8c:	e7ff      	b.n	8005e8e <UART_SetConfig+0x6e2>
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e98:	40011000 	.word	0x40011000
 8005e9c:	40011400 	.word	0x40011400
 8005ea0:	51eb851f 	.word	0x51eb851f

08005ea4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	f107 001c 	add.w	r0, r7, #28
 8005eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d122      	bne.n	8005f02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d105      	bne.n	8005ef6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f94a 	bl	8006190 <USB_CoreReset>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]
 8005f00:	e01a      	b.n	8005f38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f93e 	bl	8006190 <USB_CoreReset>
 8005f14:	4603      	mov	r3, r0
 8005f16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38
 8005f2a:	e005      	b.n	8005f38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d10b      	bne.n	8005f56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f043 0206 	orr.w	r2, r3, #6
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f043 0220 	orr.w	r2, r3, #32
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f62:	b004      	add	sp, #16
 8005f64:	4770      	bx	lr

08005f66 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f043 0201 	orr.w	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f023 0201 	bic.w	r2, r3, #1
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d106      	bne.n	8005fd6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	60da      	str	r2, [r3, #12]
 8005fd4:	e00b      	b.n	8005fee <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d106      	bne.n	8005fea <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60da      	str	r2, [r3, #12]
 8005fe8:	e001      	b.n	8005fee <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e003      	b.n	8005ff6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005fee:	2032      	movs	r0, #50	; 0x32
 8005ff0:	f7fb f8c2 	bl	8001178 <HAL_Delay>

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	019b      	lsls	r3, r3, #6
 8006012:	f043 0220 	orr.w	r2, r3, #32
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3301      	adds	r3, #1
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4a09      	ldr	r2, [pc, #36]	; (8006048 <USB_FlushTxFifo+0x48>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d901      	bls.n	800602c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e006      	b.n	800603a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b20      	cmp	r3, #32
 8006036:	d0f0      	beq.n	800601a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	00030d40 	.word	0x00030d40

0800604c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2210      	movs	r2, #16
 800605c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a09      	ldr	r2, [pc, #36]	; (800608c <USB_FlushRxFifo+0x40>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e006      	b.n	800607e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b10      	cmp	r3, #16
 800607a:	d0f0      	beq.n	800605e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	00030d40 	.word	0x00030d40

08006090 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006090:	b480      	push	{r7}
 8006092:	b089      	sub	sp, #36	; 0x24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	4611      	mov	r1, r2
 800609c:	461a      	mov	r2, r3
 800609e:	460b      	mov	r3, r1
 80060a0:	71fb      	strb	r3, [r7, #7]
 80060a2:	4613      	mov	r3, r2
 80060a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80060ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d11a      	bne.n	80060ec <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060b6:	88bb      	ldrh	r3, [r7, #4]
 80060b8:	3303      	adds	r3, #3
 80060ba:	089b      	lsrs	r3, r3, #2
 80060bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060be:	2300      	movs	r3, #0
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	e00f      	b.n	80060e4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060c4:	79fb      	ldrb	r3, [r7, #7]
 80060c6:	031a      	lsls	r2, r3, #12
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d0:	461a      	mov	r2, r3
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	3304      	adds	r3, #4
 80060dc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	3301      	adds	r3, #1
 80060e2:	61bb      	str	r3, [r7, #24]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d3eb      	bcc.n	80060c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3724      	adds	r7, #36	; 0x24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b089      	sub	sp, #36	; 0x24
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	4613      	mov	r3, r2
 8006106:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006110:	88fb      	ldrh	r3, [r7, #6]
 8006112:	3303      	adds	r3, #3
 8006114:	089b      	lsrs	r3, r3, #2
 8006116:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006118:	2300      	movs	r3, #0
 800611a:	61bb      	str	r3, [r7, #24]
 800611c:	e00b      	b.n	8006136 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	601a      	str	r2, [r3, #0]
    pDest++;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3304      	adds	r3, #4
 800612e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	3301      	adds	r3, #1
 8006134:	61bb      	str	r3, [r7, #24]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	429a      	cmp	r2, r3
 800613c:	d3ef      	bcc.n	800611e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800613e:	69fb      	ldr	r3, [r7, #28]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3724      	adds	r7, #36	; 0x24
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4013      	ands	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006164:	68fb      	ldr	r3, [r7, #12]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f003 0301 	and.w	r3, r3, #1
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3301      	adds	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4a13      	ldr	r2, [pc, #76]	; (80061f4 <USB_CoreReset+0x64>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d901      	bls.n	80061ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e01b      	b.n	80061e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	daf2      	bge.n	800619c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f043 0201 	orr.w	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a09      	ldr	r2, [pc, #36]	; (80061f4 <USB_CoreReset+0x64>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d901      	bls.n	80061d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e006      	b.n	80061e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d0f0      	beq.n	80061c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	00030d40 	.word	0x00030d40

080061f8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061f8:	b084      	sub	sp, #16
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	f107 001c 	add.w	r0, r7, #28
 8006206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006214:	461a      	mov	r2, r3
 8006216:	2300      	movs	r3, #0
 8006218:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d018      	beq.n	800627c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10a      	bne.n	8006266 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800625e:	f043 0304 	orr.w	r3, r3, #4
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	e014      	b.n	8006290 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006274:	f023 0304 	bic.w	r3, r3, #4
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e009      	b.n	8006290 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800628a:	f023 0304 	bic.w	r3, r3, #4
 800628e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006290:	2110      	movs	r1, #16
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7ff feb4 	bl	8006000 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff fed7 	bl	800604c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	e015      	b.n	80062d0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b0:	461a      	mov	r2, r3
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c4:	461a      	mov	r2, r3
 80062c6:	2300      	movs	r3, #0
 80062c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3301      	adds	r3, #1
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d3e5      	bcc.n	80062a4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80062d8:	2101      	movs	r1, #1
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f8ac 	bl	8006438 <USB_DriveVbus>

  HAL_Delay(200U);
 80062e0:	20c8      	movs	r0, #200	; 0xc8
 80062e2:	f7fa ff49 	bl	8001178 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062f2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006306:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a14      	ldr	r2, [pc, #80]	; (800635c <USB_HostInit+0x164>)
 800630c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a13      	ldr	r2, [pc, #76]	; (8006360 <USB_HostInit+0x168>)
 8006312:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006316:	e009      	b.n	800632c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2280      	movs	r2, #128	; 0x80
 800631c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a10      	ldr	r2, [pc, #64]	; (8006364 <USB_HostInit+0x16c>)
 8006322:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a10      	ldr	r2, [pc, #64]	; (8006368 <USB_HostInit+0x170>)
 8006328:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	2b00      	cmp	r3, #0
 8006330:	d105      	bne.n	800633e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	f043 0210 	orr.w	r2, r3, #16
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	4b0a      	ldr	r3, [pc, #40]	; (800636c <USB_HostInit+0x174>)
 8006344:	4313      	orrs	r3, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006356:	b004      	add	sp, #16
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	01000200 	.word	0x01000200
 8006360:	00e00300 	.word	0x00e00300
 8006364:	00600080 	.word	0x00600080
 8006368:	004000e0 	.word	0x004000e0
 800636c:	a3200008 	.word	0xa3200008

08006370 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800638e:	f023 0303 	bic.w	r3, r3, #3
 8006392:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063a8:	4313      	orrs	r3, r2
 80063aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d107      	bne.n	80063c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b8:	461a      	mov	r2, r3
 80063ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80063be:	6053      	str	r3, [r2, #4]
 80063c0:	e009      	b.n	80063d6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d106      	bne.n	80063d6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ce:	461a      	mov	r2, r3
 80063d0:	f241 7370 	movw	r3, #6000	; 0x1770
 80063d4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006404:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800640e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006412:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006414:	2064      	movs	r0, #100	; 0x64
 8006416:	f7fa feaf 	bl	8001178 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006426:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006428:	200a      	movs	r0, #10
 800642a:	f7fa fea5 	bl	8001178 <HAL_Delay>

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800645c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d109      	bne.n	800647c <USB_DriveVbus+0x44>
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d106      	bne.n	800647c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006476:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800647a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006486:	d109      	bne.n	800649c <USB_DriveVbus+0x64>
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800649a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b085      	sub	sp, #20
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	0c5b      	lsrs	r3, r3, #17
 80064c8:	f003 0303 	and.w	r3, r3, #3
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	b29b      	uxth	r3, r3
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
	...

080064fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	461a      	mov	r2, r3
 800650a:	4603      	mov	r3, r0
 800650c:	70fb      	strb	r3, [r7, #3]
 800650e:	460b      	mov	r3, r1
 8006510:	70bb      	strb	r3, [r7, #2]
 8006512:	4613      	mov	r3, r2
 8006514:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652a:	461a      	mov	r2, r3
 800652c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006530:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006532:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006536:	2b03      	cmp	r3, #3
 8006538:	d87e      	bhi.n	8006638 <USB_HC_Init+0x13c>
 800653a:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <USB_HC_Init+0x44>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	08006551 	.word	0x08006551
 8006544:	080065fb 	.word	0x080065fb
 8006548:	08006551 	.word	0x08006551
 800654c:	080065bd 	.word	0x080065bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4413      	add	r3, r2
 8006558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655c:	461a      	mov	r2, r3
 800655e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006562:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006564:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006568:	2b00      	cmp	r3, #0
 800656a:	da10      	bge.n	800658e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4413      	add	r3, r2
 8006574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	440a      	add	r2, r1
 8006582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800658c:	e057      	b.n	800663e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	2b00      	cmp	r3, #0
 8006598:	d051      	beq.n	800663e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	78fa      	ldrb	r2, [r7, #3]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80065b8:	60d3      	str	r3, [r2, #12]
      break;
 80065ba:	e040      	b.n	800663e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c8:	461a      	mov	r2, r3
 80065ca:	f240 639d 	movw	r3, #1693	; 0x69d
 80065ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	da34      	bge.n	8006642 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	78fa      	ldrb	r2, [r7, #3]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80065f8:	e023      	b.n	8006642 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	4413      	add	r3, r2
 8006602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006606:	461a      	mov	r2, r3
 8006608:	f240 2325 	movw	r3, #549	; 0x225
 800660c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800660e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006612:	2b00      	cmp	r3, #0
 8006614:	da17      	bge.n	8006646 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4413      	add	r3, r2
 800661e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	78fa      	ldrb	r2, [r7, #3]
 8006626:	0151      	lsls	r1, r2, #5
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	440a      	add	r2, r1
 800662c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006630:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006634:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006636:	e006      	b.n	8006646 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	75fb      	strb	r3, [r7, #23]
      break;
 800663c:	e004      	b.n	8006648 <USB_HC_Init+0x14c>
      break;
 800663e:	bf00      	nop
 8006640:	e002      	b.n	8006648 <USB_HC_Init+0x14c>
      break;
 8006642:	bf00      	nop
 8006644:	e000      	b.n	8006648 <USB_HC_Init+0x14c>
      break;
 8006646:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800664e:	699a      	ldr	r2, [r3, #24]
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	2101      	movs	r1, #1
 8006658:	fa01 f303 	lsl.w	r3, r1, r3
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006662:	4313      	orrs	r3, r2
 8006664:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006672:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da03      	bge.n	8006682 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800667a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	e001      	b.n	8006686 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006686:	f897 3020 	ldrb.w	r3, [r7, #32]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d103      	bne.n	8006696 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800668e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e001      	b.n	800669a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800669a:	787b      	ldrb	r3, [r7, #1]
 800669c:	059b      	lsls	r3, r3, #22
 800669e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80066a2:	78bb      	ldrb	r3, [r7, #2]
 80066a4:	02db      	lsls	r3, r3, #11
 80066a6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066aa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80066ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066b0:	049b      	lsls	r3, r3, #18
 80066b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80066b6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80066be:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	0159      	lsls	r1, r3, #5
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	440b      	add	r3, r1
 80066cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066d6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80066d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d10f      	bne.n	8006700 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	78fa      	ldrb	r2, [r7, #3]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066fe:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006700:	7dfb      	ldrb	r3, [r7, #23]
}
 8006702:	4618      	mov	r0, r3
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop

08006710 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08c      	sub	sp, #48	; 0x30
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	785b      	ldrb	r3, [r3, #1]
 8006726:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800672c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d028      	beq.n	800678c <USB_HC_StartXfer+0x7c>
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	791b      	ldrb	r3, [r3, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d124      	bne.n	800678c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10b      	bne.n	8006760 <USB_HC_StartXfer+0x50>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	795b      	ldrb	r3, [r3, #5]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d107      	bne.n	8006760 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	4619      	mov	r1, r3
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 fa30 	bl	8006bbc <USB_DoPing>
      return HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	e114      	b.n	800698a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d112      	bne.n	800678c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	4413      	add	r3, r2
 800676e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	6a3a      	ldr	r2, [r7, #32]
 800677a:	440a      	add	r2, r1
 800677c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006780:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006784:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2200      	movs	r2, #0
 800678a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d018      	beq.n	80067c6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	8912      	ldrh	r2, [r2, #8]
 800679c:	4413      	add	r3, r2
 800679e:	3b01      	subs	r3, #1
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	8912      	ldrh	r2, [r2, #8]
 80067a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067a8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80067aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80067ac:	8b7b      	ldrh	r3, [r7, #26]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d90b      	bls.n	80067ca <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80067b2:	8b7b      	ldrh	r3, [r7, #26]
 80067b4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80067b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	8912      	ldrh	r2, [r2, #8]
 80067bc:	fb02 f203 	mul.w	r2, r2, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	611a      	str	r2, [r3, #16]
 80067c4:	e001      	b.n	80067ca <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80067c6:	2301      	movs	r3, #1
 80067c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	78db      	ldrb	r3, [r3, #3]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d006      	beq.n	80067e0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80067d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	8912      	ldrh	r2, [r2, #8]
 80067d8:	fb02 f203 	mul.w	r2, r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067ea:	04d9      	lsls	r1, r3, #19
 80067ec:	4b69      	ldr	r3, [pc, #420]	; (8006994 <USB_HC_StartXfer+0x284>)
 80067ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	7a9b      	ldrb	r3, [r3, #10]
 80067f6:	075b      	lsls	r3, r3, #29
 80067f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067fc:	69f9      	ldr	r1, [r7, #28]
 80067fe:	0148      	lsls	r0, r1, #5
 8006800:	6a39      	ldr	r1, [r7, #32]
 8006802:	4401      	add	r1, r0
 8006804:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006808:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800680a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	68d9      	ldr	r1, [r3, #12]
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	4413      	add	r3, r2
 800681e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006822:	460a      	mov	r2, r1
 8006824:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	bf0c      	ite	eq
 8006836:	2301      	moveq	r3, #1
 8006838:	2300      	movne	r3, #0
 800683a:	b2db      	uxtb	r3, r3
 800683c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	69fa      	ldr	r2, [r7, #28]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	6a3a      	ldr	r2, [r7, #32]
 8006852:	440a      	add	r2, r1
 8006854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006858:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800685c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	7e7b      	ldrb	r3, [r7, #25]
 800686e:	075b      	lsls	r3, r3, #29
 8006870:	69f9      	ldr	r1, [r7, #28]
 8006872:	0148      	lsls	r0, r1, #5
 8006874:	6a39      	ldr	r1, [r7, #32]
 8006876:	4401      	add	r1, r0
 8006878:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800687c:	4313      	orrs	r3, r2
 800687e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	4413      	add	r3, r2
 8006888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a42      	ldr	r2, [pc, #264]	; (8006998 <USB_HC_StartXfer+0x288>)
 8006890:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006892:	4b41      	ldr	r3, [pc, #260]	; (8006998 <USB_HC_StartXfer+0x288>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800689a:	4a3f      	ldr	r2, [pc, #252]	; (8006998 <USB_HC_StartXfer+0x288>)
 800689c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	78db      	ldrb	r3, [r3, #3]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d006      	beq.n	80068b4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80068a6:	4b3c      	ldr	r3, [pc, #240]	; (8006998 <USB_HC_StartXfer+0x288>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ae:	4a3a      	ldr	r2, [pc, #232]	; (8006998 <USB_HC_StartXfer+0x288>)
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	e005      	b.n	80068c0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80068b4:	4b38      	ldr	r3, [pc, #224]	; (8006998 <USB_HC_StartXfer+0x288>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068bc:	4a36      	ldr	r2, [pc, #216]	; (8006998 <USB_HC_StartXfer+0x288>)
 80068be:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068c0:	4b35      	ldr	r3, [pc, #212]	; (8006998 <USB_HC_StartXfer+0x288>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068c8:	4a33      	ldr	r2, [pc, #204]	; (8006998 <USB_HC_StartXfer+0x288>)
 80068ca:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d8:	461a      	mov	r2, r3
 80068da:	4b2f      	ldr	r3, [pc, #188]	; (8006998 <USB_HC_StartXfer+0x288>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e04f      	b.n	800698a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	78db      	ldrb	r3, [r3, #3]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d14a      	bne.n	8006988 <USB_HC_StartXfer+0x278>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d046      	beq.n	8006988 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	79db      	ldrb	r3, [r3, #7]
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d830      	bhi.n	8006964 <USB_HC_StartXfer+0x254>
 8006902:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <USB_HC_StartXfer+0x1f8>)
 8006904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006908:	08006919 	.word	0x08006919
 800690c:	0800693d 	.word	0x0800693d
 8006910:	08006919 	.word	0x08006919
 8006914:	0800693d 	.word	0x0800693d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	3303      	adds	r3, #3
 800691e:	089b      	lsrs	r3, r3, #2
 8006920:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006922:	8afa      	ldrh	r2, [r7, #22]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	b29b      	uxth	r3, r3
 800692a:	429a      	cmp	r2, r3
 800692c:	d91c      	bls.n	8006968 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	f043 0220 	orr.w	r2, r3, #32
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	619a      	str	r2, [r3, #24]
        }
        break;
 800693a:	e015      	b.n	8006968 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	3303      	adds	r3, #3
 8006942:	089b      	lsrs	r3, r3, #2
 8006944:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006946:	8afa      	ldrh	r2, [r7, #22]
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	b29b      	uxth	r3, r3
 8006952:	429a      	cmp	r2, r3
 8006954:	d90a      	bls.n	800696c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	619a      	str	r2, [r3, #24]
        }
        break;
 8006962:	e003      	b.n	800696c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006964:	bf00      	nop
 8006966:	e002      	b.n	800696e <USB_HC_StartXfer+0x25e>
        break;
 8006968:	bf00      	nop
 800696a:	e000      	b.n	800696e <USB_HC_StartXfer+0x25e>
        break;
 800696c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	68d9      	ldr	r1, [r3, #12]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	785a      	ldrb	r2, [r3, #1]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	b298      	uxth	r0, r3
 800697c:	2300      	movs	r3, #0
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	4603      	mov	r3, r0
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff fb84 	bl	8006090 <USB_WritePacket>
  }

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3728      	adds	r7, #40	; 0x28
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	1ff80000 	.word	0x1ff80000
 8006998:	200000b0 	.word	0x200000b0

0800699c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	b29b      	uxth	r3, r3
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80069be:	b480      	push	{r7}
 80069c0:	b087      	sub	sp, #28
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	460b      	mov	r3, r1
 80069c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	0c9b      	lsrs	r3, r3, #18
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <USB_HC_Halt+0x3a>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d16c      	bne.n	8006ad2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a16:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d143      	bne.n	8006aac <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	0151      	lsls	r1, r2, #5
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	440a      	add	r2, r1
 8006a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a42:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a62:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	0151      	lsls	r1, r2, #5
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	440a      	add	r2, r1
 8006a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a82:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	3301      	adds	r3, #1
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a90:	d81d      	bhi.n	8006ace <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aa8:	d0ec      	beq.n	8006a84 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006aaa:	e080      	b.n	8006bae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	0151      	lsls	r1, r2, #5
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aca:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006acc:	e06f      	b.n	8006bae <USB_HC_Halt+0x1f0>
          break;
 8006ace:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ad0:	e06d      	b.n	8006bae <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006af0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d143      	bne.n	8006b8a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b20:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	0151      	lsls	r1, r2, #5
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	440a      	add	r2, r1
 8006b38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b40:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	0151      	lsls	r1, r2, #5
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	440a      	add	r2, r1
 8006b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b60:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	3301      	adds	r3, #1
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b6e:	d81d      	bhi.n	8006bac <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b86:	d0ec      	beq.n	8006b62 <USB_HC_Halt+0x1a4>
 8006b88:	e011      	b.n	8006bae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	0151      	lsls	r1, r2, #5
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	440a      	add	r2, r1
 8006ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e000      	b.n	8006bae <USB_HC_Halt+0x1f0>
          break;
 8006bac:	bf00      	nop
    }
  }

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	04da      	lsls	r2, r3, #19
 8006bd8:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <USB_DoPing+0x74>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c04:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c0c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	1ff80000 	.word	0x1ff80000

08006c34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff f99f 	bl	8005f88 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006c4a:	2110      	movs	r1, #16
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff f9d7 	bl	8006000 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff f9fa 	bl	800604c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	e01f      	b.n	8006c9e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c74:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c7c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c84:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c92:	461a      	mov	r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	613b      	str	r3, [r7, #16]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	2b0f      	cmp	r3, #15
 8006ca2:	d9dc      	bls.n	8006c5e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	e034      	b.n	8006d14 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cc0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cc8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cd0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cde:	461a      	mov	r2, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cf0:	d80c      	bhi.n	8006d0c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d08:	d0ec      	beq.n	8006ce4 <USB_StopHost+0xb0>
 8006d0a:	e000      	b.n	8006d0e <USB_StopHost+0xda>
        break;
 8006d0c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	3301      	adds	r3, #1
 8006d12:	613b      	str	r3, [r7, #16]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2b0f      	cmp	r3, #15
 8006d18:	d9c7      	bls.n	8006caa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d20:	461a      	mov	r2, r3
 8006d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d26:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d2e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff f918 	bl	8005f66 <USB_EnableGlobalInt>

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006d40:	b590      	push	{r4, r7, lr}
 8006d42:	b089      	sub	sp, #36	; 0x24
 8006d44:	af04      	add	r7, sp, #16
 8006d46:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006d48:	2301      	movs	r3, #1
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fc68 	bl	8007624 <USBH_FindInterface>
 8006d54:	4603      	mov	r3, r0
 8006d56:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	2bff      	cmp	r3, #255	; 0xff
 8006d5c:	d002      	beq.n	8006d64 <USBH_CDC_InterfaceInit+0x24>
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d901      	bls.n	8006d68 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d64:	2302      	movs	r3, #2
 8006d66:	e13d      	b.n	8006fe4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fc3d 	bl	80075ec <USBH_SelectInterface>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e131      	b.n	8006fe4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006d86:	2050      	movs	r0, #80	; 0x50
 8006d88:	f002 fa04 	bl	8009194 <malloc>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006da0:	2302      	movs	r3, #2
 8006da2:	e11f      	b.n	8006fe4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006da4:	2250      	movs	r2, #80	; 0x50
 8006da6:	2100      	movs	r1, #0
 8006da8:	68b8      	ldr	r0, [r7, #8]
 8006daa:	f002 fa03 	bl	80091b4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	211a      	movs	r1, #26
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	4413      	add	r3, r2
 8006dba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	b25b      	sxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	da15      	bge.n	8006df2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	211a      	movs	r1, #26
 8006dcc:	fb01 f303 	mul.w	r3, r1, r3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006dd6:	781a      	ldrb	r2, [r3, #0]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	211a      	movs	r1, #26
 8006de2:	fb01 f303 	mul.w	r3, r1, r3
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dec:	881a      	ldrh	r2, [r3, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fe36 	bl	8008a6a <USBH_AllocPipe>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	461a      	mov	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	7819      	ldrb	r1, [r3, #0]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	7858      	ldrb	r0, [r3, #1]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	8952      	ldrh	r2, [r2, #10]
 8006e1e:	9202      	str	r2, [sp, #8]
 8006e20:	2203      	movs	r2, #3
 8006e22:	9201      	str	r2, [sp, #4]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	4623      	mov	r3, r4
 8006e28:	4602      	mov	r2, r0
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fdee 	bl	8008a0c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2200      	movs	r2, #0
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f002 f8fb 	bl	8009034 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006e3e:	2300      	movs	r3, #0
 8006e40:	2200      	movs	r2, #0
 8006e42:	210a      	movs	r1, #10
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fbed 	bl	8007624 <USBH_FindInterface>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	2bff      	cmp	r3, #255	; 0xff
 8006e52:	d002      	beq.n	8006e5a <USBH_CDC_InterfaceInit+0x11a>
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d901      	bls.n	8006e5e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e0c2      	b.n	8006fe4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	211a      	movs	r1, #26
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	4413      	add	r3, r2
 8006e6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	b25b      	sxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	da16      	bge.n	8006ea4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	211a      	movs	r1, #26
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	4413      	add	r3, r2
 8006e82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e86:	781a      	ldrb	r2, [r3, #0]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	211a      	movs	r1, #26
 8006e92:	fb01 f303 	mul.w	r3, r1, r3
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e9c:	881a      	ldrh	r2, [r3, #0]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	835a      	strh	r2, [r3, #26]
 8006ea2:	e015      	b.n	8006ed0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	211a      	movs	r1, #26
 8006eaa:	fb01 f303 	mul.w	r3, r1, r3
 8006eae:	4413      	add	r3, r2
 8006eb0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006eb4:	781a      	ldrb	r2, [r3, #0]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	211a      	movs	r1, #26
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006eca:	881a      	ldrh	r2, [r3, #0]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	211a      	movs	r1, #26
 8006ed6:	fb01 f303 	mul.w	r3, r1, r3
 8006eda:	4413      	add	r3, r2
 8006edc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	b25b      	sxtb	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	da16      	bge.n	8006f16 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	211a      	movs	r1, #26
 8006eee:	fb01 f303 	mul.w	r3, r1, r3
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ef8:	781a      	ldrb	r2, [r3, #0]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	211a      	movs	r1, #26
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f0e:	881a      	ldrh	r2, [r3, #0]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	835a      	strh	r2, [r3, #26]
 8006f14:	e015      	b.n	8006f42 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	211a      	movs	r1, #26
 8006f1c:	fb01 f303 	mul.w	r3, r1, r3
 8006f20:	4413      	add	r3, r2
 8006f22:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f26:	781a      	ldrb	r2, [r3, #0]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	211a      	movs	r1, #26
 8006f32:	fb01 f303 	mul.w	r3, r1, r3
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f3c:	881a      	ldrh	r2, [r3, #0]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	7b9b      	ldrb	r3, [r3, #14]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fd8e 	bl	8008a6a <USBH_AllocPipe>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	461a      	mov	r2, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	7bdb      	ldrb	r3, [r3, #15]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 fd84 	bl	8008a6a <USBH_AllocPipe>
 8006f62:	4603      	mov	r3, r0
 8006f64:	461a      	mov	r2, r3
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	7b59      	ldrb	r1, [r3, #13]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	7b98      	ldrb	r0, [r3, #14]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	8b12      	ldrh	r2, [r2, #24]
 8006f82:	9202      	str	r2, [sp, #8]
 8006f84:	2202      	movs	r2, #2
 8006f86:	9201      	str	r2, [sp, #4]
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	4623      	mov	r3, r4
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 fd3c 	bl	8008a0c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	7b19      	ldrb	r1, [r3, #12]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	7bd8      	ldrb	r0, [r3, #15]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	8b52      	ldrh	r2, [r2, #26]
 8006fac:	9202      	str	r2, [sp, #8]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	9201      	str	r2, [sp, #4]
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	4623      	mov	r3, r4
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 fd27 	bl	8008a0c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	7b5b      	ldrb	r3, [r3, #13]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f002 f830 	bl	8009034 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	7b1b      	ldrb	r3, [r3, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f002 f829 	bl	8009034 <USBH_LL_SetToggle>

  return USBH_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd90      	pop	{r4, r7, pc}

08006fec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00e      	beq.n	8007024 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fd1c 	bl	8008a4a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 fd47 	bl	8008aac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	7b1b      	ldrb	r3, [r3, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00e      	beq.n	800704a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	7b1b      	ldrb	r3, [r3, #12]
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f001 fd09 	bl	8008a4a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	7b1b      	ldrb	r3, [r3, #12]
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 fd34 	bl	8008aac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	7b5b      	ldrb	r3, [r3, #13]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00e      	beq.n	8007070 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	7b5b      	ldrb	r3, [r3, #13]
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 fcf6 	bl	8008a4a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	7b5b      	ldrb	r3, [r3, #13]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fd21 	bl	8008aac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	4618      	mov	r0, r3
 8007086:	f002 f88d 	bl	80091a4 <free>
    phost->pActiveClass->pData = 0U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007090:	2200      	movs	r2, #0
 8007092:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3340      	adds	r3, #64	; 0x40
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f8b1 	bl	800721e <GetLineCoding>
 80070bc:	4603      	mov	r3, r0
 80070be:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80070c0:	7afb      	ldrb	r3, [r7, #11]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d105      	bne.n	80070d2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070cc:	2102      	movs	r1, #2
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80070d2:	7afb      	ldrb	r3, [r7, #11]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d877      	bhi.n	80071f0 <USBH_CDC_Process+0x114>
 8007100:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <USBH_CDC_Process+0x2c>)
 8007102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007106:	bf00      	nop
 8007108:	0800711d 	.word	0x0800711d
 800710c:	08007123 	.word	0x08007123
 8007110:	08007153 	.word	0x08007153
 8007114:	080071c7 	.word	0x080071c7
 8007118:	080071d5 	.word	0x080071d5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]
      break;
 8007120:	e06d      	b.n	80071fe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f897 	bl	800725c <SetLineCoding>
 800712e:	4603      	mov	r3, r0
 8007130:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d104      	bne.n	8007142 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007140:	e058      	b.n	80071f4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d055      	beq.n	80071f4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2204      	movs	r2, #4
 800714c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007150:	e050      	b.n	80071f4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	3340      	adds	r3, #64	; 0x40
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f860 	bl	800721e <GetLineCoding>
 800715e:	4603      	mov	r3, r0
 8007160:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d126      	bne.n	80071b6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717a:	791b      	ldrb	r3, [r3, #4]
 800717c:	429a      	cmp	r2, r3
 800717e:	d13b      	bne.n	80071f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800718c:	429a      	cmp	r2, r3
 800718e:	d133      	bne.n	80071f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800719a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800719c:	429a      	cmp	r2, r3
 800719e:	d12b      	bne.n	80071f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d124      	bne.n	80071f8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f95a 	bl	8007468 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80071b4:	e020      	b.n	80071f8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d01d      	beq.n	80071f8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2204      	movs	r2, #4
 80071c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80071c4:	e018      	b.n	80071f8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f867 	bl	800729a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f8dc 	bl	800738a <CDC_ProcessReception>
      break;
 80071d2:	e014      	b.n	80071fe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80071d4:	2100      	movs	r1, #0
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 ffe5 	bl	80081a6 <USBH_ClrFeature>
 80071dc:	4603      	mov	r3, r0
 80071de:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80071ee:	e005      	b.n	80071fc <USBH_CDC_Process+0x120>

    default:
      break;
 80071f0:	bf00      	nop
 80071f2:	e004      	b.n	80071fe <USBH_CDC_Process+0x122>
      break;
 80071f4:	bf00      	nop
 80071f6:	e002      	b.n	80071fe <USBH_CDC_Process+0x122>
      break;
 80071f8:	bf00      	nop
 80071fa:	e000      	b.n	80071fe <USBH_CDC_Process+0x122>
      break;
 80071fc:	bf00      	nop

  }

  return status;
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	22a1      	movs	r2, #161	; 0xa1
 800722c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2221      	movs	r2, #33	; 0x21
 8007232:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2207      	movs	r2, #7
 8007244:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2207      	movs	r2, #7
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 f98a 	bl	8008566 <USBH_CtlReq>
 8007252:	4603      	mov	r3, r0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2221      	movs	r2, #33	; 0x21
 800726a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2207      	movs	r2, #7
 8007282:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2207      	movs	r2, #7
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 f96b 	bl	8008566 <USBH_CtlReq>
 8007290:	4603      	mov	r3, r0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af02      	add	r7, sp, #8
 80072a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d002      	beq.n	80072c0 <CDC_ProcessTransmission+0x26>
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d025      	beq.n	800730a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80072be:	e060      	b.n	8007382 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	8b12      	ldrh	r2, [r2, #24]
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d90c      	bls.n	80072e6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	69d9      	ldr	r1, [r3, #28]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8b1a      	ldrh	r2, [r3, #24]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	7b58      	ldrb	r0, [r3, #13]
 80072d8:	2301      	movs	r3, #1
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	4603      	mov	r3, r0
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 fb51 	bl	8008986 <USBH_BulkSendData>
 80072e4:	e00c      	b.n	8007300 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	7b58      	ldrb	r0, [r3, #13]
 80072f4:	2301      	movs	r3, #1
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	4603      	mov	r3, r0
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fb43 	bl	8008986 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007308:	e03b      	b.n	8007382 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	7b5b      	ldrb	r3, [r3, #13]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 fe65 	bl	8008fe0 <USBH_LL_GetURBState>
 8007316:	4603      	mov	r3, r0
 8007318:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800731a:	7afb      	ldrb	r3, [r7, #11]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d128      	bne.n	8007372 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	8b12      	ldrh	r2, [r2, #24]
 8007328:	4293      	cmp	r3, r2
 800732a:	d90e      	bls.n	800734a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	8b12      	ldrh	r2, [r2, #24]
 8007334:	1a9a      	subs	r2, r3, r2
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	8b12      	ldrh	r2, [r2, #24]
 8007342:	441a      	add	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	61da      	str	r2, [r3, #28]
 8007348:	e002      	b.n	8007350 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	d004      	beq.n	8007362 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007360:	e00e      	b.n	8007380 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f868 	bl	8007440 <USBH_CDC_TransmitCallback>
      break;
 8007370:	e006      	b.n	8007380 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	2b02      	cmp	r3, #2
 8007376:	d103      	bne.n	8007380 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007380:	bf00      	nop
  }
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b086      	sub	sp, #24
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800739c:	2300      	movs	r3, #0
 800739e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d002      	beq.n	80073b0 <CDC_ProcessReception+0x26>
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d00e      	beq.n	80073cc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80073ae:	e043      	b.n	8007438 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	6a19      	ldr	r1, [r3, #32]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	8b5a      	ldrh	r2, [r3, #26]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	7b1b      	ldrb	r3, [r3, #12]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 fb07 	bl	80089d0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2204      	movs	r2, #4
 80073c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073ca:	e035      	b.n	8007438 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	7b1b      	ldrb	r3, [r3, #12]
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 fe04 	bl	8008fe0 <USBH_LL_GetURBState>
 80073d8:	4603      	mov	r3, r0
 80073da:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80073dc:	7cfb      	ldrb	r3, [r7, #19]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d129      	bne.n	8007436 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	7b1b      	ldrb	r3, [r3, #12]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 fd67 	bl	8008ebc <USBH_LL_GetLastXferSize>
 80073ee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d016      	beq.n	8007428 <CDC_ProcessReception+0x9e>
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	8b5b      	ldrh	r3, [r3, #26]
 80073fe:	461a      	mov	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4293      	cmp	r3, r2
 8007404:	d910      	bls.n	8007428 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	1ad2      	subs	r2, r2, r3
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	6a1a      	ldr	r2, [r3, #32]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	441a      	add	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2203      	movs	r2, #3
 8007422:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007426:	e006      	b.n	8007436 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f80f 	bl	8007454 <USBH_CDC_ReceiveCallback>
      break;
 8007436:	bf00      	nop
  }
}
 8007438:	bf00      	nop
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	4613      	mov	r3, r2
 8007488:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007490:	2302      	movs	r3, #2
 8007492:	e029      	b.n	80074e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	79fa      	ldrb	r2, [r7, #7]
 8007498:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f81f 	bl	80074f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f001 fc39 	bl	8008d58 <USBH_LL_Init>

  return USBH_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	e009      	b.n	8007516 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	33e0      	adds	r3, #224	; 0xe0
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	2200      	movs	r2, #0
 800750e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3301      	adds	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b0e      	cmp	r3, #14
 800751a:	d9f2      	bls.n	8007502 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	e009      	b.n	8007536 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4413      	add	r3, r2
 8007528:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	3301      	adds	r3, #1
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800753c:	d3f1      	bcc.n	8007522 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2240      	movs	r2, #64	; 0x40
 8007562:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d016      	beq.n	80075da <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10e      	bne.n	80075d4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075bc:	1c59      	adds	r1, r3, #1
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	33de      	adds	r3, #222	; 0xde
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
 80075d2:	e004      	b.n	80075de <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80075d4:	2302      	movs	r3, #2
 80075d6:	73fb      	strb	r3, [r7, #15]
 80075d8:	e001      	b.n	80075de <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80075da:	2302      	movs	r3, #2
 80075dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075de:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007602:	78fa      	ldrb	r2, [r7, #3]
 8007604:	429a      	cmp	r2, r3
 8007606:	d204      	bcs.n	8007612 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	78fa      	ldrb	r2, [r7, #3]
 800760c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007610:	e001      	b.n	8007616 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007612:	2302      	movs	r3, #2
 8007614:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007616:	7bfb      	ldrb	r3, [r7, #15]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	4608      	mov	r0, r1
 800762e:	4611      	mov	r1, r2
 8007630:	461a      	mov	r2, r3
 8007632:	4603      	mov	r3, r0
 8007634:	70fb      	strb	r3, [r7, #3]
 8007636:	460b      	mov	r3, r1
 8007638:	70bb      	strb	r3, [r7, #2]
 800763a:	4613      	mov	r3, r2
 800763c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007642:	2300      	movs	r3, #0
 8007644:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800764c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800764e:	e025      	b.n	800769c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	221a      	movs	r2, #26
 8007654:	fb02 f303 	mul.w	r3, r2, r3
 8007658:	3308      	adds	r3, #8
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	3302      	adds	r3, #2
 8007660:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	795b      	ldrb	r3, [r3, #5]
 8007666:	78fa      	ldrb	r2, [r7, #3]
 8007668:	429a      	cmp	r2, r3
 800766a:	d002      	beq.n	8007672 <USBH_FindInterface+0x4e>
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	2bff      	cmp	r3, #255	; 0xff
 8007670:	d111      	bne.n	8007696 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007676:	78ba      	ldrb	r2, [r7, #2]
 8007678:	429a      	cmp	r2, r3
 800767a:	d002      	beq.n	8007682 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800767c:	78bb      	ldrb	r3, [r7, #2]
 800767e:	2bff      	cmp	r3, #255	; 0xff
 8007680:	d109      	bne.n	8007696 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007686:	787a      	ldrb	r2, [r7, #1]
 8007688:	429a      	cmp	r2, r3
 800768a:	d002      	beq.n	8007692 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800768c:	787b      	ldrb	r3, [r7, #1]
 800768e:	2bff      	cmp	r3, #255	; 0xff
 8007690:	d101      	bne.n	8007696 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	e006      	b.n	80076a4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	3301      	adds	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d9d6      	bls.n	8007650 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80076a2:	23ff      	movs	r3, #255	; 0xff
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	371c      	adds	r7, #28
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 fb89 	bl	8008dd0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80076be:	2101      	movs	r1, #1
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 fca0 	bl	8009006 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af04      	add	r7, sp, #16
 80076d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80076d8:	2302      	movs	r3, #2
 80076da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80076dc:	2300      	movs	r3, #0
 80076de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d102      	bne.n	80076f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2203      	movs	r2, #3
 80076f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b0b      	cmp	r3, #11
 80076fa:	f200 81b3 	bhi.w	8007a64 <USBH_Process+0x394>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <USBH_Process+0x34>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007735 	.word	0x08007735
 8007708:	08007767 	.word	0x08007767
 800770c:	080077cf 	.word	0x080077cf
 8007710:	080079ff 	.word	0x080079ff
 8007714:	08007a65 	.word	0x08007a65
 8007718:	08007873 	.word	0x08007873
 800771c:	080079a5 	.word	0x080079a5
 8007720:	080078a9 	.word	0x080078a9
 8007724:	080078c9 	.word	0x080078c9
 8007728:	080078e9 	.word	0x080078e9
 800772c:	08007917 	.word	0x08007917
 8007730:	080079e7 	.word	0x080079e7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8193 	beq.w	8007a68 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007748:	20c8      	movs	r0, #200	; 0xc8
 800774a:	f001 fca6 	bl	800909a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fb99 	bl	8008e86 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007764:	e180      	b.n	8007a68 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800776c:	2b01      	cmp	r3, #1
 800776e:	d107      	bne.n	8007780 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800777e:	e182      	b.n	8007a86 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800778a:	d914      	bls.n	80077b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007792:	3301      	adds	r3, #1
 8007794:	b2da      	uxtb	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d903      	bls.n	80077ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	220d      	movs	r2, #13
 80077aa:	701a      	strb	r2, [r3, #0]
      break;
 80077ac:	e16b      	b.n	8007a86 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	701a      	strb	r2, [r3, #0]
      break;
 80077b4:	e167      	b.n	8007a86 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077bc:	f103 020a 	add.w	r2, r3, #10
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80077c6:	200a      	movs	r0, #10
 80077c8:	f001 fc67 	bl	800909a <USBH_Delay>
      break;
 80077cc:	e15b      	b.n	8007a86 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077de:	2104      	movs	r1, #4
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80077e4:	2064      	movs	r0, #100	; 0x64
 80077e6:	f001 fc58 	bl	800909a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 fb26 	bl	8008e3c <USBH_LL_GetSpeed>
 80077f0:	4603      	mov	r3, r0
 80077f2:	461a      	mov	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2205      	movs	r2, #5
 80077fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007800:	2100      	movs	r1, #0
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 f931 	bl	8008a6a <USBH_AllocPipe>
 8007808:	4603      	mov	r3, r0
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007810:	2180      	movs	r1, #128	; 0x80
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f001 f929 	bl	8008a6a <USBH_AllocPipe>
 8007818:	4603      	mov	r3, r0
 800781a:	461a      	mov	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	7919      	ldrb	r1, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007834:	b292      	uxth	r2, r2
 8007836:	9202      	str	r2, [sp, #8]
 8007838:	2200      	movs	r2, #0
 800783a:	9201      	str	r2, [sp, #4]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4603      	mov	r3, r0
 8007840:	2280      	movs	r2, #128	; 0x80
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 f8e2 	bl	8008a0c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	7959      	ldrb	r1, [r3, #5]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800785c:	b292      	uxth	r2, r2
 800785e:	9202      	str	r2, [sp, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	9201      	str	r2, [sp, #4]
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	4603      	mov	r3, r0
 8007868:	2200      	movs	r2, #0
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 f8ce 	bl	8008a0c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007870:	e109      	b.n	8007a86 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f90c 	bl	8007a90 <USBH_HandleEnum>
 8007878:	4603      	mov	r3, r0
 800787a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	f040 80f3 	bne.w	8007a6c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007894:	2b01      	cmp	r3, #1
 8007896:	d103      	bne.n	80078a0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2208      	movs	r2, #8
 800789c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800789e:	e0e5      	b.n	8007a6c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2207      	movs	r2, #7
 80078a4:	701a      	strb	r2, [r3, #0]
      break;
 80078a6:	e0e1      	b.n	8007a6c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 80de 	beq.w	8007a70 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078ba:	2101      	movs	r1, #1
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2208      	movs	r2, #8
 80078c4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80078c6:	e0d3      	b.n	8007a70 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fc20 	bl	8008118 <USBH_SetCfg>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f040 80ca 	bne.w	8007a74 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2209      	movs	r2, #9
 80078e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078e6:	e0c5      	b.n	8007a74 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80078f6:	2101      	movs	r1, #1
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fc30 	bl	800815e <USBH_SetFeature>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	f040 80b9 	bne.w	8007a78 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	220a      	movs	r2, #10
 800790a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800790c:	e0b4      	b.n	8007a78 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	220a      	movs	r2, #10
 8007912:	701a      	strb	r2, [r3, #0]
      break;
 8007914:	e0b0      	b.n	8007a78 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 80ad 	beq.w	8007a7c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]
 800792e:	e016      	b.n	800795e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007930:	7bfa      	ldrb	r2, [r7, #15]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	32de      	adds	r2, #222	; 0xde
 8007936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793a:	791a      	ldrb	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007942:	429a      	cmp	r2, r3
 8007944:	d108      	bne.n	8007958 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007946:	7bfa      	ldrb	r2, [r7, #15]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	32de      	adds	r2, #222	; 0xde
 800794c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007956:	e005      	b.n	8007964 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	3301      	adds	r3, #1
 800795c:	73fb      	strb	r3, [r7, #15]
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d0e5      	beq.n	8007930 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800796a:	2b00      	cmp	r3, #0
 800796c:	d016      	beq.n	800799c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d109      	bne.n	8007994 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2206      	movs	r2, #6
 8007984:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800798c:	2103      	movs	r1, #3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007992:	e073      	b.n	8007a7c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	220d      	movs	r2, #13
 8007998:	701a      	strb	r2, [r3, #0]
      break;
 800799a:	e06f      	b.n	8007a7c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	220d      	movs	r2, #13
 80079a0:	701a      	strb	r2, [r3, #0]
      break;
 80079a2:	e06b      	b.n	8007a7c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d017      	beq.n	80079de <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
 80079ba:	4603      	mov	r3, r0
 80079bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d103      	bne.n	80079ce <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	220b      	movs	r2, #11
 80079ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079cc:	e058      	b.n	8007a80 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d154      	bne.n	8007a80 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	220d      	movs	r2, #13
 80079da:	701a      	strb	r2, [r3, #0]
      break;
 80079dc:	e050      	b.n	8007a80 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	220d      	movs	r2, #13
 80079e2:	701a      	strb	r2, [r3, #0]
      break;
 80079e4:	e04c      	b.n	8007a80 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d049      	beq.n	8007a84 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	4798      	blx	r3
      }
      break;
 80079fc:	e042      	b.n	8007a84 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff fd72 	bl	80074f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a3a:	2105      	movs	r1, #5
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d107      	bne.n	8007a5c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff fe2b 	bl	80076b0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a5a:	e014      	b.n	8007a86 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 f9b7 	bl	8008dd0 <USBH_LL_Start>
      break;
 8007a62:	e010      	b.n	8007a86 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a64:	bf00      	nop
 8007a66:	e00e      	b.n	8007a86 <USBH_Process+0x3b6>
      break;
 8007a68:	bf00      	nop
 8007a6a:	e00c      	b.n	8007a86 <USBH_Process+0x3b6>
      break;
 8007a6c:	bf00      	nop
 8007a6e:	e00a      	b.n	8007a86 <USBH_Process+0x3b6>
    break;
 8007a70:	bf00      	nop
 8007a72:	e008      	b.n	8007a86 <USBH_Process+0x3b6>
      break;
 8007a74:	bf00      	nop
 8007a76:	e006      	b.n	8007a86 <USBH_Process+0x3b6>
      break;
 8007a78:	bf00      	nop
 8007a7a:	e004      	b.n	8007a86 <USBH_Process+0x3b6>
      break;
 8007a7c:	bf00      	nop
 8007a7e:	e002      	b.n	8007a86 <USBH_Process+0x3b6>
      break;
 8007a80:	bf00      	nop
 8007a82:	e000      	b.n	8007a86 <USBH_Process+0x3b6>
      break;
 8007a84:	bf00      	nop
  }
  return USBH_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af04      	add	r7, sp, #16
 8007a96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	2b07      	cmp	r3, #7
 8007aa6:	f200 81c1 	bhi.w	8007e2c <USBH_HandleEnum+0x39c>
 8007aaa:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <USBH_HandleEnum+0x20>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ad1 	.word	0x08007ad1
 8007ab4:	08007b8f 	.word	0x08007b8f
 8007ab8:	08007bf9 	.word	0x08007bf9
 8007abc:	08007c87 	.word	0x08007c87
 8007ac0:	08007cf1 	.word	0x08007cf1
 8007ac4:	08007d61 	.word	0x08007d61
 8007ac8:	08007da7 	.word	0x08007da7
 8007acc:	08007ded 	.word	0x08007ded
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007ad0:	2108      	movs	r1, #8
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa50 	bl	8007f78 <USBH_Get_DevDesc>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d130      	bne.n	8007b44 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	7919      	ldrb	r1, [r3, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b06:	b292      	uxth	r2, r2
 8007b08:	9202      	str	r2, [sp, #8]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	9201      	str	r2, [sp, #4]
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	4603      	mov	r3, r0
 8007b12:	2280      	movs	r2, #128	; 0x80
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 ff79 	bl	8008a0c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	7959      	ldrb	r1, [r3, #5]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b2e:	b292      	uxth	r2, r2
 8007b30:	9202      	str	r2, [sp, #8]
 8007b32:	2200      	movs	r2, #0
 8007b34:	9201      	str	r2, [sp, #4]
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 ff65 	bl	8008a0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b42:	e175      	b.n	8007e30 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	f040 8172 	bne.w	8007e30 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b52:	3301      	adds	r3, #1
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d903      	bls.n	8007b6e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	220d      	movs	r2, #13
 8007b6a:	701a      	strb	r2, [r3, #0]
      break;
 8007b6c:	e160      	b.n	8007e30 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	795b      	ldrb	r3, [r3, #5]
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 ff99 	bl	8008aac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	791b      	ldrb	r3, [r3, #4]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 ff93 	bl	8008aac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	701a      	strb	r2, [r3, #0]
      break;
 8007b8c:	e150      	b.n	8007e30 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007b8e:	2112      	movs	r1, #18
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f9f1 	bl	8007f78 <USBH_Get_DevDesc>
 8007b96:	4603      	mov	r3, r0
 8007b98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d103      	bne.n	8007ba8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ba6:	e145      	b.n	8007e34 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	f040 8142 	bne.w	8007e34 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d903      	bls.n	8007bd2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	220d      	movs	r2, #13
 8007bce:	701a      	strb	r2, [r3, #0]
      break;
 8007bd0:	e130      	b.n	8007e34 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	795b      	ldrb	r3, [r3, #5]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 ff67 	bl	8008aac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	791b      	ldrb	r3, [r3, #4]
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 ff61 	bl	8008aac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	701a      	strb	r2, [r3, #0]
      break;
 8007bf6:	e11d      	b.n	8007e34 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa68 	bl	80080d0 <USBH_SetAddress>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d132      	bne.n	8007c70 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007c0a:	2002      	movs	r0, #2
 8007c0c:	f001 fa45 	bl	800909a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2203      	movs	r2, #3
 8007c1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7919      	ldrb	r1, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c32:	b292      	uxth	r2, r2
 8007c34:	9202      	str	r2, [sp, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	9201      	str	r2, [sp, #4]
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2280      	movs	r2, #128	; 0x80
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fee3 	bl	8008a0c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	7959      	ldrb	r1, [r3, #5]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c5a:	b292      	uxth	r2, r2
 8007c5c:	9202      	str	r2, [sp, #8]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	9201      	str	r2, [sp, #4]
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	4603      	mov	r3, r0
 8007c66:	2200      	movs	r2, #0
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fecf 	bl	8008a0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c6e:	e0e3      	b.n	8007e38 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	f040 80e0 	bne.w	8007e38 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	220d      	movs	r2, #13
 8007c7c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	705a      	strb	r2, [r3, #1]
      break;
 8007c84:	e0d8      	b.n	8007e38 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007c86:	2109      	movs	r1, #9
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f99d 	bl	8007fc8 <USBH_Get_CfgDesc>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d103      	bne.n	8007ca0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2204      	movs	r2, #4
 8007c9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c9e:	e0cd      	b.n	8007e3c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	f040 80ca 	bne.w	8007e3c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cae:	3301      	adds	r3, #1
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d903      	bls.n	8007cca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	220d      	movs	r2, #13
 8007cc6:	701a      	strb	r2, [r3, #0]
      break;
 8007cc8:	e0b8      	b.n	8007e3c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	795b      	ldrb	r3, [r3, #5]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 feeb 	bl	8008aac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	791b      	ldrb	r3, [r3, #4]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fee5 	bl	8008aac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	701a      	strb	r2, [r3, #0]
      break;
 8007cee:	e0a5      	b.n	8007e3c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f965 	bl	8007fc8 <USBH_Get_CfgDesc>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d103      	bne.n	8007d10 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2205      	movs	r2, #5
 8007d0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d0e:	e097      	b.n	8007e40 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	f040 8094 	bne.w	8007e40 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d1e:	3301      	adds	r3, #1
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d903      	bls.n	8007d3a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	220d      	movs	r2, #13
 8007d36:	701a      	strb	r2, [r3, #0]
      break;
 8007d38:	e082      	b.n	8007e40 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	795b      	ldrb	r3, [r3, #5]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 feb3 	bl	8008aac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	791b      	ldrb	r3, [r3, #4]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fead 	bl	8008aac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	701a      	strb	r2, [r3, #0]
      break;
 8007d5e:	e06f      	b.n	8007e40 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d019      	beq.n	8007d9e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d76:	23ff      	movs	r3, #255	; 0xff
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f949 	bl	8008010 <USBH_Get_StringDesc>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d103      	bne.n	8007d90 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2206      	movs	r2, #6
 8007d8c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d8e:	e059      	b.n	8007e44 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d156      	bne.n	8007e44 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2206      	movs	r2, #6
 8007d9a:	705a      	strb	r2, [r3, #1]
      break;
 8007d9c:	e052      	b.n	8007e44 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2206      	movs	r2, #6
 8007da2:	705a      	strb	r2, [r3, #1]
      break;
 8007da4:	e04e      	b.n	8007e44 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d019      	beq.n	8007de4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007dbc:	23ff      	movs	r3, #255	; 0xff
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f926 	bl	8008010 <USBH_Get_StringDesc>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d103      	bne.n	8007dd6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2207      	movs	r2, #7
 8007dd2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007dd4:	e038      	b.n	8007e48 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d135      	bne.n	8007e48 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2207      	movs	r2, #7
 8007de0:	705a      	strb	r2, [r3, #1]
      break;
 8007de2:	e031      	b.n	8007e48 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2207      	movs	r2, #7
 8007de8:	705a      	strb	r2, [r3, #1]
      break;
 8007dea:	e02d      	b.n	8007e48 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d017      	beq.n	8007e26 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e02:	23ff      	movs	r3, #255	; 0xff
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f903 	bl	8008010 <USBH_Get_StringDesc>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d102      	bne.n	8007e1a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007e18:	e018      	b.n	8007e4c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d115      	bne.n	8007e4c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]
      break;
 8007e24:	e012      	b.n	8007e4c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	73fb      	strb	r3, [r7, #15]
      break;
 8007e2a:	e00f      	b.n	8007e4c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007e2c:	bf00      	nop
 8007e2e:	e00e      	b.n	8007e4e <USBH_HandleEnum+0x3be>
      break;
 8007e30:	bf00      	nop
 8007e32:	e00c      	b.n	8007e4e <USBH_HandleEnum+0x3be>
      break;
 8007e34:	bf00      	nop
 8007e36:	e00a      	b.n	8007e4e <USBH_HandleEnum+0x3be>
      break;
 8007e38:	bf00      	nop
 8007e3a:	e008      	b.n	8007e4e <USBH_HandleEnum+0x3be>
      break;
 8007e3c:	bf00      	nop
 8007e3e:	e006      	b.n	8007e4e <USBH_HandleEnum+0x3be>
      break;
 8007e40:	bf00      	nop
 8007e42:	e004      	b.n	8007e4e <USBH_HandleEnum+0x3be>
      break;
 8007e44:	bf00      	nop
 8007e46:	e002      	b.n	8007e4e <USBH_HandleEnum+0x3be>
      break;
 8007e48:	bf00      	nop
 8007e4a:	e000      	b.n	8007e4e <USBH_HandleEnum+0x3be>
      break;
 8007e4c:	bf00      	nop
  }
  return Status;
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f804 	bl	8007e9a <USBH_HandleSof>
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b0b      	cmp	r3, #11
 8007eaa:	d10a      	bne.n	8007ec2 <USBH_HandleSof+0x28>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d005      	beq.n	8007ec2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	4798      	blx	r3
  }
}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007eda:	bf00      	nop
}
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007ef6:	bf00      	nop
}
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 ff58 	bl	8008e06 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	791b      	ldrb	r3, [r3, #4]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fda5 	bl	8008aac <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	795b      	ldrb	r3, [r3, #5]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fd9f 	bl	8008aac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	4613      	mov	r3, r2
 8007f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f96:	2100      	movs	r1, #0
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f864 	bl	8008066 <USBH_GetDescriptor>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73fb      	strb	r3, [r7, #15]
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10a      	bne.n	8007fbe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007fb4:	78fa      	ldrb	r2, [r7, #3]
 8007fb6:	b292      	uxth	r2, r2
 8007fb8:	4619      	mov	r1, r3
 8007fba:	f000 f918 	bl	80081ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	331c      	adds	r3, #28
 8007fd8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007fda:	887b      	ldrh	r3, [r7, #2]
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f83d 	bl	8008066 <USBH_GetDescriptor>
 8007fec:	4603      	mov	r3, r0
 8007fee:	72fb      	strb	r3, [r7, #11]
 8007ff0:	7afb      	ldrb	r3, [r7, #11]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d107      	bne.n	8008006 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ffc:	887a      	ldrh	r2, [r7, #2]
 8007ffe:	68f9      	ldr	r1, [r7, #12]
 8008000:	4618      	mov	r0, r3
 8008002:	f000 f964 	bl	80082ce <USBH_ParseCfgDesc>
  }

  return status;
 8008006:	7afb      	ldrb	r3, [r7, #11]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af02      	add	r7, sp, #8
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	607a      	str	r2, [r7, #4]
 800801a:	461a      	mov	r2, r3
 800801c:	460b      	mov	r3, r1
 800801e:	72fb      	strb	r3, [r7, #11]
 8008020:	4613      	mov	r3, r2
 8008022:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008024:	7afb      	ldrb	r3, [r7, #11]
 8008026:	b29b      	uxth	r3, r3
 8008028:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800802c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008034:	893b      	ldrh	r3, [r7, #8]
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	460b      	mov	r3, r1
 800803a:	2100      	movs	r1, #0
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 f812 	bl	8008066 <USBH_GetDescriptor>
 8008042:	4603      	mov	r3, r0
 8008044:	75fb      	strb	r3, [r7, #23]
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d107      	bne.n	800805c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008052:	893a      	ldrh	r2, [r7, #8]
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fa37 	bl	80084ca <USBH_ParseStringDesc>
  }

  return status;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	607b      	str	r3, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	72fb      	strb	r3, [r7, #11]
 8008074:	4613      	mov	r3, r2
 8008076:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	789b      	ldrb	r3, [r3, #2]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d11c      	bne.n	80080ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008080:	7afb      	ldrb	r3, [r7, #11]
 8008082:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008086:	b2da      	uxtb	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2206      	movs	r2, #6
 8008090:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	893a      	ldrh	r2, [r7, #8]
 8008096:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008098:	893b      	ldrh	r3, [r7, #8]
 800809a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800809e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080a2:	d104      	bne.n	80080ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f240 4209 	movw	r2, #1033	; 0x409
 80080aa:	829a      	strh	r2, [r3, #20]
 80080ac:	e002      	b.n	80080b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8b3a      	ldrh	r2, [r7, #24]
 80080b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80080ba:	8b3b      	ldrh	r3, [r7, #24]
 80080bc:	461a      	mov	r2, r3
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 fa50 	bl	8008566 <USBH_CtlReq>
 80080c6:	4603      	mov	r3, r0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	789b      	ldrb	r3, [r3, #2]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d10f      	bne.n	8008104 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2205      	movs	r2, #5
 80080ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80080f0:	78fb      	ldrb	r3, [r7, #3]
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008104:	2200      	movs	r2, #0
 8008106:	2100      	movs	r1, #0
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fa2c 	bl	8008566 <USBH_CtlReq>
 800810e:	4603      	mov	r3, r0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	789b      	ldrb	r3, [r3, #2]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d10e      	bne.n	800814a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2209      	movs	r2, #9
 8008136:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	887a      	ldrh	r2, [r7, #2]
 800813c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800814a:	2200      	movs	r2, #0
 800814c:	2100      	movs	r1, #0
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fa09 	bl	8008566 <USBH_CtlReq>
 8008154:	4603      	mov	r3, r0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	460b      	mov	r3, r1
 8008168:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	789b      	ldrb	r3, [r3, #2]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d10f      	bne.n	8008192 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2203      	movs	r2, #3
 800817c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800817e:	78fb      	ldrb	r3, [r7, #3]
 8008180:	b29a      	uxth	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008192:	2200      	movs	r2, #0
 8008194:	2100      	movs	r1, #0
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f9e5 	bl	8008566 <USBH_CtlReq>
 800819c:	4603      	mov	r3, r0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	789b      	ldrb	r3, [r3, #2]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d10f      	bne.n	80081da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2202      	movs	r2, #2
 80081be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80081cc:	78fb      	ldrb	r3, [r7, #3]
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80081da:	2200      	movs	r2, #0
 80081dc:	2100      	movs	r1, #0
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f9c1 	bl	8008566 <USBH_CtlReq>
 80081e4:	4603      	mov	r3, r0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	4613      	mov	r3, r2
 80081fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	781a      	ldrb	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	785a      	ldrb	r2, [r3, #1]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	3302      	adds	r3, #2
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b29a      	uxth	r2, r3
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	3303      	adds	r3, #3
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	b29b      	uxth	r3, r3
 8008220:	4313      	orrs	r3, r2
 8008222:	b29a      	uxth	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	791a      	ldrb	r2, [r3, #4]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	795a      	ldrb	r2, [r3, #5]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	799a      	ldrb	r2, [r3, #6]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	79da      	ldrb	r2, [r3, #7]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008248:	88fb      	ldrh	r3, [r7, #6]
 800824a:	2b08      	cmp	r3, #8
 800824c:	d939      	bls.n	80082c2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	3308      	adds	r3, #8
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	b29a      	uxth	r2, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	3309      	adds	r3, #9
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	b29b      	uxth	r3, r3
 800825e:	021b      	lsls	r3, r3, #8
 8008260:	b29b      	uxth	r3, r3
 8008262:	4313      	orrs	r3, r2
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	330a      	adds	r3, #10
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	b29a      	uxth	r2, r3
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	330b      	adds	r3, #11
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	b29b      	uxth	r3, r3
 800827a:	021b      	lsls	r3, r3, #8
 800827c:	b29b      	uxth	r3, r3
 800827e:	4313      	orrs	r3, r2
 8008280:	b29a      	uxth	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	330c      	adds	r3, #12
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	b29a      	uxth	r2, r3
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	330d      	adds	r3, #13
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	b29b      	uxth	r3, r3
 8008296:	021b      	lsls	r3, r3, #8
 8008298:	b29b      	uxth	r3, r3
 800829a:	4313      	orrs	r3, r2
 800829c:	b29a      	uxth	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	7b9a      	ldrb	r2, [r3, #14]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	7bda      	ldrb	r2, [r3, #15]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	7c1a      	ldrb	r2, [r3, #16]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	7c5a      	ldrb	r2, [r3, #17]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	745a      	strb	r2, [r3, #17]
  }
}
 80082c2:	bf00      	nop
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b08a      	sub	sp, #40	; 0x28
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	4613      	mov	r3, r2
 80082da:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80082e6:	2300      	movs	r3, #0
 80082e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	781a      	ldrb	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	785a      	ldrb	r2, [r3, #1]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3302      	adds	r3, #2
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	b29a      	uxth	r2, r3
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	3303      	adds	r3, #3
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	b29b      	uxth	r3, r3
 8008314:	4313      	orrs	r3, r2
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	791a      	ldrb	r2, [r3, #4]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	795a      	ldrb	r2, [r3, #5]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	799a      	ldrb	r2, [r3, #6]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	79da      	ldrb	r2, [r3, #7]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	7a1a      	ldrb	r2, [r3, #8]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008344:	88fb      	ldrh	r3, [r7, #6]
 8008346:	2b09      	cmp	r3, #9
 8008348:	d95f      	bls.n	800840a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800834a:	2309      	movs	r3, #9
 800834c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008352:	e051      	b.n	80083f8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008354:	f107 0316 	add.w	r3, r7, #22
 8008358:	4619      	mov	r1, r3
 800835a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800835c:	f000 f8e8 	bl	8008530 <USBH_GetNextDesc>
 8008360:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	2b04      	cmp	r3, #4
 8008368:	d146      	bne.n	80083f8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800836a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800836e:	221a      	movs	r2, #26
 8008370:	fb02 f303 	mul.w	r3, r2, r3
 8008374:	3308      	adds	r3, #8
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4413      	add	r3, r2
 800837a:	3302      	adds	r3, #2
 800837c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800837e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008380:	69f8      	ldr	r0, [r7, #28]
 8008382:	f000 f846 	bl	8008412 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800838c:	2300      	movs	r3, #0
 800838e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008390:	e022      	b.n	80083d8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008392:	f107 0316 	add.w	r3, r7, #22
 8008396:	4619      	mov	r1, r3
 8008398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800839a:	f000 f8c9 	bl	8008530 <USBH_GetNextDesc>
 800839e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	785b      	ldrb	r3, [r3, #1]
 80083a4:	2b05      	cmp	r3, #5
 80083a6:	d117      	bne.n	80083d8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80083a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083ac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80083b0:	3201      	adds	r2, #1
 80083b2:	00d2      	lsls	r2, r2, #3
 80083b4:	211a      	movs	r1, #26
 80083b6:	fb01 f303 	mul.w	r3, r1, r3
 80083ba:	4413      	add	r3, r2
 80083bc:	3308      	adds	r3, #8
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4413      	add	r3, r2
 80083c2:	3304      	adds	r3, #4
 80083c4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80083c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083c8:	69b8      	ldr	r0, [r7, #24]
 80083ca:	f000 f851 	bl	8008470 <USBH_ParseEPDesc>
            ep_ix++;
 80083ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80083d2:	3301      	adds	r3, #1
 80083d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	791b      	ldrb	r3, [r3, #4]
 80083dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d204      	bcs.n	80083ee <USBH_ParseCfgDesc+0x120>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	885a      	ldrh	r2, [r3, #2]
 80083e8:	8afb      	ldrh	r3, [r7, #22]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d8d1      	bhi.n	8008392 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80083ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083f2:	3301      	adds	r3, #1
 80083f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d804      	bhi.n	800840a <USBH_ParseCfgDesc+0x13c>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	885a      	ldrh	r2, [r3, #2]
 8008404:	8afb      	ldrh	r3, [r7, #22]
 8008406:	429a      	cmp	r2, r3
 8008408:	d8a4      	bhi.n	8008354 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800840a:	bf00      	nop
 800840c:	3728      	adds	r7, #40	; 0x28
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781a      	ldrb	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	785a      	ldrb	r2, [r3, #1]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	789a      	ldrb	r2, [r3, #2]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	78da      	ldrb	r2, [r3, #3]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	791a      	ldrb	r2, [r3, #4]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	795a      	ldrb	r2, [r3, #5]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	799a      	ldrb	r2, [r3, #6]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	79da      	ldrb	r2, [r3, #7]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	7a1a      	ldrb	r2, [r3, #8]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	721a      	strb	r2, [r3, #8]
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781a      	ldrb	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	785a      	ldrb	r2, [r3, #1]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	789a      	ldrb	r2, [r3, #2]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	78da      	ldrb	r2, [r3, #3]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	3304      	adds	r3, #4
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	3305      	adds	r3, #5
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	021b      	lsls	r3, r3, #8
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	4313      	orrs	r3, r2
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	799a      	ldrb	r2, [r3, #6]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	719a      	strb	r2, [r3, #6]
}
 80084be:	bf00      	nop
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b087      	sub	sp, #28
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	60f8      	str	r0, [r7, #12]
 80084d2:	60b9      	str	r1, [r7, #8]
 80084d4:	4613      	mov	r3, r2
 80084d6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3301      	adds	r3, #1
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d120      	bne.n	8008524 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	1e9a      	subs	r2, r3, #2
 80084e8:	88fb      	ldrh	r3, [r7, #6]
 80084ea:	4293      	cmp	r3, r2
 80084ec:	bf28      	it	cs
 80084ee:	4613      	movcs	r3, r2
 80084f0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3302      	adds	r3, #2
 80084f6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80084f8:	2300      	movs	r3, #0
 80084fa:	82fb      	strh	r3, [r7, #22]
 80084fc:	e00b      	b.n	8008516 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80084fe:	8afb      	ldrh	r3, [r7, #22]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4413      	add	r3, r2
 8008504:	781a      	ldrb	r2, [r3, #0]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	701a      	strb	r2, [r3, #0]
      pdest++;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	3301      	adds	r3, #1
 800850e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008510:	8afb      	ldrh	r3, [r7, #22]
 8008512:	3302      	adds	r3, #2
 8008514:	82fb      	strh	r3, [r7, #22]
 8008516:	8afa      	ldrh	r2, [r7, #22]
 8008518:	8abb      	ldrh	r3, [r7, #20]
 800851a:	429a      	cmp	r2, r3
 800851c:	d3ef      	bcc.n	80084fe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2200      	movs	r2, #0
 8008522:	701a      	strb	r2, [r3, #0]
  }
}
 8008524:	bf00      	nop
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	881a      	ldrh	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	b29b      	uxth	r3, r3
 8008544:	4413      	add	r3, r2
 8008546:	b29a      	uxth	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4413      	add	r3, r2
 8008556:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008558:	68fb      	ldr	r3, [r7, #12]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b086      	sub	sp, #24
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	4613      	mov	r3, r2
 8008572:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008574:	2301      	movs	r3, #1
 8008576:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	789b      	ldrb	r3, [r3, #2]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d002      	beq.n	8008586 <USBH_CtlReq+0x20>
 8008580:	2b02      	cmp	r3, #2
 8008582:	d00f      	beq.n	80085a4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008584:	e027      	b.n	80085d6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	88fa      	ldrh	r2, [r7, #6]
 8008590:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2202      	movs	r2, #2
 800859c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800859e:	2301      	movs	r3, #1
 80085a0:	75fb      	strb	r3, [r7, #23]
      break;
 80085a2:	e018      	b.n	80085d6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 f81b 	bl	80085e0 <USBH_HandleControl>
 80085aa:	4603      	mov	r3, r0
 80085ac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <USBH_CtlReq+0x54>
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d106      	bne.n	80085c8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2201      	movs	r2, #1
 80085be:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	761a      	strb	r2, [r3, #24]
      break;
 80085c6:	e005      	b.n	80085d4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d102      	bne.n	80085d4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2201      	movs	r2, #1
 80085d2:	709a      	strb	r2, [r3, #2]
      break;
 80085d4:	bf00      	nop
  }
  return status;
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af02      	add	r7, sp, #8
 80085e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80085e8:	2301      	movs	r3, #1
 80085ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	7e1b      	ldrb	r3, [r3, #24]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	2b0a      	cmp	r3, #10
 80085f8:	f200 8158 	bhi.w	80088ac <USBH_HandleControl+0x2cc>
 80085fc:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <USBH_HandleControl+0x24>)
 80085fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008602:	bf00      	nop
 8008604:	08008631 	.word	0x08008631
 8008608:	0800864b 	.word	0x0800864b
 800860c:	080086b5 	.word	0x080086b5
 8008610:	080086db 	.word	0x080086db
 8008614:	08008713 	.word	0x08008713
 8008618:	0800873f 	.word	0x0800873f
 800861c:	08008791 	.word	0x08008791
 8008620:	080087b3 	.word	0x080087b3
 8008624:	080087ef 	.word	0x080087ef
 8008628:	08008817 	.word	0x08008817
 800862c:	08008855 	.word	0x08008855
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f103 0110 	add.w	r1, r3, #16
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	795b      	ldrb	r3, [r3, #5]
 800863a:	461a      	mov	r2, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f945 	bl	80088cc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2202      	movs	r2, #2
 8008646:	761a      	strb	r2, [r3, #24]
      break;
 8008648:	e13b      	b.n	80088c2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	795b      	ldrb	r3, [r3, #5]
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fcc5 	bl	8008fe0 <USBH_LL_GetURBState>
 8008656:	4603      	mov	r3, r0
 8008658:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d11e      	bne.n	800869e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	7c1b      	ldrb	r3, [r3, #16]
 8008664:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008668:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	8adb      	ldrh	r3, [r3, #22]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008672:	7b7b      	ldrb	r3, [r7, #13]
 8008674:	2b80      	cmp	r3, #128	; 0x80
 8008676:	d103      	bne.n	8008680 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2203      	movs	r2, #3
 800867c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800867e:	e117      	b.n	80088b0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2205      	movs	r2, #5
 8008684:	761a      	strb	r2, [r3, #24]
      break;
 8008686:	e113      	b.n	80088b0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008688:	7b7b      	ldrb	r3, [r7, #13]
 800868a:	2b80      	cmp	r3, #128	; 0x80
 800868c:	d103      	bne.n	8008696 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2209      	movs	r2, #9
 8008692:	761a      	strb	r2, [r3, #24]
      break;
 8008694:	e10c      	b.n	80088b0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2207      	movs	r2, #7
 800869a:	761a      	strb	r2, [r3, #24]
      break;
 800869c:	e108      	b.n	80088b0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d003      	beq.n	80086ac <USBH_HandleControl+0xcc>
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	f040 8102 	bne.w	80088b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	220b      	movs	r2, #11
 80086b0:	761a      	strb	r2, [r3, #24]
      break;
 80086b2:	e0fd      	b.n	80088b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6899      	ldr	r1, [r3, #8]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	899a      	ldrh	r2, [r3, #12]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	791b      	ldrb	r3, [r3, #4]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f93c 	bl	800894a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2204      	movs	r2, #4
 80086d6:	761a      	strb	r2, [r3, #24]
      break;
 80086d8:	e0f3      	b.n	80088c2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	791b      	ldrb	r3, [r3, #4]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fc7d 	bl	8008fe0 <USBH_LL_GetURBState>
 80086e6:	4603      	mov	r3, r0
 80086e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d102      	bne.n	80086f6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2209      	movs	r2, #9
 80086f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b05      	cmp	r3, #5
 80086fa:	d102      	bne.n	8008702 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086fc:	2303      	movs	r3, #3
 80086fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008700:	e0d8      	b.n	80088b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b04      	cmp	r3, #4
 8008706:	f040 80d5 	bne.w	80088b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	220b      	movs	r2, #11
 800870e:	761a      	strb	r2, [r3, #24]
      break;
 8008710:	e0d0      	b.n	80088b4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6899      	ldr	r1, [r3, #8]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	899a      	ldrh	r2, [r3, #12]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	7958      	ldrb	r0, [r3, #5]
 800871e:	2301      	movs	r3, #1
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	4603      	mov	r3, r0
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f8eb 	bl	8008900 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008730:	b29a      	uxth	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2206      	movs	r2, #6
 800873a:	761a      	strb	r2, [r3, #24]
      break;
 800873c:	e0c1      	b.n	80088c2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	795b      	ldrb	r3, [r3, #5]
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fc4b 	bl	8008fe0 <USBH_LL_GetURBState>
 800874a:	4603      	mov	r3, r0
 800874c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d103      	bne.n	800875c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2207      	movs	r2, #7
 8008758:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800875a:	e0ad      	b.n	80088b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	2b05      	cmp	r3, #5
 8008760:	d105      	bne.n	800876e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	220c      	movs	r2, #12
 8008766:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008768:	2303      	movs	r3, #3
 800876a:	73fb      	strb	r3, [r7, #15]
      break;
 800876c:	e0a4      	b.n	80088b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d103      	bne.n	800877c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2205      	movs	r2, #5
 8008778:	761a      	strb	r2, [r3, #24]
      break;
 800877a:	e09d      	b.n	80088b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	2b04      	cmp	r3, #4
 8008780:	f040 809a 	bne.w	80088b8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	220b      	movs	r2, #11
 8008788:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800878a:	2302      	movs	r3, #2
 800878c:	73fb      	strb	r3, [r7, #15]
      break;
 800878e:	e093      	b.n	80088b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	791b      	ldrb	r3, [r3, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	2100      	movs	r1, #0
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f8d6 	bl	800894a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2208      	movs	r2, #8
 80087ae:	761a      	strb	r2, [r3, #24]

      break;
 80087b0:	e087      	b.n	80088c2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	791b      	ldrb	r3, [r3, #4]
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fc11 	bl	8008fe0 <USBH_LL_GetURBState>
 80087be:	4603      	mov	r3, r0
 80087c0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d105      	bne.n	80087d4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	220d      	movs	r2, #13
 80087cc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80087d2:	e073      	b.n	80088bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d103      	bne.n	80087e2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	220b      	movs	r2, #11
 80087de:	761a      	strb	r2, [r3, #24]
      break;
 80087e0:	e06c      	b.n	80088bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	2b05      	cmp	r3, #5
 80087e6:	d169      	bne.n	80088bc <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80087e8:	2303      	movs	r3, #3
 80087ea:	73fb      	strb	r3, [r7, #15]
      break;
 80087ec:	e066      	b.n	80088bc <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	795a      	ldrb	r2, [r3, #5]
 80087f2:	2301      	movs	r3, #1
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	4613      	mov	r3, r2
 80087f8:	2200      	movs	r2, #0
 80087fa:	2100      	movs	r1, #0
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f87f 	bl	8008900 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008808:	b29a      	uxth	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	220a      	movs	r2, #10
 8008812:	761a      	strb	r2, [r3, #24]
      break;
 8008814:	e055      	b.n	80088c2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	795b      	ldrb	r3, [r3, #5]
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fbdf 	bl	8008fe0 <USBH_LL_GetURBState>
 8008822:	4603      	mov	r3, r0
 8008824:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d105      	bne.n	8008838 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	220d      	movs	r2, #13
 8008834:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008836:	e043      	b.n	80088c0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	2b02      	cmp	r3, #2
 800883c:	d103      	bne.n	8008846 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2209      	movs	r2, #9
 8008842:	761a      	strb	r2, [r3, #24]
      break;
 8008844:	e03c      	b.n	80088c0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	2b04      	cmp	r3, #4
 800884a:	d139      	bne.n	80088c0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	220b      	movs	r2, #11
 8008850:	761a      	strb	r2, [r3, #24]
      break;
 8008852:	e035      	b.n	80088c0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	7e5b      	ldrb	r3, [r3, #25]
 8008858:	3301      	adds	r3, #1
 800885a:	b2da      	uxtb	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	765a      	strb	r2, [r3, #25]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	7e5b      	ldrb	r3, [r3, #25]
 8008864:	2b02      	cmp	r3, #2
 8008866:	d806      	bhi.n	8008876 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008874:	e025      	b.n	80088c2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800887c:	2106      	movs	r1, #6
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	795b      	ldrb	r3, [r3, #5]
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f90c 	bl	8008aac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	791b      	ldrb	r3, [r3, #4]
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f906 	bl	8008aac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80088a6:	2302      	movs	r3, #2
 80088a8:	73fb      	strb	r3, [r7, #15]
      break;
 80088aa:	e00a      	b.n	80088c2 <USBH_HandleControl+0x2e2>

    default:
      break;
 80088ac:	bf00      	nop
 80088ae:	e008      	b.n	80088c2 <USBH_HandleControl+0x2e2>
      break;
 80088b0:	bf00      	nop
 80088b2:	e006      	b.n	80088c2 <USBH_HandleControl+0x2e2>
      break;
 80088b4:	bf00      	nop
 80088b6:	e004      	b.n	80088c2 <USBH_HandleControl+0x2e2>
      break;
 80088b8:	bf00      	nop
 80088ba:	e002      	b.n	80088c2 <USBH_HandleControl+0x2e2>
      break;
 80088bc:	bf00      	nop
 80088be:	e000      	b.n	80088c2 <USBH_HandleControl+0x2e2>
      break;
 80088c0:	bf00      	nop
  }

  return status;
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af04      	add	r7, sp, #16
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088da:	79f9      	ldrb	r1, [r7, #7]
 80088dc:	2300      	movs	r3, #0
 80088de:	9303      	str	r3, [sp, #12]
 80088e0:	2308      	movs	r3, #8
 80088e2:	9302      	str	r3, [sp, #8]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	2300      	movs	r3, #0
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	2300      	movs	r3, #0
 80088ee:	2200      	movs	r2, #0
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fb44 	bl	8008f7e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af04      	add	r7, sp, #16
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	4611      	mov	r1, r2
 800890c:	461a      	mov	r2, r3
 800890e:	460b      	mov	r3, r1
 8008910:	80fb      	strh	r3, [r7, #6]
 8008912:	4613      	mov	r3, r2
 8008914:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008924:	7979      	ldrb	r1, [r7, #5]
 8008926:	7e3b      	ldrb	r3, [r7, #24]
 8008928:	9303      	str	r3, [sp, #12]
 800892a:	88fb      	ldrh	r3, [r7, #6]
 800892c:	9302      	str	r3, [sp, #8]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	2301      	movs	r3, #1
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	2300      	movs	r3, #0
 8008938:	2200      	movs	r2, #0
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 fb1f 	bl	8008f7e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b088      	sub	sp, #32
 800894e:	af04      	add	r7, sp, #16
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	4611      	mov	r1, r2
 8008956:	461a      	mov	r2, r3
 8008958:	460b      	mov	r3, r1
 800895a:	80fb      	strh	r3, [r7, #6]
 800895c:	4613      	mov	r3, r2
 800895e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008960:	7979      	ldrb	r1, [r7, #5]
 8008962:	2300      	movs	r3, #0
 8008964:	9303      	str	r3, [sp, #12]
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	9302      	str	r3, [sp, #8]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	2301      	movs	r3, #1
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	2300      	movs	r3, #0
 8008974:	2201      	movs	r2, #1
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 fb01 	bl	8008f7e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800897c:	2300      	movs	r3, #0

}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b088      	sub	sp, #32
 800898a:	af04      	add	r7, sp, #16
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	4611      	mov	r1, r2
 8008992:	461a      	mov	r2, r3
 8008994:	460b      	mov	r3, r1
 8008996:	80fb      	strh	r3, [r7, #6]
 8008998:	4613      	mov	r3, r2
 800899a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80089aa:	7979      	ldrb	r1, [r7, #5]
 80089ac:	7e3b      	ldrb	r3, [r7, #24]
 80089ae:	9303      	str	r3, [sp, #12]
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	9302      	str	r3, [sp, #8]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	2301      	movs	r3, #1
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	2302      	movs	r3, #2
 80089be:	2200      	movs	r2, #0
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 fadc 	bl	8008f7e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af04      	add	r7, sp, #16
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	4611      	mov	r1, r2
 80089dc:	461a      	mov	r2, r3
 80089de:	460b      	mov	r3, r1
 80089e0:	80fb      	strh	r3, [r7, #6]
 80089e2:	4613      	mov	r3, r2
 80089e4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80089e6:	7979      	ldrb	r1, [r7, #5]
 80089e8:	2300      	movs	r3, #0
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	88fb      	ldrh	r3, [r7, #6]
 80089ee:	9302      	str	r3, [sp, #8]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	2301      	movs	r3, #1
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	2302      	movs	r3, #2
 80089fa:	2201      	movs	r2, #1
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 fabe 	bl	8008f7e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af04      	add	r7, sp, #16
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	4608      	mov	r0, r1
 8008a16:	4611      	mov	r1, r2
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	70fb      	strb	r3, [r7, #3]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	70bb      	strb	r3, [r7, #2]
 8008a22:	4613      	mov	r3, r2
 8008a24:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008a26:	7878      	ldrb	r0, [r7, #1]
 8008a28:	78ba      	ldrb	r2, [r7, #2]
 8008a2a:	78f9      	ldrb	r1, [r7, #3]
 8008a2c:	8b3b      	ldrh	r3, [r7, #24]
 8008a2e:	9302      	str	r3, [sp, #8]
 8008a30:	7d3b      	ldrb	r3, [r7, #20]
 8008a32:	9301      	str	r3, [sp, #4]
 8008a34:	7c3b      	ldrb	r3, [r7, #16]
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	4603      	mov	r3, r0
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa51 	bl	8008ee2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008a56:	78fb      	ldrb	r3, [r7, #3]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fa70 	bl	8008f40 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	460b      	mov	r3, r1
 8008a74:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f836 	bl	8008ae8 <USBH_GetFreePipe>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a80:	89fb      	ldrh	r3, [r7, #14]
 8008a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d00a      	beq.n	8008aa0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008a8a:	78fa      	ldrb	r2, [r7, #3]
 8008a8c:	89fb      	ldrh	r3, [r7, #14]
 8008a8e:	f003 030f 	and.w	r3, r3, #15
 8008a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a96:	6879      	ldr	r1, [r7, #4]
 8008a98:	33e0      	adds	r3, #224	; 0xe0
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008aa0:	89fb      	ldrh	r3, [r7, #14]
 8008aa2:	b2db      	uxtb	r3, r3
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	2b0a      	cmp	r3, #10
 8008abc:	d80d      	bhi.n	8008ada <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	33e0      	adds	r3, #224	; 0xe0
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	78fb      	ldrb	r3, [r7, #3]
 8008acc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	33e0      	adds	r3, #224	; 0xe0
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
 8008af8:	e00f      	b.n	8008b1a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	33e0      	adds	r3, #224	; 0xe0
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d102      	bne.n	8008b14 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	e007      	b.n	8008b24 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	3301      	adds	r3, #1
 8008b18:	73fb      	strb	r3, [r7, #15]
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	2b0a      	cmp	r3, #10
 8008b1e:	d9ec      	bls.n	8008afa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008b34:	2201      	movs	r2, #1
 8008b36:	490e      	ldr	r1, [pc, #56]	; (8008b70 <MX_USB_HOST_Init+0x40>)
 8008b38:	480e      	ldr	r0, [pc, #56]	; (8008b74 <MX_USB_HOST_Init+0x44>)
 8008b3a:	f7fe fc9f 	bl	800747c <USBH_Init>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008b44:	f7f7 ffac 	bl	8000aa0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008b48:	490b      	ldr	r1, [pc, #44]	; (8008b78 <MX_USB_HOST_Init+0x48>)
 8008b4a:	480a      	ldr	r0, [pc, #40]	; (8008b74 <MX_USB_HOST_Init+0x44>)
 8008b4c:	f7fe fd24 	bl	8007598 <USBH_RegisterClass>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b56:	f7f7 ffa3 	bl	8000aa0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b5a:	4806      	ldr	r0, [pc, #24]	; (8008b74 <MX_USB_HOST_Init+0x44>)
 8008b5c:	f7fe fda8 	bl	80076b0 <USBH_Start>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008b66:	f7f7 ff9b 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008b6a:	bf00      	nop
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	08008b91 	.word	0x08008b91
 8008b74:	2000025c 	.word	0x2000025c
 8008b78:	2000000c 	.word	0x2000000c

08008b7c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008b80:	4802      	ldr	r0, [pc, #8]	; (8008b8c <MX_USB_HOST_Process+0x10>)
 8008b82:	f7fe fda5 	bl	80076d0 <USBH_Process>
}
 8008b86:	bf00      	nop
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	2000025c 	.word	0x2000025c

08008b90 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b9c:	78fb      	ldrb	r3, [r7, #3]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	2b04      	cmp	r3, #4
 8008ba2:	d819      	bhi.n	8008bd8 <USBH_UserProcess+0x48>
 8008ba4:	a201      	add	r2, pc, #4	; (adr r2, 8008bac <USBH_UserProcess+0x1c>)
 8008ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008baa:	bf00      	nop
 8008bac:	08008bd9 	.word	0x08008bd9
 8008bb0:	08008bc9 	.word	0x08008bc9
 8008bb4:	08008bd9 	.word	0x08008bd9
 8008bb8:	08008bd1 	.word	0x08008bd1
 8008bbc:	08008bc1 	.word	0x08008bc1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008bc0:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <USBH_UserProcess+0x58>)
 8008bc2:	2203      	movs	r2, #3
 8008bc4:	701a      	strb	r2, [r3, #0]
  break;
 8008bc6:	e008      	b.n	8008bda <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008bc8:	4b07      	ldr	r3, [pc, #28]	; (8008be8 <USBH_UserProcess+0x58>)
 8008bca:	2202      	movs	r2, #2
 8008bcc:	701a      	strb	r2, [r3, #0]
  break;
 8008bce:	e004      	b.n	8008bda <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008bd0:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <USBH_UserProcess+0x58>)
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	701a      	strb	r2, [r3, #0]
  break;
 8008bd6:	e000      	b.n	8008bda <USBH_UserProcess+0x4a>

  default:
  break;
 8008bd8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	200000b4 	.word	0x200000b4

08008bec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08a      	sub	sp, #40	; 0x28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bf4:	f107 0314 	add.w	r3, r7, #20
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	609a      	str	r2, [r3, #8]
 8008c00:	60da      	str	r2, [r3, #12]
 8008c02:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c0c:	d147      	bne.n	8008c9e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c0e:	2300      	movs	r3, #0
 8008c10:	613b      	str	r3, [r7, #16]
 8008c12:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <HAL_HCD_MspInit+0xbc>)
 8008c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c16:	4a24      	ldr	r2, [pc, #144]	; (8008ca8 <HAL_HCD_MspInit+0xbc>)
 8008c18:	f043 0301 	orr.w	r3, r3, #1
 8008c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c1e:	4b22      	ldr	r3, [pc, #136]	; (8008ca8 <HAL_HCD_MspInit+0xbc>)
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	613b      	str	r3, [r7, #16]
 8008c28:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008c38:	f107 0314 	add.w	r3, r7, #20
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	481b      	ldr	r0, [pc, #108]	; (8008cac <HAL_HCD_MspInit+0xc0>)
 8008c40:	f7f8 ff5e 	bl	8001b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c44:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c52:	2300      	movs	r3, #0
 8008c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c56:	230a      	movs	r3, #10
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c5a:	f107 0314 	add.w	r3, r7, #20
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4812      	ldr	r0, [pc, #72]	; (8008cac <HAL_HCD_MspInit+0xc0>)
 8008c62:	f7f8 ff4d 	bl	8001b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c66:	4b10      	ldr	r3, [pc, #64]	; (8008ca8 <HAL_HCD_MspInit+0xbc>)
 8008c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6a:	4a0f      	ldr	r2, [pc, #60]	; (8008ca8 <HAL_HCD_MspInit+0xbc>)
 8008c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c70:	6353      	str	r3, [r2, #52]	; 0x34
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <HAL_HCD_MspInit+0xbc>)
 8008c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7a:	4a0b      	ldr	r2, [pc, #44]	; (8008ca8 <HAL_HCD_MspInit+0xbc>)
 8008c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c80:	6453      	str	r3, [r2, #68]	; 0x44
 8008c82:	4b09      	ldr	r3, [pc, #36]	; (8008ca8 <HAL_HCD_MspInit+0xbc>)
 8008c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2100      	movs	r1, #0
 8008c92:	2043      	movs	r0, #67	; 0x43
 8008c94:	f7f8 fb6d 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c98:	2043      	movs	r0, #67	; 0x43
 8008c9a:	f7f8 fb86 	bl	80013aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c9e:	bf00      	nop
 8008ca0:	3728      	adds	r7, #40	; 0x28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	40023800 	.word	0x40023800
 8008cac:	40020000 	.word	0x40020000

08008cb0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff f8d9 	bl	8007e76 <USBH_LL_IncTimer>
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7ff f911 	bl	8007f02 <USBH_LL_Connect>
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7ff f91a 	bl	8007f30 <USBH_LL_Disconnect>
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
 8008d10:	4613      	mov	r3, r2
 8008d12:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7ff f8cb 	bl	8007eca <USBH_LL_PortEnabled>
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff f8cb 	bl	8007ee6 <USBH_LL_PortDisabled>
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d12a      	bne.n	8008dc0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008d6a:	4a18      	ldr	r2, [pc, #96]	; (8008dcc <USBH_LL_Init+0x74>)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a15      	ldr	r2, [pc, #84]	; (8008dcc <USBH_LL_Init+0x74>)
 8008d76:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d7a:	4b14      	ldr	r3, [pc, #80]	; (8008dcc <USBH_LL_Init+0x74>)
 8008d7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d80:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008d82:	4b12      	ldr	r3, [pc, #72]	; (8008dcc <USBH_LL_Init+0x74>)
 8008d84:	2208      	movs	r2, #8
 8008d86:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d88:	4b10      	ldr	r3, [pc, #64]	; (8008dcc <USBH_LL_Init+0x74>)
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d8e:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <USBH_LL_Init+0x74>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d94:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <USBH_LL_Init+0x74>)
 8008d96:	2202      	movs	r2, #2
 8008d98:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d9a:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <USBH_LL_Init+0x74>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008da0:	480a      	ldr	r0, [pc, #40]	; (8008dcc <USBH_LL_Init+0x74>)
 8008da2:	f7f9 f87b 	bl	8001e9c <HAL_HCD_Init>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008dac:	f7f7 fe78 	bl	8000aa0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008db0:	4806      	ldr	r0, [pc, #24]	; (8008dcc <USBH_LL_Init+0x74>)
 8008db2:	f7f9 fc7f 	bl	80026b4 <HAL_HCD_GetCurrentFrame>
 8008db6:	4603      	mov	r3, r0
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff f84c 	bl	8007e58 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20000634 	.word	0x20000634

08008dd0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7f9 fbec 	bl	80025c4 <HAL_HCD_Start>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 f95c 	bl	80090b0 <USBH_Get_USB_Status>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7f9 fbf4 	bl	800260a <HAL_HCD_Stop>
 8008e22:	4603      	mov	r3, r0
 8008e24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 f941 	bl	80090b0 <USBH_Get_USB_Status>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008e44:	2301      	movs	r3, #1
 8008e46:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7f9 fc3e 	bl	80026d0 <HAL_HCD_GetCurrentSpeed>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d007      	beq.n	8008e6a <USBH_LL_GetSpeed+0x2e>
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d302      	bcc.n	8008e64 <USBH_LL_GetSpeed+0x28>
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d006      	beq.n	8008e70 <USBH_LL_GetSpeed+0x34>
 8008e62:	e008      	b.n	8008e76 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
    break;
 8008e68:	e008      	b.n	8008e7c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e6e:	e005      	b.n	8008e7c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e70:	2302      	movs	r3, #2
 8008e72:	73fb      	strb	r3, [r7, #15]
    break;
 8008e74:	e002      	b.n	8008e7c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008e76:	2301      	movs	r3, #1
 8008e78:	73fb      	strb	r3, [r7, #15]
    break;
 8008e7a:	bf00      	nop
  }
  return  speed;
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b084      	sub	sp, #16
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7f9 fbd1 	bl	8002644 <HAL_HCD_ResetPort>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 f901 	bl	80090b0 <USBH_Get_USB_Status>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ece:	78fa      	ldrb	r2, [r7, #3]
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7f9 fbd9 	bl	800268a <HAL_HCD_HC_GetXferCount>
 8008ed8:	4603      	mov	r3, r0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ee2:	b590      	push	{r4, r7, lr}
 8008ee4:	b089      	sub	sp, #36	; 0x24
 8008ee6:	af04      	add	r7, sp, #16
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	4608      	mov	r0, r1
 8008eec:	4611      	mov	r1, r2
 8008eee:	461a      	mov	r2, r3
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	70fb      	strb	r3, [r7, #3]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70bb      	strb	r3, [r7, #2]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f0a:	787c      	ldrb	r4, [r7, #1]
 8008f0c:	78ba      	ldrb	r2, [r7, #2]
 8008f0e:	78f9      	ldrb	r1, [r7, #3]
 8008f10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f12:	9302      	str	r3, [sp, #8]
 8008f14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	4623      	mov	r3, r4
 8008f22:	f7f9 f81d 	bl	8001f60 <HAL_HCD_HC_Init>
 8008f26:	4603      	mov	r3, r0
 8008f28:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 f8bf 	bl	80090b0 <USBH_Get_USB_Status>
 8008f32:	4603      	mov	r3, r0
 8008f34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd90      	pop	{r4, r7, pc}

08008f40 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7f9 f896 	bl	8002090 <HAL_HCD_HC_Halt>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 f8a0 	bl	80090b0 <USBH_Get_USB_Status>
 8008f70:	4603      	mov	r3, r0
 8008f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f7e:	b590      	push	{r4, r7, lr}
 8008f80:	b089      	sub	sp, #36	; 0x24
 8008f82:	af04      	add	r7, sp, #16
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	4608      	mov	r0, r1
 8008f88:	4611      	mov	r1, r2
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	70fb      	strb	r3, [r7, #3]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70bb      	strb	r3, [r7, #2]
 8008f94:	4613      	mov	r3, r2
 8008f96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008fa6:	787c      	ldrb	r4, [r7, #1]
 8008fa8:	78ba      	ldrb	r2, [r7, #2]
 8008faa:	78f9      	ldrb	r1, [r7, #3]
 8008fac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008fb0:	9303      	str	r3, [sp, #12]
 8008fb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008fb4:	9302      	str	r3, [sp, #8]
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	4623      	mov	r3, r4
 8008fc2:	f7f9 f889 	bl	80020d8 <HAL_HCD_HC_SubmitRequest>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 f86f 	bl	80090b0 <USBH_Get_USB_Status>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd90      	pop	{r4, r7, pc}

08008fe0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7f9 fb32 	bl	8002660 <HAL_HCD_HC_GetURBState>
 8008ffc:	4603      	mov	r3, r0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b082      	sub	sp, #8
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009018:	2b01      	cmp	r3, #1
 800901a:	d103      	bne.n	8009024 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800901c:	78fb      	ldrb	r3, [r7, #3]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f872 	bl	8009108 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009024:	20c8      	movs	r0, #200	; 0xc8
 8009026:	f7f8 f8a7 	bl	8001178 <HAL_Delay>
  return USBH_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
 8009040:	4613      	mov	r3, r2
 8009042:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800904a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800904c:	78fa      	ldrb	r2, [r7, #3]
 800904e:	68f9      	ldr	r1, [r7, #12]
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	440b      	add	r3, r1
 800905a:	333b      	adds	r3, #59	; 0x3b
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00a      	beq.n	8009078 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009062:	78fa      	ldrb	r2, [r7, #3]
 8009064:	68f9      	ldr	r1, [r7, #12]
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	00db      	lsls	r3, r3, #3
 800906e:	440b      	add	r3, r1
 8009070:	3350      	adds	r3, #80	; 0x50
 8009072:	78ba      	ldrb	r2, [r7, #2]
 8009074:	701a      	strb	r2, [r3, #0]
 8009076:	e009      	b.n	800908c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009078:	78fa      	ldrb	r2, [r7, #3]
 800907a:	68f9      	ldr	r1, [r7, #12]
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	440b      	add	r3, r1
 8009086:	3351      	adds	r3, #81	; 0x51
 8009088:	78ba      	ldrb	r2, [r7, #2]
 800908a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7f8 f868 	bl	8001178 <HAL_Delay>
}
 80090a8:	bf00      	nop
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	4603      	mov	r3, r0
 80090b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090be:	79fb      	ldrb	r3, [r7, #7]
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d817      	bhi.n	80090f4 <USBH_Get_USB_Status+0x44>
 80090c4:	a201      	add	r2, pc, #4	; (adr r2, 80090cc <USBH_Get_USB_Status+0x1c>)
 80090c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ca:	bf00      	nop
 80090cc:	080090dd 	.word	0x080090dd
 80090d0:	080090e3 	.word	0x080090e3
 80090d4:	080090e9 	.word	0x080090e9
 80090d8:	080090ef 	.word	0x080090ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80090dc:	2300      	movs	r3, #0
 80090de:	73fb      	strb	r3, [r7, #15]
    break;
 80090e0:	e00b      	b.n	80090fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80090e2:	2302      	movs	r3, #2
 80090e4:	73fb      	strb	r3, [r7, #15]
    break;
 80090e6:	e008      	b.n	80090fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80090e8:	2301      	movs	r3, #1
 80090ea:	73fb      	strb	r3, [r7, #15]
    break;
 80090ec:	e005      	b.n	80090fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80090ee:	2302      	movs	r3, #2
 80090f0:	73fb      	strb	r3, [r7, #15]
    break;
 80090f2:	e002      	b.n	80090fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80090f4:	2302      	movs	r3, #2
 80090f6:	73fb      	strb	r3, [r7, #15]
    break;
 80090f8:	bf00      	nop
  }
  return usb_status;
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009116:	79fb      	ldrb	r3, [r7, #7]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800911c:	2301      	movs	r3, #1
 800911e:	73fb      	strb	r3, [r7, #15]
 8009120:	e001      	b.n	8009126 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	461a      	mov	r2, r3
 800912a:	2101      	movs	r1, #1
 800912c:	4803      	ldr	r0, [pc, #12]	; (800913c <MX_DriverVbusFS+0x34>)
 800912e:	f7f8 fe81 	bl	8001e34 <HAL_GPIO_WritePin>
}
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	40020800 	.word	0x40020800

08009140 <__errno>:
 8009140:	4b01      	ldr	r3, [pc, #4]	; (8009148 <__errno+0x8>)
 8009142:	6818      	ldr	r0, [r3, #0]
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	2000002c 	.word	0x2000002c

0800914c <__libc_init_array>:
 800914c:	b570      	push	{r4, r5, r6, lr}
 800914e:	4e0d      	ldr	r6, [pc, #52]	; (8009184 <__libc_init_array+0x38>)
 8009150:	4c0d      	ldr	r4, [pc, #52]	; (8009188 <__libc_init_array+0x3c>)
 8009152:	1ba4      	subs	r4, r4, r6
 8009154:	10a4      	asrs	r4, r4, #2
 8009156:	2500      	movs	r5, #0
 8009158:	42a5      	cmp	r5, r4
 800915a:	d109      	bne.n	8009170 <__libc_init_array+0x24>
 800915c:	4e0b      	ldr	r6, [pc, #44]	; (800918c <__libc_init_array+0x40>)
 800915e:	4c0c      	ldr	r4, [pc, #48]	; (8009190 <__libc_init_array+0x44>)
 8009160:	f000 ff5e 	bl	800a020 <_init>
 8009164:	1ba4      	subs	r4, r4, r6
 8009166:	10a4      	asrs	r4, r4, #2
 8009168:	2500      	movs	r5, #0
 800916a:	42a5      	cmp	r5, r4
 800916c:	d105      	bne.n	800917a <__libc_init_array+0x2e>
 800916e:	bd70      	pop	{r4, r5, r6, pc}
 8009170:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009174:	4798      	blx	r3
 8009176:	3501      	adds	r5, #1
 8009178:	e7ee      	b.n	8009158 <__libc_init_array+0xc>
 800917a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800917e:	4798      	blx	r3
 8009180:	3501      	adds	r5, #1
 8009182:	e7f2      	b.n	800916a <__libc_init_array+0x1e>
 8009184:	0800a130 	.word	0x0800a130
 8009188:	0800a130 	.word	0x0800a130
 800918c:	0800a130 	.word	0x0800a130
 8009190:	0800a134 	.word	0x0800a134

08009194 <malloc>:
 8009194:	4b02      	ldr	r3, [pc, #8]	; (80091a0 <malloc+0xc>)
 8009196:	4601      	mov	r1, r0
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	f000 b861 	b.w	8009260 <_malloc_r>
 800919e:	bf00      	nop
 80091a0:	2000002c 	.word	0x2000002c

080091a4 <free>:
 80091a4:	4b02      	ldr	r3, [pc, #8]	; (80091b0 <free+0xc>)
 80091a6:	4601      	mov	r1, r0
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f000 b80b 	b.w	80091c4 <_free_r>
 80091ae:	bf00      	nop
 80091b0:	2000002c 	.word	0x2000002c

080091b4 <memset>:
 80091b4:	4402      	add	r2, r0
 80091b6:	4603      	mov	r3, r0
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d100      	bne.n	80091be <memset+0xa>
 80091bc:	4770      	bx	lr
 80091be:	f803 1b01 	strb.w	r1, [r3], #1
 80091c2:	e7f9      	b.n	80091b8 <memset+0x4>

080091c4 <_free_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4605      	mov	r5, r0
 80091c8:	2900      	cmp	r1, #0
 80091ca:	d045      	beq.n	8009258 <_free_r+0x94>
 80091cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d0:	1f0c      	subs	r4, r1, #4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	bfb8      	it	lt
 80091d6:	18e4      	addlt	r4, r4, r3
 80091d8:	f000 f9a2 	bl	8009520 <__malloc_lock>
 80091dc:	4a1f      	ldr	r2, [pc, #124]	; (800925c <_free_r+0x98>)
 80091de:	6813      	ldr	r3, [r2, #0]
 80091e0:	4610      	mov	r0, r2
 80091e2:	b933      	cbnz	r3, 80091f2 <_free_r+0x2e>
 80091e4:	6063      	str	r3, [r4, #4]
 80091e6:	6014      	str	r4, [r2, #0]
 80091e8:	4628      	mov	r0, r5
 80091ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ee:	f000 b998 	b.w	8009522 <__malloc_unlock>
 80091f2:	42a3      	cmp	r3, r4
 80091f4:	d90c      	bls.n	8009210 <_free_r+0x4c>
 80091f6:	6821      	ldr	r1, [r4, #0]
 80091f8:	1862      	adds	r2, r4, r1
 80091fa:	4293      	cmp	r3, r2
 80091fc:	bf04      	itt	eq
 80091fe:	681a      	ldreq	r2, [r3, #0]
 8009200:	685b      	ldreq	r3, [r3, #4]
 8009202:	6063      	str	r3, [r4, #4]
 8009204:	bf04      	itt	eq
 8009206:	1852      	addeq	r2, r2, r1
 8009208:	6022      	streq	r2, [r4, #0]
 800920a:	6004      	str	r4, [r0, #0]
 800920c:	e7ec      	b.n	80091e8 <_free_r+0x24>
 800920e:	4613      	mov	r3, r2
 8009210:	685a      	ldr	r2, [r3, #4]
 8009212:	b10a      	cbz	r2, 8009218 <_free_r+0x54>
 8009214:	42a2      	cmp	r2, r4
 8009216:	d9fa      	bls.n	800920e <_free_r+0x4a>
 8009218:	6819      	ldr	r1, [r3, #0]
 800921a:	1858      	adds	r0, r3, r1
 800921c:	42a0      	cmp	r0, r4
 800921e:	d10b      	bne.n	8009238 <_free_r+0x74>
 8009220:	6820      	ldr	r0, [r4, #0]
 8009222:	4401      	add	r1, r0
 8009224:	1858      	adds	r0, r3, r1
 8009226:	4282      	cmp	r2, r0
 8009228:	6019      	str	r1, [r3, #0]
 800922a:	d1dd      	bne.n	80091e8 <_free_r+0x24>
 800922c:	6810      	ldr	r0, [r2, #0]
 800922e:	6852      	ldr	r2, [r2, #4]
 8009230:	605a      	str	r2, [r3, #4]
 8009232:	4401      	add	r1, r0
 8009234:	6019      	str	r1, [r3, #0]
 8009236:	e7d7      	b.n	80091e8 <_free_r+0x24>
 8009238:	d902      	bls.n	8009240 <_free_r+0x7c>
 800923a:	230c      	movs	r3, #12
 800923c:	602b      	str	r3, [r5, #0]
 800923e:	e7d3      	b.n	80091e8 <_free_r+0x24>
 8009240:	6820      	ldr	r0, [r4, #0]
 8009242:	1821      	adds	r1, r4, r0
 8009244:	428a      	cmp	r2, r1
 8009246:	bf04      	itt	eq
 8009248:	6811      	ldreq	r1, [r2, #0]
 800924a:	6852      	ldreq	r2, [r2, #4]
 800924c:	6062      	str	r2, [r4, #4]
 800924e:	bf04      	itt	eq
 8009250:	1809      	addeq	r1, r1, r0
 8009252:	6021      	streq	r1, [r4, #0]
 8009254:	605c      	str	r4, [r3, #4]
 8009256:	e7c7      	b.n	80091e8 <_free_r+0x24>
 8009258:	bd38      	pop	{r3, r4, r5, pc}
 800925a:	bf00      	nop
 800925c:	200000b8 	.word	0x200000b8

08009260 <_malloc_r>:
 8009260:	b570      	push	{r4, r5, r6, lr}
 8009262:	1ccd      	adds	r5, r1, #3
 8009264:	f025 0503 	bic.w	r5, r5, #3
 8009268:	3508      	adds	r5, #8
 800926a:	2d0c      	cmp	r5, #12
 800926c:	bf38      	it	cc
 800926e:	250c      	movcc	r5, #12
 8009270:	2d00      	cmp	r5, #0
 8009272:	4606      	mov	r6, r0
 8009274:	db01      	blt.n	800927a <_malloc_r+0x1a>
 8009276:	42a9      	cmp	r1, r5
 8009278:	d903      	bls.n	8009282 <_malloc_r+0x22>
 800927a:	230c      	movs	r3, #12
 800927c:	6033      	str	r3, [r6, #0]
 800927e:	2000      	movs	r0, #0
 8009280:	bd70      	pop	{r4, r5, r6, pc}
 8009282:	f000 f94d 	bl	8009520 <__malloc_lock>
 8009286:	4a21      	ldr	r2, [pc, #132]	; (800930c <_malloc_r+0xac>)
 8009288:	6814      	ldr	r4, [r2, #0]
 800928a:	4621      	mov	r1, r4
 800928c:	b991      	cbnz	r1, 80092b4 <_malloc_r+0x54>
 800928e:	4c20      	ldr	r4, [pc, #128]	; (8009310 <_malloc_r+0xb0>)
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	b91b      	cbnz	r3, 800929c <_malloc_r+0x3c>
 8009294:	4630      	mov	r0, r6
 8009296:	f000 f869 	bl	800936c <_sbrk_r>
 800929a:	6020      	str	r0, [r4, #0]
 800929c:	4629      	mov	r1, r5
 800929e:	4630      	mov	r0, r6
 80092a0:	f000 f864 	bl	800936c <_sbrk_r>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d124      	bne.n	80092f2 <_malloc_r+0x92>
 80092a8:	230c      	movs	r3, #12
 80092aa:	6033      	str	r3, [r6, #0]
 80092ac:	4630      	mov	r0, r6
 80092ae:	f000 f938 	bl	8009522 <__malloc_unlock>
 80092b2:	e7e4      	b.n	800927e <_malloc_r+0x1e>
 80092b4:	680b      	ldr	r3, [r1, #0]
 80092b6:	1b5b      	subs	r3, r3, r5
 80092b8:	d418      	bmi.n	80092ec <_malloc_r+0x8c>
 80092ba:	2b0b      	cmp	r3, #11
 80092bc:	d90f      	bls.n	80092de <_malloc_r+0x7e>
 80092be:	600b      	str	r3, [r1, #0]
 80092c0:	50cd      	str	r5, [r1, r3]
 80092c2:	18cc      	adds	r4, r1, r3
 80092c4:	4630      	mov	r0, r6
 80092c6:	f000 f92c 	bl	8009522 <__malloc_unlock>
 80092ca:	f104 000b 	add.w	r0, r4, #11
 80092ce:	1d23      	adds	r3, r4, #4
 80092d0:	f020 0007 	bic.w	r0, r0, #7
 80092d4:	1ac3      	subs	r3, r0, r3
 80092d6:	d0d3      	beq.n	8009280 <_malloc_r+0x20>
 80092d8:	425a      	negs	r2, r3
 80092da:	50e2      	str	r2, [r4, r3]
 80092dc:	e7d0      	b.n	8009280 <_malloc_r+0x20>
 80092de:	428c      	cmp	r4, r1
 80092e0:	684b      	ldr	r3, [r1, #4]
 80092e2:	bf16      	itet	ne
 80092e4:	6063      	strne	r3, [r4, #4]
 80092e6:	6013      	streq	r3, [r2, #0]
 80092e8:	460c      	movne	r4, r1
 80092ea:	e7eb      	b.n	80092c4 <_malloc_r+0x64>
 80092ec:	460c      	mov	r4, r1
 80092ee:	6849      	ldr	r1, [r1, #4]
 80092f0:	e7cc      	b.n	800928c <_malloc_r+0x2c>
 80092f2:	1cc4      	adds	r4, r0, #3
 80092f4:	f024 0403 	bic.w	r4, r4, #3
 80092f8:	42a0      	cmp	r0, r4
 80092fa:	d005      	beq.n	8009308 <_malloc_r+0xa8>
 80092fc:	1a21      	subs	r1, r4, r0
 80092fe:	4630      	mov	r0, r6
 8009300:	f000 f834 	bl	800936c <_sbrk_r>
 8009304:	3001      	adds	r0, #1
 8009306:	d0cf      	beq.n	80092a8 <_malloc_r+0x48>
 8009308:	6025      	str	r5, [r4, #0]
 800930a:	e7db      	b.n	80092c4 <_malloc_r+0x64>
 800930c:	200000b8 	.word	0x200000b8
 8009310:	200000bc 	.word	0x200000bc

08009314 <iprintf>:
 8009314:	b40f      	push	{r0, r1, r2, r3}
 8009316:	4b0a      	ldr	r3, [pc, #40]	; (8009340 <iprintf+0x2c>)
 8009318:	b513      	push	{r0, r1, r4, lr}
 800931a:	681c      	ldr	r4, [r3, #0]
 800931c:	b124      	cbz	r4, 8009328 <iprintf+0x14>
 800931e:	69a3      	ldr	r3, [r4, #24]
 8009320:	b913      	cbnz	r3, 8009328 <iprintf+0x14>
 8009322:	4620      	mov	r0, r4
 8009324:	f000 f872 	bl	800940c <__sinit>
 8009328:	ab05      	add	r3, sp, #20
 800932a:	9a04      	ldr	r2, [sp, #16]
 800932c:	68a1      	ldr	r1, [r4, #8]
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	4620      	mov	r0, r4
 8009332:	f000 f921 	bl	8009578 <_vfiprintf_r>
 8009336:	b002      	add	sp, #8
 8009338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800933c:	b004      	add	sp, #16
 800933e:	4770      	bx	lr
 8009340:	2000002c 	.word	0x2000002c

08009344 <putchar>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4b08      	ldr	r3, [pc, #32]	; (8009368 <putchar+0x24>)
 8009348:	681c      	ldr	r4, [r3, #0]
 800934a:	4605      	mov	r5, r0
 800934c:	b124      	cbz	r4, 8009358 <putchar+0x14>
 800934e:	69a3      	ldr	r3, [r4, #24]
 8009350:	b913      	cbnz	r3, 8009358 <putchar+0x14>
 8009352:	4620      	mov	r0, r4
 8009354:	f000 f85a 	bl	800940c <__sinit>
 8009358:	68a2      	ldr	r2, [r4, #8]
 800935a:	4629      	mov	r1, r5
 800935c:	4620      	mov	r0, r4
 800935e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009362:	f000 bba7 	b.w	8009ab4 <_putc_r>
 8009366:	bf00      	nop
 8009368:	2000002c 	.word	0x2000002c

0800936c <_sbrk_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4c06      	ldr	r4, [pc, #24]	; (8009388 <_sbrk_r+0x1c>)
 8009370:	2300      	movs	r3, #0
 8009372:	4605      	mov	r5, r0
 8009374:	4608      	mov	r0, r1
 8009376:	6023      	str	r3, [r4, #0]
 8009378:	f7f7 fe16 	bl	8000fa8 <_sbrk>
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	d102      	bne.n	8009386 <_sbrk_r+0x1a>
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	b103      	cbz	r3, 8009386 <_sbrk_r+0x1a>
 8009384:	602b      	str	r3, [r5, #0]
 8009386:	bd38      	pop	{r3, r4, r5, pc}
 8009388:	200008f8 	.word	0x200008f8

0800938c <std>:
 800938c:	2300      	movs	r3, #0
 800938e:	b510      	push	{r4, lr}
 8009390:	4604      	mov	r4, r0
 8009392:	e9c0 3300 	strd	r3, r3, [r0]
 8009396:	6083      	str	r3, [r0, #8]
 8009398:	8181      	strh	r1, [r0, #12]
 800939a:	6643      	str	r3, [r0, #100]	; 0x64
 800939c:	81c2      	strh	r2, [r0, #14]
 800939e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093a2:	6183      	str	r3, [r0, #24]
 80093a4:	4619      	mov	r1, r3
 80093a6:	2208      	movs	r2, #8
 80093a8:	305c      	adds	r0, #92	; 0x5c
 80093aa:	f7ff ff03 	bl	80091b4 <memset>
 80093ae:	4b05      	ldr	r3, [pc, #20]	; (80093c4 <std+0x38>)
 80093b0:	6263      	str	r3, [r4, #36]	; 0x24
 80093b2:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <std+0x3c>)
 80093b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80093b6:	4b05      	ldr	r3, [pc, #20]	; (80093cc <std+0x40>)
 80093b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093ba:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <std+0x44>)
 80093bc:	6224      	str	r4, [r4, #32]
 80093be:	6323      	str	r3, [r4, #48]	; 0x30
 80093c0:	bd10      	pop	{r4, pc}
 80093c2:	bf00      	nop
 80093c4:	08009b21 	.word	0x08009b21
 80093c8:	08009b43 	.word	0x08009b43
 80093cc:	08009b7b 	.word	0x08009b7b
 80093d0:	08009b9f 	.word	0x08009b9f

080093d4 <_cleanup_r>:
 80093d4:	4901      	ldr	r1, [pc, #4]	; (80093dc <_cleanup_r+0x8>)
 80093d6:	f000 b885 	b.w	80094e4 <_fwalk_reent>
 80093da:	bf00      	nop
 80093dc:	08009e79 	.word	0x08009e79

080093e0 <__sfmoreglue>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	1e4a      	subs	r2, r1, #1
 80093e4:	2568      	movs	r5, #104	; 0x68
 80093e6:	4355      	muls	r5, r2
 80093e8:	460e      	mov	r6, r1
 80093ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093ee:	f7ff ff37 	bl	8009260 <_malloc_r>
 80093f2:	4604      	mov	r4, r0
 80093f4:	b140      	cbz	r0, 8009408 <__sfmoreglue+0x28>
 80093f6:	2100      	movs	r1, #0
 80093f8:	e9c0 1600 	strd	r1, r6, [r0]
 80093fc:	300c      	adds	r0, #12
 80093fe:	60a0      	str	r0, [r4, #8]
 8009400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009404:	f7ff fed6 	bl	80091b4 <memset>
 8009408:	4620      	mov	r0, r4
 800940a:	bd70      	pop	{r4, r5, r6, pc}

0800940c <__sinit>:
 800940c:	6983      	ldr	r3, [r0, #24]
 800940e:	b510      	push	{r4, lr}
 8009410:	4604      	mov	r4, r0
 8009412:	bb33      	cbnz	r3, 8009462 <__sinit+0x56>
 8009414:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009418:	6503      	str	r3, [r0, #80]	; 0x50
 800941a:	4b12      	ldr	r3, [pc, #72]	; (8009464 <__sinit+0x58>)
 800941c:	4a12      	ldr	r2, [pc, #72]	; (8009468 <__sinit+0x5c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6282      	str	r2, [r0, #40]	; 0x28
 8009422:	4298      	cmp	r0, r3
 8009424:	bf04      	itt	eq
 8009426:	2301      	moveq	r3, #1
 8009428:	6183      	streq	r3, [r0, #24]
 800942a:	f000 f81f 	bl	800946c <__sfp>
 800942e:	6060      	str	r0, [r4, #4]
 8009430:	4620      	mov	r0, r4
 8009432:	f000 f81b 	bl	800946c <__sfp>
 8009436:	60a0      	str	r0, [r4, #8]
 8009438:	4620      	mov	r0, r4
 800943a:	f000 f817 	bl	800946c <__sfp>
 800943e:	2200      	movs	r2, #0
 8009440:	60e0      	str	r0, [r4, #12]
 8009442:	2104      	movs	r1, #4
 8009444:	6860      	ldr	r0, [r4, #4]
 8009446:	f7ff ffa1 	bl	800938c <std>
 800944a:	2201      	movs	r2, #1
 800944c:	2109      	movs	r1, #9
 800944e:	68a0      	ldr	r0, [r4, #8]
 8009450:	f7ff ff9c 	bl	800938c <std>
 8009454:	2202      	movs	r2, #2
 8009456:	2112      	movs	r1, #18
 8009458:	68e0      	ldr	r0, [r4, #12]
 800945a:	f7ff ff97 	bl	800938c <std>
 800945e:	2301      	movs	r3, #1
 8009460:	61a3      	str	r3, [r4, #24]
 8009462:	bd10      	pop	{r4, pc}
 8009464:	0800a090 	.word	0x0800a090
 8009468:	080093d5 	.word	0x080093d5

0800946c <__sfp>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	4b1b      	ldr	r3, [pc, #108]	; (80094dc <__sfp+0x70>)
 8009470:	681e      	ldr	r6, [r3, #0]
 8009472:	69b3      	ldr	r3, [r6, #24]
 8009474:	4607      	mov	r7, r0
 8009476:	b913      	cbnz	r3, 800947e <__sfp+0x12>
 8009478:	4630      	mov	r0, r6
 800947a:	f7ff ffc7 	bl	800940c <__sinit>
 800947e:	3648      	adds	r6, #72	; 0x48
 8009480:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009484:	3b01      	subs	r3, #1
 8009486:	d503      	bpl.n	8009490 <__sfp+0x24>
 8009488:	6833      	ldr	r3, [r6, #0]
 800948a:	b133      	cbz	r3, 800949a <__sfp+0x2e>
 800948c:	6836      	ldr	r6, [r6, #0]
 800948e:	e7f7      	b.n	8009480 <__sfp+0x14>
 8009490:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009494:	b16d      	cbz	r5, 80094b2 <__sfp+0x46>
 8009496:	3468      	adds	r4, #104	; 0x68
 8009498:	e7f4      	b.n	8009484 <__sfp+0x18>
 800949a:	2104      	movs	r1, #4
 800949c:	4638      	mov	r0, r7
 800949e:	f7ff ff9f 	bl	80093e0 <__sfmoreglue>
 80094a2:	6030      	str	r0, [r6, #0]
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d1f1      	bne.n	800948c <__sfp+0x20>
 80094a8:	230c      	movs	r3, #12
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	4604      	mov	r4, r0
 80094ae:	4620      	mov	r0, r4
 80094b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094b2:	4b0b      	ldr	r3, [pc, #44]	; (80094e0 <__sfp+0x74>)
 80094b4:	6665      	str	r5, [r4, #100]	; 0x64
 80094b6:	e9c4 5500 	strd	r5, r5, [r4]
 80094ba:	60a5      	str	r5, [r4, #8]
 80094bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80094c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80094c4:	2208      	movs	r2, #8
 80094c6:	4629      	mov	r1, r5
 80094c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094cc:	f7ff fe72 	bl	80091b4 <memset>
 80094d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094d8:	e7e9      	b.n	80094ae <__sfp+0x42>
 80094da:	bf00      	nop
 80094dc:	0800a090 	.word	0x0800a090
 80094e0:	ffff0001 	.word	0xffff0001

080094e4 <_fwalk_reent>:
 80094e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e8:	4680      	mov	r8, r0
 80094ea:	4689      	mov	r9, r1
 80094ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094f0:	2600      	movs	r6, #0
 80094f2:	b914      	cbnz	r4, 80094fa <_fwalk_reent+0x16>
 80094f4:	4630      	mov	r0, r6
 80094f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80094fe:	3f01      	subs	r7, #1
 8009500:	d501      	bpl.n	8009506 <_fwalk_reent+0x22>
 8009502:	6824      	ldr	r4, [r4, #0]
 8009504:	e7f5      	b.n	80094f2 <_fwalk_reent+0xe>
 8009506:	89ab      	ldrh	r3, [r5, #12]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d907      	bls.n	800951c <_fwalk_reent+0x38>
 800950c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009510:	3301      	adds	r3, #1
 8009512:	d003      	beq.n	800951c <_fwalk_reent+0x38>
 8009514:	4629      	mov	r1, r5
 8009516:	4640      	mov	r0, r8
 8009518:	47c8      	blx	r9
 800951a:	4306      	orrs	r6, r0
 800951c:	3568      	adds	r5, #104	; 0x68
 800951e:	e7ee      	b.n	80094fe <_fwalk_reent+0x1a>

08009520 <__malloc_lock>:
 8009520:	4770      	bx	lr

08009522 <__malloc_unlock>:
 8009522:	4770      	bx	lr

08009524 <__sfputc_r>:
 8009524:	6893      	ldr	r3, [r2, #8]
 8009526:	3b01      	subs	r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	b410      	push	{r4}
 800952c:	6093      	str	r3, [r2, #8]
 800952e:	da08      	bge.n	8009542 <__sfputc_r+0x1e>
 8009530:	6994      	ldr	r4, [r2, #24]
 8009532:	42a3      	cmp	r3, r4
 8009534:	db01      	blt.n	800953a <__sfputc_r+0x16>
 8009536:	290a      	cmp	r1, #10
 8009538:	d103      	bne.n	8009542 <__sfputc_r+0x1e>
 800953a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800953e:	f000 bb33 	b.w	8009ba8 <__swbuf_r>
 8009542:	6813      	ldr	r3, [r2, #0]
 8009544:	1c58      	adds	r0, r3, #1
 8009546:	6010      	str	r0, [r2, #0]
 8009548:	7019      	strb	r1, [r3, #0]
 800954a:	4608      	mov	r0, r1
 800954c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009550:	4770      	bx	lr

08009552 <__sfputs_r>:
 8009552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009554:	4606      	mov	r6, r0
 8009556:	460f      	mov	r7, r1
 8009558:	4614      	mov	r4, r2
 800955a:	18d5      	adds	r5, r2, r3
 800955c:	42ac      	cmp	r4, r5
 800955e:	d101      	bne.n	8009564 <__sfputs_r+0x12>
 8009560:	2000      	movs	r0, #0
 8009562:	e007      	b.n	8009574 <__sfputs_r+0x22>
 8009564:	463a      	mov	r2, r7
 8009566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956a:	4630      	mov	r0, r6
 800956c:	f7ff ffda 	bl	8009524 <__sfputc_r>
 8009570:	1c43      	adds	r3, r0, #1
 8009572:	d1f3      	bne.n	800955c <__sfputs_r+0xa>
 8009574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009578 <_vfiprintf_r>:
 8009578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	460c      	mov	r4, r1
 800957e:	b09d      	sub	sp, #116	; 0x74
 8009580:	4617      	mov	r7, r2
 8009582:	461d      	mov	r5, r3
 8009584:	4606      	mov	r6, r0
 8009586:	b118      	cbz	r0, 8009590 <_vfiprintf_r+0x18>
 8009588:	6983      	ldr	r3, [r0, #24]
 800958a:	b90b      	cbnz	r3, 8009590 <_vfiprintf_r+0x18>
 800958c:	f7ff ff3e 	bl	800940c <__sinit>
 8009590:	4b7c      	ldr	r3, [pc, #496]	; (8009784 <_vfiprintf_r+0x20c>)
 8009592:	429c      	cmp	r4, r3
 8009594:	d158      	bne.n	8009648 <_vfiprintf_r+0xd0>
 8009596:	6874      	ldr	r4, [r6, #4]
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	0718      	lsls	r0, r3, #28
 800959c:	d55e      	bpl.n	800965c <_vfiprintf_r+0xe4>
 800959e:	6923      	ldr	r3, [r4, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d05b      	beq.n	800965c <_vfiprintf_r+0xe4>
 80095a4:	2300      	movs	r3, #0
 80095a6:	9309      	str	r3, [sp, #36]	; 0x24
 80095a8:	2320      	movs	r3, #32
 80095aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ae:	2330      	movs	r3, #48	; 0x30
 80095b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095b4:	9503      	str	r5, [sp, #12]
 80095b6:	f04f 0b01 	mov.w	fp, #1
 80095ba:	46b8      	mov	r8, r7
 80095bc:	4645      	mov	r5, r8
 80095be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80095c2:	b10b      	cbz	r3, 80095c8 <_vfiprintf_r+0x50>
 80095c4:	2b25      	cmp	r3, #37	; 0x25
 80095c6:	d154      	bne.n	8009672 <_vfiprintf_r+0xfa>
 80095c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80095cc:	d00b      	beq.n	80095e6 <_vfiprintf_r+0x6e>
 80095ce:	4653      	mov	r3, sl
 80095d0:	463a      	mov	r2, r7
 80095d2:	4621      	mov	r1, r4
 80095d4:	4630      	mov	r0, r6
 80095d6:	f7ff ffbc 	bl	8009552 <__sfputs_r>
 80095da:	3001      	adds	r0, #1
 80095dc:	f000 80c2 	beq.w	8009764 <_vfiprintf_r+0x1ec>
 80095e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e2:	4453      	add	r3, sl
 80095e4:	9309      	str	r3, [sp, #36]	; 0x24
 80095e6:	f898 3000 	ldrb.w	r3, [r8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f000 80ba 	beq.w	8009764 <_vfiprintf_r+0x1ec>
 80095f0:	2300      	movs	r3, #0
 80095f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095fa:	9304      	str	r3, [sp, #16]
 80095fc:	9307      	str	r3, [sp, #28]
 80095fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009602:	931a      	str	r3, [sp, #104]	; 0x68
 8009604:	46a8      	mov	r8, r5
 8009606:	2205      	movs	r2, #5
 8009608:	f818 1b01 	ldrb.w	r1, [r8], #1
 800960c:	485e      	ldr	r0, [pc, #376]	; (8009788 <_vfiprintf_r+0x210>)
 800960e:	f7f6 fddf 	bl	80001d0 <memchr>
 8009612:	9b04      	ldr	r3, [sp, #16]
 8009614:	bb78      	cbnz	r0, 8009676 <_vfiprintf_r+0xfe>
 8009616:	06d9      	lsls	r1, r3, #27
 8009618:	bf44      	itt	mi
 800961a:	2220      	movmi	r2, #32
 800961c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009620:	071a      	lsls	r2, r3, #28
 8009622:	bf44      	itt	mi
 8009624:	222b      	movmi	r2, #43	; 0x2b
 8009626:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800962a:	782a      	ldrb	r2, [r5, #0]
 800962c:	2a2a      	cmp	r2, #42	; 0x2a
 800962e:	d02a      	beq.n	8009686 <_vfiprintf_r+0x10e>
 8009630:	9a07      	ldr	r2, [sp, #28]
 8009632:	46a8      	mov	r8, r5
 8009634:	2000      	movs	r0, #0
 8009636:	250a      	movs	r5, #10
 8009638:	4641      	mov	r1, r8
 800963a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800963e:	3b30      	subs	r3, #48	; 0x30
 8009640:	2b09      	cmp	r3, #9
 8009642:	d969      	bls.n	8009718 <_vfiprintf_r+0x1a0>
 8009644:	b360      	cbz	r0, 80096a0 <_vfiprintf_r+0x128>
 8009646:	e024      	b.n	8009692 <_vfiprintf_r+0x11a>
 8009648:	4b50      	ldr	r3, [pc, #320]	; (800978c <_vfiprintf_r+0x214>)
 800964a:	429c      	cmp	r4, r3
 800964c:	d101      	bne.n	8009652 <_vfiprintf_r+0xda>
 800964e:	68b4      	ldr	r4, [r6, #8]
 8009650:	e7a2      	b.n	8009598 <_vfiprintf_r+0x20>
 8009652:	4b4f      	ldr	r3, [pc, #316]	; (8009790 <_vfiprintf_r+0x218>)
 8009654:	429c      	cmp	r4, r3
 8009656:	bf08      	it	eq
 8009658:	68f4      	ldreq	r4, [r6, #12]
 800965a:	e79d      	b.n	8009598 <_vfiprintf_r+0x20>
 800965c:	4621      	mov	r1, r4
 800965e:	4630      	mov	r0, r6
 8009660:	f000 fb06 	bl	8009c70 <__swsetup_r>
 8009664:	2800      	cmp	r0, #0
 8009666:	d09d      	beq.n	80095a4 <_vfiprintf_r+0x2c>
 8009668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800966c:	b01d      	add	sp, #116	; 0x74
 800966e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009672:	46a8      	mov	r8, r5
 8009674:	e7a2      	b.n	80095bc <_vfiprintf_r+0x44>
 8009676:	4a44      	ldr	r2, [pc, #272]	; (8009788 <_vfiprintf_r+0x210>)
 8009678:	1a80      	subs	r0, r0, r2
 800967a:	fa0b f000 	lsl.w	r0, fp, r0
 800967e:	4318      	orrs	r0, r3
 8009680:	9004      	str	r0, [sp, #16]
 8009682:	4645      	mov	r5, r8
 8009684:	e7be      	b.n	8009604 <_vfiprintf_r+0x8c>
 8009686:	9a03      	ldr	r2, [sp, #12]
 8009688:	1d11      	adds	r1, r2, #4
 800968a:	6812      	ldr	r2, [r2, #0]
 800968c:	9103      	str	r1, [sp, #12]
 800968e:	2a00      	cmp	r2, #0
 8009690:	db01      	blt.n	8009696 <_vfiprintf_r+0x11e>
 8009692:	9207      	str	r2, [sp, #28]
 8009694:	e004      	b.n	80096a0 <_vfiprintf_r+0x128>
 8009696:	4252      	negs	r2, r2
 8009698:	f043 0302 	orr.w	r3, r3, #2
 800969c:	9207      	str	r2, [sp, #28]
 800969e:	9304      	str	r3, [sp, #16]
 80096a0:	f898 3000 	ldrb.w	r3, [r8]
 80096a4:	2b2e      	cmp	r3, #46	; 0x2e
 80096a6:	d10e      	bne.n	80096c6 <_vfiprintf_r+0x14e>
 80096a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80096ac:	2b2a      	cmp	r3, #42	; 0x2a
 80096ae:	d138      	bne.n	8009722 <_vfiprintf_r+0x1aa>
 80096b0:	9b03      	ldr	r3, [sp, #12]
 80096b2:	1d1a      	adds	r2, r3, #4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	9203      	str	r2, [sp, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfb8      	it	lt
 80096bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80096c0:	f108 0802 	add.w	r8, r8, #2
 80096c4:	9305      	str	r3, [sp, #20]
 80096c6:	4d33      	ldr	r5, [pc, #204]	; (8009794 <_vfiprintf_r+0x21c>)
 80096c8:	f898 1000 	ldrb.w	r1, [r8]
 80096cc:	2203      	movs	r2, #3
 80096ce:	4628      	mov	r0, r5
 80096d0:	f7f6 fd7e 	bl	80001d0 <memchr>
 80096d4:	b140      	cbz	r0, 80096e8 <_vfiprintf_r+0x170>
 80096d6:	2340      	movs	r3, #64	; 0x40
 80096d8:	1b40      	subs	r0, r0, r5
 80096da:	fa03 f000 	lsl.w	r0, r3, r0
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	4303      	orrs	r3, r0
 80096e2:	f108 0801 	add.w	r8, r8, #1
 80096e6:	9304      	str	r3, [sp, #16]
 80096e8:	f898 1000 	ldrb.w	r1, [r8]
 80096ec:	482a      	ldr	r0, [pc, #168]	; (8009798 <_vfiprintf_r+0x220>)
 80096ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096f2:	2206      	movs	r2, #6
 80096f4:	f108 0701 	add.w	r7, r8, #1
 80096f8:	f7f6 fd6a 	bl	80001d0 <memchr>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d037      	beq.n	8009770 <_vfiprintf_r+0x1f8>
 8009700:	4b26      	ldr	r3, [pc, #152]	; (800979c <_vfiprintf_r+0x224>)
 8009702:	bb1b      	cbnz	r3, 800974c <_vfiprintf_r+0x1d4>
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	3307      	adds	r3, #7
 8009708:	f023 0307 	bic.w	r3, r3, #7
 800970c:	3308      	adds	r3, #8
 800970e:	9303      	str	r3, [sp, #12]
 8009710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009712:	444b      	add	r3, r9
 8009714:	9309      	str	r3, [sp, #36]	; 0x24
 8009716:	e750      	b.n	80095ba <_vfiprintf_r+0x42>
 8009718:	fb05 3202 	mla	r2, r5, r2, r3
 800971c:	2001      	movs	r0, #1
 800971e:	4688      	mov	r8, r1
 8009720:	e78a      	b.n	8009638 <_vfiprintf_r+0xc0>
 8009722:	2300      	movs	r3, #0
 8009724:	f108 0801 	add.w	r8, r8, #1
 8009728:	9305      	str	r3, [sp, #20]
 800972a:	4619      	mov	r1, r3
 800972c:	250a      	movs	r5, #10
 800972e:	4640      	mov	r0, r8
 8009730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009734:	3a30      	subs	r2, #48	; 0x30
 8009736:	2a09      	cmp	r2, #9
 8009738:	d903      	bls.n	8009742 <_vfiprintf_r+0x1ca>
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0c3      	beq.n	80096c6 <_vfiprintf_r+0x14e>
 800973e:	9105      	str	r1, [sp, #20]
 8009740:	e7c1      	b.n	80096c6 <_vfiprintf_r+0x14e>
 8009742:	fb05 2101 	mla	r1, r5, r1, r2
 8009746:	2301      	movs	r3, #1
 8009748:	4680      	mov	r8, r0
 800974a:	e7f0      	b.n	800972e <_vfiprintf_r+0x1b6>
 800974c:	ab03      	add	r3, sp, #12
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	4622      	mov	r2, r4
 8009752:	4b13      	ldr	r3, [pc, #76]	; (80097a0 <_vfiprintf_r+0x228>)
 8009754:	a904      	add	r1, sp, #16
 8009756:	4630      	mov	r0, r6
 8009758:	f3af 8000 	nop.w
 800975c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009760:	4681      	mov	r9, r0
 8009762:	d1d5      	bne.n	8009710 <_vfiprintf_r+0x198>
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	065b      	lsls	r3, r3, #25
 8009768:	f53f af7e 	bmi.w	8009668 <_vfiprintf_r+0xf0>
 800976c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800976e:	e77d      	b.n	800966c <_vfiprintf_r+0xf4>
 8009770:	ab03      	add	r3, sp, #12
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	4622      	mov	r2, r4
 8009776:	4b0a      	ldr	r3, [pc, #40]	; (80097a0 <_vfiprintf_r+0x228>)
 8009778:	a904      	add	r1, sp, #16
 800977a:	4630      	mov	r0, r6
 800977c:	f000 f888 	bl	8009890 <_printf_i>
 8009780:	e7ec      	b.n	800975c <_vfiprintf_r+0x1e4>
 8009782:	bf00      	nop
 8009784:	0800a0b4 	.word	0x0800a0b4
 8009788:	0800a0f4 	.word	0x0800a0f4
 800978c:	0800a0d4 	.word	0x0800a0d4
 8009790:	0800a094 	.word	0x0800a094
 8009794:	0800a0fa 	.word	0x0800a0fa
 8009798:	0800a0fe 	.word	0x0800a0fe
 800979c:	00000000 	.word	0x00000000
 80097a0:	08009553 	.word	0x08009553

080097a4 <_printf_common>:
 80097a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a8:	4691      	mov	r9, r2
 80097aa:	461f      	mov	r7, r3
 80097ac:	688a      	ldr	r2, [r1, #8]
 80097ae:	690b      	ldr	r3, [r1, #16]
 80097b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097b4:	4293      	cmp	r3, r2
 80097b6:	bfb8      	it	lt
 80097b8:	4613      	movlt	r3, r2
 80097ba:	f8c9 3000 	str.w	r3, [r9]
 80097be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097c2:	4606      	mov	r6, r0
 80097c4:	460c      	mov	r4, r1
 80097c6:	b112      	cbz	r2, 80097ce <_printf_common+0x2a>
 80097c8:	3301      	adds	r3, #1
 80097ca:	f8c9 3000 	str.w	r3, [r9]
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	0699      	lsls	r1, r3, #26
 80097d2:	bf42      	ittt	mi
 80097d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80097d8:	3302      	addmi	r3, #2
 80097da:	f8c9 3000 	strmi.w	r3, [r9]
 80097de:	6825      	ldr	r5, [r4, #0]
 80097e0:	f015 0506 	ands.w	r5, r5, #6
 80097e4:	d107      	bne.n	80097f6 <_printf_common+0x52>
 80097e6:	f104 0a19 	add.w	sl, r4, #25
 80097ea:	68e3      	ldr	r3, [r4, #12]
 80097ec:	f8d9 2000 	ldr.w	r2, [r9]
 80097f0:	1a9b      	subs	r3, r3, r2
 80097f2:	42ab      	cmp	r3, r5
 80097f4:	dc28      	bgt.n	8009848 <_printf_common+0xa4>
 80097f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80097fa:	6822      	ldr	r2, [r4, #0]
 80097fc:	3300      	adds	r3, #0
 80097fe:	bf18      	it	ne
 8009800:	2301      	movne	r3, #1
 8009802:	0692      	lsls	r2, r2, #26
 8009804:	d42d      	bmi.n	8009862 <_printf_common+0xbe>
 8009806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800980a:	4639      	mov	r1, r7
 800980c:	4630      	mov	r0, r6
 800980e:	47c0      	blx	r8
 8009810:	3001      	adds	r0, #1
 8009812:	d020      	beq.n	8009856 <_printf_common+0xb2>
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	68e5      	ldr	r5, [r4, #12]
 8009818:	f8d9 2000 	ldr.w	r2, [r9]
 800981c:	f003 0306 	and.w	r3, r3, #6
 8009820:	2b04      	cmp	r3, #4
 8009822:	bf08      	it	eq
 8009824:	1aad      	subeq	r5, r5, r2
 8009826:	68a3      	ldr	r3, [r4, #8]
 8009828:	6922      	ldr	r2, [r4, #16]
 800982a:	bf0c      	ite	eq
 800982c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009830:	2500      	movne	r5, #0
 8009832:	4293      	cmp	r3, r2
 8009834:	bfc4      	itt	gt
 8009836:	1a9b      	subgt	r3, r3, r2
 8009838:	18ed      	addgt	r5, r5, r3
 800983a:	f04f 0900 	mov.w	r9, #0
 800983e:	341a      	adds	r4, #26
 8009840:	454d      	cmp	r5, r9
 8009842:	d11a      	bne.n	800987a <_printf_common+0xd6>
 8009844:	2000      	movs	r0, #0
 8009846:	e008      	b.n	800985a <_printf_common+0xb6>
 8009848:	2301      	movs	r3, #1
 800984a:	4652      	mov	r2, sl
 800984c:	4639      	mov	r1, r7
 800984e:	4630      	mov	r0, r6
 8009850:	47c0      	blx	r8
 8009852:	3001      	adds	r0, #1
 8009854:	d103      	bne.n	800985e <_printf_common+0xba>
 8009856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800985a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985e:	3501      	adds	r5, #1
 8009860:	e7c3      	b.n	80097ea <_printf_common+0x46>
 8009862:	18e1      	adds	r1, r4, r3
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	2030      	movs	r0, #48	; 0x30
 8009868:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800986c:	4422      	add	r2, r4
 800986e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009872:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009876:	3302      	adds	r3, #2
 8009878:	e7c5      	b.n	8009806 <_printf_common+0x62>
 800987a:	2301      	movs	r3, #1
 800987c:	4622      	mov	r2, r4
 800987e:	4639      	mov	r1, r7
 8009880:	4630      	mov	r0, r6
 8009882:	47c0      	blx	r8
 8009884:	3001      	adds	r0, #1
 8009886:	d0e6      	beq.n	8009856 <_printf_common+0xb2>
 8009888:	f109 0901 	add.w	r9, r9, #1
 800988c:	e7d8      	b.n	8009840 <_printf_common+0x9c>
	...

08009890 <_printf_i>:
 8009890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009894:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009898:	460c      	mov	r4, r1
 800989a:	7e09      	ldrb	r1, [r1, #24]
 800989c:	b085      	sub	sp, #20
 800989e:	296e      	cmp	r1, #110	; 0x6e
 80098a0:	4617      	mov	r7, r2
 80098a2:	4606      	mov	r6, r0
 80098a4:	4698      	mov	r8, r3
 80098a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098a8:	f000 80b3 	beq.w	8009a12 <_printf_i+0x182>
 80098ac:	d822      	bhi.n	80098f4 <_printf_i+0x64>
 80098ae:	2963      	cmp	r1, #99	; 0x63
 80098b0:	d036      	beq.n	8009920 <_printf_i+0x90>
 80098b2:	d80a      	bhi.n	80098ca <_printf_i+0x3a>
 80098b4:	2900      	cmp	r1, #0
 80098b6:	f000 80b9 	beq.w	8009a2c <_printf_i+0x19c>
 80098ba:	2958      	cmp	r1, #88	; 0x58
 80098bc:	f000 8083 	beq.w	80099c6 <_printf_i+0x136>
 80098c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80098c8:	e032      	b.n	8009930 <_printf_i+0xa0>
 80098ca:	2964      	cmp	r1, #100	; 0x64
 80098cc:	d001      	beq.n	80098d2 <_printf_i+0x42>
 80098ce:	2969      	cmp	r1, #105	; 0x69
 80098d0:	d1f6      	bne.n	80098c0 <_printf_i+0x30>
 80098d2:	6820      	ldr	r0, [r4, #0]
 80098d4:	6813      	ldr	r3, [r2, #0]
 80098d6:	0605      	lsls	r5, r0, #24
 80098d8:	f103 0104 	add.w	r1, r3, #4
 80098dc:	d52a      	bpl.n	8009934 <_printf_i+0xa4>
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6011      	str	r1, [r2, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	da03      	bge.n	80098ee <_printf_i+0x5e>
 80098e6:	222d      	movs	r2, #45	; 0x2d
 80098e8:	425b      	negs	r3, r3
 80098ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80098ee:	486f      	ldr	r0, [pc, #444]	; (8009aac <_printf_i+0x21c>)
 80098f0:	220a      	movs	r2, #10
 80098f2:	e039      	b.n	8009968 <_printf_i+0xd8>
 80098f4:	2973      	cmp	r1, #115	; 0x73
 80098f6:	f000 809d 	beq.w	8009a34 <_printf_i+0x1a4>
 80098fa:	d808      	bhi.n	800990e <_printf_i+0x7e>
 80098fc:	296f      	cmp	r1, #111	; 0x6f
 80098fe:	d020      	beq.n	8009942 <_printf_i+0xb2>
 8009900:	2970      	cmp	r1, #112	; 0x70
 8009902:	d1dd      	bne.n	80098c0 <_printf_i+0x30>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	f043 0320 	orr.w	r3, r3, #32
 800990a:	6023      	str	r3, [r4, #0]
 800990c:	e003      	b.n	8009916 <_printf_i+0x86>
 800990e:	2975      	cmp	r1, #117	; 0x75
 8009910:	d017      	beq.n	8009942 <_printf_i+0xb2>
 8009912:	2978      	cmp	r1, #120	; 0x78
 8009914:	d1d4      	bne.n	80098c0 <_printf_i+0x30>
 8009916:	2378      	movs	r3, #120	; 0x78
 8009918:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800991c:	4864      	ldr	r0, [pc, #400]	; (8009ab0 <_printf_i+0x220>)
 800991e:	e055      	b.n	80099cc <_printf_i+0x13c>
 8009920:	6813      	ldr	r3, [r2, #0]
 8009922:	1d19      	adds	r1, r3, #4
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6011      	str	r1, [r2, #0]
 8009928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800992c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009930:	2301      	movs	r3, #1
 8009932:	e08c      	b.n	8009a4e <_printf_i+0x1be>
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6011      	str	r1, [r2, #0]
 8009938:	f010 0f40 	tst.w	r0, #64	; 0x40
 800993c:	bf18      	it	ne
 800993e:	b21b      	sxthne	r3, r3
 8009940:	e7cf      	b.n	80098e2 <_printf_i+0x52>
 8009942:	6813      	ldr	r3, [r2, #0]
 8009944:	6825      	ldr	r5, [r4, #0]
 8009946:	1d18      	adds	r0, r3, #4
 8009948:	6010      	str	r0, [r2, #0]
 800994a:	0628      	lsls	r0, r5, #24
 800994c:	d501      	bpl.n	8009952 <_printf_i+0xc2>
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	e002      	b.n	8009958 <_printf_i+0xc8>
 8009952:	0668      	lsls	r0, r5, #25
 8009954:	d5fb      	bpl.n	800994e <_printf_i+0xbe>
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	4854      	ldr	r0, [pc, #336]	; (8009aac <_printf_i+0x21c>)
 800995a:	296f      	cmp	r1, #111	; 0x6f
 800995c:	bf14      	ite	ne
 800995e:	220a      	movne	r2, #10
 8009960:	2208      	moveq	r2, #8
 8009962:	2100      	movs	r1, #0
 8009964:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009968:	6865      	ldr	r5, [r4, #4]
 800996a:	60a5      	str	r5, [r4, #8]
 800996c:	2d00      	cmp	r5, #0
 800996e:	f2c0 8095 	blt.w	8009a9c <_printf_i+0x20c>
 8009972:	6821      	ldr	r1, [r4, #0]
 8009974:	f021 0104 	bic.w	r1, r1, #4
 8009978:	6021      	str	r1, [r4, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d13d      	bne.n	80099fa <_printf_i+0x16a>
 800997e:	2d00      	cmp	r5, #0
 8009980:	f040 808e 	bne.w	8009aa0 <_printf_i+0x210>
 8009984:	4665      	mov	r5, ip
 8009986:	2a08      	cmp	r2, #8
 8009988:	d10b      	bne.n	80099a2 <_printf_i+0x112>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	07db      	lsls	r3, r3, #31
 800998e:	d508      	bpl.n	80099a2 <_printf_i+0x112>
 8009990:	6923      	ldr	r3, [r4, #16]
 8009992:	6862      	ldr	r2, [r4, #4]
 8009994:	429a      	cmp	r2, r3
 8009996:	bfde      	ittt	le
 8009998:	2330      	movle	r3, #48	; 0x30
 800999a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800999e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80099a2:	ebac 0305 	sub.w	r3, ip, r5
 80099a6:	6123      	str	r3, [r4, #16]
 80099a8:	f8cd 8000 	str.w	r8, [sp]
 80099ac:	463b      	mov	r3, r7
 80099ae:	aa03      	add	r2, sp, #12
 80099b0:	4621      	mov	r1, r4
 80099b2:	4630      	mov	r0, r6
 80099b4:	f7ff fef6 	bl	80097a4 <_printf_common>
 80099b8:	3001      	adds	r0, #1
 80099ba:	d14d      	bne.n	8009a58 <_printf_i+0x1c8>
 80099bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099c0:	b005      	add	sp, #20
 80099c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099c6:	4839      	ldr	r0, [pc, #228]	; (8009aac <_printf_i+0x21c>)
 80099c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80099cc:	6813      	ldr	r3, [r2, #0]
 80099ce:	6821      	ldr	r1, [r4, #0]
 80099d0:	1d1d      	adds	r5, r3, #4
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6015      	str	r5, [r2, #0]
 80099d6:	060a      	lsls	r2, r1, #24
 80099d8:	d50b      	bpl.n	80099f2 <_printf_i+0x162>
 80099da:	07ca      	lsls	r2, r1, #31
 80099dc:	bf44      	itt	mi
 80099de:	f041 0120 	orrmi.w	r1, r1, #32
 80099e2:	6021      	strmi	r1, [r4, #0]
 80099e4:	b91b      	cbnz	r3, 80099ee <_printf_i+0x15e>
 80099e6:	6822      	ldr	r2, [r4, #0]
 80099e8:	f022 0220 	bic.w	r2, r2, #32
 80099ec:	6022      	str	r2, [r4, #0]
 80099ee:	2210      	movs	r2, #16
 80099f0:	e7b7      	b.n	8009962 <_printf_i+0xd2>
 80099f2:	064d      	lsls	r5, r1, #25
 80099f4:	bf48      	it	mi
 80099f6:	b29b      	uxthmi	r3, r3
 80099f8:	e7ef      	b.n	80099da <_printf_i+0x14a>
 80099fa:	4665      	mov	r5, ip
 80099fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a00:	fb02 3311 	mls	r3, r2, r1, r3
 8009a04:	5cc3      	ldrb	r3, [r0, r3]
 8009a06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	2900      	cmp	r1, #0
 8009a0e:	d1f5      	bne.n	80099fc <_printf_i+0x16c>
 8009a10:	e7b9      	b.n	8009986 <_printf_i+0xf6>
 8009a12:	6813      	ldr	r3, [r2, #0]
 8009a14:	6825      	ldr	r5, [r4, #0]
 8009a16:	6961      	ldr	r1, [r4, #20]
 8009a18:	1d18      	adds	r0, r3, #4
 8009a1a:	6010      	str	r0, [r2, #0]
 8009a1c:	0628      	lsls	r0, r5, #24
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	d501      	bpl.n	8009a26 <_printf_i+0x196>
 8009a22:	6019      	str	r1, [r3, #0]
 8009a24:	e002      	b.n	8009a2c <_printf_i+0x19c>
 8009a26:	066a      	lsls	r2, r5, #25
 8009a28:	d5fb      	bpl.n	8009a22 <_printf_i+0x192>
 8009a2a:	8019      	strh	r1, [r3, #0]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	6123      	str	r3, [r4, #16]
 8009a30:	4665      	mov	r5, ip
 8009a32:	e7b9      	b.n	80099a8 <_printf_i+0x118>
 8009a34:	6813      	ldr	r3, [r2, #0]
 8009a36:	1d19      	adds	r1, r3, #4
 8009a38:	6011      	str	r1, [r2, #0]
 8009a3a:	681d      	ldr	r5, [r3, #0]
 8009a3c:	6862      	ldr	r2, [r4, #4]
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4628      	mov	r0, r5
 8009a42:	f7f6 fbc5 	bl	80001d0 <memchr>
 8009a46:	b108      	cbz	r0, 8009a4c <_printf_i+0x1bc>
 8009a48:	1b40      	subs	r0, r0, r5
 8009a4a:	6060      	str	r0, [r4, #4]
 8009a4c:	6863      	ldr	r3, [r4, #4]
 8009a4e:	6123      	str	r3, [r4, #16]
 8009a50:	2300      	movs	r3, #0
 8009a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a56:	e7a7      	b.n	80099a8 <_printf_i+0x118>
 8009a58:	6923      	ldr	r3, [r4, #16]
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	4630      	mov	r0, r6
 8009a60:	47c0      	blx	r8
 8009a62:	3001      	adds	r0, #1
 8009a64:	d0aa      	beq.n	80099bc <_printf_i+0x12c>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	079b      	lsls	r3, r3, #30
 8009a6a:	d413      	bmi.n	8009a94 <_printf_i+0x204>
 8009a6c:	68e0      	ldr	r0, [r4, #12]
 8009a6e:	9b03      	ldr	r3, [sp, #12]
 8009a70:	4298      	cmp	r0, r3
 8009a72:	bfb8      	it	lt
 8009a74:	4618      	movlt	r0, r3
 8009a76:	e7a3      	b.n	80099c0 <_printf_i+0x130>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	464a      	mov	r2, r9
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	4630      	mov	r0, r6
 8009a80:	47c0      	blx	r8
 8009a82:	3001      	adds	r0, #1
 8009a84:	d09a      	beq.n	80099bc <_printf_i+0x12c>
 8009a86:	3501      	adds	r5, #1
 8009a88:	68e3      	ldr	r3, [r4, #12]
 8009a8a:	9a03      	ldr	r2, [sp, #12]
 8009a8c:	1a9b      	subs	r3, r3, r2
 8009a8e:	42ab      	cmp	r3, r5
 8009a90:	dcf2      	bgt.n	8009a78 <_printf_i+0x1e8>
 8009a92:	e7eb      	b.n	8009a6c <_printf_i+0x1dc>
 8009a94:	2500      	movs	r5, #0
 8009a96:	f104 0919 	add.w	r9, r4, #25
 8009a9a:	e7f5      	b.n	8009a88 <_printf_i+0x1f8>
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1ac      	bne.n	80099fa <_printf_i+0x16a>
 8009aa0:	7803      	ldrb	r3, [r0, #0]
 8009aa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009aa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aaa:	e76c      	b.n	8009986 <_printf_i+0xf6>
 8009aac:	0800a105 	.word	0x0800a105
 8009ab0:	0800a116 	.word	0x0800a116

08009ab4 <_putc_r>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	460d      	mov	r5, r1
 8009ab8:	4614      	mov	r4, r2
 8009aba:	4606      	mov	r6, r0
 8009abc:	b118      	cbz	r0, 8009ac6 <_putc_r+0x12>
 8009abe:	6983      	ldr	r3, [r0, #24]
 8009ac0:	b90b      	cbnz	r3, 8009ac6 <_putc_r+0x12>
 8009ac2:	f7ff fca3 	bl	800940c <__sinit>
 8009ac6:	4b13      	ldr	r3, [pc, #76]	; (8009b14 <_putc_r+0x60>)
 8009ac8:	429c      	cmp	r4, r3
 8009aca:	d112      	bne.n	8009af2 <_putc_r+0x3e>
 8009acc:	6874      	ldr	r4, [r6, #4]
 8009ace:	68a3      	ldr	r3, [r4, #8]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	60a3      	str	r3, [r4, #8]
 8009ad6:	da16      	bge.n	8009b06 <_putc_r+0x52>
 8009ad8:	69a2      	ldr	r2, [r4, #24]
 8009ada:	4293      	cmp	r3, r2
 8009adc:	db02      	blt.n	8009ae4 <_putc_r+0x30>
 8009ade:	b2eb      	uxtb	r3, r5
 8009ae0:	2b0a      	cmp	r3, #10
 8009ae2:	d110      	bne.n	8009b06 <_putc_r+0x52>
 8009ae4:	4622      	mov	r2, r4
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4630      	mov	r0, r6
 8009aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009aee:	f000 b85b 	b.w	8009ba8 <__swbuf_r>
 8009af2:	4b09      	ldr	r3, [pc, #36]	; (8009b18 <_putc_r+0x64>)
 8009af4:	429c      	cmp	r4, r3
 8009af6:	d101      	bne.n	8009afc <_putc_r+0x48>
 8009af8:	68b4      	ldr	r4, [r6, #8]
 8009afa:	e7e8      	b.n	8009ace <_putc_r+0x1a>
 8009afc:	4b07      	ldr	r3, [pc, #28]	; (8009b1c <_putc_r+0x68>)
 8009afe:	429c      	cmp	r4, r3
 8009b00:	bf08      	it	eq
 8009b02:	68f4      	ldreq	r4, [r6, #12]
 8009b04:	e7e3      	b.n	8009ace <_putc_r+0x1a>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	6022      	str	r2, [r4, #0]
 8009b0c:	701d      	strb	r5, [r3, #0]
 8009b0e:	b2e8      	uxtb	r0, r5
 8009b10:	bd70      	pop	{r4, r5, r6, pc}
 8009b12:	bf00      	nop
 8009b14:	0800a0b4 	.word	0x0800a0b4
 8009b18:	0800a0d4 	.word	0x0800a0d4
 8009b1c:	0800a094 	.word	0x0800a094

08009b20 <__sread>:
 8009b20:	b510      	push	{r4, lr}
 8009b22:	460c      	mov	r4, r1
 8009b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b28:	f000 fa46 	bl	8009fb8 <_read_r>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	bfab      	itete	ge
 8009b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b32:	89a3      	ldrhlt	r3, [r4, #12]
 8009b34:	181b      	addge	r3, r3, r0
 8009b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b3a:	bfac      	ite	ge
 8009b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b3e:	81a3      	strhlt	r3, [r4, #12]
 8009b40:	bd10      	pop	{r4, pc}

08009b42 <__swrite>:
 8009b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b46:	461f      	mov	r7, r3
 8009b48:	898b      	ldrh	r3, [r1, #12]
 8009b4a:	05db      	lsls	r3, r3, #23
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	460c      	mov	r4, r1
 8009b50:	4616      	mov	r6, r2
 8009b52:	d505      	bpl.n	8009b60 <__swrite+0x1e>
 8009b54:	2302      	movs	r3, #2
 8009b56:	2200      	movs	r2, #0
 8009b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5c:	f000 f9b6 	bl	8009ecc <_lseek_r>
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b6a:	81a3      	strh	r3, [r4, #12]
 8009b6c:	4632      	mov	r2, r6
 8009b6e:	463b      	mov	r3, r7
 8009b70:	4628      	mov	r0, r5
 8009b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b76:	f000 b869 	b.w	8009c4c <_write_r>

08009b7a <__sseek>:
 8009b7a:	b510      	push	{r4, lr}
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b82:	f000 f9a3 	bl	8009ecc <_lseek_r>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	89a3      	ldrh	r3, [r4, #12]
 8009b8a:	bf15      	itete	ne
 8009b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b96:	81a3      	strheq	r3, [r4, #12]
 8009b98:	bf18      	it	ne
 8009b9a:	81a3      	strhne	r3, [r4, #12]
 8009b9c:	bd10      	pop	{r4, pc}

08009b9e <__sclose>:
 8009b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba2:	f000 b8d3 	b.w	8009d4c <_close_r>
	...

08009ba8 <__swbuf_r>:
 8009ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009baa:	460e      	mov	r6, r1
 8009bac:	4614      	mov	r4, r2
 8009bae:	4605      	mov	r5, r0
 8009bb0:	b118      	cbz	r0, 8009bba <__swbuf_r+0x12>
 8009bb2:	6983      	ldr	r3, [r0, #24]
 8009bb4:	b90b      	cbnz	r3, 8009bba <__swbuf_r+0x12>
 8009bb6:	f7ff fc29 	bl	800940c <__sinit>
 8009bba:	4b21      	ldr	r3, [pc, #132]	; (8009c40 <__swbuf_r+0x98>)
 8009bbc:	429c      	cmp	r4, r3
 8009bbe:	d12a      	bne.n	8009c16 <__swbuf_r+0x6e>
 8009bc0:	686c      	ldr	r4, [r5, #4]
 8009bc2:	69a3      	ldr	r3, [r4, #24]
 8009bc4:	60a3      	str	r3, [r4, #8]
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	071a      	lsls	r2, r3, #28
 8009bca:	d52e      	bpl.n	8009c2a <__swbuf_r+0x82>
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	b363      	cbz	r3, 8009c2a <__swbuf_r+0x82>
 8009bd0:	6923      	ldr	r3, [r4, #16]
 8009bd2:	6820      	ldr	r0, [r4, #0]
 8009bd4:	1ac0      	subs	r0, r0, r3
 8009bd6:	6963      	ldr	r3, [r4, #20]
 8009bd8:	b2f6      	uxtb	r6, r6
 8009bda:	4283      	cmp	r3, r0
 8009bdc:	4637      	mov	r7, r6
 8009bde:	dc04      	bgt.n	8009bea <__swbuf_r+0x42>
 8009be0:	4621      	mov	r1, r4
 8009be2:	4628      	mov	r0, r5
 8009be4:	f000 f948 	bl	8009e78 <_fflush_r>
 8009be8:	bb28      	cbnz	r0, 8009c36 <__swbuf_r+0x8e>
 8009bea:	68a3      	ldr	r3, [r4, #8]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	60a3      	str	r3, [r4, #8]
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	6022      	str	r2, [r4, #0]
 8009bf6:	701e      	strb	r6, [r3, #0]
 8009bf8:	6963      	ldr	r3, [r4, #20]
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	4283      	cmp	r3, r0
 8009bfe:	d004      	beq.n	8009c0a <__swbuf_r+0x62>
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	07db      	lsls	r3, r3, #31
 8009c04:	d519      	bpl.n	8009c3a <__swbuf_r+0x92>
 8009c06:	2e0a      	cmp	r6, #10
 8009c08:	d117      	bne.n	8009c3a <__swbuf_r+0x92>
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	f000 f933 	bl	8009e78 <_fflush_r>
 8009c12:	b190      	cbz	r0, 8009c3a <__swbuf_r+0x92>
 8009c14:	e00f      	b.n	8009c36 <__swbuf_r+0x8e>
 8009c16:	4b0b      	ldr	r3, [pc, #44]	; (8009c44 <__swbuf_r+0x9c>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	d101      	bne.n	8009c20 <__swbuf_r+0x78>
 8009c1c:	68ac      	ldr	r4, [r5, #8]
 8009c1e:	e7d0      	b.n	8009bc2 <__swbuf_r+0x1a>
 8009c20:	4b09      	ldr	r3, [pc, #36]	; (8009c48 <__swbuf_r+0xa0>)
 8009c22:	429c      	cmp	r4, r3
 8009c24:	bf08      	it	eq
 8009c26:	68ec      	ldreq	r4, [r5, #12]
 8009c28:	e7cb      	b.n	8009bc2 <__swbuf_r+0x1a>
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	f000 f81f 	bl	8009c70 <__swsetup_r>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d0cc      	beq.n	8009bd0 <__swbuf_r+0x28>
 8009c36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	0800a0b4 	.word	0x0800a0b4
 8009c44:	0800a0d4 	.word	0x0800a0d4
 8009c48:	0800a094 	.word	0x0800a094

08009c4c <_write_r>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	4c07      	ldr	r4, [pc, #28]	; (8009c6c <_write_r+0x20>)
 8009c50:	4605      	mov	r5, r0
 8009c52:	4608      	mov	r0, r1
 8009c54:	4611      	mov	r1, r2
 8009c56:	2200      	movs	r2, #0
 8009c58:	6022      	str	r2, [r4, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	f7f7 f953 	bl	8000f06 <_write>
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	d102      	bne.n	8009c6a <_write_r+0x1e>
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	b103      	cbz	r3, 8009c6a <_write_r+0x1e>
 8009c68:	602b      	str	r3, [r5, #0]
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	200008f8 	.word	0x200008f8

08009c70 <__swsetup_r>:
 8009c70:	4b32      	ldr	r3, [pc, #200]	; (8009d3c <__swsetup_r+0xcc>)
 8009c72:	b570      	push	{r4, r5, r6, lr}
 8009c74:	681d      	ldr	r5, [r3, #0]
 8009c76:	4606      	mov	r6, r0
 8009c78:	460c      	mov	r4, r1
 8009c7a:	b125      	cbz	r5, 8009c86 <__swsetup_r+0x16>
 8009c7c:	69ab      	ldr	r3, [r5, #24]
 8009c7e:	b913      	cbnz	r3, 8009c86 <__swsetup_r+0x16>
 8009c80:	4628      	mov	r0, r5
 8009c82:	f7ff fbc3 	bl	800940c <__sinit>
 8009c86:	4b2e      	ldr	r3, [pc, #184]	; (8009d40 <__swsetup_r+0xd0>)
 8009c88:	429c      	cmp	r4, r3
 8009c8a:	d10f      	bne.n	8009cac <__swsetup_r+0x3c>
 8009c8c:	686c      	ldr	r4, [r5, #4]
 8009c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	0715      	lsls	r5, r2, #28
 8009c96:	d42c      	bmi.n	8009cf2 <__swsetup_r+0x82>
 8009c98:	06d0      	lsls	r0, r2, #27
 8009c9a:	d411      	bmi.n	8009cc0 <__swsetup_r+0x50>
 8009c9c:	2209      	movs	r2, #9
 8009c9e:	6032      	str	r2, [r6, #0]
 8009ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca4:	81a3      	strh	r3, [r4, #12]
 8009ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009caa:	e03e      	b.n	8009d2a <__swsetup_r+0xba>
 8009cac:	4b25      	ldr	r3, [pc, #148]	; (8009d44 <__swsetup_r+0xd4>)
 8009cae:	429c      	cmp	r4, r3
 8009cb0:	d101      	bne.n	8009cb6 <__swsetup_r+0x46>
 8009cb2:	68ac      	ldr	r4, [r5, #8]
 8009cb4:	e7eb      	b.n	8009c8e <__swsetup_r+0x1e>
 8009cb6:	4b24      	ldr	r3, [pc, #144]	; (8009d48 <__swsetup_r+0xd8>)
 8009cb8:	429c      	cmp	r4, r3
 8009cba:	bf08      	it	eq
 8009cbc:	68ec      	ldreq	r4, [r5, #12]
 8009cbe:	e7e6      	b.n	8009c8e <__swsetup_r+0x1e>
 8009cc0:	0751      	lsls	r1, r2, #29
 8009cc2:	d512      	bpl.n	8009cea <__swsetup_r+0x7a>
 8009cc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cc6:	b141      	cbz	r1, 8009cda <__swsetup_r+0x6a>
 8009cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ccc:	4299      	cmp	r1, r3
 8009cce:	d002      	beq.n	8009cd6 <__swsetup_r+0x66>
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7ff fa77 	bl	80091c4 <_free_r>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	6363      	str	r3, [r4, #52]	; 0x34
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ce0:	81a3      	strh	r3, [r4, #12]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6063      	str	r3, [r4, #4]
 8009ce6:	6923      	ldr	r3, [r4, #16]
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	f043 0308 	orr.w	r3, r3, #8
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	6923      	ldr	r3, [r4, #16]
 8009cf4:	b94b      	cbnz	r3, 8009d0a <__swsetup_r+0x9a>
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d00:	d003      	beq.n	8009d0a <__swsetup_r+0x9a>
 8009d02:	4621      	mov	r1, r4
 8009d04:	4630      	mov	r0, r6
 8009d06:	f000 f917 	bl	8009f38 <__smakebuf_r>
 8009d0a:	89a2      	ldrh	r2, [r4, #12]
 8009d0c:	f012 0301 	ands.w	r3, r2, #1
 8009d10:	d00c      	beq.n	8009d2c <__swsetup_r+0xbc>
 8009d12:	2300      	movs	r3, #0
 8009d14:	60a3      	str	r3, [r4, #8]
 8009d16:	6963      	ldr	r3, [r4, #20]
 8009d18:	425b      	negs	r3, r3
 8009d1a:	61a3      	str	r3, [r4, #24]
 8009d1c:	6923      	ldr	r3, [r4, #16]
 8009d1e:	b953      	cbnz	r3, 8009d36 <__swsetup_r+0xc6>
 8009d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009d28:	d1ba      	bne.n	8009ca0 <__swsetup_r+0x30>
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	0792      	lsls	r2, r2, #30
 8009d2e:	bf58      	it	pl
 8009d30:	6963      	ldrpl	r3, [r4, #20]
 8009d32:	60a3      	str	r3, [r4, #8]
 8009d34:	e7f2      	b.n	8009d1c <__swsetup_r+0xac>
 8009d36:	2000      	movs	r0, #0
 8009d38:	e7f7      	b.n	8009d2a <__swsetup_r+0xba>
 8009d3a:	bf00      	nop
 8009d3c:	2000002c 	.word	0x2000002c
 8009d40:	0800a0b4 	.word	0x0800a0b4
 8009d44:	0800a0d4 	.word	0x0800a0d4
 8009d48:	0800a094 	.word	0x0800a094

08009d4c <_close_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4c06      	ldr	r4, [pc, #24]	; (8009d68 <_close_r+0x1c>)
 8009d50:	2300      	movs	r3, #0
 8009d52:	4605      	mov	r5, r0
 8009d54:	4608      	mov	r0, r1
 8009d56:	6023      	str	r3, [r4, #0]
 8009d58:	f7f7 f8f1 	bl	8000f3e <_close>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_close_r+0x1a>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_close_r+0x1a>
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	200008f8 	.word	0x200008f8

08009d6c <__sflush_r>:
 8009d6c:	898a      	ldrh	r2, [r1, #12]
 8009d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d72:	4605      	mov	r5, r0
 8009d74:	0710      	lsls	r0, r2, #28
 8009d76:	460c      	mov	r4, r1
 8009d78:	d458      	bmi.n	8009e2c <__sflush_r+0xc0>
 8009d7a:	684b      	ldr	r3, [r1, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	dc05      	bgt.n	8009d8c <__sflush_r+0x20>
 8009d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	dc02      	bgt.n	8009d8c <__sflush_r+0x20>
 8009d86:	2000      	movs	r0, #0
 8009d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d8e:	2e00      	cmp	r6, #0
 8009d90:	d0f9      	beq.n	8009d86 <__sflush_r+0x1a>
 8009d92:	2300      	movs	r3, #0
 8009d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d98:	682f      	ldr	r7, [r5, #0]
 8009d9a:	6a21      	ldr	r1, [r4, #32]
 8009d9c:	602b      	str	r3, [r5, #0]
 8009d9e:	d032      	beq.n	8009e06 <__sflush_r+0x9a>
 8009da0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	075a      	lsls	r2, r3, #29
 8009da6:	d505      	bpl.n	8009db4 <__sflush_r+0x48>
 8009da8:	6863      	ldr	r3, [r4, #4]
 8009daa:	1ac0      	subs	r0, r0, r3
 8009dac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dae:	b10b      	cbz	r3, 8009db4 <__sflush_r+0x48>
 8009db0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009db2:	1ac0      	subs	r0, r0, r3
 8009db4:	2300      	movs	r3, #0
 8009db6:	4602      	mov	r2, r0
 8009db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dba:	6a21      	ldr	r1, [r4, #32]
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b0      	blx	r6
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	d106      	bne.n	8009dd4 <__sflush_r+0x68>
 8009dc6:	6829      	ldr	r1, [r5, #0]
 8009dc8:	291d      	cmp	r1, #29
 8009dca:	d848      	bhi.n	8009e5e <__sflush_r+0xf2>
 8009dcc:	4a29      	ldr	r2, [pc, #164]	; (8009e74 <__sflush_r+0x108>)
 8009dce:	40ca      	lsrs	r2, r1
 8009dd0:	07d6      	lsls	r6, r2, #31
 8009dd2:	d544      	bpl.n	8009e5e <__sflush_r+0xf2>
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	6062      	str	r2, [r4, #4]
 8009dd8:	04d9      	lsls	r1, r3, #19
 8009dda:	6922      	ldr	r2, [r4, #16]
 8009ddc:	6022      	str	r2, [r4, #0]
 8009dde:	d504      	bpl.n	8009dea <__sflush_r+0x7e>
 8009de0:	1c42      	adds	r2, r0, #1
 8009de2:	d101      	bne.n	8009de8 <__sflush_r+0x7c>
 8009de4:	682b      	ldr	r3, [r5, #0]
 8009de6:	b903      	cbnz	r3, 8009dea <__sflush_r+0x7e>
 8009de8:	6560      	str	r0, [r4, #84]	; 0x54
 8009dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dec:	602f      	str	r7, [r5, #0]
 8009dee:	2900      	cmp	r1, #0
 8009df0:	d0c9      	beq.n	8009d86 <__sflush_r+0x1a>
 8009df2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009df6:	4299      	cmp	r1, r3
 8009df8:	d002      	beq.n	8009e00 <__sflush_r+0x94>
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	f7ff f9e2 	bl	80091c4 <_free_r>
 8009e00:	2000      	movs	r0, #0
 8009e02:	6360      	str	r0, [r4, #52]	; 0x34
 8009e04:	e7c0      	b.n	8009d88 <__sflush_r+0x1c>
 8009e06:	2301      	movs	r3, #1
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b0      	blx	r6
 8009e0c:	1c41      	adds	r1, r0, #1
 8009e0e:	d1c8      	bne.n	8009da2 <__sflush_r+0x36>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d0c5      	beq.n	8009da2 <__sflush_r+0x36>
 8009e16:	2b1d      	cmp	r3, #29
 8009e18:	d001      	beq.n	8009e1e <__sflush_r+0xb2>
 8009e1a:	2b16      	cmp	r3, #22
 8009e1c:	d101      	bne.n	8009e22 <__sflush_r+0xb6>
 8009e1e:	602f      	str	r7, [r5, #0]
 8009e20:	e7b1      	b.n	8009d86 <__sflush_r+0x1a>
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e28:	81a3      	strh	r3, [r4, #12]
 8009e2a:	e7ad      	b.n	8009d88 <__sflush_r+0x1c>
 8009e2c:	690f      	ldr	r7, [r1, #16]
 8009e2e:	2f00      	cmp	r7, #0
 8009e30:	d0a9      	beq.n	8009d86 <__sflush_r+0x1a>
 8009e32:	0793      	lsls	r3, r2, #30
 8009e34:	680e      	ldr	r6, [r1, #0]
 8009e36:	bf08      	it	eq
 8009e38:	694b      	ldreq	r3, [r1, #20]
 8009e3a:	600f      	str	r7, [r1, #0]
 8009e3c:	bf18      	it	ne
 8009e3e:	2300      	movne	r3, #0
 8009e40:	eba6 0807 	sub.w	r8, r6, r7
 8009e44:	608b      	str	r3, [r1, #8]
 8009e46:	f1b8 0f00 	cmp.w	r8, #0
 8009e4a:	dd9c      	ble.n	8009d86 <__sflush_r+0x1a>
 8009e4c:	4643      	mov	r3, r8
 8009e4e:	463a      	mov	r2, r7
 8009e50:	6a21      	ldr	r1, [r4, #32]
 8009e52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b0      	blx	r6
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	dc06      	bgt.n	8009e6a <__sflush_r+0xfe>
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e68:	e78e      	b.n	8009d88 <__sflush_r+0x1c>
 8009e6a:	4407      	add	r7, r0
 8009e6c:	eba8 0800 	sub.w	r8, r8, r0
 8009e70:	e7e9      	b.n	8009e46 <__sflush_r+0xda>
 8009e72:	bf00      	nop
 8009e74:	20400001 	.word	0x20400001

08009e78 <_fflush_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	690b      	ldr	r3, [r1, #16]
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	b1db      	cbz	r3, 8009eba <_fflush_r+0x42>
 8009e82:	b118      	cbz	r0, 8009e8c <_fflush_r+0x14>
 8009e84:	6983      	ldr	r3, [r0, #24]
 8009e86:	b90b      	cbnz	r3, 8009e8c <_fflush_r+0x14>
 8009e88:	f7ff fac0 	bl	800940c <__sinit>
 8009e8c:	4b0c      	ldr	r3, [pc, #48]	; (8009ec0 <_fflush_r+0x48>)
 8009e8e:	429c      	cmp	r4, r3
 8009e90:	d109      	bne.n	8009ea6 <_fflush_r+0x2e>
 8009e92:	686c      	ldr	r4, [r5, #4]
 8009e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e98:	b17b      	cbz	r3, 8009eba <_fflush_r+0x42>
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ea2:	f7ff bf63 	b.w	8009d6c <__sflush_r>
 8009ea6:	4b07      	ldr	r3, [pc, #28]	; (8009ec4 <_fflush_r+0x4c>)
 8009ea8:	429c      	cmp	r4, r3
 8009eaa:	d101      	bne.n	8009eb0 <_fflush_r+0x38>
 8009eac:	68ac      	ldr	r4, [r5, #8]
 8009eae:	e7f1      	b.n	8009e94 <_fflush_r+0x1c>
 8009eb0:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <_fflush_r+0x50>)
 8009eb2:	429c      	cmp	r4, r3
 8009eb4:	bf08      	it	eq
 8009eb6:	68ec      	ldreq	r4, [r5, #12]
 8009eb8:	e7ec      	b.n	8009e94 <_fflush_r+0x1c>
 8009eba:	2000      	movs	r0, #0
 8009ebc:	bd38      	pop	{r3, r4, r5, pc}
 8009ebe:	bf00      	nop
 8009ec0:	0800a0b4 	.word	0x0800a0b4
 8009ec4:	0800a0d4 	.word	0x0800a0d4
 8009ec8:	0800a094 	.word	0x0800a094

08009ecc <_lseek_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4c07      	ldr	r4, [pc, #28]	; (8009eec <_lseek_r+0x20>)
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	4608      	mov	r0, r1
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	6022      	str	r2, [r4, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	f7f7 f856 	bl	8000f8c <_lseek>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d102      	bne.n	8009eea <_lseek_r+0x1e>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	b103      	cbz	r3, 8009eea <_lseek_r+0x1e>
 8009ee8:	602b      	str	r3, [r5, #0]
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	200008f8 	.word	0x200008f8

08009ef0 <__swhatbuf_r>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	460e      	mov	r6, r1
 8009ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef8:	2900      	cmp	r1, #0
 8009efa:	b096      	sub	sp, #88	; 0x58
 8009efc:	4614      	mov	r4, r2
 8009efe:	461d      	mov	r5, r3
 8009f00:	da07      	bge.n	8009f12 <__swhatbuf_r+0x22>
 8009f02:	2300      	movs	r3, #0
 8009f04:	602b      	str	r3, [r5, #0]
 8009f06:	89b3      	ldrh	r3, [r6, #12]
 8009f08:	061a      	lsls	r2, r3, #24
 8009f0a:	d410      	bmi.n	8009f2e <__swhatbuf_r+0x3e>
 8009f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f10:	e00e      	b.n	8009f30 <__swhatbuf_r+0x40>
 8009f12:	466a      	mov	r2, sp
 8009f14:	f000 f862 	bl	8009fdc <_fstat_r>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	dbf2      	blt.n	8009f02 <__swhatbuf_r+0x12>
 8009f1c:	9a01      	ldr	r2, [sp, #4]
 8009f1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f26:	425a      	negs	r2, r3
 8009f28:	415a      	adcs	r2, r3
 8009f2a:	602a      	str	r2, [r5, #0]
 8009f2c:	e7ee      	b.n	8009f0c <__swhatbuf_r+0x1c>
 8009f2e:	2340      	movs	r3, #64	; 0x40
 8009f30:	2000      	movs	r0, #0
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	b016      	add	sp, #88	; 0x58
 8009f36:	bd70      	pop	{r4, r5, r6, pc}

08009f38 <__smakebuf_r>:
 8009f38:	898b      	ldrh	r3, [r1, #12]
 8009f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f3c:	079d      	lsls	r5, r3, #30
 8009f3e:	4606      	mov	r6, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	d507      	bpl.n	8009f54 <__smakebuf_r+0x1c>
 8009f44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f48:	6023      	str	r3, [r4, #0]
 8009f4a:	6123      	str	r3, [r4, #16]
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	6163      	str	r3, [r4, #20]
 8009f50:	b002      	add	sp, #8
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	ab01      	add	r3, sp, #4
 8009f56:	466a      	mov	r2, sp
 8009f58:	f7ff ffca 	bl	8009ef0 <__swhatbuf_r>
 8009f5c:	9900      	ldr	r1, [sp, #0]
 8009f5e:	4605      	mov	r5, r0
 8009f60:	4630      	mov	r0, r6
 8009f62:	f7ff f97d 	bl	8009260 <_malloc_r>
 8009f66:	b948      	cbnz	r0, 8009f7c <__smakebuf_r+0x44>
 8009f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f6c:	059a      	lsls	r2, r3, #22
 8009f6e:	d4ef      	bmi.n	8009f50 <__smakebuf_r+0x18>
 8009f70:	f023 0303 	bic.w	r3, r3, #3
 8009f74:	f043 0302 	orr.w	r3, r3, #2
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	e7e3      	b.n	8009f44 <__smakebuf_r+0xc>
 8009f7c:	4b0d      	ldr	r3, [pc, #52]	; (8009fb4 <__smakebuf_r+0x7c>)
 8009f7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	6020      	str	r0, [r4, #0]
 8009f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	9b00      	ldr	r3, [sp, #0]
 8009f8c:	6163      	str	r3, [r4, #20]
 8009f8e:	9b01      	ldr	r3, [sp, #4]
 8009f90:	6120      	str	r0, [r4, #16]
 8009f92:	b15b      	cbz	r3, 8009fac <__smakebuf_r+0x74>
 8009f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f000 f831 	bl	800a000 <_isatty_r>
 8009f9e:	b128      	cbz	r0, 8009fac <__smakebuf_r+0x74>
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	f023 0303 	bic.w	r3, r3, #3
 8009fa6:	f043 0301 	orr.w	r3, r3, #1
 8009faa:	81a3      	strh	r3, [r4, #12]
 8009fac:	89a3      	ldrh	r3, [r4, #12]
 8009fae:	431d      	orrs	r5, r3
 8009fb0:	81a5      	strh	r5, [r4, #12]
 8009fb2:	e7cd      	b.n	8009f50 <__smakebuf_r+0x18>
 8009fb4:	080093d5 	.word	0x080093d5

08009fb8 <_read_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4c07      	ldr	r4, [pc, #28]	; (8009fd8 <_read_r+0x20>)
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	4608      	mov	r0, r1
 8009fc0:	4611      	mov	r1, r2
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	6022      	str	r2, [r4, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f7f6 ff80 	bl	8000ecc <_read>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d102      	bne.n	8009fd6 <_read_r+0x1e>
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	b103      	cbz	r3, 8009fd6 <_read_r+0x1e>
 8009fd4:	602b      	str	r3, [r5, #0]
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
 8009fd8:	200008f8 	.word	0x200008f8

08009fdc <_fstat_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4c07      	ldr	r4, [pc, #28]	; (8009ffc <_fstat_r+0x20>)
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	f7f6 ffb4 	bl	8000f56 <_fstat>
 8009fee:	1c43      	adds	r3, r0, #1
 8009ff0:	d102      	bne.n	8009ff8 <_fstat_r+0x1c>
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	b103      	cbz	r3, 8009ff8 <_fstat_r+0x1c>
 8009ff6:	602b      	str	r3, [r5, #0]
 8009ff8:	bd38      	pop	{r3, r4, r5, pc}
 8009ffa:	bf00      	nop
 8009ffc:	200008f8 	.word	0x200008f8

0800a000 <_isatty_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4c06      	ldr	r4, [pc, #24]	; (800a01c <_isatty_r+0x1c>)
 800a004:	2300      	movs	r3, #0
 800a006:	4605      	mov	r5, r0
 800a008:	4608      	mov	r0, r1
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	f7f6 ffb3 	bl	8000f76 <_isatty>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d102      	bne.n	800a01a <_isatty_r+0x1a>
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	b103      	cbz	r3, 800a01a <_isatty_r+0x1a>
 800a018:	602b      	str	r3, [r5, #0]
 800a01a:	bd38      	pop	{r3, r4, r5, pc}
 800a01c:	200008f8 	.word	0x200008f8

0800a020 <_init>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	bf00      	nop
 800a024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a026:	bc08      	pop	{r3}
 800a028:	469e      	mov	lr, r3
 800a02a:	4770      	bx	lr

0800a02c <_fini>:
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	bf00      	nop
 800a030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a032:	bc08      	pop	{r3}
 800a034:	469e      	mov	lr, r3
 800a036:	4770      	bx	lr
