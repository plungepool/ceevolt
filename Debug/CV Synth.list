
CV Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08009ed4  08009ed4  00019ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fc4  08009fc4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08009fc4  08009fc4  00019fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fcc  08009fcc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fcc  08009fcc  00019fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fd0  08009fd0  00019fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08009fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  20000094  0800a068  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  0800a068  000208d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b17a  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003924  00000000  00000000  0003b23e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  0003eb68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c0  00000000  00000000  0003fe98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025122  00000000  00000000  00041058  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001167c  00000000  00000000  0006617a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdc2e  00000000  00000000  000777f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145424  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005904  00000000  00000000  001454a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ebc 	.word	0x08009ebc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08009ebc 	.word	0x08009ebc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a60:	f000 b972 	b.w	8000d48 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	4688      	mov	r8, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14b      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4615      	mov	r5, r2
 8000a8e:	d967      	bls.n	8000b60 <__udivmoddi4+0xe4>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0720 	rsb	r7, r2, #32
 8000a9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000aa2:	4095      	lsls	r5, r2
 8000aa4:	ea47 0803 	orr.w	r8, r7, r3
 8000aa8:	4094      	lsls	r4, r2
 8000aaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ab4:	fa1f fc85 	uxth.w	ip, r5
 8000ab8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000abc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ac4:	4299      	cmp	r1, r3
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x60>
 8000ac8:	18eb      	adds	r3, r5, r3
 8000aca:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000ace:	f080 811b 	bcs.w	8000d08 <__udivmoddi4+0x28c>
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	f240 8118 	bls.w	8000d08 <__udivmoddi4+0x28c>
 8000ad8:	3f02      	subs	r7, #2
 8000ada:	442b      	add	r3, r5
 8000adc:	1a5b      	subs	r3, r3, r1
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ae4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af0:	45a4      	cmp	ip, r4
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x8c>
 8000af4:	192c      	adds	r4, r5, r4
 8000af6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000afa:	f080 8107 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	f240 8104 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000b04:	3802      	subs	r0, #2
 8000b06:	442c      	add	r4, r5
 8000b08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b0c:	eba4 040c 	sub.w	r4, r4, ip
 8000b10:	2700      	movs	r7, #0
 8000b12:	b11e      	cbz	r6, 8000b1c <__udivmoddi4+0xa0>
 8000b14:	40d4      	lsrs	r4, r2
 8000b16:	2300      	movs	r3, #0
 8000b18:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0xbe>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80eb 	beq.w	8000d02 <__udivmoddi4+0x286>
 8000b2c:	2700      	movs	r7, #0
 8000b2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b32:	4638      	mov	r0, r7
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	fab3 f783 	clz	r7, r3
 8000b3e:	2f00      	cmp	r7, #0
 8000b40:	d147      	bne.n	8000bd2 <__udivmoddi4+0x156>
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xd0>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 80fa 	bhi.w	8000d40 <__udivmoddi4+0x2c4>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4698      	mov	r8, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d0e0      	beq.n	8000b1c <__udivmoddi4+0xa0>
 8000b5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b5e:	e7dd      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000b60:	b902      	cbnz	r2, 8000b64 <__udivmoddi4+0xe8>
 8000b62:	deff      	udf	#255	; 0xff
 8000b64:	fab2 f282 	clz	r2, r2
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f040 808f 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6e:	1b49      	subs	r1, r1, r5
 8000b70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b74:	fa1f f885 	uxth.w	r8, r5
 8000b78:	2701      	movs	r7, #1
 8000b7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb08 f10c 	mul.w	r1, r8, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2bc>
 8000b9e:	4684      	mov	ip, r0
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	b2a3      	uxth	r3, r4
 8000ba4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb0:	fb08 f800 	mul.w	r8, r8, r0
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x14c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x14a>
 8000bc0:	45a0      	cmp	r8, r4
 8000bc2:	f200 80b6 	bhi.w	8000d32 <__udivmoddi4+0x2b6>
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	eba4 0408 	sub.w	r4, r4, r8
 8000bcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd0:	e79f      	b.n	8000b12 <__udivmoddi4+0x96>
 8000bd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bd6:	40bb      	lsls	r3, r7
 8000bd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bdc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be0:	fa01 f407 	lsl.w	r4, r1, r7
 8000be4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf0:	4325      	orrs	r5, r4
 8000bf2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bf6:	0c2c      	lsrs	r4, r5, #16
 8000bf8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bfc:	fa1f fa8e 	uxth.w	sl, lr
 8000c00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c04:	fb09 f40a 	mul.w	r4, r9, sl
 8000c08:	429c      	cmp	r4, r3
 8000c0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1e 0303 	adds.w	r3, lr, r3
 8000c18:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c1c:	f080 8087 	bcs.w	8000d2e <__udivmoddi4+0x2b2>
 8000c20:	429c      	cmp	r4, r3
 8000c22:	f240 8084 	bls.w	8000d2e <__udivmoddi4+0x2b2>
 8000c26:	f1a9 0902 	sub.w	r9, r9, #2
 8000c2a:	4473      	add	r3, lr
 8000c2c:	1b1b      	subs	r3, r3, r4
 8000c2e:	b2ad      	uxth	r5, r5
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c40:	45a2      	cmp	sl, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1e 0404 	adds.w	r4, lr, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c4c:	d26b      	bcs.n	8000d26 <__udivmoddi4+0x2aa>
 8000c4e:	45a2      	cmp	sl, r4
 8000c50:	d969      	bls.n	8000d26 <__udivmoddi4+0x2aa>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4474      	add	r4, lr
 8000c56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c5e:	eba4 040a 	sub.w	r4, r4, sl
 8000c62:	454c      	cmp	r4, r9
 8000c64:	46c2      	mov	sl, r8
 8000c66:	464b      	mov	r3, r9
 8000c68:	d354      	bcc.n	8000d14 <__udivmoddi4+0x298>
 8000c6a:	d051      	beq.n	8000d10 <__udivmoddi4+0x294>
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d069      	beq.n	8000d44 <__udivmoddi4+0x2c8>
 8000c70:	ebb1 050a 	subs.w	r5, r1, sl
 8000c74:	eb64 0403 	sbc.w	r4, r4, r3
 8000c78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c7c:	40fd      	lsrs	r5, r7
 8000c7e:	40fc      	lsrs	r4, r7
 8000c80:	ea4c 0505 	orr.w	r5, ip, r5
 8000c84:	e9c6 5400 	strd	r5, r4, [r6]
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e747      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000c8c:	f1c2 0320 	rsb	r3, r2, #32
 8000c90:	fa20 f703 	lsr.w	r7, r0, r3
 8000c94:	4095      	lsls	r5, r2
 8000c96:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca2:	4338      	orrs	r0, r7
 8000ca4:	0c01      	lsrs	r1, r0, #16
 8000ca6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000caa:	fa1f f885 	uxth.w	r8, r5
 8000cae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb6:	fb07 f308 	mul.w	r3, r7, r8
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x256>
 8000cc2:	1869      	adds	r1, r5, r1
 8000cc4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000cc8:	d22f      	bcs.n	8000d2a <__udivmoddi4+0x2ae>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d92d      	bls.n	8000d2a <__udivmoddi4+0x2ae>
 8000cce:	3f02      	subs	r7, #2
 8000cd0:	4429      	add	r1, r5
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	b281      	uxth	r1, r0
 8000cd6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce2:	fb00 f308 	mul.w	r3, r0, r8
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x27e>
 8000cea:	1869      	adds	r1, r5, r1
 8000cec:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cf0:	d217      	bcs.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d915      	bls.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4429      	add	r1, r5
 8000cfa:	1ac9      	subs	r1, r1, r3
 8000cfc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d00:	e73b      	b.n	8000b7a <__udivmoddi4+0xfe>
 8000d02:	4637      	mov	r7, r6
 8000d04:	4630      	mov	r0, r6
 8000d06:	e709      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000d08:	4607      	mov	r7, r0
 8000d0a:	e6e7      	b.n	8000adc <__udivmoddi4+0x60>
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	e6fb      	b.n	8000b08 <__udivmoddi4+0x8c>
 8000d10:	4541      	cmp	r1, r8
 8000d12:	d2ab      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d18:	eb69 020e 	sbc.w	r2, r9, lr
 8000d1c:	3801      	subs	r0, #1
 8000d1e:	4613      	mov	r3, r2
 8000d20:	e7a4      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d22:	4660      	mov	r0, ip
 8000d24:	e7e9      	b.n	8000cfa <__udivmoddi4+0x27e>
 8000d26:	4618      	mov	r0, r3
 8000d28:	e795      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2a:	4667      	mov	r7, ip
 8000d2c:	e7d1      	b.n	8000cd2 <__udivmoddi4+0x256>
 8000d2e:	4681      	mov	r9, r0
 8000d30:	e77c      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	442c      	add	r4, r5
 8000d36:	e747      	b.n	8000bc8 <__udivmoddi4+0x14c>
 8000d38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d3c:	442b      	add	r3, r5
 8000d3e:	e72f      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d40:	4638      	mov	r0, r7
 8000d42:	e708      	b.n	8000b56 <__udivmoddi4+0xda>
 8000d44:	4637      	mov	r7, r6
 8000d46:	e6e9      	b.n	8000b1c <__udivmoddi4+0xa0>

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	0000      	movs	r0, r0
	...

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b598      	push	{r3, r4, r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fdd0 	bl	80018f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f8a8 	bl	8000eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 f9e8 	bl	8001130 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d60:	f000 f9c6 	bl	80010f0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d64:	f000 f936 	bl	8000fd4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d68:	f000 f962 	bl	8001030 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d6c:	f007 fe2e 	bl	80089cc <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000d70:	f000 f994 	bl	800109c <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000d74:	f000 f904 	bl	8000f80 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  	  	  valByte = (uint8_t)((valVolt/3.0)*255);
 8000d78:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <main+0x138>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fbdb 	bl	8000538 <__aeabi_f2d>
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <main+0x13c>)
 8000d88:	f7ff fd58 	bl	800083c <__aeabi_ddiv>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	460c      	mov	r4, r1
 8000d90:	4618      	mov	r0, r3
 8000d92:	4621      	mov	r1, r4
 8000d94:	a33a      	add	r3, pc, #232	; (adr r3, 8000e80 <main+0x130>)
 8000d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9a:	f7ff fc25 	bl	80005e8 <__aeabi_dmul>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460c      	mov	r4, r1
 8000da2:	4618      	mov	r0, r3
 8000da4:	4621      	mov	r1, r4
 8000da6:	f7ff fe31 	bl	8000a0c <__aeabi_d2uiz>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <main+0x140>)
 8000db0:	701a      	strb	r2, [r3, #0]

  	  	  HAL_UART_Receive_DMA(&huart2, RxData, 3);
 8000db2:	2203      	movs	r2, #3
 8000db4:	4937      	ldr	r1, [pc, #220]	; (8000e94 <main+0x144>)
 8000db6:	4838      	ldr	r0, [pc, #224]	; (8000e98 <main+0x148>)
 8000db8:	f004 f8da 	bl	8004f70 <HAL_UART_Receive_DMA>
  	  	  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4837      	ldr	r0, [pc, #220]	; (8000e9c <main+0x14c>)
 8000dc0:	f000 ff61 	bl	8001c86 <HAL_DAC_Start>
  	  	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, valByte);
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <main+0x140>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2208      	movs	r2, #8
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4833      	ldr	r0, [pc, #204]	; (8000e9c <main+0x14c>)
 8000dce:	f001 f80d 	bl	8001dec <HAL_DAC_SetValue>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000dd2:	f007 fe21 	bl	8008a18 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    		//HAL_UART_Transmit(&huart2, TxData, 13, 10);
    		printf("\n");
 8000dd6:	200a      	movs	r0, #10
 8000dd8:	f008 fa02 	bl	80091e0 <putchar>

    printf("Status is 0x%X, pitch is 0x%X, velocity is 0x%X \n", RxData[0], RxData[1], RxData[2]);
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <main+0x144>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4619      	mov	r1, r3
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <main+0x144>)
 8000de6:	785b      	ldrb	r3, [r3, #1]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <main+0x144>)
 8000dee:	789b      	ldrb	r3, [r3, #2]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	482b      	ldr	r0, [pc, #172]	; (8000ea0 <main+0x150>)
 8000df4:	f008 f9dc 	bl	80091b0 <iprintf>

    //feed RxData[1] to function that converts note 0-127 to voltage between 0 and 3
    valVolt = (RxData[1] * 3) / 127;
 8000df8:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <main+0x144>)
 8000dfa:	785b      	ldrb	r3, [r3, #1]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <main+0x154>)
 8000e08:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0c:	441a      	add	r2, r3
 8000e0e:	1192      	asrs	r2, r2, #6
 8000e10:	17db      	asrs	r3, r3, #31
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	ee07 3a90 	vmov	s15, r3
 8000e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <main+0x138>)
 8000e1e:	edc3 7a00 	vstr	s15, [r3]

    valByte = (uint8_t)((valVolt/3.0)*255);
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <main+0x138>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fb86 	bl	8000538 <__aeabi_f2d>
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <main+0x13c>)
 8000e32:	f7ff fd03 	bl	800083c <__aeabi_ddiv>
 8000e36:	4603      	mov	r3, r0
 8000e38:	460c      	mov	r4, r1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	a310      	add	r3, pc, #64	; (adr r3, 8000e80 <main+0x130>)
 8000e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e44:	f7ff fbd0 	bl	80005e8 <__aeabi_dmul>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	460c      	mov	r4, r1
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	4621      	mov	r1, r4
 8000e50:	f7ff fddc 	bl	8000a0c <__aeabi_d2uiz>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <main+0x140>)
 8000e5a:	701a      	strb	r2, [r3, #0]
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, valByte);
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <main+0x140>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2208      	movs	r2, #8
 8000e62:	2100      	movs	r1, #0
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <main+0x14c>)
 8000e66:	f000 ffc1 	bl	8001dec <HAL_DAC_SetValue>

    HAL_Delay(500);
 8000e6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e6e:	f000 fdb5 	bl	80019dc <HAL_Delay>

    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000e72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <main+0x158>)
 8000e78:	f001 fd21 	bl	80028be <HAL_GPIO_TogglePin>
    MX_USB_HOST_Process();
 8000e7c:	e7a9      	b.n	8000dd2 <main+0x82>
 8000e7e:	bf00      	nop
 8000e80:	00000000 	.word	0x00000000
 8000e84:	406fe000 	.word	0x406fe000
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	40080000 	.word	0x40080000
 8000e90:	2000018c 	.word	0x2000018c
 8000e94:	200001e8 	.word	0x200001e8
 8000e98:	200001ec 	.word	0x200001ec
 8000e9c:	20000178 	.word	0x20000178
 8000ea0:	08009ed4 	.word	0x08009ed4
 8000ea4:	81020409 	.word	0x81020409
 8000ea8:	40020c00 	.word	0x40020c00

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b094      	sub	sp, #80	; 0x50
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0320 	add.w	r3, r7, #32
 8000eb6:	2230      	movs	r2, #48	; 0x30
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f008 f8c8 	bl	8009050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <SystemClock_Config+0xcc>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <SystemClock_Config+0xcc>)
 8000eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ede:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <SystemClock_Config+0xcc>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <SystemClock_Config+0xd0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <SystemClock_Config+0xd0>)
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <SystemClock_Config+0xd0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f12:	2302      	movs	r3, #2
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f20:	2360      	movs	r3, #96	; 0x60
 8000f22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000f24:	2306      	movs	r3, #6
 8000f26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2c:	f107 0320 	add.w	r3, r7, #32
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 fb09 	bl	8004548 <HAL_RCC_OscConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f3c:	f000 fa06 	bl	800134c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f40:	230f      	movs	r3, #15
 8000f42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f44:	2302      	movs	r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 fd62 	bl	8004a28 <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f6a:	f000 f9ef 	bl	800134c <Error_Handler>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3750      	adds	r7, #80	; 0x50
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40007000 	.word	0x40007000

08000f80 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_DAC_Init+0x4c>)
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <MX_DAC_Init+0x50>)
 8000f92:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <MX_DAC_Init+0x4c>)
 8000f96:	f000 fe54 	bl	8001c42 <HAL_DAC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000fa0:	f000 f9d4 	bl	800134c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <MX_DAC_Init+0x4c>)
 8000fb4:	f000 fecd 	bl	8001d52 <HAL_DAC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fbe:	f000 f9c5 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000178 	.word	0x20000178
 8000fd0:	40007400 	.word	0x40007400

08000fd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fda:	4a13      	ldr	r2, [pc, #76]	; (8001028 <MX_I2C1_Init+0x54>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <MX_I2C1_Init+0x58>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_I2C1_Init+0x50>)
 8000ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_I2C1_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_I2C1_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_I2C1_Init+0x50>)
 8001012:	f003 f961 	bl	80042d8 <HAL_I2C_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800101c:	f000 f996 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000124 	.word	0x20000124
 8001028:	40005400 	.word	0x40005400
 800102c:	000186a0 	.word	0x000186a0

08001030 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_SPI1_Init+0x64>)
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <MX_SPI1_Init+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_SPI1_Init+0x64>)
 800103c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001040:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_SPI1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_SPI1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_SPI1_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_SPI1_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_SPI1_Init+0x64>)
 800105c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001060:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_SPI1_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_SPI1_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_SPI1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <MX_SPI1_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_SPI1_Init+0x64>)
 800107c:	220a      	movs	r2, #10
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_SPI1_Init+0x64>)
 8001082:	f003 fec3 	bl	8004e0c <HAL_SPI_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800108c:	f000 f95e 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000190 	.word	0x20000190
 8001098:	40013000 	.word	0x40013000

0800109c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <MX_USART2_UART_Init+0x50>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010d4:	f003 fefe 	bl	8004ed4 <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010de:	f000 f935 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200001ec 	.word	0x200001ec
 80010ec:	40004400 	.word	0x40004400

080010f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_DMA_Init+0x3c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <MX_DMA_Init+0x3c>)
 8001100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_DMA_Init+0x3c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2010      	movs	r0, #16
 8001118:	f000 fd5d 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800111c:	2010      	movs	r0, #16
 800111e:	f000 fd76 	bl	8001c0e <HAL_NVIC_EnableIRQ>

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	4b79      	ldr	r3, [pc, #484]	; (8001330 <MX_GPIO_Init+0x200>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a78      	ldr	r2, [pc, #480]	; (8001330 <MX_GPIO_Init+0x200>)
 8001150:	f043 0310 	orr.w	r3, r3, #16
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b76      	ldr	r3, [pc, #472]	; (8001330 <MX_GPIO_Init+0x200>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	4b72      	ldr	r3, [pc, #456]	; (8001330 <MX_GPIO_Init+0x200>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a71      	ldr	r2, [pc, #452]	; (8001330 <MX_GPIO_Init+0x200>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b6f      	ldr	r3, [pc, #444]	; (8001330 <MX_GPIO_Init+0x200>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b6b      	ldr	r3, [pc, #428]	; (8001330 <MX_GPIO_Init+0x200>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a6a      	ldr	r2, [pc, #424]	; (8001330 <MX_GPIO_Init+0x200>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b68      	ldr	r3, [pc, #416]	; (8001330 <MX_GPIO_Init+0x200>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b64      	ldr	r3, [pc, #400]	; (8001330 <MX_GPIO_Init+0x200>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a63      	ldr	r2, [pc, #396]	; (8001330 <MX_GPIO_Init+0x200>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b61      	ldr	r3, [pc, #388]	; (8001330 <MX_GPIO_Init+0x200>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b5d      	ldr	r3, [pc, #372]	; (8001330 <MX_GPIO_Init+0x200>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a5c      	ldr	r2, [pc, #368]	; (8001330 <MX_GPIO_Init+0x200>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b5a      	ldr	r3, [pc, #360]	; (8001330 <MX_GPIO_Init+0x200>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b56      	ldr	r3, [pc, #344]	; (8001330 <MX_GPIO_Init+0x200>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a55      	ldr	r2, [pc, #340]	; (8001330 <MX_GPIO_Init+0x200>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b53      	ldr	r3, [pc, #332]	; (8001330 <MX_GPIO_Init+0x200>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2108      	movs	r1, #8
 80011f2:	4850      	ldr	r0, [pc, #320]	; (8001334 <MX_GPIO_Init+0x204>)
 80011f4:	f001 fb4a 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2101      	movs	r1, #1
 80011fc:	484e      	ldr	r0, [pc, #312]	; (8001338 <MX_GPIO_Init+0x208>)
 80011fe:	f001 fb45 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001202:	2200      	movs	r2, #0
 8001204:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001208:	484c      	ldr	r0, [pc, #304]	; (800133c <MX_GPIO_Init+0x20c>)
 800120a:	f001 fb3f 	bl	800288c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800120e:	2308      	movs	r3, #8
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4843      	ldr	r0, [pc, #268]	; (8001334 <MX_GPIO_Init+0x204>)
 8001226:	f001 f997 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800122a:	2301      	movs	r3, #1
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	483d      	ldr	r0, [pc, #244]	; (8001338 <MX_GPIO_Init+0x208>)
 8001242:	f001 f989 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001246:	2308      	movs	r3, #8
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001256:	2305      	movs	r3, #5
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	4835      	ldr	r0, [pc, #212]	; (8001338 <MX_GPIO_Init+0x208>)
 8001262:	f001 f979 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001266:	2301      	movs	r3, #1
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800126a:	4b35      	ldr	r3, [pc, #212]	; (8001340 <MX_GPIO_Init+0x210>)
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	4832      	ldr	r0, [pc, #200]	; (8001344 <MX_GPIO_Init+0x214>)
 800127a:	f001 f96d 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800127e:	2304      	movs	r3, #4
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	482d      	ldr	r0, [pc, #180]	; (8001348 <MX_GPIO_Init+0x218>)
 8001292:	f001 f961 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a8:	2305      	movs	r3, #5
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4825      	ldr	r0, [pc, #148]	; (8001348 <MX_GPIO_Init+0x218>)
 80012b4:	f001 f950 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012b8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80012bc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	481a      	ldr	r0, [pc, #104]	; (800133c <MX_GPIO_Init+0x20c>)
 80012d2:	f001 f941 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012d6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012e8:	2306      	movs	r3, #6
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4811      	ldr	r0, [pc, #68]	; (8001338 <MX_GPIO_Init+0x208>)
 80012f4:	f001 f930 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80012f8:	2320      	movs	r3, #32
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <MX_GPIO_Init+0x20c>)
 800130c:	f001 f924 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001310:	2302      	movs	r3, #2
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_GPIO_Init+0x210>)
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_GPIO_Init+0x204>)
 8001324:	f001 f918 	bl	8002558 <HAL_GPIO_Init>

}
 8001328:	bf00      	nop
 800132a:	3730      	adds	r7, #48	; 0x30
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	40021000 	.word	0x40021000
 8001338:	40020800 	.word	0x40020800
 800133c:	40020c00 	.word	0x40020c00
 8001340:	10120000 	.word	0x10120000
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001352:	e7fe      	b.n	8001352 <Error_Handler+0x6>

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <HAL_MspInit+0x4c>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x4c>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001392:	2007      	movs	r0, #7
 8001394:	f000 fc14 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_DAC_MspInit+0x7c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d127      	bne.n	8001416 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_DAC_MspInit+0x80>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <HAL_DAC_MspInit+0x80>)
 80013d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_DAC_MspInit+0x80>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_DAC_MspInit+0x80>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_DAC_MspInit+0x80>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_DAC_MspInit+0x80>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013fe:	2310      	movs	r3, #16
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	2303      	movs	r3, #3
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_DAC_MspInit+0x84>)
 8001412:	f001 f8a1 	bl	8002558 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40007400 	.word	0x40007400
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000

0800142c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_I2C_MspInit+0x84>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d12c      	bne.n	80014a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800146a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001470:	2312      	movs	r3, #18
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001474:	2301      	movs	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800147c:	2304      	movs	r3, #4
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <HAL_I2C_MspInit+0x8c>)
 8001488:	f001 f866 	bl	8002558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40005400 	.word	0x40005400
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400

080014bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_SPI_MspInit+0x84>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12b      	bne.n	8001536 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_SPI_MspInit+0x88>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_SPI_MspInit+0x88>)
 80014e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_SPI_MspInit+0x88>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_SPI_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_SPI_MspInit+0x88>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_SPI_MspInit+0x88>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001516:	23e0      	movs	r3, #224	; 0xe0
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001526:	2305      	movs	r3, #5
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <HAL_SPI_MspInit+0x8c>)
 8001532:	f001 f811 	bl	8002558 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40013000 	.word	0x40013000
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a34      	ldr	r2, [pc, #208]	; (800163c <HAL_UART_MspInit+0xf0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d162      	bne.n	8001634 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b33      	ldr	r3, [pc, #204]	; (8001640 <HAL_UART_MspInit+0xf4>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a32      	ldr	r2, [pc, #200]	; (8001640 <HAL_UART_MspInit+0xf4>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <HAL_UART_MspInit+0xf4>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <HAL_UART_MspInit+0xf4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a2b      	ldr	r2, [pc, #172]	; (8001640 <HAL_UART_MspInit+0xf4>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <HAL_UART_MspInit+0xf4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015a6:	230c      	movs	r3, #12
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b6:	2307      	movs	r3, #7
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4820      	ldr	r0, [pc, #128]	; (8001644 <HAL_UART_MspInit+0xf8>)
 80015c2:	f000 ffc9 	bl	8002558 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015c8:	4a20      	ldr	r2, [pc, #128]	; (800164c <HAL_UART_MspInit+0x100>)
 80015ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_UART_MspInit+0xfc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_UART_MspInit+0xfc>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001608:	480f      	ldr	r0, [pc, #60]	; (8001648 <HAL_UART_MspInit+0xfc>)
 800160a:	f000 fc15 	bl	8001e38 <HAL_DMA_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001614:	f7ff fe9a 	bl	800134c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <HAL_UART_MspInit+0xfc>)
 800161c:	635a      	str	r2, [r3, #52]	; 0x34
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_UART_MspInit+0xfc>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	2026      	movs	r0, #38	; 0x26
 800162a:	f000 fad4 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800162e:	2026      	movs	r0, #38	; 0x26
 8001630:	f000 faed 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40004400 	.word	0x40004400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	200000c4 	.word	0x200000c4
 800164c:	40026088 	.word	0x40026088

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f000 f97e 	bl	800199c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DMA1_Stream5_IRQHandler+0x10>)
 80016aa:	f000 fced 	bl	8002088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200000c4 	.word	0x200000c4

080016b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <USART2_IRQHandler+0x10>)
 80016be:	f003 fcd7 	bl	8005070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200001ec 	.word	0x200001ec

080016cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <OTG_FS_IRQHandler+0x10>)
 80016d2:	f001 fb9f 	bl	8002e14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000608 	.word	0x20000608

080016e0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <ITM_SendChar+0x48>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <ITM_SendChar+0x48>)
 80016f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <ITM_SendChar+0x4c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a0c      	ldr	r2, [pc, #48]	; (800172c <ITM_SendChar+0x4c>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001702:	bf00      	nop
 8001704:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f8      	beq.n	8001704 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001712:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	6013      	str	r3, [r2, #0]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000edfc 	.word	0xe000edfc
 800172c:	e0000e00 	.word	0xe0000e00

08001730 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e00a      	b.n	8001758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001742:	f3af 8000 	nop.w
 8001746:	4601      	mov	r1, r0
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf0      	blt.n	8001742 <_read+0x12>
	}

return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e009      	b.n	8001790 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ffab 	bl	80016e0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf1      	blt.n	800177c <_write+0x12>
	}
	return len;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_close>:

int _close(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ca:	605a      	str	r2, [r3, #4]
	return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_isatty>:

int _isatty(int file)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	return 1;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f007 fbce 	bl	8008fdc <__errno>
 8001840:	4602      	mov	r2, r0
 8001842:	230c      	movs	r3, #12
 8001844:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20020000 	.word	0x20020000
 800186c:	00000400 	.word	0x00000400
 8001870:	200000b0 	.word	0x200000b0
 8001874:	200008d0 	.word	0x200008d0

08001878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <SystemInit+0x28>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <SystemInit+0x28>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <SystemInit+0x28>)
 800188e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001892:	609a      	str	r2, [r3, #8]
#endif
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018aa:	e003      	b.n	80018b4 <LoopCopyDataInit>

080018ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018b2:	3104      	adds	r1, #4

080018b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018bc:	d3f6      	bcc.n	80018ac <CopyDataInit>
  ldr  r2, =_sbss
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018c0:	e002      	b.n	80018c8 <LoopFillZerobss>

080018c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018c4:	f842 3b04 	str.w	r3, [r2], #4

080018c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018cc:	d3f9      	bcc.n	80018c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ce:	f7ff ffd3 	bl	8001878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d2:	f007 fb89 	bl	8008fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d6:	f7ff fa3b 	bl	8000d50 <main>
  bx  lr    
 80018da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018e0:	08009fd4 	.word	0x08009fd4
  ldr  r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018e8:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80018ec:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 80018f0:	200008d0 	.word	0x200008d0

080018f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_Init+0x40>)
 8001902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_Init+0x40>)
 800190e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_Init+0x40>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 f94d 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f808 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f7ff fd12 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x54>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_InitTick+0x58>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	fbb3 f3f1 	udiv	r3, r3, r1
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f965 	bl	8001c2a <HAL_SYSTICK_Config>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00e      	b.n	8001988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d80a      	bhi.n	8001986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001978:	f000 f92d 	bl	8001bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <HAL_InitTick+0x5c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000004 	.word	0x20000004
 8001994:	2000000c 	.word	0x2000000c
 8001998:	20000008 	.word	0x20000008

0800199c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x20>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x24>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_IncTick+0x24>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	2000000c 	.word	0x2000000c
 80019c0:	2000022c 	.word	0x2000022c

080019c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_GetTick+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	2000022c 	.word	0x2000022c

080019dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e4:	f7ff ffee 	bl	80019c4 <HAL_GetTick>
 80019e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f4:	d005      	beq.n	8001a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_Delay+0x40>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a02:	bf00      	nop
 8001a04:	f7ff ffde 	bl	80019c4 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d8f7      	bhi.n	8001a04 <HAL_Delay+0x28>
  {
  }
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000000c 	.word	0x2000000c

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4907      	ldr	r1, [pc, #28]	; (8001abc <__NVIC_EnableIRQ+0x38>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	; (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	; (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b8c:	d301      	bcc.n	8001b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00f      	b.n	8001bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <SysTick_Config+0x40>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba0:	f7ff ff8e 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SysTick_Config+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <SysTick_Config+0x40>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff29 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be8:	f7ff ff3e 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f7ff ff8e 	bl	8001b14 <NVIC_EncodePriority>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff5d 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff31 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffa2 	bl	8001b7c <SysTick_Config>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e014      	b.n	8001c7e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	791b      	ldrb	r3, [r3, #4]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff fb9d 	bl	80013a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	795b      	ldrb	r3, [r3, #5]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_DAC_Start+0x1e>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e050      	b.n	8001d46 <HAL_DAC_Start+0xc0>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2202      	movs	r2, #2
 8001cae:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6819      	ldr	r1, [r3, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d11a      	bne.n	8001d00 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ce0:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d127      	bne.n	8001d38 <HAL_DAC_Start+0xb2>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b38      	cmp	r3, #56	; 0x38
 8001cec:	d124      	bne.n	8001d38 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	e01b      	b.n	8001d38 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d0a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8001d16:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d1e:	d10b      	bne.n	8001d38 <HAL_DAC_Start+0xb2>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001d26:	d107      	bne.n	8001d38 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0202 	orr.w	r2, r2, #2
 8001d36:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b087      	sub	sp, #28
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	795b      	ldrb	r3, [r3, #5]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_DAC_ConfigChannel+0x20>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e036      	b.n	8001de0 <HAL_DAC_ConfigChannel+0x8e>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001d86:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4013      	ands	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6819      	ldr	r1, [r3, #0]
 8001dc0:	22c0      	movs	r2, #192	; 0xc0
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	400a      	ands	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d105      	bne.n	8001e16 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	3308      	adds	r3, #8
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	e004      	b.n	8001e20 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3314      	adds	r3, #20
 8001e1e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	461a      	mov	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	371c      	adds	r7, #28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff fdbe 	bl	80019c4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e099      	b.n	8001f88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e74:	e00f      	b.n	8001e96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e76:	f7ff fda5 	bl	80019c4 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d908      	bls.n	8001e96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e078      	b.n	8001f88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1e8      	bne.n	8001e76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_DMA_Init+0x158>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d107      	bne.n	8001f00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f023 0307 	bic.w	r3, r3, #7
 8001f16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d117      	bne.n	8001f5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00e      	beq.n	8001f5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fa91 	bl	8002464 <DMA_CheckFifoParam>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f56:	2301      	movs	r3, #1
 8001f58:	e016      	b.n	8001f88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fa48 	bl	80023f8 <DMA_CalcBaseAndBitshift>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	223f      	movs	r2, #63	; 0x3f
 8001f72:	409a      	lsls	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	f010803f 	.word	0xf010803f

08001f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_DMA_Start_IT+0x26>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e040      	b.n	800203c <HAL_DMA_Start_IT+0xa8>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d12f      	bne.n	800202e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f9da 	bl	800239c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fec:	223f      	movs	r2, #63	; 0x3f
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0216 	orr.w	r2, r2, #22
 8002002:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0208 	orr.w	r2, r2, #8
 800201a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e005      	b.n	800203a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002036:	2302      	movs	r3, #2
 8002038:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800203a:	7dfb      	ldrb	r3, [r7, #23]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d004      	beq.n	8002062 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e00c      	b.n	800207c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2205      	movs	r2, #5
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002094:	4b92      	ldr	r3, [pc, #584]	; (80022e0 <HAL_DMA_IRQHandler+0x258>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a92      	ldr	r2, [pc, #584]	; (80022e4 <HAL_DMA_IRQHandler+0x25c>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0a9b      	lsrs	r3, r3, #10
 80020a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	2208      	movs	r2, #8
 80020b4:	409a      	lsls	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d01a      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0204 	bic.w	r2, r2, #4
 80020da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	2208      	movs	r2, #8
 80020e2:	409a      	lsls	r2, r3
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	f043 0201 	orr.w	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	2201      	movs	r2, #1
 80020fa:	409a      	lsls	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d012      	beq.n	800212a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2201      	movs	r2, #1
 8002118:	409a      	lsls	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002122:	f043 0202 	orr.w	r2, r3, #2
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	2204      	movs	r2, #4
 8002130:	409a      	lsls	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d012      	beq.n	8002160 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00b      	beq.n	8002160 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2204      	movs	r2, #4
 800214e:	409a      	lsls	r2, r3
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	f043 0204 	orr.w	r2, r3, #4
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002164:	2210      	movs	r2, #16
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d043      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d03c      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	2210      	movs	r2, #16
 8002184:	409a      	lsls	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d018      	beq.n	80021ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d108      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d024      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
 80021b6:	e01f      	b.n	80021f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01b      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3
 80021c8:	e016      	b.n	80021f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0208 	bic.w	r2, r2, #8
 80021e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	2220      	movs	r2, #32
 80021fe:	409a      	lsls	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 808e 	beq.w	8002326 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 8086 	beq.w	8002326 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2220      	movs	r2, #32
 8002220:	409a      	lsls	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b05      	cmp	r3, #5
 8002230:	d136      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0216 	bic.w	r2, r2, #22
 8002240:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002250:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d103      	bne.n	8002262 <HAL_DMA_IRQHandler+0x1da>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0208 	bic.w	r2, r2, #8
 8002270:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	223f      	movs	r2, #63	; 0x3f
 8002278:	409a      	lsls	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002292:	2b00      	cmp	r3, #0
 8002294:	d07d      	beq.n	8002392 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
        }
        return;
 800229e:	e078      	b.n	8002392 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d01c      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d108      	bne.n	80022ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d030      	beq.n	8002326 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
 80022cc:	e02b      	b.n	8002326 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d027      	beq.n	8002326 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
 80022de:	e022      	b.n	8002326 <HAL_DMA_IRQHandler+0x29e>
 80022e0:	20000004 	.word	0x20000004
 80022e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0210 	bic.w	r2, r2, #16
 8002304:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	2b00      	cmp	r3, #0
 800232c:	d032      	beq.n	8002394 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d022      	beq.n	8002380 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2205      	movs	r2, #5
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3301      	adds	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	429a      	cmp	r2, r3
 800235c:	d307      	bcc.n	800236e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1f2      	bne.n	8002352 <HAL_DMA_IRQHandler+0x2ca>
 800236c:	e000      	b.n	8002370 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800236e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
 8002390:	e000      	b.n	8002394 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002392:	bf00      	nop
    }
  }
}
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop

0800239c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	d108      	bne.n	80023dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023da:	e007      	b.n	80023ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	60da      	str	r2, [r3, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	3b10      	subs	r3, #16
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <DMA_CalcBaseAndBitshift+0x64>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002412:	4a13      	ldr	r2, [pc, #76]	; (8002460 <DMA_CalcBaseAndBitshift+0x68>)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d909      	bls.n	800243a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800242e:	f023 0303 	bic.w	r3, r3, #3
 8002432:	1d1a      	adds	r2, r3, #4
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	659a      	str	r2, [r3, #88]	; 0x58
 8002438:	e007      	b.n	800244a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	aaaaaaab 	.word	0xaaaaaaab
 8002460:	08009f24 	.word	0x08009f24

08002464 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d11f      	bne.n	80024be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d855      	bhi.n	8002530 <DMA_CheckFifoParam+0xcc>
 8002484:	a201      	add	r2, pc, #4	; (adr r2, 800248c <DMA_CheckFifoParam+0x28>)
 8002486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248a:	bf00      	nop
 800248c:	0800249d 	.word	0x0800249d
 8002490:	080024af 	.word	0x080024af
 8002494:	0800249d 	.word	0x0800249d
 8002498:	08002531 	.word	0x08002531
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d045      	beq.n	8002534 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ac:	e042      	b.n	8002534 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024b6:	d13f      	bne.n	8002538 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024bc:	e03c      	b.n	8002538 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c6:	d121      	bne.n	800250c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d836      	bhi.n	800253c <DMA_CheckFifoParam+0xd8>
 80024ce:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <DMA_CheckFifoParam+0x70>)
 80024d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d4:	080024e5 	.word	0x080024e5
 80024d8:	080024eb 	.word	0x080024eb
 80024dc:	080024e5 	.word	0x080024e5
 80024e0:	080024fd 	.word	0x080024fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      break;
 80024e8:	e02f      	b.n	800254a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d024      	beq.n	8002540 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024fa:	e021      	b.n	8002540 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002504:	d11e      	bne.n	8002544 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800250a:	e01b      	b.n	8002544 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d902      	bls.n	8002518 <DMA_CheckFifoParam+0xb4>
 8002512:	2b03      	cmp	r3, #3
 8002514:	d003      	beq.n	800251e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002516:	e018      	b.n	800254a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
      break;
 800251c:	e015      	b.n	800254a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00e      	beq.n	8002548 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
      break;
 800252e:	e00b      	b.n	8002548 <DMA_CheckFifoParam+0xe4>
      break;
 8002530:	bf00      	nop
 8002532:	e00a      	b.n	800254a <DMA_CheckFifoParam+0xe6>
      break;
 8002534:	bf00      	nop
 8002536:	e008      	b.n	800254a <DMA_CheckFifoParam+0xe6>
      break;
 8002538:	bf00      	nop
 800253a:	e006      	b.n	800254a <DMA_CheckFifoParam+0xe6>
      break;
 800253c:	bf00      	nop
 800253e:	e004      	b.n	800254a <DMA_CheckFifoParam+0xe6>
      break;
 8002540:	bf00      	nop
 8002542:	e002      	b.n	800254a <DMA_CheckFifoParam+0xe6>
      break;   
 8002544:	bf00      	nop
 8002546:	e000      	b.n	800254a <DMA_CheckFifoParam+0xe6>
      break;
 8002548:	bf00      	nop
    }
  } 
  
  return status; 
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	e16b      	b.n	800284c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	429a      	cmp	r2, r3
 800258e:	f040 815a 	bne.w	8002846 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d00b      	beq.n	80025b2 <HAL_GPIO_Init+0x5a>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025a6:	2b11      	cmp	r3, #17
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b12      	cmp	r3, #18
 80025b0:	d130      	bne.n	8002614 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	2203      	movs	r2, #3
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e8:	2201      	movs	r2, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 0201 	and.w	r2, r3, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0xfc>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b12      	cmp	r3, #18
 8002652:	d123      	bne.n	800269c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	08da      	lsrs	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3208      	adds	r2, #8
 800265c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3208      	adds	r2, #8
 8002696:	69b9      	ldr	r1, [r7, #24]
 8002698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0203 	and.w	r2, r3, #3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80b4 	beq.w	8002846 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b5f      	ldr	r3, [pc, #380]	; (8002860 <HAL_GPIO_Init+0x308>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a5e      	ldr	r2, [pc, #376]	; (8002860 <HAL_GPIO_Init+0x308>)
 80026e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b5c      	ldr	r3, [pc, #368]	; (8002860 <HAL_GPIO_Init+0x308>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fa:	4a5a      	ldr	r2, [pc, #360]	; (8002864 <HAL_GPIO_Init+0x30c>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a51      	ldr	r2, [pc, #324]	; (8002868 <HAL_GPIO_Init+0x310>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02b      	beq.n	800277e <HAL_GPIO_Init+0x226>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a50      	ldr	r2, [pc, #320]	; (800286c <HAL_GPIO_Init+0x314>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d025      	beq.n	800277a <HAL_GPIO_Init+0x222>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4f      	ldr	r2, [pc, #316]	; (8002870 <HAL_GPIO_Init+0x318>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01f      	beq.n	8002776 <HAL_GPIO_Init+0x21e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4e      	ldr	r2, [pc, #312]	; (8002874 <HAL_GPIO_Init+0x31c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d019      	beq.n	8002772 <HAL_GPIO_Init+0x21a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4d      	ldr	r2, [pc, #308]	; (8002878 <HAL_GPIO_Init+0x320>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0x216>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4c      	ldr	r2, [pc, #304]	; (800287c <HAL_GPIO_Init+0x324>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_GPIO_Init+0x212>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4b      	ldr	r2, [pc, #300]	; (8002880 <HAL_GPIO_Init+0x328>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x20e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4a      	ldr	r2, [pc, #296]	; (8002884 <HAL_GPIO_Init+0x32c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_GPIO_Init+0x20a>
 800275e:	2307      	movs	r3, #7
 8002760:	e00e      	b.n	8002780 <HAL_GPIO_Init+0x228>
 8002762:	2308      	movs	r3, #8
 8002764:	e00c      	b.n	8002780 <HAL_GPIO_Init+0x228>
 8002766:	2306      	movs	r3, #6
 8002768:	e00a      	b.n	8002780 <HAL_GPIO_Init+0x228>
 800276a:	2305      	movs	r3, #5
 800276c:	e008      	b.n	8002780 <HAL_GPIO_Init+0x228>
 800276e:	2304      	movs	r3, #4
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x228>
 8002772:	2303      	movs	r3, #3
 8002774:	e004      	b.n	8002780 <HAL_GPIO_Init+0x228>
 8002776:	2302      	movs	r3, #2
 8002778:	e002      	b.n	8002780 <HAL_GPIO_Init+0x228>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x228>
 800277e:	2300      	movs	r3, #0
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f002 0203 	and.w	r2, r2, #3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4093      	lsls	r3, r2
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002790:	4934      	ldr	r1, [pc, #208]	; (8002864 <HAL_GPIO_Init+0x30c>)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279e:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <HAL_GPIO_Init+0x330>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c2:	4a31      	ldr	r2, [pc, #196]	; (8002888 <HAL_GPIO_Init+0x330>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027c8:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_GPIO_Init+0x330>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ec:	4a26      	ldr	r2, [pc, #152]	; (8002888 <HAL_GPIO_Init+0x330>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027f2:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_GPIO_Init+0x330>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002816:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_GPIO_Init+0x330>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_GPIO_Init+0x330>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002840:	4a11      	ldr	r2, [pc, #68]	; (8002888 <HAL_GPIO_Init+0x330>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	f67f ae90 	bls.w	8002574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002854:	bf00      	nop
 8002856:	3724      	adds	r7, #36	; 0x24
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40023800 	.word	0x40023800
 8002864:	40013800 	.word	0x40013800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40020800 	.word	0x40020800
 8002874:	40020c00 	.word	0x40020c00
 8002878:	40021000 	.word	0x40021000
 800287c:	40021400 	.word	0x40021400
 8002880:	40021800 	.word	0x40021800
 8002884:	40021c00 	.word	0x40021c00
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a8:	e003      	b.n	80028b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	619a      	str	r2, [r3, #24]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	401a      	ands	r2, r3
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d104      	bne.n	80028e2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028d8:	887b      	ldrh	r3, [r7, #2]
 80028da:	041a      	lsls	r2, r3, #16
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80028f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f6:	b08f      	sub	sp, #60	; 0x3c
 80028f8:	af0a      	add	r7, sp, #40	; 0x28
 80028fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e054      	b.n	80029b0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d106      	bne.n	8002926 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f006 f8b1 	bl	8008a88 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2203      	movs	r2, #3
 800292a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f003 fa6d 	bl	8005e24 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	687e      	ldr	r6, [r7, #4]
 8002952:	466d      	mov	r5, sp
 8002954:	f106 0410 	add.w	r4, r6, #16
 8002958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800295a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800295e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002960:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002964:	e885 0003 	stmia.w	r5, {r0, r1}
 8002968:	1d33      	adds	r3, r6, #4
 800296a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800296c:	6838      	ldr	r0, [r7, #0]
 800296e:	f003 f9e7 	bl	8005d40 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2101      	movs	r1, #1
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fa64 	bl	8005e46 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	687e      	ldr	r6, [r7, #4]
 8002986:	466d      	mov	r5, sp
 8002988:	f106 0410 	add.w	r4, r6, #16
 800298c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002994:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002998:	e885 0003 	stmia.w	r5, {r0, r1}
 800299c:	1d33      	adds	r3, r6, #4
 800299e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a0:	6838      	ldr	r0, [r7, #0]
 80029a2:	f003 fb77 	bl	8006094 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029b8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af04      	add	r7, sp, #16
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	4608      	mov	r0, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	70fb      	strb	r3, [r7, #3]
 80029ca:	460b      	mov	r3, r1
 80029cc:	70bb      	strb	r3, [r7, #2]
 80029ce:	4613      	mov	r3, r2
 80029d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_HCD_HC_Init+0x28>
 80029dc:	2302      	movs	r3, #2
 80029de:	e07f      	b.n	8002ae0 <HAL_HCD_HC_Init+0x128>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	333d      	adds	r3, #61	; 0x3d
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	3338      	adds	r3, #56	; 0x38
 8002a0c:	787a      	ldrb	r2, [r7, #1]
 8002a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3340      	adds	r3, #64	; 0x40
 8002a20:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a22:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	3339      	adds	r3, #57	; 0x39
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	333f      	adds	r3, #63	; 0x3f
 8002a48:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002a4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	78bb      	ldrb	r3, [r7, #2]
 8002a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a56:	b2d8      	uxtb	r0, r3
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	333a      	adds	r3, #58	; 0x3a
 8002a66:	4602      	mov	r2, r0
 8002a68:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002a6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	da0a      	bge.n	8002a88 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	333b      	adds	r3, #59	; 0x3b
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e009      	b.n	8002a9c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	333b      	adds	r3, #59	; 0x3b
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	333c      	adds	r3, #60	; 0x3c
 8002aac:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ab0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	787c      	ldrb	r4, [r7, #1]
 8002ab8:	78ba      	ldrb	r2, [r7, #2]
 8002aba:	78f9      	ldrb	r1, [r7, #3]
 8002abc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002abe:	9302      	str	r3, [sp, #8]
 8002ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4623      	mov	r3, r4
 8002ace:	f003 fc63 	bl	8006398 <USB_HC_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_HCD_HC_Halt+0x1e>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e00f      	b.n	8002b26 <HAL_HCD_HC_Halt+0x3e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 fe9f 	bl	800685a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	4608      	mov	r0, r1
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	70fb      	strb	r3, [r7, #3]
 8002b42:	460b      	mov	r3, r1
 8002b44:	70bb      	strb	r3, [r7, #2]
 8002b46:	4613      	mov	r3, r2
 8002b48:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	333b      	adds	r3, #59	; 0x3b
 8002b5a:	78ba      	ldrb	r2, [r7, #2]
 8002b5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	333f      	adds	r3, #63	; 0x3f
 8002b6e:	787a      	ldrb	r2, [r7, #1]
 8002b70:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b72:	7c3b      	ldrb	r3, [r7, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d114      	bne.n	8002ba2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	3342      	adds	r3, #66	; 0x42
 8002b88:	2203      	movs	r2, #3
 8002b8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	333d      	adds	r3, #61	; 0x3d
 8002b9c:	7f3a      	ldrb	r2, [r7, #28]
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e009      	b.n	8002bb6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	3342      	adds	r3, #66	; 0x42
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002bb6:	787b      	ldrb	r3, [r7, #1]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	f200 80d6 	bhi.w	8002d6a <HAL_HCD_HC_SubmitRequest+0x23a>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002bd5 	.word	0x08002bd5
 8002bc8:	08002d55 	.word	0x08002d55
 8002bcc:	08002c41 	.word	0x08002c41
 8002bd0:	08002ccb 	.word	0x08002ccb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002bd4:	7c3b      	ldrb	r3, [r7, #16]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	f040 80c9 	bne.w	8002d6e <HAL_HCD_HC_SubmitRequest+0x23e>
 8002bdc:	78bb      	ldrb	r3, [r7, #2]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 80c5 	bne.w	8002d6e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002be4:	8b3b      	ldrh	r3, [r7, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3351      	adds	r3, #81	; 0x51
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3351      	adds	r3, #81	; 0x51
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	3342      	adds	r3, #66	; 0x42
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c28:	e0a1      	b.n	8002d6e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	3342      	adds	r3, #66	; 0x42
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	701a      	strb	r2, [r3, #0]
      break;
 8002c3e:	e096      	b.n	8002d6e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c40:	78bb      	ldrb	r3, [r7, #2]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d120      	bne.n	8002c88 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	3351      	adds	r3, #81	; 0x51
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	440b      	add	r3, r1
 8002c6a:	3342      	adds	r3, #66	; 0x42
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c70:	e07e      	b.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	3342      	adds	r3, #66	; 0x42
 8002c82:	2202      	movs	r2, #2
 8002c84:	701a      	strb	r2, [r3, #0]
      break;
 8002c86:	e073      	b.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	3350      	adds	r3, #80	; 0x50
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	3342      	adds	r3, #66	; 0x42
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
      break;
 8002cb2:	e05d      	b.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3342      	adds	r3, #66	; 0x42
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	701a      	strb	r2, [r3, #0]
      break;
 8002cc8:	e052      	b.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002cca:	78bb      	ldrb	r3, [r7, #2]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d120      	bne.n	8002d12 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	3351      	adds	r3, #81	; 0x51
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10a      	bne.n	8002cfc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3342      	adds	r3, #66	; 0x42
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002cfa:	e039      	b.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	3342      	adds	r3, #66	; 0x42
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]
      break;
 8002d10:	e02e      	b.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	3350      	adds	r3, #80	; 0x50
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	3342      	adds	r3, #66	; 0x42
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
      break;
 8002d3c:	e018      	b.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3342      	adds	r3, #66	; 0x42
 8002d4e:	2202      	movs	r2, #2
 8002d50:	701a      	strb	r2, [r3, #0]
      break;
 8002d52:	e00d      	b.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	3342      	adds	r3, #66	; 0x42
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
      break;
 8002d68:	e002      	b.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002d6a:	bf00      	nop
 8002d6c:	e000      	b.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002d6e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3344      	adds	r3, #68	; 0x44
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	8b39      	ldrh	r1, [r7, #24]
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4403      	add	r3, r0
 8002d94:	3348      	adds	r3, #72	; 0x48
 8002d96:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	440b      	add	r3, r1
 8002da6:	335c      	adds	r3, #92	; 0x5c
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	334c      	adds	r3, #76	; 0x4c
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	3339      	adds	r3, #57	; 0x39
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	335d      	adds	r3, #93	; 0x5d
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	3338      	adds	r3, #56	; 0x38
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	18d1      	adds	r1, r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	f003 fbd2 	bl	80065ac <USB_HC_StartXfer>
 8002e08:	4603      	mov	r3, r0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop

08002e14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 f8ef 	bl	800600e <USB_GetMode>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	f040 80ef 	bne.w	8003016 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 f8d3 	bl	8005fe8 <USB_ReadInterrupts>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80e5 	beq.w	8003014 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f003 f8ca 	bl	8005fe8 <USB_ReadInterrupts>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e5e:	d104      	bne.n	8002e6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f003 f8ba 	bl	8005fe8 <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7e:	d104      	bne.n	8002e8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 f8aa 	bl	8005fe8 <USB_ReadInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e9e:	d104      	bne.n	8002eaa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ea8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 f89a 	bl	8005fe8 <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d103      	bne.n	8002ec6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 f88c 	bl	8005fe8 <USB_ReadInterrupts>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eda:	d115      	bne.n	8002f08 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ee4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d108      	bne.n	8002f08 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f005 fe44 	bl	8008b84 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 f982 	bl	800620c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 f86b 	bl	8005fe8 <USB_ReadInterrupts>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f1c:	d102      	bne.n	8002f24 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f001 f966 	bl	80041f0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 f85d 	bl	8005fe8 <USB_ReadInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d106      	bne.n	8002f46 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f005 fe07 	bl	8008b4c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2208      	movs	r2, #8
 8002f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 f84c 	bl	8005fe8 <USB_ReadInterrupts>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f5a:	d138      	bne.n	8002fce <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fc69 	bl	8006838 <USB_HC_ReadInterrupt>
 8002f66:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	e025      	b.n	8002fba <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d018      	beq.n	8002fb4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f98:	d106      	bne.n	8002fa8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f8cf 	bl	8003144 <HCD_HC_IN_IRQHandler>
 8002fa6:	e005      	b.n	8002fb4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fcfd 	bl	80039ae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d3d4      	bcc.n	8002f6e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f003 f808 	bl	8005fe8 <USB_ReadInterrupts>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b10      	cmp	r3, #16
 8002fe0:	d101      	bne.n	8002fe6 <HAL_HCD_IRQHandler+0x1d2>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_HCD_IRQHandler+0x1d4>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d014      	beq.n	8003016 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0210 	bic.w	r2, r2, #16
 8002ffa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f001 f84b 	bl	8004098 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0210 	orr.w	r2, r2, #16
 8003010:	619a      	str	r2, [r3, #24]
 8003012:	e000      	b.n	8003016 <HAL_HCD_IRQHandler+0x202>
      return;
 8003014:	bf00      	nop
    }
  }
}
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_HCD_Start+0x16>
 800302e:	2302      	movs	r3, #2
 8003030:	e013      	b.n	800305a <HAL_HCD_Start+0x3e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f002 fedf 	bl	8005e02 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2101      	movs	r1, #1
 800304a:	4618      	mov	r0, r3
 800304c:	f003 f942 	bl	80062d4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_HCD_Stop+0x16>
 8003074:	2302      	movs	r3, #2
 8003076:	e00d      	b.n	8003094 <HAL_HCD_Stop+0x32>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f003 fd23 	bl	8006ad0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 f8e9 	bl	8006280 <USB_ResetPort>
 80030ae:	4603      	mov	r3, r0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	335c      	adds	r3, #92	; 0x5c
 80030d4:	781b      	ldrb	r3, [r3, #0]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	440b      	add	r3, r1
 80030fc:	334c      	adds	r3, #76	; 0x4c
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f003 f92b 	bl	8006374 <USB_GetCurrentFrame>
 800311e:	4603      	mov	r3, r0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f003 f906 	bl	8006346 <USB_GetHostSpeed>
 800313a:	4603      	mov	r3, r0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b04      	cmp	r3, #4
 8003172:	d119      	bne.n	80031a8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	461a      	mov	r2, r3
 8003182:	2304      	movs	r3, #4
 8003184:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	0151      	lsls	r1, r2, #5
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	440a      	add	r2, r1
 800319c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a0:	f043 0302 	orr.w	r3, r3, #2
 80031a4:	60d3      	str	r3, [r2, #12]
 80031a6:	e0ce      	b.n	8003346 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031be:	d12c      	bne.n	800321a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031cc:	461a      	mov	r2, r3
 80031ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	440b      	add	r3, r1
 80031e2:	335d      	adds	r3, #93	; 0x5d
 80031e4:	2207      	movs	r2, #7
 80031e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	0151      	lsls	r1, r2, #5
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	440a      	add	r2, r1
 80031fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003202:	f043 0302 	orr.w	r3, r3, #2
 8003206:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f003 fb21 	bl	800685a <USB_HC_Halt>
 8003218:	e095      	b.n	8003346 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b20      	cmp	r3, #32
 800322e:	d109      	bne.n	8003244 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	461a      	mov	r2, r3
 800323e:	2320      	movs	r3, #32
 8003240:	6093      	str	r3, [r2, #8]
 8003242:	e080      	b.n	8003346 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4413      	add	r3, r2
 800324c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b08      	cmp	r3, #8
 8003258:	d134      	bne.n	80032c4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	0151      	lsls	r1, r2, #5
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	440a      	add	r2, r1
 8003270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	440b      	add	r3, r1
 8003288:	335d      	adds	r3, #93	; 0x5d
 800328a:	2205      	movs	r2, #5
 800328c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4413      	add	r3, r2
 8003296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329a:	461a      	mov	r2, r3
 800329c:	2310      	movs	r3, #16
 800329e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	461a      	mov	r2, r3
 80032ae:	2308      	movs	r3, #8
 80032b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f003 facc 	bl	800685a <USB_HC_Halt>
 80032c2:	e040      	b.n	8003346 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	d134      	bne.n	8003346 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	0151      	lsls	r1, r2, #5
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	440a      	add	r2, r1
 80032f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032f6:	f043 0302 	orr.w	r3, r3, #2
 80032fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f003 faa7 	bl	800685a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003318:	461a      	mov	r2, r3
 800331a:	2310      	movs	r3, #16
 800331c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	335d      	adds	r3, #93	; 0x5d
 800332e:	2208      	movs	r2, #8
 8003330:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4413      	add	r3, r2
 800333a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333e:	461a      	mov	r2, r3
 8003340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003344:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335c:	d122      	bne.n	80033a4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4413      	add	r3, r2
 8003366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	0151      	lsls	r1, r2, #5
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	440a      	add	r2, r1
 8003374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f003 fa66 	bl	800685a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	461a      	mov	r2, r3
 800339c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80033a2:	e300      	b.n	80039a6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	f040 80fd 	bne.w	80035b6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01b      	beq.n	80033fc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	3348      	adds	r3, #72	; 0x48
 80033d4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	0159      	lsls	r1, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	440b      	add	r3, r1
 80033de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80033e8:	1ad1      	subs	r1, r2, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4403      	add	r3, r0
 80033f8:	334c      	adds	r3, #76	; 0x4c
 80033fa:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	440b      	add	r3, r1
 800340a:	335d      	adds	r3, #93	; 0x5d
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	3358      	adds	r3, #88	; 0x58
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	461a      	mov	r2, r3
 8003432:	2301      	movs	r3, #1
 8003434:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	333f      	adds	r3, #63	; 0x3f
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	440b      	add	r3, r1
 800345a:	333f      	adds	r3, #63	; 0x3f
 800345c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800345e:	2b02      	cmp	r3, #2
 8003460:	d121      	bne.n	80034a6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	0151      	lsls	r1, r2, #5
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	440a      	add	r2, r1
 8003478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f003 f9e4 	bl	800685a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349e:	461a      	mov	r2, r3
 80034a0:	2310      	movs	r3, #16
 80034a2:	6093      	str	r3, [r2, #8]
 80034a4:	e070      	b.n	8003588 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	333f      	adds	r3, #63	; 0x3f
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d12a      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	0151      	lsls	r1, r2, #5
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	440a      	add	r2, r1
 80034d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034da:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	335c      	adds	r3, #92	; 0x5c
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	b2d8      	uxtb	r0, r3
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	440b      	add	r3, r1
 8003502:	335c      	adds	r3, #92	; 0x5c
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	4601      	mov	r1, r0
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f005 fb48 	bl	8008ba0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003510:	e03a      	b.n	8003588 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	440b      	add	r3, r1
 8003520:	333f      	adds	r3, #63	; 0x3f
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d12f      	bne.n	8003588 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	335c      	adds	r3, #92	; 0x5c
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	3350      	adds	r3, #80	; 0x50
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	f083 0301 	eor.w	r3, r3, #1
 8003552:	b2d8      	uxtb	r0, r3
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	440b      	add	r3, r1
 8003562:	3350      	adds	r3, #80	; 0x50
 8003564:	4602      	mov	r2, r0
 8003566:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	b2d8      	uxtb	r0, r3
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	440b      	add	r3, r1
 800357a:	335c      	adds	r3, #92	; 0x5c
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	4601      	mov	r1, r0
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f005 fb0c 	bl	8008ba0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	3350      	adds	r3, #80	; 0x50
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	f083 0301 	eor.w	r3, r3, #1
 800359e:	b2d8      	uxtb	r0, r3
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	440b      	add	r3, r1
 80035ae:	3350      	adds	r3, #80	; 0x50
 80035b0:	4602      	mov	r2, r0
 80035b2:	701a      	strb	r2, [r3, #0]
}
 80035b4:	e1f7      	b.n	80039a6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	f040 811a 	bne.w	8003802 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	0151      	lsls	r1, r2, #5
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	440a      	add	r2, r1
 80035e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035e8:	f023 0302 	bic.w	r3, r3, #2
 80035ec:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	440b      	add	r3, r1
 80035fc:	335d      	adds	r3, #93	; 0x5d
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d10a      	bne.n	800361a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	335c      	adds	r3, #92	; 0x5c
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	e0d9      	b.n	80037ce <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	335d      	adds	r3, #93	; 0x5d
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b05      	cmp	r3, #5
 800362e:	d10a      	bne.n	8003646 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	335c      	adds	r3, #92	; 0x5c
 8003640:	2205      	movs	r2, #5
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	e0c3      	b.n	80037ce <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	335d      	adds	r3, #93	; 0x5d
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b06      	cmp	r3, #6
 800365a:	d00a      	beq.n	8003672 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	335d      	adds	r3, #93	; 0x5d
 800366c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800366e:	2b08      	cmp	r3, #8
 8003670:	d156      	bne.n	8003720 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	440b      	add	r3, r1
 8003680:	3358      	adds	r3, #88	; 0x58
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	1c59      	adds	r1, r3, #1
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4403      	add	r3, r0
 8003694:	3358      	adds	r3, #88	; 0x58
 8003696:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	440b      	add	r3, r1
 80036a6:	3358      	adds	r3, #88	; 0x58
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d914      	bls.n	80036d8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	440b      	add	r3, r1
 80036bc:	3358      	adds	r3, #88	; 0x58
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	335c      	adds	r3, #92	; 0x5c
 80036d2:	2204      	movs	r2, #4
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	e009      	b.n	80036ec <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	440b      	add	r3, r1
 80036e6:	335c      	adds	r3, #92	; 0x5c
 80036e8:	2202      	movs	r2, #2
 80036ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003702:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800370a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003718:	461a      	mov	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e056      	b.n	80037ce <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	440b      	add	r3, r1
 800372e:	335d      	adds	r3, #93	; 0x5d
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d123      	bne.n	800377e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	440b      	add	r3, r1
 8003744:	335c      	adds	r3, #92	; 0x5c
 8003746:	2202      	movs	r2, #2
 8003748:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4413      	add	r3, r2
 8003752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003760:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003768:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003776:	461a      	mov	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	e027      	b.n	80037ce <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	440b      	add	r3, r1
 800378c:	335d      	adds	r3, #93	; 0x5d
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b07      	cmp	r3, #7
 8003792:	d11c      	bne.n	80037ce <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	440b      	add	r3, r1
 80037a2:	3358      	adds	r3, #88	; 0x58
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	1c59      	adds	r1, r3, #1
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4403      	add	r3, r0
 80037b6:	3358      	adds	r3, #88	; 0x58
 80037b8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	440b      	add	r3, r1
 80037c8:	335c      	adds	r3, #92	; 0x5c
 80037ca:	2204      	movs	r2, #4
 80037cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	461a      	mov	r2, r3
 80037dc:	2302      	movs	r3, #2
 80037de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	b2d8      	uxtb	r0, r3
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	440b      	add	r3, r1
 80037f2:	335c      	adds	r3, #92	; 0x5c
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	4601      	mov	r1, r0
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f005 f9d0 	bl	8008ba0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003800:	e0d1      	b.n	80039a6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d13e      	bne.n	8003896 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4413      	add	r3, r2
 8003820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	0151      	lsls	r1, r2, #5
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	440a      	add	r2, r1
 800382e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003832:	f043 0302 	orr.w	r3, r3, #2
 8003836:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	440b      	add	r3, r1
 8003846:	3358      	adds	r3, #88	; 0x58
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	1c59      	adds	r1, r3, #1
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4403      	add	r3, r0
 800385a:	3358      	adds	r3, #88	; 0x58
 800385c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	440b      	add	r3, r1
 800386c:	335d      	adds	r3, #93	; 0x5d
 800386e:	2206      	movs	r2, #6
 8003870:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f002 ffec 	bl	800685a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388e:	461a      	mov	r2, r3
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	6093      	str	r3, [r2, #8]
}
 8003894:	e087      	b.n	80039a6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4413      	add	r3, r2
 800389e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d17c      	bne.n	80039a6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	440b      	add	r3, r1
 80038ba:	333f      	adds	r3, #63	; 0x3f
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d122      	bne.n	8003908 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	440b      	add	r3, r1
 80038d0:	3358      	adds	r3, #88	; 0x58
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	0151      	lsls	r1, r2, #5
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	440a      	add	r2, r1
 80038ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038f0:	f043 0302 	orr.w	r3, r3, #2
 80038f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f002 ffaa 	bl	800685a <USB_HC_Halt>
 8003906:	e045      	b.n	8003994 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	440b      	add	r3, r1
 8003916:	333f      	adds	r3, #63	; 0x3f
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	440b      	add	r3, r1
 800392c:	333f      	adds	r3, #63	; 0x3f
 800392e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003930:	2b02      	cmp	r3, #2
 8003932:	d12f      	bne.n	8003994 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	3358      	adds	r3, #88	; 0x58
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d121      	bne.n	8003994 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	440b      	add	r3, r1
 800395e:	335d      	adds	r3, #93	; 0x5d
 8003960:	2203      	movs	r2, #3
 8003962:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	0151      	lsls	r1, r2, #5
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	440a      	add	r2, r1
 800397a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800397e:	f043 0302 	orr.w	r3, r3, #2
 8003982:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f002 ff63 	bl	800685a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4413      	add	r3, r2
 800399c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a0:	461a      	mov	r2, r3
 80039a2:	2310      	movs	r3, #16
 80039a4:	6093      	str	r3, [r2, #8]
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d119      	bne.n	8003a12 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ea:	461a      	mov	r2, r3
 80039ec:	2304      	movs	r3, #4
 80039ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	0151      	lsls	r1, r2, #5
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	440a      	add	r2, r1
 8003a06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a0a:	f043 0302 	orr.w	r3, r3, #2
 8003a0e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003a10:	e33e      	b.n	8004090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d141      	bne.n	8003aac <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	461a      	mov	r2, r3
 8003a36:	2320      	movs	r3, #32
 8003a38:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	440b      	add	r3, r1
 8003a48:	333d      	adds	r3, #61	; 0x3d
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	f040 831f 	bne.w	8004090 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	440b      	add	r3, r1
 8003a60:	333d      	adds	r3, #61	; 0x3d
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	440b      	add	r3, r1
 8003a74:	335c      	adds	r3, #92	; 0x5c
 8003a76:	2202      	movs	r2, #2
 8003a78:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f002 fed8 	bl	800685a <USB_HC_Halt>
}
 8003aaa:	e2f1      	b.n	8004090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d13f      	bne.n	8003b42 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	440b      	add	r3, r1
 8003ad0:	335d      	adds	r3, #93	; 0x5d
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	440b      	add	r3, r1
 8003ae4:	333d      	adds	r3, #61	; 0x3d
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	440b      	add	r3, r1
 8003af8:	3358      	adds	r3, #88	; 0x58
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	0151      	lsls	r1, r2, #5
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	440a      	add	r2, r1
 8003b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b18:	f043 0302 	orr.w	r3, r3, #2
 8003b1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 fe96 	bl	800685a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2340      	movs	r3, #64	; 0x40
 8003b3e:	6093      	str	r3, [r2, #8]
}
 8003b40:	e2a6      	b.n	8004090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b58:	d122      	bne.n	8003ba0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	0151      	lsls	r1, r2, #5
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	440a      	add	r2, r1
 8003b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b74:	f043 0302 	orr.w	r3, r3, #2
 8003b78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f002 fe68 	bl	800685a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b96:	461a      	mov	r2, r3
 8003b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b9c:	6093      	str	r3, [r2, #8]
}
 8003b9e:	e277      	b.n	8004090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d135      	bne.n	8003c22 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	440b      	add	r3, r1
 8003bc4:	3358      	adds	r3, #88	; 0x58
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	0151      	lsls	r1, r2, #5
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	440a      	add	r2, r1
 8003be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003be4:	f043 0302 	orr.w	r3, r3, #2
 8003be8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f002 fe30 	bl	800685a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c06:	461a      	mov	r2, r3
 8003c08:	2301      	movs	r3, #1
 8003c0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	440b      	add	r3, r1
 8003c1a:	335d      	adds	r3, #93	; 0x5d
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
}
 8003c20:	e236      	b.n	8004090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d12b      	bne.n	8003c90 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c44:	461a      	mov	r2, r3
 8003c46:	2308      	movs	r3, #8
 8003c48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	0151      	lsls	r1, r2, #5
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	440a      	add	r2, r1
 8003c60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c64:	f043 0302 	orr.w	r3, r3, #2
 8003c68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f002 fdf0 	bl	800685a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	440b      	add	r3, r1
 8003c88:	335d      	adds	r3, #93	; 0x5d
 8003c8a:	2205      	movs	r2, #5
 8003c8c:	701a      	strb	r2, [r3, #0]
}
 8003c8e:	e1ff      	b.n	8004090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d155      	bne.n	8003d52 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3358      	adds	r3, #88	; 0x58
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	440b      	add	r3, r1
 8003cc8:	335d      	adds	r3, #93	; 0x5d
 8003cca:	2203      	movs	r2, #3
 8003ccc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	440b      	add	r3, r1
 8003cdc:	333d      	adds	r3, #61	; 0x3d
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d114      	bne.n	8003d0e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	440b      	add	r3, r1
 8003cf2:	333c      	adds	r3, #60	; 0x3c
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	440b      	add	r3, r1
 8003d08:	333d      	adds	r3, #61	; 0x3d
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	0151      	lsls	r1, r2, #5
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	440a      	add	r2, r1
 8003d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d28:	f043 0302 	orr.w	r3, r3, #2
 8003d2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f002 fd8e 	bl	800685a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	6093      	str	r3, [r2, #8]
}
 8003d50:	e19e      	b.n	8004090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d12b      	bne.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d82:	f043 0302 	orr.w	r3, r3, #2
 8003d86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f002 fd61 	bl	800685a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	440b      	add	r3, r1
 8003da6:	335d      	adds	r3, #93	; 0x5d
 8003da8:	2206      	movs	r2, #6
 8003daa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db8:	461a      	mov	r2, r3
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	6093      	str	r3, [r2, #8]
}
 8003dbe:	e167      	b.n	8004090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd6:	d135      	bne.n	8003e44 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003df2:	f043 0302 	orr.w	r3, r3, #2
 8003df6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f002 fd29 	bl	800685a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e14:	461a      	mov	r2, r3
 8003e16:	2310      	movs	r3, #16
 8003e18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e26:	461a      	mov	r2, r3
 8003e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	440b      	add	r3, r1
 8003e3c:	335d      	adds	r3, #93	; 0x5d
 8003e3e:	2208      	movs	r2, #8
 8003e40:	701a      	strb	r2, [r3, #0]
}
 8003e42:	e125      	b.n	8004090 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	f040 811a 	bne.w	8004090 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	0151      	lsls	r1, r2, #5
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	440a      	add	r2, r1
 8003e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e76:	f023 0302 	bic.w	r3, r3, #2
 8003e7a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	440b      	add	r3, r1
 8003e8a:	335d      	adds	r3, #93	; 0x5d
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d137      	bne.n	8003f02 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	440b      	add	r3, r1
 8003ea0:	335c      	adds	r3, #92	; 0x5c
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	440b      	add	r3, r1
 8003eb4:	333f      	adds	r3, #63	; 0x3f
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d00b      	beq.n	8003ed4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	440b      	add	r3, r1
 8003eca:	333f      	adds	r3, #63	; 0x3f
 8003ecc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	f040 80c5 	bne.w	800405e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3351      	adds	r3, #81	; 0x51
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	f083 0301 	eor.w	r3, r3, #1
 8003eea:	b2d8      	uxtb	r0, r3
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	440b      	add	r3, r1
 8003efa:	3351      	adds	r3, #81	; 0x51
 8003efc:	4602      	mov	r2, r0
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e0ad      	b.n	800405e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	440b      	add	r3, r1
 8003f10:	335d      	adds	r3, #93	; 0x5d
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d10a      	bne.n	8003f2e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	440b      	add	r3, r1
 8003f26:	335c      	adds	r3, #92	; 0x5c
 8003f28:	2202      	movs	r2, #2
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	e097      	b.n	800405e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	440b      	add	r3, r1
 8003f3c:	335d      	adds	r3, #93	; 0x5d
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d10a      	bne.n	8003f5a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	335c      	adds	r3, #92	; 0x5c
 8003f54:	2202      	movs	r2, #2
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e081      	b.n	800405e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	335d      	adds	r3, #93	; 0x5d
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b05      	cmp	r3, #5
 8003f6e:	d10a      	bne.n	8003f86 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	440b      	add	r3, r1
 8003f7e:	335c      	adds	r3, #92	; 0x5c
 8003f80:	2205      	movs	r2, #5
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	e06b      	b.n	800405e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	440b      	add	r3, r1
 8003f94:	335d      	adds	r3, #93	; 0x5d
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b06      	cmp	r3, #6
 8003f9a:	d00a      	beq.n	8003fb2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	335d      	adds	r3, #93	; 0x5d
 8003fac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d155      	bne.n	800405e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3358      	adds	r3, #88	; 0x58
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1c59      	adds	r1, r3, #1
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4403      	add	r3, r0
 8003fd4:	3358      	adds	r3, #88	; 0x58
 8003fd6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3358      	adds	r3, #88	; 0x58
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d914      	bls.n	8004018 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3358      	adds	r3, #88	; 0x58
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	440b      	add	r3, r1
 8004010:	335c      	adds	r3, #92	; 0x5c
 8004012:	2204      	movs	r2, #4
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	e009      	b.n	800402c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	440b      	add	r3, r1
 8004026:	335c      	adds	r3, #92	; 0x5c
 8004028:	2202      	movs	r2, #2
 800402a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004042:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800404a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4413      	add	r3, r2
 8004054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004058:	461a      	mov	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4413      	add	r3, r2
 8004066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406a:	461a      	mov	r2, r3
 800406c:	2302      	movs	r3, #2
 800406e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	b2d8      	uxtb	r0, r3
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	440b      	add	r3, r1
 8004082:	335c      	adds	r3, #92	; 0x5c
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	4601      	mov	r1, r0
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f004 fd88 	bl	8008ba0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	0c5b      	lsrs	r3, r3, #17
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040cc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d003      	beq.n	80040dc <HCD_RXQLVL_IRQHandler+0x44>
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	f000 8082 	beq.w	80041de <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040da:	e083      	b.n	80041e4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d07f      	beq.n	80041e2 <HCD_RXQLVL_IRQHandler+0x14a>
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	440b      	add	r3, r1
 80040f0:	3344      	adds	r3, #68	; 0x44
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d074      	beq.n	80041e2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	440b      	add	r3, r1
 800410a:	3344      	adds	r3, #68	; 0x44
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	b292      	uxth	r2, r2
 8004112:	4619      	mov	r1, r3
 8004114:	f001 ff3f 	bl	8005f96 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	440b      	add	r3, r1
 8004126:	3344      	adds	r3, #68	; 0x44
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	18d1      	adds	r1, r2, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	4403      	add	r3, r0
 800413c:	3344      	adds	r3, #68	; 0x44
 800413e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	440b      	add	r3, r1
 800414e:	334c      	adds	r3, #76	; 0x4c
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	18d1      	adds	r1, r2, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4403      	add	r3, r0
 8004164:	334c      	adds	r3, #76	; 0x4c
 8004166:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	4413      	add	r3, r2
 8004170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <HCD_RXQLVL_IRQHandler+0x154>)
 8004178:	4013      	ands	r3, r2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d031      	beq.n	80041e2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	4413      	add	r3, r2
 8004186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004194:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800419c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041aa:	461a      	mov	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	440b      	add	r3, r1
 80041be:	3350      	adds	r3, #80	; 0x50
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	f083 0301 	eor.w	r3, r3, #1
 80041c6:	b2d8      	uxtb	r0, r3
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	440b      	add	r3, r1
 80041d6:	3350      	adds	r3, #80	; 0x50
 80041d8:	4602      	mov	r2, r0
 80041da:	701a      	strb	r2, [r3, #0]
      break;
 80041dc:	e001      	b.n	80041e2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80041e2:	bf00      	nop
  }
}
 80041e4:	bf00      	nop
 80041e6:	3728      	adds	r7, #40	; 0x28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	1ff80000 	.word	0x1ff80000

080041f0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800421c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b02      	cmp	r3, #2
 8004226:	d10b      	bne.n	8004240 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d102      	bne.n	8004238 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f004 fc98 	bl	8008b68 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f043 0302 	orr.w	r3, r3, #2
 800423e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b08      	cmp	r3, #8
 8004248:	d132      	bne.n	80042b0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f043 0308 	orr.w	r3, r3, #8
 8004250:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d126      	bne.n	80042aa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d113      	bne.n	800428c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800426a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800426e:	d106      	bne.n	800427e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2102      	movs	r1, #2
 8004276:	4618      	mov	r0, r3
 8004278:	f001 ffc8 	bl	800620c <USB_InitFSLSPClkSel>
 800427c:	e011      	b.n	80042a2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2101      	movs	r1, #1
 8004284:	4618      	mov	r0, r3
 8004286:	f001 ffc1 	bl	800620c <USB_InitFSLSPClkSel>
 800428a:	e00a      	b.n	80042a2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800429a:	461a      	mov	r2, r3
 800429c:	f64e 2360 	movw	r3, #60000	; 0xea60
 80042a0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f004 fc8a 	bl	8008bbc <HAL_HCD_PortEnabled_Callback>
 80042a8:	e002      	b.n	80042b0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f004 fc94 	bl	8008bd8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d103      	bne.n	80042c2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f043 0320 	orr.w	r3, r3, #32
 80042c0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042c8:	461a      	mov	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	6013      	str	r3, [r2, #0]
}
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e11f      	b.n	800452a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd f894 	bl	800142c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2224      	movs	r2, #36	; 0x24
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0201 	bic.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800432a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800433a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800433c:	f000 fd3e 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8004340:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4a7b      	ldr	r2, [pc, #492]	; (8004534 <HAL_I2C_Init+0x25c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d807      	bhi.n	800435c <HAL_I2C_Init+0x84>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4a7a      	ldr	r2, [pc, #488]	; (8004538 <HAL_I2C_Init+0x260>)
 8004350:	4293      	cmp	r3, r2
 8004352:	bf94      	ite	ls
 8004354:	2301      	movls	r3, #1
 8004356:	2300      	movhi	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	e006      	b.n	800436a <HAL_I2C_Init+0x92>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a77      	ldr	r2, [pc, #476]	; (800453c <HAL_I2C_Init+0x264>)
 8004360:	4293      	cmp	r3, r2
 8004362:	bf94      	ite	ls
 8004364:	2301      	movls	r3, #1
 8004366:	2300      	movhi	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e0db      	b.n	800452a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a72      	ldr	r2, [pc, #456]	; (8004540 <HAL_I2C_Init+0x268>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	0c9b      	lsrs	r3, r3, #18
 800437c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4a64      	ldr	r2, [pc, #400]	; (8004534 <HAL_I2C_Init+0x25c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d802      	bhi.n	80043ac <HAL_I2C_Init+0xd4>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	3301      	adds	r3, #1
 80043aa:	e009      	b.n	80043c0 <HAL_I2C_Init+0xe8>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	4a63      	ldr	r2, [pc, #396]	; (8004544 <HAL_I2C_Init+0x26c>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	099b      	lsrs	r3, r3, #6
 80043be:	3301      	adds	r3, #1
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	430b      	orrs	r3, r1
 80043c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4956      	ldr	r1, [pc, #344]	; (8004534 <HAL_I2C_Init+0x25c>)
 80043dc:	428b      	cmp	r3, r1
 80043de:	d80d      	bhi.n	80043fc <HAL_I2C_Init+0x124>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	1e59      	subs	r1, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ee:	3301      	adds	r3, #1
 80043f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	bf38      	it	cc
 80043f8:	2304      	movcc	r3, #4
 80043fa:	e04f      	b.n	800449c <HAL_I2C_Init+0x1c4>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d111      	bne.n	8004428 <HAL_I2C_Init+0x150>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1e58      	subs	r0, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	440b      	add	r3, r1
 8004412:	fbb0 f3f3 	udiv	r3, r0, r3
 8004416:	3301      	adds	r3, #1
 8004418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441c:	2b00      	cmp	r3, #0
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e012      	b.n	800444e <HAL_I2C_Init+0x176>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1e58      	subs	r0, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	0099      	lsls	r1, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	fbb0 f3f3 	udiv	r3, r0, r3
 800443e:	3301      	adds	r3, #1
 8004440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_Init+0x17e>
 8004452:	2301      	movs	r3, #1
 8004454:	e022      	b.n	800449c <HAL_I2C_Init+0x1c4>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10e      	bne.n	800447c <HAL_I2C_Init+0x1a4>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1e58      	subs	r0, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	460b      	mov	r3, r1
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	440b      	add	r3, r1
 800446c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004470:	3301      	adds	r3, #1
 8004472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447a:	e00f      	b.n	800449c <HAL_I2C_Init+0x1c4>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	1e58      	subs	r0, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6859      	ldr	r1, [r3, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	0099      	lsls	r1, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004492:	3301      	adds	r3, #1
 8004494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	6809      	ldr	r1, [r1, #0]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6911      	ldr	r1, [r2, #16]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68d2      	ldr	r2, [r2, #12]
 80044d6:	4311      	orrs	r1, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	430b      	orrs	r3, r1
 80044de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	000186a0 	.word	0x000186a0
 8004538:	001e847f 	.word	0x001e847f
 800453c:	003d08ff 	.word	0x003d08ff
 8004540:	431bde83 	.word	0x431bde83
 8004544:	10624dd3 	.word	0x10624dd3

08004548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e25b      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d075      	beq.n	8004652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004566:	4ba3      	ldr	r3, [pc, #652]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
 800456e:	2b04      	cmp	r3, #4
 8004570:	d00c      	beq.n	800458c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004572:	4ba0      	ldr	r3, [pc, #640]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800457a:	2b08      	cmp	r3, #8
 800457c:	d112      	bne.n	80045a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457e:	4b9d      	ldr	r3, [pc, #628]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458a:	d10b      	bne.n	80045a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458c:	4b99      	ldr	r3, [pc, #612]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d05b      	beq.n	8004650 <HAL_RCC_OscConfig+0x108>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d157      	bne.n	8004650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e236      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d106      	bne.n	80045bc <HAL_RCC_OscConfig+0x74>
 80045ae:	4b91      	ldr	r3, [pc, #580]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a90      	ldr	r2, [pc, #576]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e01d      	b.n	80045f8 <HAL_RCC_OscConfig+0xb0>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c4:	d10c      	bne.n	80045e0 <HAL_RCC_OscConfig+0x98>
 80045c6:	4b8b      	ldr	r3, [pc, #556]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a8a      	ldr	r2, [pc, #552]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	4b88      	ldr	r3, [pc, #544]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a87      	ldr	r2, [pc, #540]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e00b      	b.n	80045f8 <HAL_RCC_OscConfig+0xb0>
 80045e0:	4b84      	ldr	r3, [pc, #528]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a83      	ldr	r2, [pc, #524]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b81      	ldr	r3, [pc, #516]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a80      	ldr	r2, [pc, #512]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80045f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d013      	beq.n	8004628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fd f9e0 	bl	80019c4 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004608:	f7fd f9dc 	bl	80019c4 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	; 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e1fb      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	4b76      	ldr	r3, [pc, #472]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0xc0>
 8004626:	e014      	b.n	8004652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fd f9cc 	bl	80019c4 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004630:	f7fd f9c8 	bl	80019c4 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e1e7      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004642:	4b6c      	ldr	r3, [pc, #432]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0xe8>
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d063      	beq.n	8004726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800465e:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800466a:	4b62      	ldr	r3, [pc, #392]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004672:	2b08      	cmp	r3, #8
 8004674:	d11c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004676:	4b5f      	ldr	r3, [pc, #380]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d116      	bne.n	80046b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004682:	4b5c      	ldr	r3, [pc, #368]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_RCC_OscConfig+0x152>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d001      	beq.n	800469a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e1bb      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469a:	4b56      	ldr	r3, [pc, #344]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4952      	ldr	r1, [pc, #328]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ae:	e03a      	b.n	8004726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d020      	beq.n	80046fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b8:	4b4f      	ldr	r3, [pc, #316]	; (80047f8 <HAL_RCC_OscConfig+0x2b0>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046be:	f7fd f981 	bl	80019c4 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c6:	f7fd f97d 	bl	80019c4 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e19c      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d8:	4b46      	ldr	r3, [pc, #280]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e4:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4940      	ldr	r1, [pc, #256]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]
 80046f8:	e015      	b.n	8004726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fa:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <HAL_RCC_OscConfig+0x2b0>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd f960 	bl	80019c4 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004708:	f7fd f95c 	bl	80019c4 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e17b      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471a:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d030      	beq.n	8004794 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473a:	4b30      	ldr	r3, [pc, #192]	; (80047fc <HAL_RCC_OscConfig+0x2b4>)
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7fd f940 	bl	80019c4 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004748:	f7fd f93c 	bl	80019c4 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e15b      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475a:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0x200>
 8004766:	e015      	b.n	8004794 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004768:	4b24      	ldr	r3, [pc, #144]	; (80047fc <HAL_RCC_OscConfig+0x2b4>)
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476e:	f7fd f929 	bl	80019c4 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004776:	f7fd f925 	bl	80019c4 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e144      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 800478a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f0      	bne.n	8004776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80a0 	beq.w	80048e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a2:	2300      	movs	r3, #0
 80047a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a6:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10f      	bne.n	80047d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	4a0e      	ldr	r2, [pc, #56]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c0:	6413      	str	r3, [r2, #64]	; 0x40
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d2:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_OscConfig+0x2b8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d121      	bne.n	8004822 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_RCC_OscConfig+0x2b8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a07      	ldr	r2, [pc, #28]	; (8004800 <HAL_RCC_OscConfig+0x2b8>)
 80047e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ea:	f7fd f8eb 	bl	80019c4 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f0:	e011      	b.n	8004816 <HAL_RCC_OscConfig+0x2ce>
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	42470000 	.word	0x42470000
 80047fc:	42470e80 	.word	0x42470e80
 8004800:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004804:	f7fd f8de 	bl	80019c4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0fd      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004816:	4b81      	ldr	r3, [pc, #516]	; (8004a1c <HAL_RCC_OscConfig+0x4d4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d106      	bne.n	8004838 <HAL_RCC_OscConfig+0x2f0>
 800482a:	4b7d      	ldr	r3, [pc, #500]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4a7c      	ldr	r2, [pc, #496]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	6713      	str	r3, [r2, #112]	; 0x70
 8004836:	e01c      	b.n	8004872 <HAL_RCC_OscConfig+0x32a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b05      	cmp	r3, #5
 800483e:	d10c      	bne.n	800485a <HAL_RCC_OscConfig+0x312>
 8004840:	4b77      	ldr	r3, [pc, #476]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a76      	ldr	r2, [pc, #472]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004846:	f043 0304 	orr.w	r3, r3, #4
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
 800484c:	4b74      	ldr	r3, [pc, #464]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	4a73      	ldr	r2, [pc, #460]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6713      	str	r3, [r2, #112]	; 0x70
 8004858:	e00b      	b.n	8004872 <HAL_RCC_OscConfig+0x32a>
 800485a:	4b71      	ldr	r3, [pc, #452]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	4a70      	ldr	r2, [pc, #448]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	6713      	str	r3, [r2, #112]	; 0x70
 8004866:	4b6e      	ldr	r3, [pc, #440]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	4a6d      	ldr	r2, [pc, #436]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800486c:	f023 0304 	bic.w	r3, r3, #4
 8004870:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d015      	beq.n	80048a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487a:	f7fd f8a3 	bl	80019c4 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004880:	e00a      	b.n	8004898 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004882:	f7fd f89f 	bl	80019c4 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004890:	4293      	cmp	r3, r2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e0bc      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004898:	4b61      	ldr	r3, [pc, #388]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0ee      	beq.n	8004882 <HAL_RCC_OscConfig+0x33a>
 80048a4:	e014      	b.n	80048d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a6:	f7fd f88d 	bl	80019c4 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ac:	e00a      	b.n	80048c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ae:	f7fd f889 	bl	80019c4 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048bc:	4293      	cmp	r3, r2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e0a6      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c4:	4b56      	ldr	r3, [pc, #344]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ee      	bne.n	80048ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d105      	bne.n	80048e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d6:	4b52      	ldr	r3, [pc, #328]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	4a51      	ldr	r2, [pc, #324]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80048dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8092 	beq.w	8004a10 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ec:	4b4c      	ldr	r3, [pc, #304]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d05c      	beq.n	80049b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d141      	bne.n	8004984 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004900:	4b48      	ldr	r3, [pc, #288]	; (8004a24 <HAL_RCC_OscConfig+0x4dc>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fd f85d 	bl	80019c4 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490e:	f7fd f859 	bl	80019c4 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e078      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004920:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	019b      	lsls	r3, r3, #6
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	3b01      	subs	r3, #1
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	061b      	lsls	r3, r3, #24
 8004950:	4933      	ldr	r1, [pc, #204]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004956:	4b33      	ldr	r3, [pc, #204]	; (8004a24 <HAL_RCC_OscConfig+0x4dc>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fd f832 	bl	80019c4 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd f82e 	bl	80019c4 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e04d      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004976:	4b2a      	ldr	r3, [pc, #168]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x41c>
 8004982:	e045      	b.n	8004a10 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <HAL_RCC_OscConfig+0x4dc>)
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498a:	f7fd f81b 	bl	80019c4 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004992:	f7fd f817 	bl	80019c4 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e036      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a4:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f0      	bne.n	8004992 <HAL_RCC_OscConfig+0x44a>
 80049b0:	e02e      	b.n	8004a10 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e029      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049be:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <HAL_RCC_OscConfig+0x4d8>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d11c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d115      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e6:	4013      	ands	r3, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10d      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d106      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40007000 	.word	0x40007000
 8004a20:	40023800 	.word	0x40023800
 8004a24:	42470060 	.word	0x42470060

08004a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0cc      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b68      	ldr	r3, [pc, #416]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d90c      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b65      	ldr	r3, [pc, #404]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b63      	ldr	r3, [pc, #396]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0b8      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a7c:	4b59      	ldr	r3, [pc, #356]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4a58      	ldr	r2, [pc, #352]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a94:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a52      	ldr	r2, [pc, #328]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b50      	ldr	r3, [pc, #320]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	494d      	ldr	r1, [pc, #308]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d044      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d119      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e07f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af6:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e067      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b06:	4b37      	ldr	r3, [pc, #220]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 0203 	bic.w	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4934      	ldr	r1, [pc, #208]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b18:	f7fc ff54 	bl	80019c4 <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b20:	f7fc ff50 	bl	80019c4 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e04f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b36:	4b2b      	ldr	r3, [pc, #172]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 020c 	and.w	r2, r3, #12
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d1eb      	bne.n	8004b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d20c      	bcs.n	8004b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e032      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b7c:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4916      	ldr	r1, [pc, #88]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	490e      	ldr	r1, [pc, #56]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bae:	f000 f821 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc0:	5cd3      	ldrb	r3, [r2, r3]
 8004bc2:	fa21 f303 	lsr.w	r3, r1, r3
 8004bc6:	4a09      	ldr	r2, [pc, #36]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc feb4 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40023c00 	.word	0x40023c00
 8004be4:	40023800 	.word	0x40023800
 8004be8:	08009f0c 	.word	0x08009f0c
 8004bec:	20000004 	.word	0x20000004
 8004bf0:	20000008 	.word	0x20000008

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	2300      	movs	r3, #0
 8004c04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c0a:	4b63      	ldr	r3, [pc, #396]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d007      	beq.n	8004c26 <HAL_RCC_GetSysClockFreq+0x32>
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d008      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x38>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f040 80b4 	bne.w	8004d88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4b5e      	ldr	r3, [pc, #376]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c22:	60bb      	str	r3, [r7, #8]
       break;
 8004c24:	e0b3      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c26:	4b5e      	ldr	r3, [pc, #376]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004c28:	60bb      	str	r3, [r7, #8]
      break;
 8004c2a:	e0b0      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c2c:	4b5a      	ldr	r3, [pc, #360]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c36:	4b58      	ldr	r3, [pc, #352]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d04a      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c42:	4b55      	ldr	r3, [pc, #340]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	f04f 0400 	mov.w	r4, #0
 8004c4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	ea03 0501 	and.w	r5, r3, r1
 8004c58:	ea04 0602 	and.w	r6, r4, r2
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4632      	mov	r2, r6
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	f04f 0400 	mov.w	r4, #0
 8004c68:	0154      	lsls	r4, r2, #5
 8004c6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c6e:	014b      	lsls	r3, r1, #5
 8004c70:	4619      	mov	r1, r3
 8004c72:	4622      	mov	r2, r4
 8004c74:	1b49      	subs	r1, r1, r5
 8004c76:	eb62 0206 	sbc.w	r2, r2, r6
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	f04f 0400 	mov.w	r4, #0
 8004c82:	0194      	lsls	r4, r2, #6
 8004c84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c88:	018b      	lsls	r3, r1, #6
 8004c8a:	1a5b      	subs	r3, r3, r1
 8004c8c:	eb64 0402 	sbc.w	r4, r4, r2
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	00e2      	lsls	r2, r4, #3
 8004c9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c9e:	00d9      	lsls	r1, r3, #3
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4614      	mov	r4, r2
 8004ca4:	195b      	adds	r3, r3, r5
 8004ca6:	eb44 0406 	adc.w	r4, r4, r6
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	0262      	lsls	r2, r4, #9
 8004cb4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004cb8:	0259      	lsls	r1, r3, #9
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f04f 0400 	mov.w	r4, #0
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4623      	mov	r3, r4
 8004ccc:	f7fb febe 	bl	8000a4c <__aeabi_uldivmod>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e049      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd8:	4b2f      	ldr	r3, [pc, #188]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	099b      	lsrs	r3, r3, #6
 8004cde:	f04f 0400 	mov.w	r4, #0
 8004ce2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	ea03 0501 	and.w	r5, r3, r1
 8004cee:	ea04 0602 	and.w	r6, r4, r2
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4632      	mov	r2, r6
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	f04f 0400 	mov.w	r4, #0
 8004cfe:	0154      	lsls	r4, r2, #5
 8004d00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d04:	014b      	lsls	r3, r1, #5
 8004d06:	4619      	mov	r1, r3
 8004d08:	4622      	mov	r2, r4
 8004d0a:	1b49      	subs	r1, r1, r5
 8004d0c:	eb62 0206 	sbc.w	r2, r2, r6
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	f04f 0400 	mov.w	r4, #0
 8004d18:	0194      	lsls	r4, r2, #6
 8004d1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d1e:	018b      	lsls	r3, r1, #6
 8004d20:	1a5b      	subs	r3, r3, r1
 8004d22:	eb64 0402 	sbc.w	r4, r4, r2
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	00e2      	lsls	r2, r4, #3
 8004d30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d34:	00d9      	lsls	r1, r3, #3
 8004d36:	460b      	mov	r3, r1
 8004d38:	4614      	mov	r4, r2
 8004d3a:	195b      	adds	r3, r3, r5
 8004d3c:	eb44 0406 	adc.w	r4, r4, r6
 8004d40:	f04f 0100 	mov.w	r1, #0
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	02a2      	lsls	r2, r4, #10
 8004d4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d4e:	0299      	lsls	r1, r3, #10
 8004d50:	460b      	mov	r3, r1
 8004d52:	4614      	mov	r4, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	4621      	mov	r1, r4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f04f 0400 	mov.w	r4, #0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4623      	mov	r3, r4
 8004d62:	f7fb fe73 	bl	8000a4c <__aeabi_uldivmod>
 8004d66:	4603      	mov	r3, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	3301      	adds	r3, #1
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	60bb      	str	r3, [r7, #8]
      break;
 8004d86:	e002      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d8a:	60bb      	str	r3, [r7, #8]
      break;
 8004d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	00f42400 	.word	0x00f42400
 8004da0:	007a1200 	.word	0x007a1200

08004da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000004 	.word	0x20000004

08004dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dc0:	f7ff fff0 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dc4:	4601      	mov	r1, r0
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	0a9b      	lsrs	r3, r3, #10
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	4a03      	ldr	r2, [pc, #12]	; (8004de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd2:	5cd3      	ldrb	r3, [r2, r3]
 8004dd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	08009f1c 	.word	0x08009f1c

08004de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004de8:	f7ff ffdc 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dec:	4601      	mov	r1, r0
 8004dee:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	0b5b      	lsrs	r3, r3, #13
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	4a03      	ldr	r2, [pc, #12]	; (8004e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dfa:	5cd3      	ldrb	r3, [r2, r3]
 8004dfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40023800 	.word	0x40023800
 8004e08:	08009f1c 	.word	0x08009f1c

08004e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e056      	b.n	8004ecc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d106      	bne.n	8004e3e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fc fb3f 	bl	80014bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2202      	movs	r2, #2
 8004e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	ea42 0103 	orr.w	r1, r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	f003 0104 	and.w	r1, r3, #4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69da      	ldr	r2, [r3, #28]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e03f      	b.n	8004f66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fc fb26 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2224      	movs	r2, #36	; 0x24
 8004f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fb95 	bl	8005648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d166      	bne.n	8005058 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_UART_Receive_DMA+0x26>
 8004f90:	88fb      	ldrh	r3, [r7, #6]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e05f      	b.n	800505a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_UART_Receive_DMA+0x38>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e058      	b.n	800505a <HAL_UART_Receive_DMA+0xea>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	88fa      	ldrh	r2, [r7, #6]
 8004fba:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2222      	movs	r2, #34	; 0x22
 8004fc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fce:	4a25      	ldr	r2, [pc, #148]	; (8005064 <HAL_UART_Receive_DMA+0xf4>)
 8004fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd6:	4a24      	ldr	r2, [pc, #144]	; (8005068 <HAL_UART_Receive_DMA+0xf8>)
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	4a23      	ldr	r2, [pc, #140]	; (800506c <HAL_UART_Receive_DMA+0xfc>)
 8004fe0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004fea:	f107 0308 	add.w	r3, r7, #8
 8004fee:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	f7fc ffc7 	bl	8001f94 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005032:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005052:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e000      	b.n	800505a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	080052c1 	.word	0x080052c1
 8005068:	08005329 	.word	0x08005329
 800506c:	08005345 	.word	0x08005345

08005070 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005090:	2300      	movs	r3, #0
 8005092:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10d      	bne.n	80050c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <HAL_UART_IRQHandler+0x52>
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa42 	bl	8005544 <UART_Receive_IT>
      return;
 80050c0:	e0d1      	b.n	8005266 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 80b0 	beq.w	800522a <HAL_UART_IRQHandler+0x1ba>
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d105      	bne.n	80050e0 <HAL_UART_IRQHandler+0x70>
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 80a5 	beq.w	800522a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_UART_IRQHandler+0x90>
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f8:	f043 0201 	orr.w	r2, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_UART_IRQHandler+0xb0>
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	f043 0202 	orr.w	r2, r3, #2
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_UART_IRQHandler+0xd0>
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005138:	f043 0204 	orr.w	r2, r3, #4
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00f      	beq.n	800516a <HAL_UART_IRQHandler+0xfa>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b00      	cmp	r3, #0
 8005152:	d104      	bne.n	800515e <HAL_UART_IRQHandler+0xee>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005162:	f043 0208 	orr.w	r2, r3, #8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d078      	beq.n	8005264 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <HAL_UART_IRQHandler+0x11c>
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f9dc 	bl	8005544 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	bf0c      	ite	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	2300      	movne	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <HAL_UART_IRQHandler+0x144>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d031      	beq.n	8005218 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f925 	bl	8005404 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b40      	cmp	r3, #64	; 0x40
 80051c6:	d123      	bne.n	8005210 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d013      	beq.n	8005208 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e4:	4a21      	ldr	r2, [pc, #132]	; (800526c <HAL_UART_IRQHandler+0x1fc>)
 80051e6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fc ff29 	bl	8002044 <HAL_DMA_Abort_IT>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d016      	beq.n	8005226 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005202:	4610      	mov	r0, r2
 8005204:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005206:	e00e      	b.n	8005226 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f84f 	bl	80052ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520e:	e00a      	b.n	8005226 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f84b 	bl	80052ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005216:	e006      	b.n	8005226 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f847 	bl	80052ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005224:	e01e      	b.n	8005264 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005226:	bf00      	nop
    return;
 8005228:	e01c      	b.n	8005264 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_UART_IRQHandler+0x1d6>
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f912 	bl	8005468 <UART_Transmit_IT>
    return;
 8005244:	e00f      	b.n	8005266 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_UART_IRQHandler+0x1f6>
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f95a 	bl	8005514 <UART_EndTransmit_IT>
    return;
 8005260:	bf00      	nop
 8005262:	e000      	b.n	8005266 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005264:	bf00      	nop
  }
}
 8005266:	3720      	adds	r7, #32
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	08005441 	.word	0x08005441

08005270 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d11e      	bne.n	800531a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052f0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0201 	bic.w	r2, r2, #1
 8005300:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695a      	ldr	r2, [r3, #20]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005310:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff ffb2 	bl	8005284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff ffae 	bl	8005298 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005360:	2b80      	cmp	r3, #128	; 0x80
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b21      	cmp	r3, #33	; 0x21
 8005376:	d108      	bne.n	800538a <UART_DMAError+0x46>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2200      	movs	r2, #0
 8005382:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005384:	68b8      	ldr	r0, [r7, #8]
 8005386:	f000 f827 	bl	80053d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b22      	cmp	r3, #34	; 0x22
 80053aa:	d108      	bne.n	80053be <UART_DMAError+0x7a>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2200      	movs	r2, #0
 80053b6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80053b8:	68b8      	ldr	r0, [r7, #8]
 80053ba:	f000 f823 	bl	8005404 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	f043 0210 	orr.w	r2, r3, #16
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ca:	68b8      	ldr	r0, [r7, #8]
 80053cc:	f7ff ff6e 	bl	80052ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d0:	bf00      	nop
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80053ee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800541a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0201 	bic.w	r2, r2, #1
 800542a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff ff26 	bl	80052ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005460:	bf00      	nop
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b21      	cmp	r3, #33	; 0x21
 800547a:	d144      	bne.n	8005506 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005484:	d11a      	bne.n	80054bc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800549a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	1c9a      	adds	r2, r3, #2
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	621a      	str	r2, [r3, #32]
 80054ae:	e00e      	b.n	80054ce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	621a      	str	r2, [r3, #32]
 80054ba:	e008      	b.n	80054ce <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	1c59      	adds	r1, r3, #1
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6211      	str	r1, [r2, #32]
 80054c6:	781a      	ldrb	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	4619      	mov	r1, r3
 80054dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10f      	bne.n	8005502 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005500:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005506:	2302      	movs	r3, #2
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800552a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff fe9b 	bl	8005270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b22      	cmp	r3, #34	; 0x22
 8005556:	d171      	bne.n	800563c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005560:	d123      	bne.n	80055aa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10e      	bne.n	800558e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	1c9a      	adds	r2, r3, #2
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	629a      	str	r2, [r3, #40]	; 0x28
 800558c:	e029      	b.n	80055e2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	b29b      	uxth	r3, r3
 8005596:	b2db      	uxtb	r3, r3
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	629a      	str	r2, [r3, #40]	; 0x28
 80055a8:	e01b      	b.n	80055e2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6858      	ldr	r0, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	1c59      	adds	r1, r3, #1
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6291      	str	r1, [r2, #40]	; 0x28
 80055c2:	b2c2      	uxtb	r2, r0
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e00c      	b.n	80055e2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	1c58      	adds	r0, r3, #1
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	6288      	str	r0, [r1, #40]	; 0x28
 80055da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	4619      	mov	r1, r3
 80055f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d120      	bne.n	8005638 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0220 	bic.w	r2, r2, #32
 8005604:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005614:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695a      	ldr	r2, [r3, #20]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff fe28 	bl	8005284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e002      	b.n	800563e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	e000      	b.n	800563e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800563c:	2302      	movs	r3, #2
  }
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	b085      	sub	sp, #20
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800568a:	f023 030c 	bic.w	r3, r3, #12
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	68f9      	ldr	r1, [r7, #12]
 8005694:	430b      	orrs	r3, r1
 8005696:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b6:	f040 818b 	bne.w	80059d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4ac1      	ldr	r2, [pc, #772]	; (80059c4 <UART_SetConfig+0x37c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d005      	beq.n	80056d0 <UART_SetConfig+0x88>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4abf      	ldr	r2, [pc, #764]	; (80059c8 <UART_SetConfig+0x380>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	f040 80bd 	bne.w	800584a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056d0:	f7ff fb88 	bl	8004de4 <HAL_RCC_GetPCLK2Freq>
 80056d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	461d      	mov	r5, r3
 80056da:	f04f 0600 	mov.w	r6, #0
 80056de:	46a8      	mov	r8, r5
 80056e0:	46b1      	mov	r9, r6
 80056e2:	eb18 0308 	adds.w	r3, r8, r8
 80056e6:	eb49 0409 	adc.w	r4, r9, r9
 80056ea:	4698      	mov	r8, r3
 80056ec:	46a1      	mov	r9, r4
 80056ee:	eb18 0805 	adds.w	r8, r8, r5
 80056f2:	eb49 0906 	adc.w	r9, r9, r6
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005702:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005706:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800570a:	4688      	mov	r8, r1
 800570c:	4691      	mov	r9, r2
 800570e:	eb18 0005 	adds.w	r0, r8, r5
 8005712:	eb49 0106 	adc.w	r1, r9, r6
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	461d      	mov	r5, r3
 800571c:	f04f 0600 	mov.w	r6, #0
 8005720:	196b      	adds	r3, r5, r5
 8005722:	eb46 0406 	adc.w	r4, r6, r6
 8005726:	461a      	mov	r2, r3
 8005728:	4623      	mov	r3, r4
 800572a:	f7fb f98f 	bl	8000a4c <__aeabi_uldivmod>
 800572e:	4603      	mov	r3, r0
 8005730:	460c      	mov	r4, r1
 8005732:	461a      	mov	r2, r3
 8005734:	4ba5      	ldr	r3, [pc, #660]	; (80059cc <UART_SetConfig+0x384>)
 8005736:	fba3 2302 	umull	r2, r3, r3, r2
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	461d      	mov	r5, r3
 8005744:	f04f 0600 	mov.w	r6, #0
 8005748:	46a9      	mov	r9, r5
 800574a:	46b2      	mov	sl, r6
 800574c:	eb19 0309 	adds.w	r3, r9, r9
 8005750:	eb4a 040a 	adc.w	r4, sl, sl
 8005754:	4699      	mov	r9, r3
 8005756:	46a2      	mov	sl, r4
 8005758:	eb19 0905 	adds.w	r9, r9, r5
 800575c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005760:	f04f 0100 	mov.w	r1, #0
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800576c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005770:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005774:	4689      	mov	r9, r1
 8005776:	4692      	mov	sl, r2
 8005778:	eb19 0005 	adds.w	r0, r9, r5
 800577c:	eb4a 0106 	adc.w	r1, sl, r6
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	461d      	mov	r5, r3
 8005786:	f04f 0600 	mov.w	r6, #0
 800578a:	196b      	adds	r3, r5, r5
 800578c:	eb46 0406 	adc.w	r4, r6, r6
 8005790:	461a      	mov	r2, r3
 8005792:	4623      	mov	r3, r4
 8005794:	f7fb f95a 	bl	8000a4c <__aeabi_uldivmod>
 8005798:	4603      	mov	r3, r0
 800579a:	460c      	mov	r4, r1
 800579c:	461a      	mov	r2, r3
 800579e:	4b8b      	ldr	r3, [pc, #556]	; (80059cc <UART_SetConfig+0x384>)
 80057a0:	fba3 1302 	umull	r1, r3, r3, r2
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	2164      	movs	r1, #100	; 0x64
 80057a8:	fb01 f303 	mul.w	r3, r1, r3
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	3332      	adds	r3, #50	; 0x32
 80057b2:	4a86      	ldr	r2, [pc, #536]	; (80059cc <UART_SetConfig+0x384>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057c0:	4498      	add	r8, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	461d      	mov	r5, r3
 80057c6:	f04f 0600 	mov.w	r6, #0
 80057ca:	46a9      	mov	r9, r5
 80057cc:	46b2      	mov	sl, r6
 80057ce:	eb19 0309 	adds.w	r3, r9, r9
 80057d2:	eb4a 040a 	adc.w	r4, sl, sl
 80057d6:	4699      	mov	r9, r3
 80057d8:	46a2      	mov	sl, r4
 80057da:	eb19 0905 	adds.w	r9, r9, r5
 80057de:	eb4a 0a06 	adc.w	sl, sl, r6
 80057e2:	f04f 0100 	mov.w	r1, #0
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057f6:	4689      	mov	r9, r1
 80057f8:	4692      	mov	sl, r2
 80057fa:	eb19 0005 	adds.w	r0, r9, r5
 80057fe:	eb4a 0106 	adc.w	r1, sl, r6
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	461d      	mov	r5, r3
 8005808:	f04f 0600 	mov.w	r6, #0
 800580c:	196b      	adds	r3, r5, r5
 800580e:	eb46 0406 	adc.w	r4, r6, r6
 8005812:	461a      	mov	r2, r3
 8005814:	4623      	mov	r3, r4
 8005816:	f7fb f919 	bl	8000a4c <__aeabi_uldivmod>
 800581a:	4603      	mov	r3, r0
 800581c:	460c      	mov	r4, r1
 800581e:	461a      	mov	r2, r3
 8005820:	4b6a      	ldr	r3, [pc, #424]	; (80059cc <UART_SetConfig+0x384>)
 8005822:	fba3 1302 	umull	r1, r3, r3, r2
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	2164      	movs	r1, #100	; 0x64
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	3332      	adds	r3, #50	; 0x32
 8005834:	4a65      	ldr	r2, [pc, #404]	; (80059cc <UART_SetConfig+0x384>)
 8005836:	fba2 2303 	umull	r2, r3, r2, r3
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	f003 0207 	and.w	r2, r3, #7
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4442      	add	r2, r8
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	e26f      	b.n	8005d2a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800584a:	f7ff fab7 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 800584e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	461d      	mov	r5, r3
 8005854:	f04f 0600 	mov.w	r6, #0
 8005858:	46a8      	mov	r8, r5
 800585a:	46b1      	mov	r9, r6
 800585c:	eb18 0308 	adds.w	r3, r8, r8
 8005860:	eb49 0409 	adc.w	r4, r9, r9
 8005864:	4698      	mov	r8, r3
 8005866:	46a1      	mov	r9, r4
 8005868:	eb18 0805 	adds.w	r8, r8, r5
 800586c:	eb49 0906 	adc.w	r9, r9, r6
 8005870:	f04f 0100 	mov.w	r1, #0
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800587c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005880:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005884:	4688      	mov	r8, r1
 8005886:	4691      	mov	r9, r2
 8005888:	eb18 0005 	adds.w	r0, r8, r5
 800588c:	eb49 0106 	adc.w	r1, r9, r6
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	461d      	mov	r5, r3
 8005896:	f04f 0600 	mov.w	r6, #0
 800589a:	196b      	adds	r3, r5, r5
 800589c:	eb46 0406 	adc.w	r4, r6, r6
 80058a0:	461a      	mov	r2, r3
 80058a2:	4623      	mov	r3, r4
 80058a4:	f7fb f8d2 	bl	8000a4c <__aeabi_uldivmod>
 80058a8:	4603      	mov	r3, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	461a      	mov	r2, r3
 80058ae:	4b47      	ldr	r3, [pc, #284]	; (80059cc <UART_SetConfig+0x384>)
 80058b0:	fba3 2302 	umull	r2, r3, r3, r2
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	461d      	mov	r5, r3
 80058be:	f04f 0600 	mov.w	r6, #0
 80058c2:	46a9      	mov	r9, r5
 80058c4:	46b2      	mov	sl, r6
 80058c6:	eb19 0309 	adds.w	r3, r9, r9
 80058ca:	eb4a 040a 	adc.w	r4, sl, sl
 80058ce:	4699      	mov	r9, r3
 80058d0:	46a2      	mov	sl, r4
 80058d2:	eb19 0905 	adds.w	r9, r9, r5
 80058d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80058da:	f04f 0100 	mov.w	r1, #0
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058ee:	4689      	mov	r9, r1
 80058f0:	4692      	mov	sl, r2
 80058f2:	eb19 0005 	adds.w	r0, r9, r5
 80058f6:	eb4a 0106 	adc.w	r1, sl, r6
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	461d      	mov	r5, r3
 8005900:	f04f 0600 	mov.w	r6, #0
 8005904:	196b      	adds	r3, r5, r5
 8005906:	eb46 0406 	adc.w	r4, r6, r6
 800590a:	461a      	mov	r2, r3
 800590c:	4623      	mov	r3, r4
 800590e:	f7fb f89d 	bl	8000a4c <__aeabi_uldivmod>
 8005912:	4603      	mov	r3, r0
 8005914:	460c      	mov	r4, r1
 8005916:	461a      	mov	r2, r3
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <UART_SetConfig+0x384>)
 800591a:	fba3 1302 	umull	r1, r3, r3, r2
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	2164      	movs	r1, #100	; 0x64
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	3332      	adds	r3, #50	; 0x32
 800592c:	4a27      	ldr	r2, [pc, #156]	; (80059cc <UART_SetConfig+0x384>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	095b      	lsrs	r3, r3, #5
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800593a:	4498      	add	r8, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	461d      	mov	r5, r3
 8005940:	f04f 0600 	mov.w	r6, #0
 8005944:	46a9      	mov	r9, r5
 8005946:	46b2      	mov	sl, r6
 8005948:	eb19 0309 	adds.w	r3, r9, r9
 800594c:	eb4a 040a 	adc.w	r4, sl, sl
 8005950:	4699      	mov	r9, r3
 8005952:	46a2      	mov	sl, r4
 8005954:	eb19 0905 	adds.w	r9, r9, r5
 8005958:	eb4a 0a06 	adc.w	sl, sl, r6
 800595c:	f04f 0100 	mov.w	r1, #0
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005968:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800596c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005970:	4689      	mov	r9, r1
 8005972:	4692      	mov	sl, r2
 8005974:	eb19 0005 	adds.w	r0, r9, r5
 8005978:	eb4a 0106 	adc.w	r1, sl, r6
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	461d      	mov	r5, r3
 8005982:	f04f 0600 	mov.w	r6, #0
 8005986:	196b      	adds	r3, r5, r5
 8005988:	eb46 0406 	adc.w	r4, r6, r6
 800598c:	461a      	mov	r2, r3
 800598e:	4623      	mov	r3, r4
 8005990:	f7fb f85c 	bl	8000a4c <__aeabi_uldivmod>
 8005994:	4603      	mov	r3, r0
 8005996:	460c      	mov	r4, r1
 8005998:	461a      	mov	r2, r3
 800599a:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <UART_SetConfig+0x384>)
 800599c:	fba3 1302 	umull	r1, r3, r3, r2
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	2164      	movs	r1, #100	; 0x64
 80059a4:	fb01 f303 	mul.w	r3, r1, r3
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	3332      	adds	r3, #50	; 0x32
 80059ae:	4a07      	ldr	r2, [pc, #28]	; (80059cc <UART_SetConfig+0x384>)
 80059b0:	fba2 2303 	umull	r2, r3, r2, r3
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	f003 0207 	and.w	r2, r3, #7
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4442      	add	r2, r8
 80059c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80059c2:	e1b2      	b.n	8005d2a <UART_SetConfig+0x6e2>
 80059c4:	40011000 	.word	0x40011000
 80059c8:	40011400 	.word	0x40011400
 80059cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4ad7      	ldr	r2, [pc, #860]	; (8005d34 <UART_SetConfig+0x6ec>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d005      	beq.n	80059e6 <UART_SetConfig+0x39e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4ad6      	ldr	r2, [pc, #856]	; (8005d38 <UART_SetConfig+0x6f0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	f040 80d1 	bne.w	8005b88 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80059e6:	f7ff f9fd 	bl	8004de4 <HAL_RCC_GetPCLK2Freq>
 80059ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	469a      	mov	sl, r3
 80059f0:	f04f 0b00 	mov.w	fp, #0
 80059f4:	46d0      	mov	r8, sl
 80059f6:	46d9      	mov	r9, fp
 80059f8:	eb18 0308 	adds.w	r3, r8, r8
 80059fc:	eb49 0409 	adc.w	r4, r9, r9
 8005a00:	4698      	mov	r8, r3
 8005a02:	46a1      	mov	r9, r4
 8005a04:	eb18 080a 	adds.w	r8, r8, sl
 8005a08:	eb49 090b 	adc.w	r9, r9, fp
 8005a0c:	f04f 0100 	mov.w	r1, #0
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a20:	4688      	mov	r8, r1
 8005a22:	4691      	mov	r9, r2
 8005a24:	eb1a 0508 	adds.w	r5, sl, r8
 8005a28:	eb4b 0609 	adc.w	r6, fp, r9
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4619      	mov	r1, r3
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	f04f 0400 	mov.w	r4, #0
 8005a3e:	0094      	lsls	r4, r2, #2
 8005a40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a44:	008b      	lsls	r3, r1, #2
 8005a46:	461a      	mov	r2, r3
 8005a48:	4623      	mov	r3, r4
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	f7fa fffd 	bl	8000a4c <__aeabi_uldivmod>
 8005a52:	4603      	mov	r3, r0
 8005a54:	460c      	mov	r4, r1
 8005a56:	461a      	mov	r2, r3
 8005a58:	4bb8      	ldr	r3, [pc, #736]	; (8005d3c <UART_SetConfig+0x6f4>)
 8005a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	469b      	mov	fp, r3
 8005a68:	f04f 0c00 	mov.w	ip, #0
 8005a6c:	46d9      	mov	r9, fp
 8005a6e:	46e2      	mov	sl, ip
 8005a70:	eb19 0309 	adds.w	r3, r9, r9
 8005a74:	eb4a 040a 	adc.w	r4, sl, sl
 8005a78:	4699      	mov	r9, r3
 8005a7a:	46a2      	mov	sl, r4
 8005a7c:	eb19 090b 	adds.w	r9, r9, fp
 8005a80:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a84:	f04f 0100 	mov.w	r1, #0
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a98:	4689      	mov	r9, r1
 8005a9a:	4692      	mov	sl, r2
 8005a9c:	eb1b 0509 	adds.w	r5, fp, r9
 8005aa0:	eb4c 060a 	adc.w	r6, ip, sl
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	f04f 0400 	mov.w	r4, #0
 8005ab6:	0094      	lsls	r4, r2, #2
 8005ab8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005abc:	008b      	lsls	r3, r1, #2
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	f7fa ffc1 	bl	8000a4c <__aeabi_uldivmod>
 8005aca:	4603      	mov	r3, r0
 8005acc:	460c      	mov	r4, r1
 8005ace:	461a      	mov	r2, r3
 8005ad0:	4b9a      	ldr	r3, [pc, #616]	; (8005d3c <UART_SetConfig+0x6f4>)
 8005ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	2164      	movs	r1, #100	; 0x64
 8005ada:	fb01 f303 	mul.w	r3, r1, r3
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	3332      	adds	r3, #50	; 0x32
 8005ae4:	4a95      	ldr	r2, [pc, #596]	; (8005d3c <UART_SetConfig+0x6f4>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af0:	4498      	add	r8, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	469b      	mov	fp, r3
 8005af6:	f04f 0c00 	mov.w	ip, #0
 8005afa:	46d9      	mov	r9, fp
 8005afc:	46e2      	mov	sl, ip
 8005afe:	eb19 0309 	adds.w	r3, r9, r9
 8005b02:	eb4a 040a 	adc.w	r4, sl, sl
 8005b06:	4699      	mov	r9, r3
 8005b08:	46a2      	mov	sl, r4
 8005b0a:	eb19 090b 	adds.w	r9, r9, fp
 8005b0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b26:	4689      	mov	r9, r1
 8005b28:	4692      	mov	sl, r2
 8005b2a:	eb1b 0509 	adds.w	r5, fp, r9
 8005b2e:	eb4c 060a 	adc.w	r6, ip, sl
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	4619      	mov	r1, r3
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	f04f 0400 	mov.w	r4, #0
 8005b44:	0094      	lsls	r4, r2, #2
 8005b46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b4a:	008b      	lsls	r3, r1, #2
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4623      	mov	r3, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	4631      	mov	r1, r6
 8005b54:	f7fa ff7a 	bl	8000a4c <__aeabi_uldivmod>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4b77      	ldr	r3, [pc, #476]	; (8005d3c <UART_SetConfig+0x6f4>)
 8005b60:	fba3 1302 	umull	r1, r3, r3, r2
 8005b64:	095b      	lsrs	r3, r3, #5
 8005b66:	2164      	movs	r1, #100	; 0x64
 8005b68:	fb01 f303 	mul.w	r3, r1, r3
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	3332      	adds	r3, #50	; 0x32
 8005b72:	4a72      	ldr	r2, [pc, #456]	; (8005d3c <UART_SetConfig+0x6f4>)
 8005b74:	fba2 2303 	umull	r2, r3, r2, r3
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	f003 020f 	and.w	r2, r3, #15
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4442      	add	r2, r8
 8005b84:	609a      	str	r2, [r3, #8]
 8005b86:	e0d0      	b.n	8005d2a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b88:	f7ff f918 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8005b8c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	469a      	mov	sl, r3
 8005b92:	f04f 0b00 	mov.w	fp, #0
 8005b96:	46d0      	mov	r8, sl
 8005b98:	46d9      	mov	r9, fp
 8005b9a:	eb18 0308 	adds.w	r3, r8, r8
 8005b9e:	eb49 0409 	adc.w	r4, r9, r9
 8005ba2:	4698      	mov	r8, r3
 8005ba4:	46a1      	mov	r9, r4
 8005ba6:	eb18 080a 	adds.w	r8, r8, sl
 8005baa:	eb49 090b 	adc.w	r9, r9, fp
 8005bae:	f04f 0100 	mov.w	r1, #0
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bbe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bc2:	4688      	mov	r8, r1
 8005bc4:	4691      	mov	r9, r2
 8005bc6:	eb1a 0508 	adds.w	r5, sl, r8
 8005bca:	eb4b 0609 	adc.w	r6, fp, r9
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	f04f 0400 	mov.w	r4, #0
 8005be0:	0094      	lsls	r4, r2, #2
 8005be2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005be6:	008b      	lsls	r3, r1, #2
 8005be8:	461a      	mov	r2, r3
 8005bea:	4623      	mov	r3, r4
 8005bec:	4628      	mov	r0, r5
 8005bee:	4631      	mov	r1, r6
 8005bf0:	f7fa ff2c 	bl	8000a4c <__aeabi_uldivmod>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4b50      	ldr	r3, [pc, #320]	; (8005d3c <UART_SetConfig+0x6f4>)
 8005bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	469b      	mov	fp, r3
 8005c0a:	f04f 0c00 	mov.w	ip, #0
 8005c0e:	46d9      	mov	r9, fp
 8005c10:	46e2      	mov	sl, ip
 8005c12:	eb19 0309 	adds.w	r3, r9, r9
 8005c16:	eb4a 040a 	adc.w	r4, sl, sl
 8005c1a:	4699      	mov	r9, r3
 8005c1c:	46a2      	mov	sl, r4
 8005c1e:	eb19 090b 	adds.w	r9, r9, fp
 8005c22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c26:	f04f 0100 	mov.w	r1, #0
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c3a:	4689      	mov	r9, r1
 8005c3c:	4692      	mov	sl, r2
 8005c3e:	eb1b 0509 	adds.w	r5, fp, r9
 8005c42:	eb4c 060a 	adc.w	r6, ip, sl
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	f04f 0400 	mov.w	r4, #0
 8005c58:	0094      	lsls	r4, r2, #2
 8005c5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c5e:	008b      	lsls	r3, r1, #2
 8005c60:	461a      	mov	r2, r3
 8005c62:	4623      	mov	r3, r4
 8005c64:	4628      	mov	r0, r5
 8005c66:	4631      	mov	r1, r6
 8005c68:	f7fa fef0 	bl	8000a4c <__aeabi_uldivmod>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	461a      	mov	r2, r3
 8005c72:	4b32      	ldr	r3, [pc, #200]	; (8005d3c <UART_SetConfig+0x6f4>)
 8005c74:	fba3 1302 	umull	r1, r3, r3, r2
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	2164      	movs	r1, #100	; 0x64
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	3332      	adds	r3, #50	; 0x32
 8005c86:	4a2d      	ldr	r2, [pc, #180]	; (8005d3c <UART_SetConfig+0x6f4>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c92:	4498      	add	r8, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	469b      	mov	fp, r3
 8005c98:	f04f 0c00 	mov.w	ip, #0
 8005c9c:	46d9      	mov	r9, fp
 8005c9e:	46e2      	mov	sl, ip
 8005ca0:	eb19 0309 	adds.w	r3, r9, r9
 8005ca4:	eb4a 040a 	adc.w	r4, sl, sl
 8005ca8:	4699      	mov	r9, r3
 8005caa:	46a2      	mov	sl, r4
 8005cac:	eb19 090b 	adds.w	r9, r9, fp
 8005cb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005cb4:	f04f 0100 	mov.w	r1, #0
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cc8:	4689      	mov	r9, r1
 8005cca:	4692      	mov	sl, r2
 8005ccc:	eb1b 0509 	adds.w	r5, fp, r9
 8005cd0:	eb4c 060a 	adc.w	r6, ip, sl
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	f04f 0400 	mov.w	r4, #0
 8005ce6:	0094      	lsls	r4, r2, #2
 8005ce8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cec:	008b      	lsls	r3, r1, #2
 8005cee:	461a      	mov	r2, r3
 8005cf0:	4623      	mov	r3, r4
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	f7fa fea9 	bl	8000a4c <__aeabi_uldivmod>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	461a      	mov	r2, r3
 8005d00:	4b0e      	ldr	r3, [pc, #56]	; (8005d3c <UART_SetConfig+0x6f4>)
 8005d02:	fba3 1302 	umull	r1, r3, r3, r2
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	2164      	movs	r1, #100	; 0x64
 8005d0a:	fb01 f303 	mul.w	r3, r1, r3
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	3332      	adds	r3, #50	; 0x32
 8005d14:	4a09      	ldr	r2, [pc, #36]	; (8005d3c <UART_SetConfig+0x6f4>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	f003 020f 	and.w	r2, r3, #15
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4442      	add	r2, r8
 8005d26:	609a      	str	r2, [r3, #8]
}
 8005d28:	e7ff      	b.n	8005d2a <UART_SetConfig+0x6e2>
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d34:	40011000 	.word	0x40011000
 8005d38:	40011400 	.word	0x40011400
 8005d3c:	51eb851f 	.word	0x51eb851f

08005d40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d40:	b084      	sub	sp, #16
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	f107 001c 	add.w	r0, r7, #28
 8005d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d122      	bne.n	8005d9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d105      	bne.n	8005d92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f94a 	bl	800602c <USB_CoreReset>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]
 8005d9c:	e01a      	b.n	8005dd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f93e 	bl	800602c <USB_CoreReset>
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8005dc6:	e005      	b.n	8005dd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d10b      	bne.n	8005df2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f043 0206 	orr.w	r2, r3, #6
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dfe:	b004      	add	sp, #16
 8005e00:	4770      	bx	lr

08005e02 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f043 0201 	orr.w	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f023 0201 	bic.w	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d106      	bne.n	8005e72 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	60da      	str	r2, [r3, #12]
 8005e70:	e00b      	b.n	8005e8a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60da      	str	r2, [r3, #12]
 8005e84:	e001      	b.n	8005e8a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e003      	b.n	8005e92 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005e8a:	2032      	movs	r0, #50	; 0x32
 8005e8c:	f7fb fda6 	bl	80019dc <HAL_Delay>

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	019b      	lsls	r3, r3, #6
 8005eae:	f043 0220 	orr.w	r2, r3, #32
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <USB_FlushTxFifo+0x48>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d901      	bls.n	8005ec8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e006      	b.n	8005ed6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d0f0      	beq.n	8005eb6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	00030d40 	.word	0x00030d40

08005ee8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2210      	movs	r2, #16
 8005ef8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3301      	adds	r3, #1
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4a09      	ldr	r2, [pc, #36]	; (8005f28 <USB_FlushRxFifo+0x40>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d901      	bls.n	8005f0c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e006      	b.n	8005f1a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b10      	cmp	r3, #16
 8005f16:	d0f0      	beq.n	8005efa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	00030d40 	.word	0x00030d40

08005f2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b089      	sub	sp, #36	; 0x24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	4611      	mov	r1, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	71fb      	strb	r3, [r7, #7]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005f4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d11a      	bne.n	8005f88 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f52:	88bb      	ldrh	r3, [r7, #4]
 8005f54:	3303      	adds	r3, #3
 8005f56:	089b      	lsrs	r3, r3, #2
 8005f58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	e00f      	b.n	8005f80 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	031a      	lsls	r2, r3, #12
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	3304      	adds	r3, #4
 8005f78:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d3eb      	bcc.n	8005f60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3724      	adds	r7, #36	; 0x24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b089      	sub	sp, #36	; 0x24
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	3303      	adds	r3, #3
 8005fb0:	089b      	lsrs	r3, r3, #2
 8005fb2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61bb      	str	r3, [r7, #24]
 8005fb8:	e00b      	b.n	8005fd2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d3ef      	bcc.n	8005fba <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005fda:	69fb      	ldr	r3, [r7, #28]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3724      	adds	r7, #36	; 0x24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006000:	68fb      	ldr	r3, [r7, #12]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0301 	and.w	r3, r3, #1
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3301      	adds	r3, #1
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4a13      	ldr	r2, [pc, #76]	; (8006090 <USB_CoreReset+0x64>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d901      	bls.n	800604a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e01b      	b.n	8006082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	daf2      	bge.n	8006038 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f043 0201 	orr.w	r2, r3, #1
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3301      	adds	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4a09      	ldr	r2, [pc, #36]	; (8006090 <USB_CoreReset+0x64>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d901      	bls.n	8006074 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e006      	b.n	8006082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b01      	cmp	r3, #1
 800607e:	d0f0      	beq.n	8006062 <USB_CoreReset+0x36>

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	00030d40 	.word	0x00030d40

08006094 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006094:	b084      	sub	sp, #16
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	f107 001c 	add.w	r0, r7, #28
 80060a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060b0:	461a      	mov	r2, r3
 80060b2:	2300      	movs	r3, #0
 80060b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d018      	beq.n	8006118 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d10a      	bne.n	8006102 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060fa:	f043 0304 	orr.w	r3, r3, #4
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	e014      	b.n	800612c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006110:	f023 0304 	bic.w	r3, r3, #4
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	e009      	b.n	800612c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006126:	f023 0304 	bic.w	r3, r3, #4
 800612a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800612c:	2110      	movs	r1, #16
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff feb4 	bl	8005e9c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff fed7 	bl	8005ee8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e015      	b.n	800616c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4413      	add	r3, r2
 8006148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614c:	461a      	mov	r2, r3
 800614e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006152:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006160:	461a      	mov	r2, r3
 8006162:	2300      	movs	r3, #0
 8006164:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3301      	adds	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	429a      	cmp	r2, r3
 8006172:	d3e5      	bcc.n	8006140 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006174:	2101      	movs	r1, #1
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8ac 	bl	80062d4 <USB_DriveVbus>

  HAL_Delay(200U);
 800617c:	20c8      	movs	r0, #200	; 0xc8
 800617e:	f7fb fc2d 	bl	80019dc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800618e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00b      	beq.n	80061b4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <USB_HostInit+0x164>)
 80061a8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a13      	ldr	r2, [pc, #76]	; (80061fc <USB_HostInit+0x168>)
 80061ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80061b2:	e009      	b.n	80061c8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2280      	movs	r2, #128	; 0x80
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a10      	ldr	r2, [pc, #64]	; (8006200 <USB_HostInit+0x16c>)
 80061be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a10      	ldr	r2, [pc, #64]	; (8006204 <USB_HostInit+0x170>)
 80061c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d105      	bne.n	80061da <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f043 0210 	orr.w	r2, r3, #16
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <USB_HostInit+0x174>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061f2:	b004      	add	sp, #16
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	01000200 	.word	0x01000200
 80061fc:	00e00300 	.word	0x00e00300
 8006200:	00600080 	.word	0x00600080
 8006204:	004000e0 	.word	0x004000e0
 8006208:	a3200008 	.word	0xa3200008

0800620c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	68f9      	ldr	r1, [r7, #12]
 8006240:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006244:	4313      	orrs	r3, r2
 8006246:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d107      	bne.n	800625e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006254:	461a      	mov	r2, r3
 8006256:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800625a:	6053      	str	r3, [r2, #4]
 800625c:	e009      	b.n	8006272 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800625e:	78fb      	ldrb	r3, [r7, #3]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d106      	bne.n	8006272 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800626a:	461a      	mov	r2, r3
 800626c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006270:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80062b0:	2064      	movs	r0, #100	; 0x64
 80062b2:	f7fb fb93 	bl	80019dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80062c4:	200a      	movs	r0, #10
 80062c6:	f7fb fb89 	bl	80019dc <HAL_Delay>

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062f8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d109      	bne.n	8006318 <USB_DriveVbus+0x44>
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d106      	bne.n	8006318 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006312:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006316:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006322:	d109      	bne.n	8006338 <USB_DriveVbus+0x64>
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006336:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	0c5b      	lsrs	r3, r3, #17
 8006364:	f003 0303 	and.w	r3, r3, #3
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	b29b      	uxth	r3, r3
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	4608      	mov	r0, r1
 80063a2:	4611      	mov	r1, r2
 80063a4:	461a      	mov	r2, r3
 80063a6:	4603      	mov	r3, r0
 80063a8:	70fb      	strb	r3, [r7, #3]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70bb      	strb	r3, [r7, #2]
 80063ae:	4613      	mov	r3, r2
 80063b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c6:	461a      	mov	r2, r3
 80063c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80063ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d87e      	bhi.n	80064d4 <USB_HC_Init+0x13c>
 80063d6:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <USB_HC_Init+0x44>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	080063ed 	.word	0x080063ed
 80063e0:	08006497 	.word	0x08006497
 80063e4:	080063ed 	.word	0x080063ed
 80063e8:	08006459 	.word	0x08006459
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	461a      	mov	r2, r3
 80063fa:	f240 439d 	movw	r3, #1181	; 0x49d
 80063fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006400:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006404:	2b00      	cmp	r3, #0
 8006406:	da10      	bge.n	800642a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	78fa      	ldrb	r2, [r7, #3]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	440a      	add	r2, r1
 800641e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006426:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006428:	e057      	b.n	80064da <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006432:	2b00      	cmp	r3, #0
 8006434:	d051      	beq.n	80064da <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4413      	add	r3, r2
 800643e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	78fa      	ldrb	r2, [r7, #3]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	440a      	add	r2, r1
 800644c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006450:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006454:	60d3      	str	r3, [r2, #12]
      break;
 8006456:	e040      	b.n	80064da <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4413      	add	r3, r2
 8006460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006464:	461a      	mov	r2, r3
 8006466:	f240 639d 	movw	r3, #1693	; 0x69d
 800646a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800646c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006470:	2b00      	cmp	r3, #0
 8006472:	da34      	bge.n	80064de <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4413      	add	r3, r2
 800647c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	78fa      	ldrb	r2, [r7, #3]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	440a      	add	r2, r1
 800648a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800648e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006492:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006494:	e023      	b.n	80064de <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006496:	78fb      	ldrb	r3, [r7, #3]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4413      	add	r3, r2
 800649e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a2:	461a      	mov	r2, r3
 80064a4:	f240 2325 	movw	r3, #549	; 0x225
 80064a8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80064aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	da17      	bge.n	80064e2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	78fa      	ldrb	r2, [r7, #3]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064cc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80064d0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80064d2:	e006      	b.n	80064e2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
      break;
 80064d8:	e004      	b.n	80064e4 <USB_HC_Init+0x14c>
      break;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <USB_HC_Init+0x14c>
      break;
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <USB_HC_Init+0x14c>
      break;
 80064e2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ea:	699a      	ldr	r2, [r3, #24]
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	2101      	movs	r1, #1
 80064f4:	fa01 f303 	lsl.w	r3, r1, r3
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064fe:	4313      	orrs	r3, r2
 8006500:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800650e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006512:	2b00      	cmp	r3, #0
 8006514:	da03      	bge.n	800651e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	e001      	b.n	8006522 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006522:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d103      	bne.n	8006532 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800652a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e001      	b.n	8006536 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006536:	787b      	ldrb	r3, [r7, #1]
 8006538:	059b      	lsls	r3, r3, #22
 800653a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800653e:	78bb      	ldrb	r3, [r7, #2]
 8006540:	02db      	lsls	r3, r3, #11
 8006542:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006546:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006548:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800654c:	049b      	lsls	r3, r3, #18
 800654e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006552:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006554:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006556:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800655a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	0159      	lsls	r1, r3, #5
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	440b      	add	r3, r1
 8006568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006572:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006574:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006578:	2b03      	cmp	r3, #3
 800657a:	d10f      	bne.n	800659c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	440a      	add	r2, r1
 8006592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006596:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800659a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800659c:	7dfb      	ldrb	r3, [r7, #23]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop

080065ac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08c      	sub	sp, #48	; 0x30
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4613      	mov	r3, r2
 80065b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	785b      	ldrb	r3, [r3, #1]
 80065c2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80065c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065c8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d028      	beq.n	8006628 <USB_HC_StartXfer+0x7c>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	791b      	ldrb	r3, [r3, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d124      	bne.n	8006628 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80065de:	79fb      	ldrb	r3, [r7, #7]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10b      	bne.n	80065fc <USB_HC_StartXfer+0x50>
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	795b      	ldrb	r3, [r3, #5]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d107      	bne.n	80065fc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	4619      	mov	r1, r3
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fa30 	bl	8006a58 <USB_DoPing>
      return HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e114      	b.n	8006826 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d112      	bne.n	8006628 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	4413      	add	r3, r2
 800660a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	0151      	lsls	r1, r2, #5
 8006614:	6a3a      	ldr	r2, [r7, #32]
 8006616:	440a      	add	r2, r1
 8006618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006620:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2200      	movs	r2, #0
 8006626:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d018      	beq.n	8006662 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	8912      	ldrh	r2, [r2, #8]
 8006638:	4413      	add	r3, r2
 800663a:	3b01      	subs	r3, #1
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	8912      	ldrh	r2, [r2, #8]
 8006640:	fbb3 f3f2 	udiv	r3, r3, r2
 8006644:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006646:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006648:	8b7b      	ldrh	r3, [r7, #26]
 800664a:	429a      	cmp	r2, r3
 800664c:	d90b      	bls.n	8006666 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800664e:	8b7b      	ldrh	r3, [r7, #26]
 8006650:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	8912      	ldrh	r2, [r2, #8]
 8006658:	fb02 f203 	mul.w	r2, r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	611a      	str	r2, [r3, #16]
 8006660:	e001      	b.n	8006666 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006662:	2301      	movs	r3, #1
 8006664:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	78db      	ldrb	r3, [r3, #3]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d006      	beq.n	800667c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800666e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	8912      	ldrh	r2, [r2, #8]
 8006674:	fb02 f203 	mul.w	r2, r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006686:	04d9      	lsls	r1, r3, #19
 8006688:	4b69      	ldr	r3, [pc, #420]	; (8006830 <USB_HC_StartXfer+0x284>)
 800668a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800668c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	7a9b      	ldrb	r3, [r3, #10]
 8006692:	075b      	lsls	r3, r3, #29
 8006694:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006698:	69f9      	ldr	r1, [r7, #28]
 800669a:	0148      	lsls	r0, r1, #5
 800669c:	6a39      	ldr	r1, [r7, #32]
 800669e:	4401      	add	r1, r0
 80066a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80066a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d009      	beq.n	80066c2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	68d9      	ldr	r1, [r3, #12]
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066be:	460a      	mov	r2, r1
 80066c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bf0c      	ite	eq
 80066d2:	2301      	moveq	r3, #1
 80066d4:	2300      	movne	r3, #0
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	6a3a      	ldr	r2, [r7, #32]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	4413      	add	r3, r2
 8006702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	7e7b      	ldrb	r3, [r7, #25]
 800670a:	075b      	lsls	r3, r3, #29
 800670c:	69f9      	ldr	r1, [r7, #28]
 800670e:	0148      	lsls	r0, r1, #5
 8006710:	6a39      	ldr	r1, [r7, #32]
 8006712:	4401      	add	r1, r0
 8006714:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006718:	4313      	orrs	r3, r2
 800671a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	4413      	add	r3, r2
 8006724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a42      	ldr	r2, [pc, #264]	; (8006834 <USB_HC_StartXfer+0x288>)
 800672c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800672e:	4b41      	ldr	r3, [pc, #260]	; (8006834 <USB_HC_StartXfer+0x288>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006736:	4a3f      	ldr	r2, [pc, #252]	; (8006834 <USB_HC_StartXfer+0x288>)
 8006738:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	78db      	ldrb	r3, [r3, #3]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d006      	beq.n	8006750 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006742:	4b3c      	ldr	r3, [pc, #240]	; (8006834 <USB_HC_StartXfer+0x288>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674a:	4a3a      	ldr	r2, [pc, #232]	; (8006834 <USB_HC_StartXfer+0x288>)
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	e005      	b.n	800675c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006750:	4b38      	ldr	r3, [pc, #224]	; (8006834 <USB_HC_StartXfer+0x288>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006758:	4a36      	ldr	r2, [pc, #216]	; (8006834 <USB_HC_StartXfer+0x288>)
 800675a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800675c:	4b35      	ldr	r3, [pc, #212]	; (8006834 <USB_HC_StartXfer+0x288>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006764:	4a33      	ldr	r2, [pc, #204]	; (8006834 <USB_HC_StartXfer+0x288>)
 8006766:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	4413      	add	r3, r2
 8006770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006774:	461a      	mov	r2, r3
 8006776:	4b2f      	ldr	r3, [pc, #188]	; (8006834 <USB_HC_StartXfer+0x288>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	e04f      	b.n	8006826 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	78db      	ldrb	r3, [r3, #3]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d14a      	bne.n	8006824 <USB_HC_StartXfer+0x278>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d046      	beq.n	8006824 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	79db      	ldrb	r3, [r3, #7]
 800679a:	2b03      	cmp	r3, #3
 800679c:	d830      	bhi.n	8006800 <USB_HC_StartXfer+0x254>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <USB_HC_StartXfer+0x1f8>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067b5 	.word	0x080067b5
 80067a8:	080067d9 	.word	0x080067d9
 80067ac:	080067b5 	.word	0x080067b5
 80067b0:	080067d9 	.word	0x080067d9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	3303      	adds	r3, #3
 80067ba:	089b      	lsrs	r3, r3, #2
 80067bc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80067be:	8afa      	ldrh	r2, [r7, #22]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d91c      	bls.n	8006804 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f043 0220 	orr.w	r2, r3, #32
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80067d6:	e015      	b.n	8006804 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	3303      	adds	r3, #3
 80067de:	089b      	lsrs	r3, r3, #2
 80067e0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80067e2:	8afa      	ldrh	r2, [r7, #22]
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d90a      	bls.n	8006808 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80067fe:	e003      	b.n	8006808 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006800:	bf00      	nop
 8006802:	e002      	b.n	800680a <USB_HC_StartXfer+0x25e>
        break;
 8006804:	bf00      	nop
 8006806:	e000      	b.n	800680a <USB_HC_StartXfer+0x25e>
        break;
 8006808:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	68d9      	ldr	r1, [r3, #12]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	785a      	ldrb	r2, [r3, #1]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	b298      	uxth	r0, r3
 8006818:	2300      	movs	r3, #0
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	4603      	mov	r3, r0
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f7ff fb84 	bl	8005f2c <USB_WritePacket>
  }

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3728      	adds	r7, #40	; 0x28
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	1ff80000 	.word	0x1ff80000
 8006834:	200000b4 	.word	0x200000b4

08006838 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	b29b      	uxth	r3, r3
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800685a:	b480      	push	{r7}
 800685c:	b087      	sub	sp, #28
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	4413      	add	r3, r2
 800687a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	0c9b      	lsrs	r3, r3, #18
 8006882:	f003 0303 	and.w	r3, r3, #3
 8006886:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <USB_HC_Halt+0x3a>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d16c      	bne.n	800696e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	4413      	add	r3, r2
 800689c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068b2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d143      	bne.n	8006948 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	4413      	add	r3, r2
 8006908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	440a      	add	r2, r1
 8006916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800691a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800691e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	3301      	adds	r3, #1
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800692c:	d81d      	bhi.n	800696a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006944:	d0ec      	beq.n	8006920 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006946:	e080      	b.n	8006a4a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	4413      	add	r3, r2
 8006950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	0151      	lsls	r1, r2, #5
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	440a      	add	r2, r1
 800695e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006966:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006968:	e06f      	b.n	8006a4a <USB_HC_Halt+0x1f0>
          break;
 800696a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800696c:	e06d      	b.n	8006a4a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	4413      	add	r3, r2
 8006976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	0151      	lsls	r1, r2, #5
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	440a      	add	r2, r1
 8006984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800698c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d143      	bne.n	8006a26 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	0151      	lsls	r1, r2, #5
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	440a      	add	r2, r1
 80069b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069bc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069dc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069fc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	3301      	adds	r3, #1
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a0a:	d81d      	bhi.n	8006a48 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a22:	d0ec      	beq.n	80069fe <USB_HC_Halt+0x1a4>
 8006a24:	e011      	b.n	8006a4a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	0151      	lsls	r1, r2, #5
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	440a      	add	r2, r1
 8006a3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	e000      	b.n	8006a4a <USB_HC_Halt+0x1f0>
          break;
 8006a48:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	04da      	lsls	r2, r3, #19
 8006a74:	4b15      	ldr	r3, [pc, #84]	; (8006acc <USB_DoPing+0x74>)
 8006a76:	4013      	ands	r3, r2
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	0151      	lsls	r1, r2, #5
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	440a      	add	r2, r1
 8006a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a88:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006aa0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aa8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	1ff80000 	.word	0x1ff80000

08006ad0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff f99f 	bl	8005e24 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006ae6:	2110      	movs	r1, #16
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff f9d7 	bl	8005e9c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff f9fa 	bl	8005ee8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	e01f      	b.n	8006b3a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b10:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b20:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2e:	461a      	mov	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	3301      	adds	r3, #1
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b0f      	cmp	r3, #15
 8006b3e:	d9dc      	bls.n	8006afa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b40:	2300      	movs	r3, #0
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	e034      	b.n	8006bb0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b5c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b6c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	3301      	adds	r3, #1
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b8c:	d80c      	bhi.n	8006ba8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ba4:	d0ec      	beq.n	8006b80 <USB_StopHost+0xb0>
 8006ba6:	e000      	b.n	8006baa <USB_StopHost+0xda>
        break;
 8006ba8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	3301      	adds	r3, #1
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2b0f      	cmp	r3, #15
 8006bb4:	d9c7      	bls.n	8006b46 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bc2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff f918 	bl	8005e02 <USB_EnableGlobalInt>

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006bdc:	b590      	push	{r4, r7, lr}
 8006bde:	b089      	sub	sp, #36	; 0x24
 8006be0:	af04      	add	r7, sp, #16
 8006be2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006be4:	2301      	movs	r3, #1
 8006be6:	2202      	movs	r2, #2
 8006be8:	2102      	movs	r1, #2
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fc68 	bl	80074c0 <USBH_FindInterface>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	2bff      	cmp	r3, #255	; 0xff
 8006bf8:	d002      	beq.n	8006c00 <USBH_CDC_InterfaceInit+0x24>
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d901      	bls.n	8006c04 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c00:	2302      	movs	r3, #2
 8006c02:	e13d      	b.n	8006e80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	4619      	mov	r1, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fc3d 	bl	8007488 <USBH_SelectInterface>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e131      	b.n	8006e80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006c22:	2050      	movs	r0, #80	; 0x50
 8006c24:	f002 fa04 	bl	8009030 <malloc>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e11f      	b.n	8006e80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006c40:	2250      	movs	r2, #80	; 0x50
 8006c42:	2100      	movs	r1, #0
 8006c44:	68b8      	ldr	r0, [r7, #8]
 8006c46:	f002 fa03 	bl	8009050 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	211a      	movs	r1, #26
 8006c50:	fb01 f303 	mul.w	r3, r1, r3
 8006c54:	4413      	add	r3, r2
 8006c56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b25b      	sxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	da15      	bge.n	8006c8e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	211a      	movs	r1, #26
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c72:	781a      	ldrb	r2, [r3, #0]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	211a      	movs	r1, #26
 8006c7e:	fb01 f303 	mul.w	r3, r1, r3
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c88:	881a      	ldrh	r2, [r3, #0]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 fe36 	bl	8008906 <USBH_AllocPipe>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	7819      	ldrb	r1, [r3, #0]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	7858      	ldrb	r0, [r3, #1]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	8952      	ldrh	r2, [r2, #10]
 8006cba:	9202      	str	r2, [sp, #8]
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	9201      	str	r2, [sp, #4]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 fdee 	bl	80088a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f002 f8fb 	bl	8008ed0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2200      	movs	r2, #0
 8006cde:	210a      	movs	r1, #10
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fbed 	bl	80074c0 <USBH_FindInterface>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	2bff      	cmp	r3, #255	; 0xff
 8006cee:	d002      	beq.n	8006cf6 <USBH_CDC_InterfaceInit+0x11a>
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d901      	bls.n	8006cfa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e0c2      	b.n	8006e80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	211a      	movs	r1, #26
 8006d00:	fb01 f303 	mul.w	r3, r1, r3
 8006d04:	4413      	add	r3, r2
 8006d06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b25b      	sxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	da16      	bge.n	8006d40 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	211a      	movs	r1, #26
 8006d18:	fb01 f303 	mul.w	r3, r1, r3
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	211a      	movs	r1, #26
 8006d2e:	fb01 f303 	mul.w	r3, r1, r3
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d38:	881a      	ldrh	r2, [r3, #0]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	835a      	strh	r2, [r3, #26]
 8006d3e:	e015      	b.n	8006d6c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	211a      	movs	r1, #26
 8006d46:	fb01 f303 	mul.w	r3, r1, r3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	211a      	movs	r1, #26
 8006d5c:	fb01 f303 	mul.w	r3, r1, r3
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d66:	881a      	ldrh	r2, [r3, #0]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	211a      	movs	r1, #26
 8006d72:	fb01 f303 	mul.w	r3, r1, r3
 8006d76:	4413      	add	r3, r2
 8006d78:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b25b      	sxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	da16      	bge.n	8006db2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	211a      	movs	r1, #26
 8006d8a:	fb01 f303 	mul.w	r3, r1, r3
 8006d8e:	4413      	add	r3, r2
 8006d90:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d94:	781a      	ldrb	r2, [r3, #0]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	211a      	movs	r1, #26
 8006da0:	fb01 f303 	mul.w	r3, r1, r3
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006daa:	881a      	ldrh	r2, [r3, #0]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	835a      	strh	r2, [r3, #26]
 8006db0:	e015      	b.n	8006dde <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	211a      	movs	r1, #26
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006dc2:	781a      	ldrb	r2, [r3, #0]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	211a      	movs	r1, #26
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006dd8:	881a      	ldrh	r2, [r3, #0]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	7b9b      	ldrb	r3, [r3, #14]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fd8e 	bl	8008906 <USBH_AllocPipe>
 8006dea:	4603      	mov	r3, r0
 8006dec:	461a      	mov	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	7bdb      	ldrb	r3, [r3, #15]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fd84 	bl	8008906 <USBH_AllocPipe>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	461a      	mov	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	7b59      	ldrb	r1, [r3, #13]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	7b98      	ldrb	r0, [r3, #14]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	8b12      	ldrh	r2, [r2, #24]
 8006e1e:	9202      	str	r2, [sp, #8]
 8006e20:	2202      	movs	r2, #2
 8006e22:	9201      	str	r2, [sp, #4]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	4623      	mov	r3, r4
 8006e28:	4602      	mov	r2, r0
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fd3c 	bl	80088a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	7b19      	ldrb	r1, [r3, #12]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	7bd8      	ldrb	r0, [r3, #15]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	8b52      	ldrh	r2, [r2, #26]
 8006e48:	9202      	str	r2, [sp, #8]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	9201      	str	r2, [sp, #4]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	4623      	mov	r3, r4
 8006e52:	4602      	mov	r2, r0
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 fd27 	bl	80088a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	7b5b      	ldrb	r3, [r3, #13]
 8006e66:	2200      	movs	r2, #0
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f002 f830 	bl	8008ed0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	7b1b      	ldrb	r3, [r3, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f002 f829 	bl	8008ed0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd90      	pop	{r4, r7, pc}

08006e88 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00e      	beq.n	8006ec0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fd1c 	bl	80088e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 fd47 	bl	8008948 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	7b1b      	ldrb	r3, [r3, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00e      	beq.n	8006ee6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	7b1b      	ldrb	r3, [r3, #12]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fd09 	bl	80088e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	7b1b      	ldrb	r3, [r3, #12]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 fd34 	bl	8008948 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	7b5b      	ldrb	r3, [r3, #13]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00e      	beq.n	8006f0c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	7b5b      	ldrb	r3, [r3, #13]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fcf6 	bl	80088e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	7b5b      	ldrb	r3, [r3, #13]
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fd21 	bl	8008948 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f002 f88d 	bl	8009040 <free>
    phost->pActiveClass->pData = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3340      	adds	r3, #64	; 0x40
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f8b1 	bl	80070ba <GetLineCoding>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006f5c:	7afb      	ldrb	r3, [r7, #11]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d105      	bne.n	8006f6e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f68:	2102      	movs	r1, #2
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006f6e:	7afb      	ldrb	r3, [r7, #11]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f80:	2301      	movs	r3, #1
 8006f82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d877      	bhi.n	800708c <USBH_CDC_Process+0x114>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <USBH_CDC_Process+0x2c>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fb9 	.word	0x08006fb9
 8006fa8:	08006fbf 	.word	0x08006fbf
 8006fac:	08006fef 	.word	0x08006fef
 8006fb0:	08007063 	.word	0x08007063
 8006fb4:	08007071 	.word	0x08007071
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	73fb      	strb	r3, [r7, #15]
      break;
 8006fbc:	e06d      	b.n	800709a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f897 	bl	80070f8 <SetLineCoding>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006fdc:	e058      	b.n	8007090 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006fde:	7bbb      	ldrb	r3, [r7, #14]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d055      	beq.n	8007090 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006fec:	e050      	b.n	8007090 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	3340      	adds	r3, #64	; 0x40
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f860 	bl	80070ba <GetLineCoding>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d126      	bne.n	8007052 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007016:	791b      	ldrb	r3, [r3, #4]
 8007018:	429a      	cmp	r2, r3
 800701a:	d13b      	bne.n	8007094 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007026:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007028:	429a      	cmp	r2, r3
 800702a:	d133      	bne.n	8007094 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007036:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007038:	429a      	cmp	r2, r3
 800703a:	d12b      	bne.n	8007094 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007044:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007046:	429a      	cmp	r2, r3
 8007048:	d124      	bne.n	8007094 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f95a 	bl	8007304 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007050:	e020      	b.n	8007094 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d01d      	beq.n	8007094 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2204      	movs	r2, #4
 800705c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007060:	e018      	b.n	8007094 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f867 	bl	8007136 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f8dc 	bl	8007226 <CDC_ProcessReception>
      break;
 800706e:	e014      	b.n	800709a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007070:	2100      	movs	r1, #0
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 ffe5 	bl	8008042 <USBH_ClrFeature>
 8007078:	4603      	mov	r3, r0
 800707a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10a      	bne.n	8007098 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800708a:	e005      	b.n	8007098 <USBH_CDC_Process+0x120>

    default:
      break;
 800708c:	bf00      	nop
 800708e:	e004      	b.n	800709a <USBH_CDC_Process+0x122>
      break;
 8007090:	bf00      	nop
 8007092:	e002      	b.n	800709a <USBH_CDC_Process+0x122>
      break;
 8007094:	bf00      	nop
 8007096:	e000      	b.n	800709a <USBH_CDC_Process+0x122>
      break;
 8007098:	bf00      	nop

  }

  return status;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	22a1      	movs	r2, #161	; 0xa1
 80070c8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2221      	movs	r2, #33	; 0x21
 80070ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2207      	movs	r2, #7
 80070e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2207      	movs	r2, #7
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 f98a 	bl	8008402 <USBH_CtlReq>
 80070ee:	4603      	mov	r3, r0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2221      	movs	r2, #33	; 0x21
 8007106:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2207      	movs	r2, #7
 800711e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2207      	movs	r2, #7
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 f96b 	bl	8008402 <USBH_CtlReq>
 800712c:	4603      	mov	r3, r0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b086      	sub	sp, #24
 800713a:	af02      	add	r7, sp, #8
 800713c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007148:	2300      	movs	r3, #0
 800714a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007152:	2b01      	cmp	r3, #1
 8007154:	d002      	beq.n	800715c <CDC_ProcessTransmission+0x26>
 8007156:	2b02      	cmp	r3, #2
 8007158:	d025      	beq.n	80071a6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800715a:	e060      	b.n	800721e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	8b12      	ldrh	r2, [r2, #24]
 8007164:	4293      	cmp	r3, r2
 8007166:	d90c      	bls.n	8007182 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	69d9      	ldr	r1, [r3, #28]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8b1a      	ldrh	r2, [r3, #24]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	7b58      	ldrb	r0, [r3, #13]
 8007174:	2301      	movs	r3, #1
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	4603      	mov	r3, r0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fb51 	bl	8008822 <USBH_BulkSendData>
 8007180:	e00c      	b.n	800719c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	7b58      	ldrb	r0, [r3, #13]
 8007190:	2301      	movs	r3, #1
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	4603      	mov	r3, r0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 fb43 	bl	8008822 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80071a4:	e03b      	b.n	800721e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	7b5b      	ldrb	r3, [r3, #13]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 fe65 	bl	8008e7c <USBH_LL_GetURBState>
 80071b2:	4603      	mov	r3, r0
 80071b4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80071b6:	7afb      	ldrb	r3, [r7, #11]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d128      	bne.n	800720e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	8b12      	ldrh	r2, [r2, #24]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d90e      	bls.n	80071e6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	8b12      	ldrh	r2, [r2, #24]
 80071d0:	1a9a      	subs	r2, r3, r2
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	8b12      	ldrh	r2, [r2, #24]
 80071de:	441a      	add	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	61da      	str	r2, [r3, #28]
 80071e4:	e002      	b.n	80071ec <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80071fc:	e00e      	b.n	800721c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f868 	bl	80072dc <USBH_CDC_TransmitCallback>
      break;
 800720c:	e006      	b.n	800721c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	2b02      	cmp	r3, #2
 8007212:	d103      	bne.n	800721c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800721c:	bf00      	nop
  }
}
 800721e:	bf00      	nop
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b086      	sub	sp, #24
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007238:	2300      	movs	r3, #0
 800723a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007242:	2b03      	cmp	r3, #3
 8007244:	d002      	beq.n	800724c <CDC_ProcessReception+0x26>
 8007246:	2b04      	cmp	r3, #4
 8007248:	d00e      	beq.n	8007268 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800724a:	e043      	b.n	80072d4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	6a19      	ldr	r1, [r3, #32]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	8b5a      	ldrh	r2, [r3, #26]
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	7b1b      	ldrb	r3, [r3, #12]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 fb07 	bl	800886c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2204      	movs	r2, #4
 8007262:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007266:	e035      	b.n	80072d4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	7b1b      	ldrb	r3, [r3, #12]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 fe04 	bl	8008e7c <USBH_LL_GetURBState>
 8007274:	4603      	mov	r3, r0
 8007276:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007278:	7cfb      	ldrb	r3, [r7, #19]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d129      	bne.n	80072d2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	7b1b      	ldrb	r3, [r3, #12]
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 fd67 	bl	8008d58 <USBH_LL_GetLastXferSize>
 800728a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	429a      	cmp	r2, r3
 8007294:	d016      	beq.n	80072c4 <CDC_ProcessReception+0x9e>
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	8b5b      	ldrh	r3, [r3, #26]
 800729a:	461a      	mov	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4293      	cmp	r3, r2
 80072a0:	d910      	bls.n	80072c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1ad2      	subs	r2, r2, r3
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	6a1a      	ldr	r2, [r3, #32]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	441a      	add	r2, r3
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2203      	movs	r2, #3
 80072be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80072c2:	e006      	b.n	80072d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f80f 	bl	80072f0 <USBH_CDC_ReceiveCallback>
      break;
 80072d2:	bf00      	nop
  }
}
 80072d4:	bf00      	nop
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	4613      	mov	r3, r2
 8007324:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800732c:	2302      	movs	r3, #2
 800732e:	e029      	b.n	8007384 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	79fa      	ldrb	r2, [r7, #7]
 8007334:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 f81f 	bl	800738c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d003      	beq.n	800737c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f001 fc39 	bl	8008bf4 <USBH_LL_Init>

  return USBH_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007398:	2300      	movs	r3, #0
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	e009      	b.n	80073b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	33e0      	adds	r3, #224	; 0xe0
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	2200      	movs	r2, #0
 80073aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3301      	adds	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b0e      	cmp	r3, #14
 80073b6:	d9f2      	bls.n	800739e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	e009      	b.n	80073d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80073c8:	2200      	movs	r2, #0
 80073ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d8:	d3f1      	bcc.n	80073be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2240      	movs	r2, #64	; 0x40
 80073fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d016      	beq.n	8007476 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10e      	bne.n	8007470 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007458:	1c59      	adds	r1, r3, #1
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	33de      	adds	r3, #222	; 0xde
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
 800746e:	e004      	b.n	800747a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007470:	2302      	movs	r3, #2
 8007472:	73fb      	strb	r3, [r7, #15]
 8007474:	e001      	b.n	800747a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007476:	2302      	movs	r3, #2
 8007478:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800749e:	78fa      	ldrb	r2, [r7, #3]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d204      	bcs.n	80074ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80074ac:	e001      	b.n	80074b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80074ae:	2302      	movs	r3, #2
 80074b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	4608      	mov	r0, r1
 80074ca:	4611      	mov	r1, r2
 80074cc:	461a      	mov	r2, r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	70fb      	strb	r3, [r7, #3]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70bb      	strb	r3, [r7, #2]
 80074d6:	4613      	mov	r3, r2
 80074d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80074de:	2300      	movs	r3, #0
 80074e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80074e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074ea:	e025      	b.n	8007538 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	221a      	movs	r2, #26
 80074f0:	fb02 f303 	mul.w	r3, r2, r3
 80074f4:	3308      	adds	r3, #8
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4413      	add	r3, r2
 80074fa:	3302      	adds	r3, #2
 80074fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	795b      	ldrb	r3, [r3, #5]
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	429a      	cmp	r2, r3
 8007506:	d002      	beq.n	800750e <USBH_FindInterface+0x4e>
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	2bff      	cmp	r3, #255	; 0xff
 800750c:	d111      	bne.n	8007532 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007512:	78ba      	ldrb	r2, [r7, #2]
 8007514:	429a      	cmp	r2, r3
 8007516:	d002      	beq.n	800751e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007518:	78bb      	ldrb	r3, [r7, #2]
 800751a:	2bff      	cmp	r3, #255	; 0xff
 800751c:	d109      	bne.n	8007532 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007522:	787a      	ldrb	r2, [r7, #1]
 8007524:	429a      	cmp	r2, r3
 8007526:	d002      	beq.n	800752e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007528:	787b      	ldrb	r3, [r7, #1]
 800752a:	2bff      	cmp	r3, #255	; 0xff
 800752c:	d101      	bne.n	8007532 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	e006      	b.n	8007540 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	3301      	adds	r3, #1
 8007536:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d9d6      	bls.n	80074ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800753e:	23ff      	movs	r3, #255	; 0xff
}
 8007540:	4618      	mov	r0, r3
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 fb89 	bl	8008c6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800755a:	2101      	movs	r1, #1
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 fca0 	bl	8008ea2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af04      	add	r7, sp, #16
 8007572:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007574:	2302      	movs	r3, #2
 8007576:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	d102      	bne.n	800758e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2203      	movs	r2, #3
 800758c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b0b      	cmp	r3, #11
 8007596:	f200 81b3 	bhi.w	8007900 <USBH_Process+0x394>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <USBH_Process+0x34>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075d1 	.word	0x080075d1
 80075a4:	08007603 	.word	0x08007603
 80075a8:	0800766b 	.word	0x0800766b
 80075ac:	0800789b 	.word	0x0800789b
 80075b0:	08007901 	.word	0x08007901
 80075b4:	0800770f 	.word	0x0800770f
 80075b8:	08007841 	.word	0x08007841
 80075bc:	08007745 	.word	0x08007745
 80075c0:	08007765 	.word	0x08007765
 80075c4:	08007785 	.word	0x08007785
 80075c8:	080077b3 	.word	0x080077b3
 80075cc:	08007883 	.word	0x08007883
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 8193 	beq.w	8007904 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80075e4:	20c8      	movs	r0, #200	; 0xc8
 80075e6:	f001 fca6 	bl	8008f36 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 fb99 	bl	8008d22 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007600:	e180      	b.n	8007904 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007608:	2b01      	cmp	r3, #1
 800760a:	d107      	bne.n	800761c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800761a:	e182      	b.n	8007922 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007626:	d914      	bls.n	8007652 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800762e:	3301      	adds	r3, #1
 8007630:	b2da      	uxtb	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800763e:	2b03      	cmp	r3, #3
 8007640:	d903      	bls.n	800764a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	220d      	movs	r2, #13
 8007646:	701a      	strb	r2, [r3, #0]
      break;
 8007648:	e16b      	b.n	8007922 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	701a      	strb	r2, [r3, #0]
      break;
 8007650:	e167      	b.n	8007922 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007658:	f103 020a 	add.w	r2, r3, #10
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007662:	200a      	movs	r0, #10
 8007664:	f001 fc67 	bl	8008f36 <USBH_Delay>
      break;
 8007668:	e15b      	b.n	8007922 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800767a:	2104      	movs	r1, #4
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007680:	2064      	movs	r0, #100	; 0x64
 8007682:	f001 fc58 	bl	8008f36 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 fb26 	bl	8008cd8 <USBH_LL_GetSpeed>
 800768c:	4603      	mov	r3, r0
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2205      	movs	r2, #5
 800769a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800769c:	2100      	movs	r1, #0
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 f931 	bl	8008906 <USBH_AllocPipe>
 80076a4:	4603      	mov	r3, r0
 80076a6:	461a      	mov	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80076ac:	2180      	movs	r1, #128	; 0x80
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 f929 	bl	8008906 <USBH_AllocPipe>
 80076b4:	4603      	mov	r3, r0
 80076b6:	461a      	mov	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	7919      	ldrb	r1, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076d0:	b292      	uxth	r2, r2
 80076d2:	9202      	str	r2, [sp, #8]
 80076d4:	2200      	movs	r2, #0
 80076d6:	9201      	str	r2, [sp, #4]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	4603      	mov	r3, r0
 80076dc:	2280      	movs	r2, #128	; 0x80
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 f8e2 	bl	80088a8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	7959      	ldrb	r1, [r3, #5]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80076f8:	b292      	uxth	r2, r2
 80076fa:	9202      	str	r2, [sp, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	9201      	str	r2, [sp, #4]
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	4603      	mov	r3, r0
 8007704:	2200      	movs	r2, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 f8ce 	bl	80088a8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800770c:	e109      	b.n	8007922 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f90c 	bl	800792c <USBH_HandleEnum>
 8007714:	4603      	mov	r3, r0
 8007716:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	f040 80f3 	bne.w	8007908 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007730:	2b01      	cmp	r3, #1
 8007732:	d103      	bne.n	800773c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2208      	movs	r2, #8
 8007738:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800773a:	e0e5      	b.n	8007908 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2207      	movs	r2, #7
 8007740:	701a      	strb	r2, [r3, #0]
      break;
 8007742:	e0e1      	b.n	8007908 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 80de 	beq.w	800790c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007756:	2101      	movs	r1, #1
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2208      	movs	r2, #8
 8007760:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007762:	e0d3      	b.n	800790c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800776a:	b29b      	uxth	r3, r3
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fc20 	bl	8007fb4 <USBH_SetCfg>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	f040 80ca 	bne.w	8007910 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2209      	movs	r2, #9
 8007780:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007782:	e0c5      	b.n	8007910 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007792:	2101      	movs	r1, #1
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fc30 	bl	8007ffa <USBH_SetFeature>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 80b9 	bne.w	8007914 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	220a      	movs	r2, #10
 80077a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077a8:	e0b4      	b.n	8007914 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	220a      	movs	r2, #10
 80077ae:	701a      	strb	r2, [r3, #0]
      break;
 80077b0:	e0b0      	b.n	8007914 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 80ad 	beq.w	8007918 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]
 80077ca:	e016      	b.n	80077fa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80077cc:	7bfa      	ldrb	r2, [r7, #15]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32de      	adds	r2, #222	; 0xde
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	791a      	ldrb	r2, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80077de:	429a      	cmp	r2, r3
 80077e0:	d108      	bne.n	80077f4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80077e2:	7bfa      	ldrb	r2, [r7, #15]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	32de      	adds	r2, #222	; 0xde
 80077e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80077f2:	e005      	b.n	8007800 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	3301      	adds	r3, #1
 80077f8:	73fb      	strb	r3, [r7, #15]
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0e5      	beq.n	80077cc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d016      	beq.n	8007838 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d109      	bne.n	8007830 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2206      	movs	r2, #6
 8007820:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007828:	2103      	movs	r1, #3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800782e:	e073      	b.n	8007918 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	220d      	movs	r2, #13
 8007834:	701a      	strb	r2, [r3, #0]
      break;
 8007836:	e06f      	b.n	8007918 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	220d      	movs	r2, #13
 800783c:	701a      	strb	r2, [r3, #0]
      break;
 800783e:	e06b      	b.n	8007918 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d017      	beq.n	800787a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	4798      	blx	r3
 8007856:	4603      	mov	r3, r0
 8007858:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	220b      	movs	r2, #11
 8007866:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007868:	e058      	b.n	800791c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b02      	cmp	r3, #2
 8007870:	d154      	bne.n	800791c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	220d      	movs	r2, #13
 8007876:	701a      	strb	r2, [r3, #0]
      break;
 8007878:	e050      	b.n	800791c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	220d      	movs	r2, #13
 800787e:	701a      	strb	r2, [r3, #0]
      break;
 8007880:	e04c      	b.n	800791c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d049      	beq.n	8007920 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	4798      	blx	r3
      }
      break;
 8007898:	e042      	b.n	8007920 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff fd72 	bl	800738c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d009      	beq.n	80078c6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d005      	beq.n	80078dc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078d6:	2105      	movs	r1, #5
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d107      	bne.n	80078f8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff fe2b 	bl	800754c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078f6:	e014      	b.n	8007922 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 f9b7 	bl	8008c6c <USBH_LL_Start>
      break;
 80078fe:	e010      	b.n	8007922 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007900:	bf00      	nop
 8007902:	e00e      	b.n	8007922 <USBH_Process+0x3b6>
      break;
 8007904:	bf00      	nop
 8007906:	e00c      	b.n	8007922 <USBH_Process+0x3b6>
      break;
 8007908:	bf00      	nop
 800790a:	e00a      	b.n	8007922 <USBH_Process+0x3b6>
    break;
 800790c:	bf00      	nop
 800790e:	e008      	b.n	8007922 <USBH_Process+0x3b6>
      break;
 8007910:	bf00      	nop
 8007912:	e006      	b.n	8007922 <USBH_Process+0x3b6>
      break;
 8007914:	bf00      	nop
 8007916:	e004      	b.n	8007922 <USBH_Process+0x3b6>
      break;
 8007918:	bf00      	nop
 800791a:	e002      	b.n	8007922 <USBH_Process+0x3b6>
      break;
 800791c:	bf00      	nop
 800791e:	e000      	b.n	8007922 <USBH_Process+0x3b6>
      break;
 8007920:	bf00      	nop
  }
  return USBH_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af04      	add	r7, sp, #16
 8007932:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007934:	2301      	movs	r3, #1
 8007936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007938:	2301      	movs	r3, #1
 800793a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	785b      	ldrb	r3, [r3, #1]
 8007940:	2b07      	cmp	r3, #7
 8007942:	f200 81c1 	bhi.w	8007cc8 <USBH_HandleEnum+0x39c>
 8007946:	a201      	add	r2, pc, #4	; (adr r2, 800794c <USBH_HandleEnum+0x20>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	0800796d 	.word	0x0800796d
 8007950:	08007a2b 	.word	0x08007a2b
 8007954:	08007a95 	.word	0x08007a95
 8007958:	08007b23 	.word	0x08007b23
 800795c:	08007b8d 	.word	0x08007b8d
 8007960:	08007bfd 	.word	0x08007bfd
 8007964:	08007c43 	.word	0x08007c43
 8007968:	08007c89 	.word	0x08007c89
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800796c:	2108      	movs	r1, #8
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fa50 	bl	8007e14 <USBH_Get_DevDesc>
 8007974:	4603      	mov	r3, r0
 8007976:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d130      	bne.n	80079e0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	7919      	ldrb	r1, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079a2:	b292      	uxth	r2, r2
 80079a4:	9202      	str	r2, [sp, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	9201      	str	r2, [sp, #4]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4603      	mov	r3, r0
 80079ae:	2280      	movs	r2, #128	; 0x80
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 ff79 	bl	80088a8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	7959      	ldrb	r1, [r3, #5]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079ca:	b292      	uxth	r2, r2
 80079cc:	9202      	str	r2, [sp, #8]
 80079ce:	2200      	movs	r2, #0
 80079d0:	9201      	str	r2, [sp, #4]
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	4603      	mov	r3, r0
 80079d6:	2200      	movs	r2, #0
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 ff65 	bl	80088a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079de:	e175      	b.n	8007ccc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	f040 8172 	bne.w	8007ccc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079ee:	3301      	adds	r3, #1
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d903      	bls.n	8007a0a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	220d      	movs	r2, #13
 8007a06:	701a      	strb	r2, [r3, #0]
      break;
 8007a08:	e160      	b.n	8007ccc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	795b      	ldrb	r3, [r3, #5]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 ff99 	bl	8008948 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	791b      	ldrb	r3, [r3, #4]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 ff93 	bl	8008948 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	701a      	strb	r2, [r3, #0]
      break;
 8007a28:	e150      	b.n	8007ccc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a2a:	2112      	movs	r1, #18
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f9f1 	bl	8007e14 <USBH_Get_DevDesc>
 8007a32:	4603      	mov	r3, r0
 8007a34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d103      	bne.n	8007a44 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a42:	e145      	b.n	8007cd0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	f040 8142 	bne.w	8007cd0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a52:	3301      	adds	r3, #1
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d903      	bls.n	8007a6e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	220d      	movs	r2, #13
 8007a6a:	701a      	strb	r2, [r3, #0]
      break;
 8007a6c:	e130      	b.n	8007cd0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	795b      	ldrb	r3, [r3, #5]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 ff67 	bl	8008948 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	791b      	ldrb	r3, [r3, #4]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 ff61 	bl	8008948 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
      break;
 8007a92:	e11d      	b.n	8007cd0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a94:	2101      	movs	r1, #1
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa68 	bl	8007f6c <USBH_SetAddress>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d132      	bne.n	8007b0c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007aa6:	2002      	movs	r0, #2
 8007aa8:	f001 fa45 	bl	8008f36 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2203      	movs	r2, #3
 8007ab8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	7919      	ldrb	r1, [r3, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ace:	b292      	uxth	r2, r2
 8007ad0:	9202      	str	r2, [sp, #8]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	9201      	str	r2, [sp, #4]
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2280      	movs	r2, #128	; 0x80
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fee3 	bl	80088a8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	7959      	ldrb	r1, [r3, #5]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007af6:	b292      	uxth	r2, r2
 8007af8:	9202      	str	r2, [sp, #8]
 8007afa:	2200      	movs	r2, #0
 8007afc:	9201      	str	r2, [sp, #4]
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	4603      	mov	r3, r0
 8007b02:	2200      	movs	r2, #0
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fecf 	bl	80088a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b0a:	e0e3      	b.n	8007cd4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	f040 80e0 	bne.w	8007cd4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	220d      	movs	r2, #13
 8007b18:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	705a      	strb	r2, [r3, #1]
      break;
 8007b20:	e0d8      	b.n	8007cd4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b22:	2109      	movs	r1, #9
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f99d 	bl	8007e64 <USBH_Get_CfgDesc>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d103      	bne.n	8007b3c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2204      	movs	r2, #4
 8007b38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b3a:	e0cd      	b.n	8007cd8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	f040 80ca 	bne.w	8007cd8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d903      	bls.n	8007b66 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	220d      	movs	r2, #13
 8007b62:	701a      	strb	r2, [r3, #0]
      break;
 8007b64:	e0b8      	b.n	8007cd8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	795b      	ldrb	r3, [r3, #5]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 feeb 	bl	8008948 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	791b      	ldrb	r3, [r3, #4]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fee5 	bl	8008948 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	701a      	strb	r2, [r3, #0]
      break;
 8007b8a:	e0a5      	b.n	8007cd8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f965 	bl	8007e64 <USBH_Get_CfgDesc>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d103      	bne.n	8007bac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2205      	movs	r2, #5
 8007ba8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007baa:	e097      	b.n	8007cdc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	f040 8094 	bne.w	8007cdc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bba:	3301      	adds	r3, #1
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d903      	bls.n	8007bd6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	220d      	movs	r2, #13
 8007bd2:	701a      	strb	r2, [r3, #0]
      break;
 8007bd4:	e082      	b.n	8007cdc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	795b      	ldrb	r3, [r3, #5]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 feb3 	bl	8008948 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	791b      	ldrb	r3, [r3, #4]
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fead 	bl	8008948 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
      break;
 8007bfa:	e06f      	b.n	8007cdc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d019      	beq.n	8007c3a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c12:	23ff      	movs	r3, #255	; 0xff
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f949 	bl	8007eac <USBH_Get_StringDesc>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d103      	bne.n	8007c2c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2206      	movs	r2, #6
 8007c28:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c2a:	e059      	b.n	8007ce0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d156      	bne.n	8007ce0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2206      	movs	r2, #6
 8007c36:	705a      	strb	r2, [r3, #1]
      break;
 8007c38:	e052      	b.n	8007ce0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2206      	movs	r2, #6
 8007c3e:	705a      	strb	r2, [r3, #1]
      break;
 8007c40:	e04e      	b.n	8007ce0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d019      	beq.n	8007c80 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c58:	23ff      	movs	r3, #255	; 0xff
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f926 	bl	8007eac <USBH_Get_StringDesc>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2207      	movs	r2, #7
 8007c6e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c70:	e038      	b.n	8007ce4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d135      	bne.n	8007ce4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2207      	movs	r2, #7
 8007c7c:	705a      	strb	r2, [r3, #1]
      break;
 8007c7e:	e031      	b.n	8007ce4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2207      	movs	r2, #7
 8007c84:	705a      	strb	r2, [r3, #1]
      break;
 8007c86:	e02d      	b.n	8007ce4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d017      	beq.n	8007cc2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c9e:	23ff      	movs	r3, #255	; 0xff
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f903 	bl	8007eac <USBH_Get_StringDesc>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007cb4:	e018      	b.n	8007ce8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d115      	bne.n	8007ce8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc0:	e012      	b.n	8007ce8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc6:	e00f      	b.n	8007ce8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007cc8:	bf00      	nop
 8007cca:	e00e      	b.n	8007cea <USBH_HandleEnum+0x3be>
      break;
 8007ccc:	bf00      	nop
 8007cce:	e00c      	b.n	8007cea <USBH_HandleEnum+0x3be>
      break;
 8007cd0:	bf00      	nop
 8007cd2:	e00a      	b.n	8007cea <USBH_HandleEnum+0x3be>
      break;
 8007cd4:	bf00      	nop
 8007cd6:	e008      	b.n	8007cea <USBH_HandleEnum+0x3be>
      break;
 8007cd8:	bf00      	nop
 8007cda:	e006      	b.n	8007cea <USBH_HandleEnum+0x3be>
      break;
 8007cdc:	bf00      	nop
 8007cde:	e004      	b.n	8007cea <USBH_HandleEnum+0x3be>
      break;
 8007ce0:	bf00      	nop
 8007ce2:	e002      	b.n	8007cea <USBH_HandleEnum+0x3be>
      break;
 8007ce4:	bf00      	nop
 8007ce6:	e000      	b.n	8007cea <USBH_HandleEnum+0x3be>
      break;
 8007ce8:	bf00      	nop
  }
  return Status;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f804 	bl	8007d36 <USBH_HandleSof>
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b0b      	cmp	r3, #11
 8007d46:	d10a      	bne.n	8007d5e <USBH_HandleSof+0x28>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4798      	blx	r3
  }
}
 8007d5e:	bf00      	nop
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007d76:	bf00      	nop
}
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007d92:	bf00      	nop
}
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 ff58 	bl	8008ca2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	791b      	ldrb	r3, [r3, #4]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fda5 	bl	8008948 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	795b      	ldrb	r3, [r3, #5]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fd9f 	bl	8008948 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af02      	add	r7, sp, #8
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007e26:	78fb      	ldrb	r3, [r7, #3]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e32:	2100      	movs	r1, #0
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f864 	bl	8007f02 <USBH_GetDescriptor>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	73fb      	strb	r3, [r7, #15]
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10a      	bne.n	8007e5a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e50:	78fa      	ldrb	r2, [r7, #3]
 8007e52:	b292      	uxth	r2, r2
 8007e54:	4619      	mov	r1, r3
 8007e56:	f000 f918 	bl	800808a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	331c      	adds	r3, #28
 8007e74:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007e76:	887b      	ldrh	r3, [r7, #2]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e80:	2100      	movs	r1, #0
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f83d 	bl	8007f02 <USBH_GetDescriptor>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	72fb      	strb	r3, [r7, #11]
 8007e8c:	7afb      	ldrb	r3, [r7, #11]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d107      	bne.n	8007ea2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e98:	887a      	ldrh	r2, [r7, #2]
 8007e9a:	68f9      	ldr	r1, [r7, #12]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 f964 	bl	800816a <USBH_ParseCfgDesc>
  }

  return status;
 8007ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af02      	add	r7, sp, #8
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	607a      	str	r2, [r7, #4]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	460b      	mov	r3, r1
 8007eba:	72fb      	strb	r3, [r7, #11]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007ec0:	7afb      	ldrb	r3, [r7, #11]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007ec8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007ed0:	893b      	ldrh	r3, [r7, #8]
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 f812 	bl	8007f02 <USBH_GetDescriptor>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	75fb      	strb	r3, [r7, #23]
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d107      	bne.n	8007ef8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007eee:	893a      	ldrh	r2, [r7, #8]
 8007ef0:	6879      	ldr	r1, [r7, #4]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fa37 	bl	8008366 <USBH_ParseStringDesc>
  }

  return status;
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	607b      	str	r3, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	72fb      	strb	r3, [r7, #11]
 8007f10:	4613      	mov	r3, r2
 8007f12:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	789b      	ldrb	r3, [r3, #2]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d11c      	bne.n	8007f56 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f1c:	7afb      	ldrb	r3, [r7, #11]
 8007f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2206      	movs	r2, #6
 8007f2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	893a      	ldrh	r2, [r7, #8]
 8007f32:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f34:	893b      	ldrh	r3, [r7, #8]
 8007f36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f3e:	d104      	bne.n	8007f4a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f240 4209 	movw	r2, #1033	; 0x409
 8007f46:	829a      	strh	r2, [r3, #20]
 8007f48:	e002      	b.n	8007f50 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	8b3a      	ldrh	r2, [r7, #24]
 8007f54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007f56:	8b3b      	ldrh	r3, [r7, #24]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 fa50 	bl	8008402 <USBH_CtlReq>
 8007f62:	4603      	mov	r3, r0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	789b      	ldrb	r3, [r3, #2]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d10f      	bne.n	8007fa0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2205      	movs	r2, #5
 8007f8a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fa2c 	bl	8008402 <USBH_CtlReq>
 8007faa:	4603      	mov	r3, r0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	789b      	ldrb	r3, [r3, #2]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d10e      	bne.n	8007fe6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2209      	movs	r2, #9
 8007fd2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	887a      	ldrh	r2, [r7, #2]
 8007fd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2100      	movs	r1, #0
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa09 	bl	8008402 <USBH_CtlReq>
 8007ff0:	4603      	mov	r3, r0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	789b      	ldrb	r3, [r3, #2]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d10f      	bne.n	800802e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2203      	movs	r2, #3
 8008018:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800801a:	78fb      	ldrb	r3, [r7, #3]
 800801c:	b29a      	uxth	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800802e:	2200      	movs	r2, #0
 8008030:	2100      	movs	r1, #0
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f9e5 	bl	8008402 <USBH_CtlReq>
 8008038:	4603      	mov	r3, r0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	460b      	mov	r3, r1
 800804c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	789b      	ldrb	r3, [r3, #2]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d10f      	bne.n	8008076 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2202      	movs	r2, #2
 800805a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	b29a      	uxth	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008076:	2200      	movs	r2, #0
 8008078:	2100      	movs	r1, #0
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f9c1 	bl	8008402 <USBH_CtlReq>
 8008080:	4603      	mov	r3, r0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	4613      	mov	r3, r2
 8008096:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	781a      	ldrb	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	785a      	ldrb	r2, [r3, #1]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	3302      	adds	r3, #2
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	3303      	adds	r3, #3
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	021b      	lsls	r3, r3, #8
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	4313      	orrs	r3, r2
 80080be:	b29a      	uxth	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	791a      	ldrb	r2, [r3, #4]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	795a      	ldrb	r2, [r3, #5]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	799a      	ldrb	r2, [r3, #6]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	79da      	ldrb	r2, [r3, #7]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80080e4:	88fb      	ldrh	r3, [r7, #6]
 80080e6:	2b08      	cmp	r3, #8
 80080e8:	d939      	bls.n	800815e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	3308      	adds	r3, #8
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	3309      	adds	r3, #9
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	021b      	lsls	r3, r3, #8
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	4313      	orrs	r3, r2
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	330a      	adds	r3, #10
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	b29a      	uxth	r2, r3
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	330b      	adds	r3, #11
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	021b      	lsls	r3, r3, #8
 8008118:	b29b      	uxth	r3, r3
 800811a:	4313      	orrs	r3, r2
 800811c:	b29a      	uxth	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	330c      	adds	r3, #12
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	b29a      	uxth	r2, r3
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	330d      	adds	r3, #13
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	b29b      	uxth	r3, r3
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	b29b      	uxth	r3, r3
 8008136:	4313      	orrs	r3, r2
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	7b9a      	ldrb	r2, [r3, #14]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	7bda      	ldrb	r2, [r3, #15]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	7c1a      	ldrb	r2, [r3, #16]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	7c5a      	ldrb	r2, [r3, #17]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	745a      	strb	r2, [r3, #17]
  }
}
 800815e:	bf00      	nop
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b08a      	sub	sp, #40	; 0x28
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	4613      	mov	r3, r2
 8008176:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	781a      	ldrb	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	785a      	ldrb	r2, [r3, #1]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	3302      	adds	r3, #2
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	3303      	adds	r3, #3
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	4313      	orrs	r3, r2
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	791a      	ldrb	r2, [r3, #4]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	795a      	ldrb	r2, [r3, #5]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	799a      	ldrb	r2, [r3, #6]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	79da      	ldrb	r2, [r3, #7]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	7a1a      	ldrb	r2, [r3, #8]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80081e0:	88fb      	ldrh	r3, [r7, #6]
 80081e2:	2b09      	cmp	r3, #9
 80081e4:	d95f      	bls.n	80082a6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80081e6:	2309      	movs	r3, #9
 80081e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081ee:	e051      	b.n	8008294 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80081f0:	f107 0316 	add.w	r3, r7, #22
 80081f4:	4619      	mov	r1, r3
 80081f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081f8:	f000 f8e8 	bl	80083cc <USBH_GetNextDesc>
 80081fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	785b      	ldrb	r3, [r3, #1]
 8008202:	2b04      	cmp	r3, #4
 8008204:	d146      	bne.n	8008294 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008206:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800820a:	221a      	movs	r2, #26
 800820c:	fb02 f303 	mul.w	r3, r2, r3
 8008210:	3308      	adds	r3, #8
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	4413      	add	r3, r2
 8008216:	3302      	adds	r3, #2
 8008218:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800821a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800821c:	69f8      	ldr	r0, [r7, #28]
 800821e:	f000 f846 	bl	80082ae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008228:	2300      	movs	r3, #0
 800822a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800822c:	e022      	b.n	8008274 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800822e:	f107 0316 	add.w	r3, r7, #22
 8008232:	4619      	mov	r1, r3
 8008234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008236:	f000 f8c9 	bl	80083cc <USBH_GetNextDesc>
 800823a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	785b      	ldrb	r3, [r3, #1]
 8008240:	2b05      	cmp	r3, #5
 8008242:	d117      	bne.n	8008274 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008244:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008248:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800824c:	3201      	adds	r2, #1
 800824e:	00d2      	lsls	r2, r2, #3
 8008250:	211a      	movs	r1, #26
 8008252:	fb01 f303 	mul.w	r3, r1, r3
 8008256:	4413      	add	r3, r2
 8008258:	3308      	adds	r3, #8
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	4413      	add	r3, r2
 800825e:	3304      	adds	r3, #4
 8008260:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008264:	69b8      	ldr	r0, [r7, #24]
 8008266:	f000 f851 	bl	800830c <USBH_ParseEPDesc>
            ep_ix++;
 800826a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800826e:	3301      	adds	r3, #1
 8008270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	791b      	ldrb	r3, [r3, #4]
 8008278:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800827c:	429a      	cmp	r2, r3
 800827e:	d204      	bcs.n	800828a <USBH_ParseCfgDesc+0x120>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	885a      	ldrh	r2, [r3, #2]
 8008284:	8afb      	ldrh	r3, [r7, #22]
 8008286:	429a      	cmp	r2, r3
 8008288:	d8d1      	bhi.n	800822e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800828a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800828e:	3301      	adds	r3, #1
 8008290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008294:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008298:	2b01      	cmp	r3, #1
 800829a:	d804      	bhi.n	80082a6 <USBH_ParseCfgDesc+0x13c>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	885a      	ldrh	r2, [r3, #2]
 80082a0:	8afb      	ldrh	r3, [r7, #22]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d8a4      	bhi.n	80081f0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80082a6:	bf00      	nop
 80082a8:	3728      	adds	r7, #40	; 0x28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781a      	ldrb	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	785a      	ldrb	r2, [r3, #1]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	789a      	ldrb	r2, [r3, #2]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	78da      	ldrb	r2, [r3, #3]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	791a      	ldrb	r2, [r3, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	795a      	ldrb	r2, [r3, #5]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	799a      	ldrb	r2, [r3, #6]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	79da      	ldrb	r2, [r3, #7]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	7a1a      	ldrb	r2, [r3, #8]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	721a      	strb	r2, [r3, #8]
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781a      	ldrb	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	785a      	ldrb	r2, [r3, #1]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	789a      	ldrb	r2, [r3, #2]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	78da      	ldrb	r2, [r3, #3]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	3304      	adds	r3, #4
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	b29a      	uxth	r2, r3
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	3305      	adds	r3, #5
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	b29b      	uxth	r3, r3
 8008346:	021b      	lsls	r3, r3, #8
 8008348:	b29b      	uxth	r3, r3
 800834a:	4313      	orrs	r3, r2
 800834c:	b29a      	uxth	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	799a      	ldrb	r2, [r3, #6]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	719a      	strb	r2, [r3, #6]
}
 800835a:	bf00      	nop
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008366:	b480      	push	{r7}
 8008368:	b087      	sub	sp, #28
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	4613      	mov	r3, r2
 8008372:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3301      	adds	r3, #1
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2b03      	cmp	r3, #3
 800837c:	d120      	bne.n	80083c0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	1e9a      	subs	r2, r3, #2
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	4293      	cmp	r3, r2
 8008388:	bf28      	it	cs
 800838a:	4613      	movcs	r3, r2
 800838c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3302      	adds	r3, #2
 8008392:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008394:	2300      	movs	r3, #0
 8008396:	82fb      	strh	r3, [r7, #22]
 8008398:	e00b      	b.n	80083b2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800839a:	8afb      	ldrh	r3, [r7, #22]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	781a      	ldrb	r2, [r3, #0]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	3301      	adds	r3, #1
 80083aa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80083ac:	8afb      	ldrh	r3, [r7, #22]
 80083ae:	3302      	adds	r3, #2
 80083b0:	82fb      	strh	r3, [r7, #22]
 80083b2:	8afa      	ldrh	r2, [r7, #22]
 80083b4:	8abb      	ldrh	r3, [r7, #20]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d3ef      	bcc.n	800839a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2200      	movs	r2, #0
 80083be:	701a      	strb	r2, [r3, #0]
  }
}
 80083c0:	bf00      	nop
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	881a      	ldrh	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	4413      	add	r3, r2
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4413      	add	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083f4:	68fb      	ldr	r3, [r7, #12]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b086      	sub	sp, #24
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	4613      	mov	r3, r2
 800840e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008410:	2301      	movs	r3, #1
 8008412:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	789b      	ldrb	r3, [r3, #2]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d002      	beq.n	8008422 <USBH_CtlReq+0x20>
 800841c:	2b02      	cmp	r3, #2
 800841e:	d00f      	beq.n	8008440 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008420:	e027      	b.n	8008472 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	88fa      	ldrh	r2, [r7, #6]
 800842c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2201      	movs	r2, #1
 8008432:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2202      	movs	r2, #2
 8008438:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800843a:	2301      	movs	r3, #1
 800843c:	75fb      	strb	r3, [r7, #23]
      break;
 800843e:	e018      	b.n	8008472 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 f81b 	bl	800847c <USBH_HandleControl>
 8008446:	4603      	mov	r3, r0
 8008448:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800844a:	7dfb      	ldrb	r3, [r7, #23]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <USBH_CtlReq+0x54>
 8008450:	7dfb      	ldrb	r3, [r7, #23]
 8008452:	2b03      	cmp	r3, #3
 8008454:	d106      	bne.n	8008464 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	761a      	strb	r2, [r3, #24]
      break;
 8008462:	e005      	b.n	8008470 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	2b02      	cmp	r3, #2
 8008468:	d102      	bne.n	8008470 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	709a      	strb	r2, [r3, #2]
      break;
 8008470:	bf00      	nop
  }
  return status;
 8008472:	7dfb      	ldrb	r3, [r7, #23]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af02      	add	r7, sp, #8
 8008482:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008484:	2301      	movs	r3, #1
 8008486:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008488:	2300      	movs	r3, #0
 800848a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	7e1b      	ldrb	r3, [r3, #24]
 8008490:	3b01      	subs	r3, #1
 8008492:	2b0a      	cmp	r3, #10
 8008494:	f200 8158 	bhi.w	8008748 <USBH_HandleControl+0x2cc>
 8008498:	a201      	add	r2, pc, #4	; (adr r2, 80084a0 <USBH_HandleControl+0x24>)
 800849a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849e:	bf00      	nop
 80084a0:	080084cd 	.word	0x080084cd
 80084a4:	080084e7 	.word	0x080084e7
 80084a8:	08008551 	.word	0x08008551
 80084ac:	08008577 	.word	0x08008577
 80084b0:	080085af 	.word	0x080085af
 80084b4:	080085db 	.word	0x080085db
 80084b8:	0800862d 	.word	0x0800862d
 80084bc:	0800864f 	.word	0x0800864f
 80084c0:	0800868b 	.word	0x0800868b
 80084c4:	080086b3 	.word	0x080086b3
 80084c8:	080086f1 	.word	0x080086f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f103 0110 	add.w	r1, r3, #16
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	795b      	ldrb	r3, [r3, #5]
 80084d6:	461a      	mov	r2, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f945 	bl	8008768 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2202      	movs	r2, #2
 80084e2:	761a      	strb	r2, [r3, #24]
      break;
 80084e4:	e13b      	b.n	800875e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	795b      	ldrb	r3, [r3, #5]
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fcc5 	bl	8008e7c <USBH_LL_GetURBState>
 80084f2:	4603      	mov	r3, r0
 80084f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d11e      	bne.n	800853a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	7c1b      	ldrb	r3, [r3, #16]
 8008500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008504:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	8adb      	ldrh	r3, [r3, #22]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800850e:	7b7b      	ldrb	r3, [r7, #13]
 8008510:	2b80      	cmp	r3, #128	; 0x80
 8008512:	d103      	bne.n	800851c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2203      	movs	r2, #3
 8008518:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800851a:	e117      	b.n	800874c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2205      	movs	r2, #5
 8008520:	761a      	strb	r2, [r3, #24]
      break;
 8008522:	e113      	b.n	800874c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008524:	7b7b      	ldrb	r3, [r7, #13]
 8008526:	2b80      	cmp	r3, #128	; 0x80
 8008528:	d103      	bne.n	8008532 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2209      	movs	r2, #9
 800852e:	761a      	strb	r2, [r3, #24]
      break;
 8008530:	e10c      	b.n	800874c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2207      	movs	r2, #7
 8008536:	761a      	strb	r2, [r3, #24]
      break;
 8008538:	e108      	b.n	800874c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	2b04      	cmp	r3, #4
 800853e:	d003      	beq.n	8008548 <USBH_HandleControl+0xcc>
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	2b02      	cmp	r3, #2
 8008544:	f040 8102 	bne.w	800874c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	220b      	movs	r2, #11
 800854c:	761a      	strb	r2, [r3, #24]
      break;
 800854e:	e0fd      	b.n	800874c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008556:	b29a      	uxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6899      	ldr	r1, [r3, #8]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	899a      	ldrh	r2, [r3, #12]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	791b      	ldrb	r3, [r3, #4]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f93c 	bl	80087e6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2204      	movs	r2, #4
 8008572:	761a      	strb	r2, [r3, #24]
      break;
 8008574:	e0f3      	b.n	800875e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	791b      	ldrb	r3, [r3, #4]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fc7d 	bl	8008e7c <USBH_LL_GetURBState>
 8008582:	4603      	mov	r3, r0
 8008584:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008586:	7bbb      	ldrb	r3, [r7, #14]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d102      	bne.n	8008592 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2209      	movs	r2, #9
 8008590:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b05      	cmp	r3, #5
 8008596:	d102      	bne.n	800859e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008598:	2303      	movs	r3, #3
 800859a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800859c:	e0d8      	b.n	8008750 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	f040 80d5 	bne.w	8008750 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	220b      	movs	r2, #11
 80085aa:	761a      	strb	r2, [r3, #24]
      break;
 80085ac:	e0d0      	b.n	8008750 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6899      	ldr	r1, [r3, #8]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	899a      	ldrh	r2, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	7958      	ldrb	r0, [r3, #5]
 80085ba:	2301      	movs	r3, #1
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	4603      	mov	r3, r0
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f8eb 	bl	800879c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2206      	movs	r2, #6
 80085d6:	761a      	strb	r2, [r3, #24]
      break;
 80085d8:	e0c1      	b.n	800875e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	795b      	ldrb	r3, [r3, #5]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fc4b 	bl	8008e7c <USBH_LL_GetURBState>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d103      	bne.n	80085f8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2207      	movs	r2, #7
 80085f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085f6:	e0ad      	b.n	8008754 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	2b05      	cmp	r3, #5
 80085fc:	d105      	bne.n	800860a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	220c      	movs	r2, #12
 8008602:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008604:	2303      	movs	r3, #3
 8008606:	73fb      	strb	r3, [r7, #15]
      break;
 8008608:	e0a4      	b.n	8008754 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b02      	cmp	r3, #2
 800860e:	d103      	bne.n	8008618 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2205      	movs	r2, #5
 8008614:	761a      	strb	r2, [r3, #24]
      break;
 8008616:	e09d      	b.n	8008754 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	2b04      	cmp	r3, #4
 800861c:	f040 809a 	bne.w	8008754 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	220b      	movs	r2, #11
 8008624:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008626:	2302      	movs	r3, #2
 8008628:	73fb      	strb	r3, [r7, #15]
      break;
 800862a:	e093      	b.n	8008754 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	791b      	ldrb	r3, [r3, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	2100      	movs	r1, #0
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f8d6 	bl	80087e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008640:	b29a      	uxth	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2208      	movs	r2, #8
 800864a:	761a      	strb	r2, [r3, #24]

      break;
 800864c:	e087      	b.n	800875e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	791b      	ldrb	r3, [r3, #4]
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fc11 	bl	8008e7c <USBH_LL_GetURBState>
 800865a:	4603      	mov	r3, r0
 800865c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d105      	bne.n	8008670 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	220d      	movs	r2, #13
 8008668:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800866e:	e073      	b.n	8008758 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	2b04      	cmp	r3, #4
 8008674:	d103      	bne.n	800867e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	220b      	movs	r2, #11
 800867a:	761a      	strb	r2, [r3, #24]
      break;
 800867c:	e06c      	b.n	8008758 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	2b05      	cmp	r3, #5
 8008682:	d169      	bne.n	8008758 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008684:	2303      	movs	r3, #3
 8008686:	73fb      	strb	r3, [r7, #15]
      break;
 8008688:	e066      	b.n	8008758 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	795a      	ldrb	r2, [r3, #5]
 800868e:	2301      	movs	r3, #1
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	4613      	mov	r3, r2
 8008694:	2200      	movs	r2, #0
 8008696:	2100      	movs	r1, #0
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f87f 	bl	800879c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	220a      	movs	r2, #10
 80086ae:	761a      	strb	r2, [r3, #24]
      break;
 80086b0:	e055      	b.n	800875e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	795b      	ldrb	r3, [r3, #5]
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fbdf 	bl	8008e7c <USBH_LL_GetURBState>
 80086be:	4603      	mov	r3, r0
 80086c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d105      	bne.n	80086d4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	220d      	movs	r2, #13
 80086d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086d2:	e043      	b.n	800875c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d103      	bne.n	80086e2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2209      	movs	r2, #9
 80086de:	761a      	strb	r2, [r3, #24]
      break;
 80086e0:	e03c      	b.n	800875c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	2b04      	cmp	r3, #4
 80086e6:	d139      	bne.n	800875c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	220b      	movs	r2, #11
 80086ec:	761a      	strb	r2, [r3, #24]
      break;
 80086ee:	e035      	b.n	800875c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7e5b      	ldrb	r3, [r3, #25]
 80086f4:	3301      	adds	r3, #1
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	765a      	strb	r2, [r3, #25]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	7e5b      	ldrb	r3, [r3, #25]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d806      	bhi.n	8008712 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008710:	e025      	b.n	800875e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008718:	2106      	movs	r1, #6
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	795b      	ldrb	r3, [r3, #5]
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f90c 	bl	8008948 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	791b      	ldrb	r3, [r3, #4]
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f906 	bl	8008948 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008742:	2302      	movs	r3, #2
 8008744:	73fb      	strb	r3, [r7, #15]
      break;
 8008746:	e00a      	b.n	800875e <USBH_HandleControl+0x2e2>

    default:
      break;
 8008748:	bf00      	nop
 800874a:	e008      	b.n	800875e <USBH_HandleControl+0x2e2>
      break;
 800874c:	bf00      	nop
 800874e:	e006      	b.n	800875e <USBH_HandleControl+0x2e2>
      break;
 8008750:	bf00      	nop
 8008752:	e004      	b.n	800875e <USBH_HandleControl+0x2e2>
      break;
 8008754:	bf00      	nop
 8008756:	e002      	b.n	800875e <USBH_HandleControl+0x2e2>
      break;
 8008758:	bf00      	nop
 800875a:	e000      	b.n	800875e <USBH_HandleControl+0x2e2>
      break;
 800875c:	bf00      	nop
  }

  return status;
 800875e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b088      	sub	sp, #32
 800876c:	af04      	add	r7, sp, #16
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	4613      	mov	r3, r2
 8008774:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008776:	79f9      	ldrb	r1, [r7, #7]
 8008778:	2300      	movs	r3, #0
 800877a:	9303      	str	r3, [sp, #12]
 800877c:	2308      	movs	r3, #8
 800877e:	9302      	str	r3, [sp, #8]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	9301      	str	r3, [sp, #4]
 8008784:	2300      	movs	r3, #0
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	2300      	movs	r3, #0
 800878a:	2200      	movs	r2, #0
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 fb44 	bl	8008e1a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af04      	add	r7, sp, #16
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	4611      	mov	r1, r2
 80087a8:	461a      	mov	r2, r3
 80087aa:	460b      	mov	r3, r1
 80087ac:	80fb      	strh	r3, [r7, #6]
 80087ae:	4613      	mov	r3, r2
 80087b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80087bc:	2300      	movs	r3, #0
 80087be:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80087c0:	7979      	ldrb	r1, [r7, #5]
 80087c2:	7e3b      	ldrb	r3, [r7, #24]
 80087c4:	9303      	str	r3, [sp, #12]
 80087c6:	88fb      	ldrh	r3, [r7, #6]
 80087c8:	9302      	str	r3, [sp, #8]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	2301      	movs	r3, #1
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	2300      	movs	r3, #0
 80087d4:	2200      	movs	r2, #0
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 fb1f 	bl	8008e1a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b088      	sub	sp, #32
 80087ea:	af04      	add	r7, sp, #16
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	60b9      	str	r1, [r7, #8]
 80087f0:	4611      	mov	r1, r2
 80087f2:	461a      	mov	r2, r3
 80087f4:	460b      	mov	r3, r1
 80087f6:	80fb      	strh	r3, [r7, #6]
 80087f8:	4613      	mov	r3, r2
 80087fa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80087fc:	7979      	ldrb	r1, [r7, #5]
 80087fe:	2300      	movs	r3, #0
 8008800:	9303      	str	r3, [sp, #12]
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	9302      	str	r3, [sp, #8]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	9301      	str	r3, [sp, #4]
 800880a:	2301      	movs	r3, #1
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	2300      	movs	r3, #0
 8008810:	2201      	movs	r2, #1
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f000 fb01 	bl	8008e1a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008818:	2300      	movs	r3, #0

}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b088      	sub	sp, #32
 8008826:	af04      	add	r7, sp, #16
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	4611      	mov	r1, r2
 800882e:	461a      	mov	r2, r3
 8008830:	460b      	mov	r3, r1
 8008832:	80fb      	strh	r3, [r7, #6]
 8008834:	4613      	mov	r3, r2
 8008836:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008846:	7979      	ldrb	r1, [r7, #5]
 8008848:	7e3b      	ldrb	r3, [r7, #24]
 800884a:	9303      	str	r3, [sp, #12]
 800884c:	88fb      	ldrh	r3, [r7, #6]
 800884e:	9302      	str	r3, [sp, #8]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	2301      	movs	r3, #1
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	2302      	movs	r3, #2
 800885a:	2200      	movs	r2, #0
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 fadc 	bl	8008e1a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af04      	add	r7, sp, #16
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	4611      	mov	r1, r2
 8008878:	461a      	mov	r2, r3
 800887a:	460b      	mov	r3, r1
 800887c:	80fb      	strh	r3, [r7, #6]
 800887e:	4613      	mov	r3, r2
 8008880:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008882:	7979      	ldrb	r1, [r7, #5]
 8008884:	2300      	movs	r3, #0
 8008886:	9303      	str	r3, [sp, #12]
 8008888:	88fb      	ldrh	r3, [r7, #6]
 800888a:	9302      	str	r3, [sp, #8]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	9301      	str	r3, [sp, #4]
 8008890:	2301      	movs	r3, #1
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	2302      	movs	r3, #2
 8008896:	2201      	movs	r2, #1
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 fabe 	bl	8008e1a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af04      	add	r7, sp, #16
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	4608      	mov	r0, r1
 80088b2:	4611      	mov	r1, r2
 80088b4:	461a      	mov	r2, r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	70fb      	strb	r3, [r7, #3]
 80088ba:	460b      	mov	r3, r1
 80088bc:	70bb      	strb	r3, [r7, #2]
 80088be:	4613      	mov	r3, r2
 80088c0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80088c2:	7878      	ldrb	r0, [r7, #1]
 80088c4:	78ba      	ldrb	r2, [r7, #2]
 80088c6:	78f9      	ldrb	r1, [r7, #3]
 80088c8:	8b3b      	ldrh	r3, [r7, #24]
 80088ca:	9302      	str	r3, [sp, #8]
 80088cc:	7d3b      	ldrb	r3, [r7, #20]
 80088ce:	9301      	str	r3, [sp, #4]
 80088d0:	7c3b      	ldrb	r3, [r7, #16]
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	4603      	mov	r3, r0
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fa51 	bl	8008d7e <USBH_LL_OpenPipe>

  return USBH_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b082      	sub	sp, #8
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	460b      	mov	r3, r1
 80088f0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80088f2:	78fb      	ldrb	r3, [r7, #3]
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa70 	bl	8008ddc <USBH_LL_ClosePipe>

  return USBH_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	460b      	mov	r3, r1
 8008910:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f836 	bl	8008984 <USBH_GetFreePipe>
 8008918:	4603      	mov	r3, r0
 800891a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800891c:	89fb      	ldrh	r3, [r7, #14]
 800891e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008922:	4293      	cmp	r3, r2
 8008924:	d00a      	beq.n	800893c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008926:	78fa      	ldrb	r2, [r7, #3]
 8008928:	89fb      	ldrh	r3, [r7, #14]
 800892a:	f003 030f 	and.w	r3, r3, #15
 800892e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	33e0      	adds	r3, #224	; 0xe0
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	440b      	add	r3, r1
 800893a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800893c:	89fb      	ldrh	r3, [r7, #14]
 800893e:	b2db      	uxtb	r3, r3
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	2b0a      	cmp	r3, #10
 8008958:	d80d      	bhi.n	8008976 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	33e0      	adds	r3, #224	; 0xe0
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	78fb      	ldrb	r3, [r7, #3]
 8008968:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	33e0      	adds	r3, #224	; 0xe0
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	440b      	add	r3, r1
 8008974:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008990:	2300      	movs	r3, #0
 8008992:	73fb      	strb	r3, [r7, #15]
 8008994:	e00f      	b.n	80089b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	33e0      	adds	r3, #224	; 0xe0
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d102      	bne.n	80089b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	e007      	b.n	80089c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	3301      	adds	r3, #1
 80089b4:	73fb      	strb	r3, [r7, #15]
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
 80089b8:	2b0a      	cmp	r3, #10
 80089ba:	d9ec      	bls.n	8008996 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80089bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80089d0:	2201      	movs	r2, #1
 80089d2:	490e      	ldr	r1, [pc, #56]	; (8008a0c <MX_USB_HOST_Init+0x40>)
 80089d4:	480e      	ldr	r0, [pc, #56]	; (8008a10 <MX_USB_HOST_Init+0x44>)
 80089d6:	f7fe fc9f 	bl	8007318 <USBH_Init>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80089e0:	f7f8 fcb4 	bl	800134c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80089e4:	490b      	ldr	r1, [pc, #44]	; (8008a14 <MX_USB_HOST_Init+0x48>)
 80089e6:	480a      	ldr	r0, [pc, #40]	; (8008a10 <MX_USB_HOST_Init+0x44>)
 80089e8:	f7fe fd24 	bl	8007434 <USBH_RegisterClass>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80089f2:	f7f8 fcab 	bl	800134c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80089f6:	4806      	ldr	r0, [pc, #24]	; (8008a10 <MX_USB_HOST_Init+0x44>)
 80089f8:	f7fe fda8 	bl	800754c <USBH_Start>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008a02:	f7f8 fca3 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008a06:	bf00      	nop
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	08008a2d 	.word	0x08008a2d
 8008a10:	20000230 	.word	0x20000230
 8008a14:	20000010 	.word	0x20000010

08008a18 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008a1c:	4802      	ldr	r0, [pc, #8]	; (8008a28 <MX_USB_HOST_Process+0x10>)
 8008a1e:	f7fe fda5 	bl	800756c <USBH_Process>
}
 8008a22:	bf00      	nop
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	20000230 	.word	0x20000230

08008a2c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008a38:	78fb      	ldrb	r3, [r7, #3]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d819      	bhi.n	8008a74 <USBH_UserProcess+0x48>
 8008a40:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <USBH_UserProcess+0x1c>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a75 	.word	0x08008a75
 8008a4c:	08008a65 	.word	0x08008a65
 8008a50:	08008a75 	.word	0x08008a75
 8008a54:	08008a6d 	.word	0x08008a6d
 8008a58:	08008a5d 	.word	0x08008a5d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008a5c:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <USBH_UserProcess+0x58>)
 8008a5e:	2203      	movs	r2, #3
 8008a60:	701a      	strb	r2, [r3, #0]
  break;
 8008a62:	e008      	b.n	8008a76 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008a64:	4b07      	ldr	r3, [pc, #28]	; (8008a84 <USBH_UserProcess+0x58>)
 8008a66:	2202      	movs	r2, #2
 8008a68:	701a      	strb	r2, [r3, #0]
  break;
 8008a6a:	e004      	b.n	8008a76 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008a6c:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <USBH_UserProcess+0x58>)
 8008a6e:	2201      	movs	r2, #1
 8008a70:	701a      	strb	r2, [r3, #0]
  break;
 8008a72:	e000      	b.n	8008a76 <USBH_UserProcess+0x4a>

  default:
  break;
 8008a74:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	200000b8 	.word	0x200000b8

08008a88 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b08a      	sub	sp, #40	; 0x28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a90:	f107 0314 	add.w	r3, r7, #20
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	605a      	str	r2, [r3, #4]
 8008a9a:	609a      	str	r2, [r3, #8]
 8008a9c:	60da      	str	r2, [r3, #12]
 8008a9e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aa8:	d147      	bne.n	8008b3a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008aaa:	2300      	movs	r3, #0
 8008aac:	613b      	str	r3, [r7, #16]
 8008aae:	4b25      	ldr	r3, [pc, #148]	; (8008b44 <HAL_HCD_MspInit+0xbc>)
 8008ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab2:	4a24      	ldr	r2, [pc, #144]	; (8008b44 <HAL_HCD_MspInit+0xbc>)
 8008ab4:	f043 0301 	orr.w	r3, r3, #1
 8008ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8008aba:	4b22      	ldr	r3, [pc, #136]	; (8008b44 <HAL_HCD_MspInit+0xbc>)
 8008abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	613b      	str	r3, [r7, #16]
 8008ac4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ad4:	f107 0314 	add.w	r3, r7, #20
 8008ad8:	4619      	mov	r1, r3
 8008ada:	481b      	ldr	r0, [pc, #108]	; (8008b48 <HAL_HCD_MspInit+0xc0>)
 8008adc:	f7f9 fd3c 	bl	8002558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ae0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aee:	2300      	movs	r3, #0
 8008af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008af2:	230a      	movs	r3, #10
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008af6:	f107 0314 	add.w	r3, r7, #20
 8008afa:	4619      	mov	r1, r3
 8008afc:	4812      	ldr	r0, [pc, #72]	; (8008b48 <HAL_HCD_MspInit+0xc0>)
 8008afe:	f7f9 fd2b 	bl	8002558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b02:	4b10      	ldr	r3, [pc, #64]	; (8008b44 <HAL_HCD_MspInit+0xbc>)
 8008b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b06:	4a0f      	ldr	r2, [pc, #60]	; (8008b44 <HAL_HCD_MspInit+0xbc>)
 8008b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b0c:	6353      	str	r3, [r2, #52]	; 0x34
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	4b0c      	ldr	r3, [pc, #48]	; (8008b44 <HAL_HCD_MspInit+0xbc>)
 8008b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b16:	4a0b      	ldr	r2, [pc, #44]	; (8008b44 <HAL_HCD_MspInit+0xbc>)
 8008b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <HAL_HCD_MspInit+0xbc>)
 8008b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	2043      	movs	r0, #67	; 0x43
 8008b30:	f7f9 f851 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b34:	2043      	movs	r0, #67	; 0x43
 8008b36:	f7f9 f86a 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b3a:	bf00      	nop
 8008b3c:	3728      	adds	r7, #40	; 0x28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	40023800 	.word	0x40023800
 8008b48:	40020000 	.word	0x40020000

08008b4c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff f8d9 	bl	8007d12 <USBH_LL_IncTimer>
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7ff f911 	bl	8007d9e <USBH_LL_Connect>
}
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7ff f91a 	bl	8007dcc <USBH_LL_Disconnect>
}
 8008b98:	bf00      	nop
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	70fb      	strb	r3, [r7, #3]
 8008bac:	4613      	mov	r3, r2
 8008bae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff f8cb 	bl	8007d66 <USBH_LL_PortEnabled>
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff f8cb 	bl	8007d82 <USBH_LL_PortDisabled>
}
 8008bec:	bf00      	nop
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d12a      	bne.n	8008c5c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008c06:	4a18      	ldr	r2, [pc, #96]	; (8008c68 <USBH_LL_Init+0x74>)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a15      	ldr	r2, [pc, #84]	; (8008c68 <USBH_LL_Init+0x74>)
 8008c12:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c16:	4b14      	ldr	r3, [pc, #80]	; (8008c68 <USBH_LL_Init+0x74>)
 8008c18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008c1e:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <USBH_LL_Init+0x74>)
 8008c20:	2208      	movs	r2, #8
 8008c22:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008c24:	4b10      	ldr	r3, [pc, #64]	; (8008c68 <USBH_LL_Init+0x74>)
 8008c26:	2201      	movs	r2, #1
 8008c28:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c2a:	4b0f      	ldr	r3, [pc, #60]	; (8008c68 <USBH_LL_Init+0x74>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008c30:	4b0d      	ldr	r3, [pc, #52]	; (8008c68 <USBH_LL_Init+0x74>)
 8008c32:	2202      	movs	r2, #2
 8008c34:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c36:	4b0c      	ldr	r3, [pc, #48]	; (8008c68 <USBH_LL_Init+0x74>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008c3c:	480a      	ldr	r0, [pc, #40]	; (8008c68 <USBH_LL_Init+0x74>)
 8008c3e:	f7f9 fe59 	bl	80028f4 <HAL_HCD_Init>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008c48:	f7f8 fb80 	bl	800134c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008c4c:	4806      	ldr	r0, [pc, #24]	; (8008c68 <USBH_LL_Init+0x74>)
 8008c4e:	f7fa fa5d 	bl	800310c <HAL_HCD_GetCurrentFrame>
 8008c52:	4603      	mov	r3, r0
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff f84c 	bl	8007cf4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20000608 	.word	0x20000608

08008c6c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fa f9ca 	bl	800301c <HAL_HCD_Start>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f95c 	bl	8008f4c <USBH_Get_USB_Status>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fa f9d2 	bl	8003062 <HAL_HCD_Stop>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 f941 	bl	8008f4c <USBH_Get_USB_Status>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fa fa1c 	bl	8003128 <HAL_HCD_GetCurrentSpeed>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d007      	beq.n	8008d06 <USBH_LL_GetSpeed+0x2e>
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d302      	bcc.n	8008d00 <USBH_LL_GetSpeed+0x28>
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d006      	beq.n	8008d0c <USBH_LL_GetSpeed+0x34>
 8008cfe:	e008      	b.n	8008d12 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73fb      	strb	r3, [r7, #15]
    break;
 8008d04:	e008      	b.n	8008d18 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008d06:	2301      	movs	r3, #1
 8008d08:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0a:	e005      	b.n	8008d18 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d10:	e002      	b.n	8008d18 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008d12:	2301      	movs	r3, #1
 8008d14:	73fb      	strb	r3, [r7, #15]
    break;
 8008d16:	bf00      	nop
  }
  return  speed;
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fa f9af 	bl	800309c <HAL_HCD_ResetPort>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 f901 	bl	8008f4c <USBH_Get_USB_Status>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d6a:	78fa      	ldrb	r2, [r7, #3]
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fa f9b7 	bl	80030e2 <HAL_HCD_HC_GetXferCount>
 8008d74:	4603      	mov	r3, r0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d7e:	b590      	push	{r4, r7, lr}
 8008d80:	b089      	sub	sp, #36	; 0x24
 8008d82:	af04      	add	r7, sp, #16
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	4608      	mov	r0, r1
 8008d88:	4611      	mov	r1, r2
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	70fb      	strb	r3, [r7, #3]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70bb      	strb	r3, [r7, #2]
 8008d94:	4613      	mov	r3, r2
 8008d96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008da6:	787c      	ldrb	r4, [r7, #1]
 8008da8:	78ba      	ldrb	r2, [r7, #2]
 8008daa:	78f9      	ldrb	r1, [r7, #3]
 8008dac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008dae:	9302      	str	r3, [sp, #8]
 8008db0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	4623      	mov	r3, r4
 8008dbe:	f7f9 fdfb 	bl	80029b8 <HAL_HCD_HC_Init>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 f8bf 	bl	8008f4c <USBH_Get_USB_Status>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd90      	pop	{r4, r7, pc}

08008ddc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008df6:	78fa      	ldrb	r2, [r7, #3]
 8008df8:	4611      	mov	r1, r2
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7f9 fe74 	bl	8002ae8 <HAL_HCD_HC_Halt>
 8008e00:	4603      	mov	r3, r0
 8008e02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 f8a0 	bl	8008f4c <USBH_Get_USB_Status>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008e1a:	b590      	push	{r4, r7, lr}
 8008e1c:	b089      	sub	sp, #36	; 0x24
 8008e1e:	af04      	add	r7, sp, #16
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	4608      	mov	r0, r1
 8008e24:	4611      	mov	r1, r2
 8008e26:	461a      	mov	r2, r3
 8008e28:	4603      	mov	r3, r0
 8008e2a:	70fb      	strb	r3, [r7, #3]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	70bb      	strb	r3, [r7, #2]
 8008e30:	4613      	mov	r3, r2
 8008e32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008e42:	787c      	ldrb	r4, [r7, #1]
 8008e44:	78ba      	ldrb	r2, [r7, #2]
 8008e46:	78f9      	ldrb	r1, [r7, #3]
 8008e48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e4c:	9303      	str	r3, [sp, #12]
 8008e4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e50:	9302      	str	r3, [sp, #8]
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	4623      	mov	r3, r4
 8008e5e:	f7f9 fe67 	bl	8002b30 <HAL_HCD_HC_SubmitRequest>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 f86f 	bl	8008f4c <USBH_Get_USB_Status>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd90      	pop	{r4, r7, pc}

08008e7c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fa f910 	bl	80030b8 <HAL_HCD_HC_GetURBState>
 8008e98:	4603      	mov	r3, r0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d103      	bne.n	8008ec0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 f872 	bl	8008fa4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008ec0:	20c8      	movs	r0, #200	; 0xc8
 8008ec2:	f7f8 fd8b 	bl	80019dc <HAL_Delay>
  return USBH_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
 8008edc:	4613      	mov	r3, r2
 8008ede:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ee6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008ee8:	78fa      	ldrb	r2, [r7, #3]
 8008eea:	68f9      	ldr	r1, [r7, #12]
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	00db      	lsls	r3, r3, #3
 8008ef4:	440b      	add	r3, r1
 8008ef6:	333b      	adds	r3, #59	; 0x3b
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00a      	beq.n	8008f14 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008efe:	78fa      	ldrb	r2, [r7, #3]
 8008f00:	68f9      	ldr	r1, [r7, #12]
 8008f02:	4613      	mov	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	440b      	add	r3, r1
 8008f0c:	3350      	adds	r3, #80	; 0x50
 8008f0e:	78ba      	ldrb	r2, [r7, #2]
 8008f10:	701a      	strb	r2, [r3, #0]
 8008f12:	e009      	b.n	8008f28 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008f14:	78fa      	ldrb	r2, [r7, #3]
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4413      	add	r3, r2
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	440b      	add	r3, r1
 8008f22:	3351      	adds	r3, #81	; 0x51
 8008f24:	78ba      	ldrb	r2, [r7, #2]
 8008f26:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7f8 fd4c 	bl	80019dc <HAL_Delay>
}
 8008f44:	bf00      	nop
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f5a:	79fb      	ldrb	r3, [r7, #7]
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d817      	bhi.n	8008f90 <USBH_Get_USB_Status+0x44>
 8008f60:	a201      	add	r2, pc, #4	; (adr r2, 8008f68 <USBH_Get_USB_Status+0x1c>)
 8008f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f66:	bf00      	nop
 8008f68:	08008f79 	.word	0x08008f79
 8008f6c:	08008f7f 	.word	0x08008f7f
 8008f70:	08008f85 	.word	0x08008f85
 8008f74:	08008f8b 	.word	0x08008f8b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f7c:	e00b      	b.n	8008f96 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008f7e:	2302      	movs	r3, #2
 8008f80:	73fb      	strb	r3, [r7, #15]
    break;
 8008f82:	e008      	b.n	8008f96 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008f84:	2301      	movs	r3, #1
 8008f86:	73fb      	strb	r3, [r7, #15]
    break;
 8008f88:	e005      	b.n	8008f96 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f8e:	e002      	b.n	8008f96 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008f90:	2302      	movs	r3, #2
 8008f92:	73fb      	strb	r3, [r7, #15]
    break;
 8008f94:	bf00      	nop
  }
  return usb_status;
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008fae:	79fb      	ldrb	r3, [r7, #7]
 8008fb0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008fb2:	79fb      	ldrb	r3, [r7, #7]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d102      	bne.n	8008fbe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	73fb      	strb	r3, [r7, #15]
 8008fbc:	e001      	b.n	8008fc2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	4803      	ldr	r0, [pc, #12]	; (8008fd8 <MX_DriverVbusFS+0x34>)
 8008fca:	f7f9 fc5f 	bl	800288c <HAL_GPIO_WritePin>
}
 8008fce:	bf00      	nop
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	40020800 	.word	0x40020800

08008fdc <__errno>:
 8008fdc:	4b01      	ldr	r3, [pc, #4]	; (8008fe4 <__errno+0x8>)
 8008fde:	6818      	ldr	r0, [r3, #0]
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20000030 	.word	0x20000030

08008fe8 <__libc_init_array>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	4e0d      	ldr	r6, [pc, #52]	; (8009020 <__libc_init_array+0x38>)
 8008fec:	4c0d      	ldr	r4, [pc, #52]	; (8009024 <__libc_init_array+0x3c>)
 8008fee:	1ba4      	subs	r4, r4, r6
 8008ff0:	10a4      	asrs	r4, r4, #2
 8008ff2:	2500      	movs	r5, #0
 8008ff4:	42a5      	cmp	r5, r4
 8008ff6:	d109      	bne.n	800900c <__libc_init_array+0x24>
 8008ff8:	4e0b      	ldr	r6, [pc, #44]	; (8009028 <__libc_init_array+0x40>)
 8008ffa:	4c0c      	ldr	r4, [pc, #48]	; (800902c <__libc_init_array+0x44>)
 8008ffc:	f000 ff5e 	bl	8009ebc <_init>
 8009000:	1ba4      	subs	r4, r4, r6
 8009002:	10a4      	asrs	r4, r4, #2
 8009004:	2500      	movs	r5, #0
 8009006:	42a5      	cmp	r5, r4
 8009008:	d105      	bne.n	8009016 <__libc_init_array+0x2e>
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009010:	4798      	blx	r3
 8009012:	3501      	adds	r5, #1
 8009014:	e7ee      	b.n	8008ff4 <__libc_init_array+0xc>
 8009016:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800901a:	4798      	blx	r3
 800901c:	3501      	adds	r5, #1
 800901e:	e7f2      	b.n	8009006 <__libc_init_array+0x1e>
 8009020:	08009fcc 	.word	0x08009fcc
 8009024:	08009fcc 	.word	0x08009fcc
 8009028:	08009fcc 	.word	0x08009fcc
 800902c:	08009fd0 	.word	0x08009fd0

08009030 <malloc>:
 8009030:	4b02      	ldr	r3, [pc, #8]	; (800903c <malloc+0xc>)
 8009032:	4601      	mov	r1, r0
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	f000 b861 	b.w	80090fc <_malloc_r>
 800903a:	bf00      	nop
 800903c:	20000030 	.word	0x20000030

08009040 <free>:
 8009040:	4b02      	ldr	r3, [pc, #8]	; (800904c <free+0xc>)
 8009042:	4601      	mov	r1, r0
 8009044:	6818      	ldr	r0, [r3, #0]
 8009046:	f000 b80b 	b.w	8009060 <_free_r>
 800904a:	bf00      	nop
 800904c:	20000030 	.word	0x20000030

08009050 <memset>:
 8009050:	4402      	add	r2, r0
 8009052:	4603      	mov	r3, r0
 8009054:	4293      	cmp	r3, r2
 8009056:	d100      	bne.n	800905a <memset+0xa>
 8009058:	4770      	bx	lr
 800905a:	f803 1b01 	strb.w	r1, [r3], #1
 800905e:	e7f9      	b.n	8009054 <memset+0x4>

08009060 <_free_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4605      	mov	r5, r0
 8009064:	2900      	cmp	r1, #0
 8009066:	d045      	beq.n	80090f4 <_free_r+0x94>
 8009068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906c:	1f0c      	subs	r4, r1, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	bfb8      	it	lt
 8009072:	18e4      	addlt	r4, r4, r3
 8009074:	f000 f9a2 	bl	80093bc <__malloc_lock>
 8009078:	4a1f      	ldr	r2, [pc, #124]	; (80090f8 <_free_r+0x98>)
 800907a:	6813      	ldr	r3, [r2, #0]
 800907c:	4610      	mov	r0, r2
 800907e:	b933      	cbnz	r3, 800908e <_free_r+0x2e>
 8009080:	6063      	str	r3, [r4, #4]
 8009082:	6014      	str	r4, [r2, #0]
 8009084:	4628      	mov	r0, r5
 8009086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800908a:	f000 b998 	b.w	80093be <__malloc_unlock>
 800908e:	42a3      	cmp	r3, r4
 8009090:	d90c      	bls.n	80090ac <_free_r+0x4c>
 8009092:	6821      	ldr	r1, [r4, #0]
 8009094:	1862      	adds	r2, r4, r1
 8009096:	4293      	cmp	r3, r2
 8009098:	bf04      	itt	eq
 800909a:	681a      	ldreq	r2, [r3, #0]
 800909c:	685b      	ldreq	r3, [r3, #4]
 800909e:	6063      	str	r3, [r4, #4]
 80090a0:	bf04      	itt	eq
 80090a2:	1852      	addeq	r2, r2, r1
 80090a4:	6022      	streq	r2, [r4, #0]
 80090a6:	6004      	str	r4, [r0, #0]
 80090a8:	e7ec      	b.n	8009084 <_free_r+0x24>
 80090aa:	4613      	mov	r3, r2
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	b10a      	cbz	r2, 80090b4 <_free_r+0x54>
 80090b0:	42a2      	cmp	r2, r4
 80090b2:	d9fa      	bls.n	80090aa <_free_r+0x4a>
 80090b4:	6819      	ldr	r1, [r3, #0]
 80090b6:	1858      	adds	r0, r3, r1
 80090b8:	42a0      	cmp	r0, r4
 80090ba:	d10b      	bne.n	80090d4 <_free_r+0x74>
 80090bc:	6820      	ldr	r0, [r4, #0]
 80090be:	4401      	add	r1, r0
 80090c0:	1858      	adds	r0, r3, r1
 80090c2:	4282      	cmp	r2, r0
 80090c4:	6019      	str	r1, [r3, #0]
 80090c6:	d1dd      	bne.n	8009084 <_free_r+0x24>
 80090c8:	6810      	ldr	r0, [r2, #0]
 80090ca:	6852      	ldr	r2, [r2, #4]
 80090cc:	605a      	str	r2, [r3, #4]
 80090ce:	4401      	add	r1, r0
 80090d0:	6019      	str	r1, [r3, #0]
 80090d2:	e7d7      	b.n	8009084 <_free_r+0x24>
 80090d4:	d902      	bls.n	80090dc <_free_r+0x7c>
 80090d6:	230c      	movs	r3, #12
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	e7d3      	b.n	8009084 <_free_r+0x24>
 80090dc:	6820      	ldr	r0, [r4, #0]
 80090de:	1821      	adds	r1, r4, r0
 80090e0:	428a      	cmp	r2, r1
 80090e2:	bf04      	itt	eq
 80090e4:	6811      	ldreq	r1, [r2, #0]
 80090e6:	6852      	ldreq	r2, [r2, #4]
 80090e8:	6062      	str	r2, [r4, #4]
 80090ea:	bf04      	itt	eq
 80090ec:	1809      	addeq	r1, r1, r0
 80090ee:	6021      	streq	r1, [r4, #0]
 80090f0:	605c      	str	r4, [r3, #4]
 80090f2:	e7c7      	b.n	8009084 <_free_r+0x24>
 80090f4:	bd38      	pop	{r3, r4, r5, pc}
 80090f6:	bf00      	nop
 80090f8:	200000bc 	.word	0x200000bc

080090fc <_malloc_r>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	1ccd      	adds	r5, r1, #3
 8009100:	f025 0503 	bic.w	r5, r5, #3
 8009104:	3508      	adds	r5, #8
 8009106:	2d0c      	cmp	r5, #12
 8009108:	bf38      	it	cc
 800910a:	250c      	movcc	r5, #12
 800910c:	2d00      	cmp	r5, #0
 800910e:	4606      	mov	r6, r0
 8009110:	db01      	blt.n	8009116 <_malloc_r+0x1a>
 8009112:	42a9      	cmp	r1, r5
 8009114:	d903      	bls.n	800911e <_malloc_r+0x22>
 8009116:	230c      	movs	r3, #12
 8009118:	6033      	str	r3, [r6, #0]
 800911a:	2000      	movs	r0, #0
 800911c:	bd70      	pop	{r4, r5, r6, pc}
 800911e:	f000 f94d 	bl	80093bc <__malloc_lock>
 8009122:	4a21      	ldr	r2, [pc, #132]	; (80091a8 <_malloc_r+0xac>)
 8009124:	6814      	ldr	r4, [r2, #0]
 8009126:	4621      	mov	r1, r4
 8009128:	b991      	cbnz	r1, 8009150 <_malloc_r+0x54>
 800912a:	4c20      	ldr	r4, [pc, #128]	; (80091ac <_malloc_r+0xb0>)
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	b91b      	cbnz	r3, 8009138 <_malloc_r+0x3c>
 8009130:	4630      	mov	r0, r6
 8009132:	f000 f869 	bl	8009208 <_sbrk_r>
 8009136:	6020      	str	r0, [r4, #0]
 8009138:	4629      	mov	r1, r5
 800913a:	4630      	mov	r0, r6
 800913c:	f000 f864 	bl	8009208 <_sbrk_r>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d124      	bne.n	800918e <_malloc_r+0x92>
 8009144:	230c      	movs	r3, #12
 8009146:	6033      	str	r3, [r6, #0]
 8009148:	4630      	mov	r0, r6
 800914a:	f000 f938 	bl	80093be <__malloc_unlock>
 800914e:	e7e4      	b.n	800911a <_malloc_r+0x1e>
 8009150:	680b      	ldr	r3, [r1, #0]
 8009152:	1b5b      	subs	r3, r3, r5
 8009154:	d418      	bmi.n	8009188 <_malloc_r+0x8c>
 8009156:	2b0b      	cmp	r3, #11
 8009158:	d90f      	bls.n	800917a <_malloc_r+0x7e>
 800915a:	600b      	str	r3, [r1, #0]
 800915c:	50cd      	str	r5, [r1, r3]
 800915e:	18cc      	adds	r4, r1, r3
 8009160:	4630      	mov	r0, r6
 8009162:	f000 f92c 	bl	80093be <__malloc_unlock>
 8009166:	f104 000b 	add.w	r0, r4, #11
 800916a:	1d23      	adds	r3, r4, #4
 800916c:	f020 0007 	bic.w	r0, r0, #7
 8009170:	1ac3      	subs	r3, r0, r3
 8009172:	d0d3      	beq.n	800911c <_malloc_r+0x20>
 8009174:	425a      	negs	r2, r3
 8009176:	50e2      	str	r2, [r4, r3]
 8009178:	e7d0      	b.n	800911c <_malloc_r+0x20>
 800917a:	428c      	cmp	r4, r1
 800917c:	684b      	ldr	r3, [r1, #4]
 800917e:	bf16      	itet	ne
 8009180:	6063      	strne	r3, [r4, #4]
 8009182:	6013      	streq	r3, [r2, #0]
 8009184:	460c      	movne	r4, r1
 8009186:	e7eb      	b.n	8009160 <_malloc_r+0x64>
 8009188:	460c      	mov	r4, r1
 800918a:	6849      	ldr	r1, [r1, #4]
 800918c:	e7cc      	b.n	8009128 <_malloc_r+0x2c>
 800918e:	1cc4      	adds	r4, r0, #3
 8009190:	f024 0403 	bic.w	r4, r4, #3
 8009194:	42a0      	cmp	r0, r4
 8009196:	d005      	beq.n	80091a4 <_malloc_r+0xa8>
 8009198:	1a21      	subs	r1, r4, r0
 800919a:	4630      	mov	r0, r6
 800919c:	f000 f834 	bl	8009208 <_sbrk_r>
 80091a0:	3001      	adds	r0, #1
 80091a2:	d0cf      	beq.n	8009144 <_malloc_r+0x48>
 80091a4:	6025      	str	r5, [r4, #0]
 80091a6:	e7db      	b.n	8009160 <_malloc_r+0x64>
 80091a8:	200000bc 	.word	0x200000bc
 80091ac:	200000c0 	.word	0x200000c0

080091b0 <iprintf>:
 80091b0:	b40f      	push	{r0, r1, r2, r3}
 80091b2:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <iprintf+0x2c>)
 80091b4:	b513      	push	{r0, r1, r4, lr}
 80091b6:	681c      	ldr	r4, [r3, #0]
 80091b8:	b124      	cbz	r4, 80091c4 <iprintf+0x14>
 80091ba:	69a3      	ldr	r3, [r4, #24]
 80091bc:	b913      	cbnz	r3, 80091c4 <iprintf+0x14>
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 f872 	bl	80092a8 <__sinit>
 80091c4:	ab05      	add	r3, sp, #20
 80091c6:	9a04      	ldr	r2, [sp, #16]
 80091c8:	68a1      	ldr	r1, [r4, #8]
 80091ca:	9301      	str	r3, [sp, #4]
 80091cc:	4620      	mov	r0, r4
 80091ce:	f000 f921 	bl	8009414 <_vfiprintf_r>
 80091d2:	b002      	add	sp, #8
 80091d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091d8:	b004      	add	sp, #16
 80091da:	4770      	bx	lr
 80091dc:	20000030 	.word	0x20000030

080091e0 <putchar>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4b08      	ldr	r3, [pc, #32]	; (8009204 <putchar+0x24>)
 80091e4:	681c      	ldr	r4, [r3, #0]
 80091e6:	4605      	mov	r5, r0
 80091e8:	b124      	cbz	r4, 80091f4 <putchar+0x14>
 80091ea:	69a3      	ldr	r3, [r4, #24]
 80091ec:	b913      	cbnz	r3, 80091f4 <putchar+0x14>
 80091ee:	4620      	mov	r0, r4
 80091f0:	f000 f85a 	bl	80092a8 <__sinit>
 80091f4:	68a2      	ldr	r2, [r4, #8]
 80091f6:	4629      	mov	r1, r5
 80091f8:	4620      	mov	r0, r4
 80091fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091fe:	f000 bba7 	b.w	8009950 <_putc_r>
 8009202:	bf00      	nop
 8009204:	20000030 	.word	0x20000030

08009208 <_sbrk_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	4c06      	ldr	r4, [pc, #24]	; (8009224 <_sbrk_r+0x1c>)
 800920c:	2300      	movs	r3, #0
 800920e:	4605      	mov	r5, r0
 8009210:	4608      	mov	r0, r1
 8009212:	6023      	str	r3, [r4, #0]
 8009214:	f7f8 fafa 	bl	800180c <_sbrk>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d102      	bne.n	8009222 <_sbrk_r+0x1a>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	b103      	cbz	r3, 8009222 <_sbrk_r+0x1a>
 8009220:	602b      	str	r3, [r5, #0]
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	200008cc 	.word	0x200008cc

08009228 <std>:
 8009228:	2300      	movs	r3, #0
 800922a:	b510      	push	{r4, lr}
 800922c:	4604      	mov	r4, r0
 800922e:	e9c0 3300 	strd	r3, r3, [r0]
 8009232:	6083      	str	r3, [r0, #8]
 8009234:	8181      	strh	r1, [r0, #12]
 8009236:	6643      	str	r3, [r0, #100]	; 0x64
 8009238:	81c2      	strh	r2, [r0, #14]
 800923a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800923e:	6183      	str	r3, [r0, #24]
 8009240:	4619      	mov	r1, r3
 8009242:	2208      	movs	r2, #8
 8009244:	305c      	adds	r0, #92	; 0x5c
 8009246:	f7ff ff03 	bl	8009050 <memset>
 800924a:	4b05      	ldr	r3, [pc, #20]	; (8009260 <std+0x38>)
 800924c:	6263      	str	r3, [r4, #36]	; 0x24
 800924e:	4b05      	ldr	r3, [pc, #20]	; (8009264 <std+0x3c>)
 8009250:	62a3      	str	r3, [r4, #40]	; 0x28
 8009252:	4b05      	ldr	r3, [pc, #20]	; (8009268 <std+0x40>)
 8009254:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009256:	4b05      	ldr	r3, [pc, #20]	; (800926c <std+0x44>)
 8009258:	6224      	str	r4, [r4, #32]
 800925a:	6323      	str	r3, [r4, #48]	; 0x30
 800925c:	bd10      	pop	{r4, pc}
 800925e:	bf00      	nop
 8009260:	080099bd 	.word	0x080099bd
 8009264:	080099df 	.word	0x080099df
 8009268:	08009a17 	.word	0x08009a17
 800926c:	08009a3b 	.word	0x08009a3b

08009270 <_cleanup_r>:
 8009270:	4901      	ldr	r1, [pc, #4]	; (8009278 <_cleanup_r+0x8>)
 8009272:	f000 b885 	b.w	8009380 <_fwalk_reent>
 8009276:	bf00      	nop
 8009278:	08009d15 	.word	0x08009d15

0800927c <__sfmoreglue>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	1e4a      	subs	r2, r1, #1
 8009280:	2568      	movs	r5, #104	; 0x68
 8009282:	4355      	muls	r5, r2
 8009284:	460e      	mov	r6, r1
 8009286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800928a:	f7ff ff37 	bl	80090fc <_malloc_r>
 800928e:	4604      	mov	r4, r0
 8009290:	b140      	cbz	r0, 80092a4 <__sfmoreglue+0x28>
 8009292:	2100      	movs	r1, #0
 8009294:	e9c0 1600 	strd	r1, r6, [r0]
 8009298:	300c      	adds	r0, #12
 800929a:	60a0      	str	r0, [r4, #8]
 800929c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092a0:	f7ff fed6 	bl	8009050 <memset>
 80092a4:	4620      	mov	r0, r4
 80092a6:	bd70      	pop	{r4, r5, r6, pc}

080092a8 <__sinit>:
 80092a8:	6983      	ldr	r3, [r0, #24]
 80092aa:	b510      	push	{r4, lr}
 80092ac:	4604      	mov	r4, r0
 80092ae:	bb33      	cbnz	r3, 80092fe <__sinit+0x56>
 80092b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80092b4:	6503      	str	r3, [r0, #80]	; 0x50
 80092b6:	4b12      	ldr	r3, [pc, #72]	; (8009300 <__sinit+0x58>)
 80092b8:	4a12      	ldr	r2, [pc, #72]	; (8009304 <__sinit+0x5c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6282      	str	r2, [r0, #40]	; 0x28
 80092be:	4298      	cmp	r0, r3
 80092c0:	bf04      	itt	eq
 80092c2:	2301      	moveq	r3, #1
 80092c4:	6183      	streq	r3, [r0, #24]
 80092c6:	f000 f81f 	bl	8009308 <__sfp>
 80092ca:	6060      	str	r0, [r4, #4]
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 f81b 	bl	8009308 <__sfp>
 80092d2:	60a0      	str	r0, [r4, #8]
 80092d4:	4620      	mov	r0, r4
 80092d6:	f000 f817 	bl	8009308 <__sfp>
 80092da:	2200      	movs	r2, #0
 80092dc:	60e0      	str	r0, [r4, #12]
 80092de:	2104      	movs	r1, #4
 80092e0:	6860      	ldr	r0, [r4, #4]
 80092e2:	f7ff ffa1 	bl	8009228 <std>
 80092e6:	2201      	movs	r2, #1
 80092e8:	2109      	movs	r1, #9
 80092ea:	68a0      	ldr	r0, [r4, #8]
 80092ec:	f7ff ff9c 	bl	8009228 <std>
 80092f0:	2202      	movs	r2, #2
 80092f2:	2112      	movs	r1, #18
 80092f4:	68e0      	ldr	r0, [r4, #12]
 80092f6:	f7ff ff97 	bl	8009228 <std>
 80092fa:	2301      	movs	r3, #1
 80092fc:	61a3      	str	r3, [r4, #24]
 80092fe:	bd10      	pop	{r4, pc}
 8009300:	08009f2c 	.word	0x08009f2c
 8009304:	08009271 	.word	0x08009271

08009308 <__sfp>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	4b1b      	ldr	r3, [pc, #108]	; (8009378 <__sfp+0x70>)
 800930c:	681e      	ldr	r6, [r3, #0]
 800930e:	69b3      	ldr	r3, [r6, #24]
 8009310:	4607      	mov	r7, r0
 8009312:	b913      	cbnz	r3, 800931a <__sfp+0x12>
 8009314:	4630      	mov	r0, r6
 8009316:	f7ff ffc7 	bl	80092a8 <__sinit>
 800931a:	3648      	adds	r6, #72	; 0x48
 800931c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009320:	3b01      	subs	r3, #1
 8009322:	d503      	bpl.n	800932c <__sfp+0x24>
 8009324:	6833      	ldr	r3, [r6, #0]
 8009326:	b133      	cbz	r3, 8009336 <__sfp+0x2e>
 8009328:	6836      	ldr	r6, [r6, #0]
 800932a:	e7f7      	b.n	800931c <__sfp+0x14>
 800932c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009330:	b16d      	cbz	r5, 800934e <__sfp+0x46>
 8009332:	3468      	adds	r4, #104	; 0x68
 8009334:	e7f4      	b.n	8009320 <__sfp+0x18>
 8009336:	2104      	movs	r1, #4
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff ff9f 	bl	800927c <__sfmoreglue>
 800933e:	6030      	str	r0, [r6, #0]
 8009340:	2800      	cmp	r0, #0
 8009342:	d1f1      	bne.n	8009328 <__sfp+0x20>
 8009344:	230c      	movs	r3, #12
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	4604      	mov	r4, r0
 800934a:	4620      	mov	r0, r4
 800934c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800934e:	4b0b      	ldr	r3, [pc, #44]	; (800937c <__sfp+0x74>)
 8009350:	6665      	str	r5, [r4, #100]	; 0x64
 8009352:	e9c4 5500 	strd	r5, r5, [r4]
 8009356:	60a5      	str	r5, [r4, #8]
 8009358:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800935c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009360:	2208      	movs	r2, #8
 8009362:	4629      	mov	r1, r5
 8009364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009368:	f7ff fe72 	bl	8009050 <memset>
 800936c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009374:	e7e9      	b.n	800934a <__sfp+0x42>
 8009376:	bf00      	nop
 8009378:	08009f2c 	.word	0x08009f2c
 800937c:	ffff0001 	.word	0xffff0001

08009380 <_fwalk_reent>:
 8009380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009384:	4680      	mov	r8, r0
 8009386:	4689      	mov	r9, r1
 8009388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800938c:	2600      	movs	r6, #0
 800938e:	b914      	cbnz	r4, 8009396 <_fwalk_reent+0x16>
 8009390:	4630      	mov	r0, r6
 8009392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009396:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800939a:	3f01      	subs	r7, #1
 800939c:	d501      	bpl.n	80093a2 <_fwalk_reent+0x22>
 800939e:	6824      	ldr	r4, [r4, #0]
 80093a0:	e7f5      	b.n	800938e <_fwalk_reent+0xe>
 80093a2:	89ab      	ldrh	r3, [r5, #12]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d907      	bls.n	80093b8 <_fwalk_reent+0x38>
 80093a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093ac:	3301      	adds	r3, #1
 80093ae:	d003      	beq.n	80093b8 <_fwalk_reent+0x38>
 80093b0:	4629      	mov	r1, r5
 80093b2:	4640      	mov	r0, r8
 80093b4:	47c8      	blx	r9
 80093b6:	4306      	orrs	r6, r0
 80093b8:	3568      	adds	r5, #104	; 0x68
 80093ba:	e7ee      	b.n	800939a <_fwalk_reent+0x1a>

080093bc <__malloc_lock>:
 80093bc:	4770      	bx	lr

080093be <__malloc_unlock>:
 80093be:	4770      	bx	lr

080093c0 <__sfputc_r>:
 80093c0:	6893      	ldr	r3, [r2, #8]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	b410      	push	{r4}
 80093c8:	6093      	str	r3, [r2, #8]
 80093ca:	da08      	bge.n	80093de <__sfputc_r+0x1e>
 80093cc:	6994      	ldr	r4, [r2, #24]
 80093ce:	42a3      	cmp	r3, r4
 80093d0:	db01      	blt.n	80093d6 <__sfputc_r+0x16>
 80093d2:	290a      	cmp	r1, #10
 80093d4:	d103      	bne.n	80093de <__sfputc_r+0x1e>
 80093d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093da:	f000 bb33 	b.w	8009a44 <__swbuf_r>
 80093de:	6813      	ldr	r3, [r2, #0]
 80093e0:	1c58      	adds	r0, r3, #1
 80093e2:	6010      	str	r0, [r2, #0]
 80093e4:	7019      	strb	r1, [r3, #0]
 80093e6:	4608      	mov	r0, r1
 80093e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <__sfputs_r>:
 80093ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f0:	4606      	mov	r6, r0
 80093f2:	460f      	mov	r7, r1
 80093f4:	4614      	mov	r4, r2
 80093f6:	18d5      	adds	r5, r2, r3
 80093f8:	42ac      	cmp	r4, r5
 80093fa:	d101      	bne.n	8009400 <__sfputs_r+0x12>
 80093fc:	2000      	movs	r0, #0
 80093fe:	e007      	b.n	8009410 <__sfputs_r+0x22>
 8009400:	463a      	mov	r2, r7
 8009402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009406:	4630      	mov	r0, r6
 8009408:	f7ff ffda 	bl	80093c0 <__sfputc_r>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	d1f3      	bne.n	80093f8 <__sfputs_r+0xa>
 8009410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009414 <_vfiprintf_r>:
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	460c      	mov	r4, r1
 800941a:	b09d      	sub	sp, #116	; 0x74
 800941c:	4617      	mov	r7, r2
 800941e:	461d      	mov	r5, r3
 8009420:	4606      	mov	r6, r0
 8009422:	b118      	cbz	r0, 800942c <_vfiprintf_r+0x18>
 8009424:	6983      	ldr	r3, [r0, #24]
 8009426:	b90b      	cbnz	r3, 800942c <_vfiprintf_r+0x18>
 8009428:	f7ff ff3e 	bl	80092a8 <__sinit>
 800942c:	4b7c      	ldr	r3, [pc, #496]	; (8009620 <_vfiprintf_r+0x20c>)
 800942e:	429c      	cmp	r4, r3
 8009430:	d158      	bne.n	80094e4 <_vfiprintf_r+0xd0>
 8009432:	6874      	ldr	r4, [r6, #4]
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	0718      	lsls	r0, r3, #28
 8009438:	d55e      	bpl.n	80094f8 <_vfiprintf_r+0xe4>
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d05b      	beq.n	80094f8 <_vfiprintf_r+0xe4>
 8009440:	2300      	movs	r3, #0
 8009442:	9309      	str	r3, [sp, #36]	; 0x24
 8009444:	2320      	movs	r3, #32
 8009446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800944a:	2330      	movs	r3, #48	; 0x30
 800944c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009450:	9503      	str	r5, [sp, #12]
 8009452:	f04f 0b01 	mov.w	fp, #1
 8009456:	46b8      	mov	r8, r7
 8009458:	4645      	mov	r5, r8
 800945a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800945e:	b10b      	cbz	r3, 8009464 <_vfiprintf_r+0x50>
 8009460:	2b25      	cmp	r3, #37	; 0x25
 8009462:	d154      	bne.n	800950e <_vfiprintf_r+0xfa>
 8009464:	ebb8 0a07 	subs.w	sl, r8, r7
 8009468:	d00b      	beq.n	8009482 <_vfiprintf_r+0x6e>
 800946a:	4653      	mov	r3, sl
 800946c:	463a      	mov	r2, r7
 800946e:	4621      	mov	r1, r4
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff ffbc 	bl	80093ee <__sfputs_r>
 8009476:	3001      	adds	r0, #1
 8009478:	f000 80c2 	beq.w	8009600 <_vfiprintf_r+0x1ec>
 800947c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947e:	4453      	add	r3, sl
 8009480:	9309      	str	r3, [sp, #36]	; 0x24
 8009482:	f898 3000 	ldrb.w	r3, [r8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 80ba 	beq.w	8009600 <_vfiprintf_r+0x1ec>
 800948c:	2300      	movs	r3, #0
 800948e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009496:	9304      	str	r3, [sp, #16]
 8009498:	9307      	str	r3, [sp, #28]
 800949a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800949e:	931a      	str	r3, [sp, #104]	; 0x68
 80094a0:	46a8      	mov	r8, r5
 80094a2:	2205      	movs	r2, #5
 80094a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80094a8:	485e      	ldr	r0, [pc, #376]	; (8009624 <_vfiprintf_r+0x210>)
 80094aa:	f7f6 fe91 	bl	80001d0 <memchr>
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	bb78      	cbnz	r0, 8009512 <_vfiprintf_r+0xfe>
 80094b2:	06d9      	lsls	r1, r3, #27
 80094b4:	bf44      	itt	mi
 80094b6:	2220      	movmi	r2, #32
 80094b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094bc:	071a      	lsls	r2, r3, #28
 80094be:	bf44      	itt	mi
 80094c0:	222b      	movmi	r2, #43	; 0x2b
 80094c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094c6:	782a      	ldrb	r2, [r5, #0]
 80094c8:	2a2a      	cmp	r2, #42	; 0x2a
 80094ca:	d02a      	beq.n	8009522 <_vfiprintf_r+0x10e>
 80094cc:	9a07      	ldr	r2, [sp, #28]
 80094ce:	46a8      	mov	r8, r5
 80094d0:	2000      	movs	r0, #0
 80094d2:	250a      	movs	r5, #10
 80094d4:	4641      	mov	r1, r8
 80094d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094da:	3b30      	subs	r3, #48	; 0x30
 80094dc:	2b09      	cmp	r3, #9
 80094de:	d969      	bls.n	80095b4 <_vfiprintf_r+0x1a0>
 80094e0:	b360      	cbz	r0, 800953c <_vfiprintf_r+0x128>
 80094e2:	e024      	b.n	800952e <_vfiprintf_r+0x11a>
 80094e4:	4b50      	ldr	r3, [pc, #320]	; (8009628 <_vfiprintf_r+0x214>)
 80094e6:	429c      	cmp	r4, r3
 80094e8:	d101      	bne.n	80094ee <_vfiprintf_r+0xda>
 80094ea:	68b4      	ldr	r4, [r6, #8]
 80094ec:	e7a2      	b.n	8009434 <_vfiprintf_r+0x20>
 80094ee:	4b4f      	ldr	r3, [pc, #316]	; (800962c <_vfiprintf_r+0x218>)
 80094f0:	429c      	cmp	r4, r3
 80094f2:	bf08      	it	eq
 80094f4:	68f4      	ldreq	r4, [r6, #12]
 80094f6:	e79d      	b.n	8009434 <_vfiprintf_r+0x20>
 80094f8:	4621      	mov	r1, r4
 80094fa:	4630      	mov	r0, r6
 80094fc:	f000 fb06 	bl	8009b0c <__swsetup_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	d09d      	beq.n	8009440 <_vfiprintf_r+0x2c>
 8009504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009508:	b01d      	add	sp, #116	; 0x74
 800950a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950e:	46a8      	mov	r8, r5
 8009510:	e7a2      	b.n	8009458 <_vfiprintf_r+0x44>
 8009512:	4a44      	ldr	r2, [pc, #272]	; (8009624 <_vfiprintf_r+0x210>)
 8009514:	1a80      	subs	r0, r0, r2
 8009516:	fa0b f000 	lsl.w	r0, fp, r0
 800951a:	4318      	orrs	r0, r3
 800951c:	9004      	str	r0, [sp, #16]
 800951e:	4645      	mov	r5, r8
 8009520:	e7be      	b.n	80094a0 <_vfiprintf_r+0x8c>
 8009522:	9a03      	ldr	r2, [sp, #12]
 8009524:	1d11      	adds	r1, r2, #4
 8009526:	6812      	ldr	r2, [r2, #0]
 8009528:	9103      	str	r1, [sp, #12]
 800952a:	2a00      	cmp	r2, #0
 800952c:	db01      	blt.n	8009532 <_vfiprintf_r+0x11e>
 800952e:	9207      	str	r2, [sp, #28]
 8009530:	e004      	b.n	800953c <_vfiprintf_r+0x128>
 8009532:	4252      	negs	r2, r2
 8009534:	f043 0302 	orr.w	r3, r3, #2
 8009538:	9207      	str	r2, [sp, #28]
 800953a:	9304      	str	r3, [sp, #16]
 800953c:	f898 3000 	ldrb.w	r3, [r8]
 8009540:	2b2e      	cmp	r3, #46	; 0x2e
 8009542:	d10e      	bne.n	8009562 <_vfiprintf_r+0x14e>
 8009544:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009548:	2b2a      	cmp	r3, #42	; 0x2a
 800954a:	d138      	bne.n	80095be <_vfiprintf_r+0x1aa>
 800954c:	9b03      	ldr	r3, [sp, #12]
 800954e:	1d1a      	adds	r2, r3, #4
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	9203      	str	r2, [sp, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	bfb8      	it	lt
 8009558:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800955c:	f108 0802 	add.w	r8, r8, #2
 8009560:	9305      	str	r3, [sp, #20]
 8009562:	4d33      	ldr	r5, [pc, #204]	; (8009630 <_vfiprintf_r+0x21c>)
 8009564:	f898 1000 	ldrb.w	r1, [r8]
 8009568:	2203      	movs	r2, #3
 800956a:	4628      	mov	r0, r5
 800956c:	f7f6 fe30 	bl	80001d0 <memchr>
 8009570:	b140      	cbz	r0, 8009584 <_vfiprintf_r+0x170>
 8009572:	2340      	movs	r3, #64	; 0x40
 8009574:	1b40      	subs	r0, r0, r5
 8009576:	fa03 f000 	lsl.w	r0, r3, r0
 800957a:	9b04      	ldr	r3, [sp, #16]
 800957c:	4303      	orrs	r3, r0
 800957e:	f108 0801 	add.w	r8, r8, #1
 8009582:	9304      	str	r3, [sp, #16]
 8009584:	f898 1000 	ldrb.w	r1, [r8]
 8009588:	482a      	ldr	r0, [pc, #168]	; (8009634 <_vfiprintf_r+0x220>)
 800958a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800958e:	2206      	movs	r2, #6
 8009590:	f108 0701 	add.w	r7, r8, #1
 8009594:	f7f6 fe1c 	bl	80001d0 <memchr>
 8009598:	2800      	cmp	r0, #0
 800959a:	d037      	beq.n	800960c <_vfiprintf_r+0x1f8>
 800959c:	4b26      	ldr	r3, [pc, #152]	; (8009638 <_vfiprintf_r+0x224>)
 800959e:	bb1b      	cbnz	r3, 80095e8 <_vfiprintf_r+0x1d4>
 80095a0:	9b03      	ldr	r3, [sp, #12]
 80095a2:	3307      	adds	r3, #7
 80095a4:	f023 0307 	bic.w	r3, r3, #7
 80095a8:	3308      	adds	r3, #8
 80095aa:	9303      	str	r3, [sp, #12]
 80095ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ae:	444b      	add	r3, r9
 80095b0:	9309      	str	r3, [sp, #36]	; 0x24
 80095b2:	e750      	b.n	8009456 <_vfiprintf_r+0x42>
 80095b4:	fb05 3202 	mla	r2, r5, r2, r3
 80095b8:	2001      	movs	r0, #1
 80095ba:	4688      	mov	r8, r1
 80095bc:	e78a      	b.n	80094d4 <_vfiprintf_r+0xc0>
 80095be:	2300      	movs	r3, #0
 80095c0:	f108 0801 	add.w	r8, r8, #1
 80095c4:	9305      	str	r3, [sp, #20]
 80095c6:	4619      	mov	r1, r3
 80095c8:	250a      	movs	r5, #10
 80095ca:	4640      	mov	r0, r8
 80095cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095d0:	3a30      	subs	r2, #48	; 0x30
 80095d2:	2a09      	cmp	r2, #9
 80095d4:	d903      	bls.n	80095de <_vfiprintf_r+0x1ca>
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0c3      	beq.n	8009562 <_vfiprintf_r+0x14e>
 80095da:	9105      	str	r1, [sp, #20]
 80095dc:	e7c1      	b.n	8009562 <_vfiprintf_r+0x14e>
 80095de:	fb05 2101 	mla	r1, r5, r1, r2
 80095e2:	2301      	movs	r3, #1
 80095e4:	4680      	mov	r8, r0
 80095e6:	e7f0      	b.n	80095ca <_vfiprintf_r+0x1b6>
 80095e8:	ab03      	add	r3, sp, #12
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	4622      	mov	r2, r4
 80095ee:	4b13      	ldr	r3, [pc, #76]	; (800963c <_vfiprintf_r+0x228>)
 80095f0:	a904      	add	r1, sp, #16
 80095f2:	4630      	mov	r0, r6
 80095f4:	f3af 8000 	nop.w
 80095f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80095fc:	4681      	mov	r9, r0
 80095fe:	d1d5      	bne.n	80095ac <_vfiprintf_r+0x198>
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	065b      	lsls	r3, r3, #25
 8009604:	f53f af7e 	bmi.w	8009504 <_vfiprintf_r+0xf0>
 8009608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800960a:	e77d      	b.n	8009508 <_vfiprintf_r+0xf4>
 800960c:	ab03      	add	r3, sp, #12
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	4622      	mov	r2, r4
 8009612:	4b0a      	ldr	r3, [pc, #40]	; (800963c <_vfiprintf_r+0x228>)
 8009614:	a904      	add	r1, sp, #16
 8009616:	4630      	mov	r0, r6
 8009618:	f000 f888 	bl	800972c <_printf_i>
 800961c:	e7ec      	b.n	80095f8 <_vfiprintf_r+0x1e4>
 800961e:	bf00      	nop
 8009620:	08009f50 	.word	0x08009f50
 8009624:	08009f90 	.word	0x08009f90
 8009628:	08009f70 	.word	0x08009f70
 800962c:	08009f30 	.word	0x08009f30
 8009630:	08009f96 	.word	0x08009f96
 8009634:	08009f9a 	.word	0x08009f9a
 8009638:	00000000 	.word	0x00000000
 800963c:	080093ef 	.word	0x080093ef

08009640 <_printf_common>:
 8009640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	4691      	mov	r9, r2
 8009646:	461f      	mov	r7, r3
 8009648:	688a      	ldr	r2, [r1, #8]
 800964a:	690b      	ldr	r3, [r1, #16]
 800964c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009650:	4293      	cmp	r3, r2
 8009652:	bfb8      	it	lt
 8009654:	4613      	movlt	r3, r2
 8009656:	f8c9 3000 	str.w	r3, [r9]
 800965a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800965e:	4606      	mov	r6, r0
 8009660:	460c      	mov	r4, r1
 8009662:	b112      	cbz	r2, 800966a <_printf_common+0x2a>
 8009664:	3301      	adds	r3, #1
 8009666:	f8c9 3000 	str.w	r3, [r9]
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	0699      	lsls	r1, r3, #26
 800966e:	bf42      	ittt	mi
 8009670:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009674:	3302      	addmi	r3, #2
 8009676:	f8c9 3000 	strmi.w	r3, [r9]
 800967a:	6825      	ldr	r5, [r4, #0]
 800967c:	f015 0506 	ands.w	r5, r5, #6
 8009680:	d107      	bne.n	8009692 <_printf_common+0x52>
 8009682:	f104 0a19 	add.w	sl, r4, #25
 8009686:	68e3      	ldr	r3, [r4, #12]
 8009688:	f8d9 2000 	ldr.w	r2, [r9]
 800968c:	1a9b      	subs	r3, r3, r2
 800968e:	42ab      	cmp	r3, r5
 8009690:	dc28      	bgt.n	80096e4 <_printf_common+0xa4>
 8009692:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009696:	6822      	ldr	r2, [r4, #0]
 8009698:	3300      	adds	r3, #0
 800969a:	bf18      	it	ne
 800969c:	2301      	movne	r3, #1
 800969e:	0692      	lsls	r2, r2, #26
 80096a0:	d42d      	bmi.n	80096fe <_printf_common+0xbe>
 80096a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096a6:	4639      	mov	r1, r7
 80096a8:	4630      	mov	r0, r6
 80096aa:	47c0      	blx	r8
 80096ac:	3001      	adds	r0, #1
 80096ae:	d020      	beq.n	80096f2 <_printf_common+0xb2>
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	68e5      	ldr	r5, [r4, #12]
 80096b4:	f8d9 2000 	ldr.w	r2, [r9]
 80096b8:	f003 0306 	and.w	r3, r3, #6
 80096bc:	2b04      	cmp	r3, #4
 80096be:	bf08      	it	eq
 80096c0:	1aad      	subeq	r5, r5, r2
 80096c2:	68a3      	ldr	r3, [r4, #8]
 80096c4:	6922      	ldr	r2, [r4, #16]
 80096c6:	bf0c      	ite	eq
 80096c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096cc:	2500      	movne	r5, #0
 80096ce:	4293      	cmp	r3, r2
 80096d0:	bfc4      	itt	gt
 80096d2:	1a9b      	subgt	r3, r3, r2
 80096d4:	18ed      	addgt	r5, r5, r3
 80096d6:	f04f 0900 	mov.w	r9, #0
 80096da:	341a      	adds	r4, #26
 80096dc:	454d      	cmp	r5, r9
 80096de:	d11a      	bne.n	8009716 <_printf_common+0xd6>
 80096e0:	2000      	movs	r0, #0
 80096e2:	e008      	b.n	80096f6 <_printf_common+0xb6>
 80096e4:	2301      	movs	r3, #1
 80096e6:	4652      	mov	r2, sl
 80096e8:	4639      	mov	r1, r7
 80096ea:	4630      	mov	r0, r6
 80096ec:	47c0      	blx	r8
 80096ee:	3001      	adds	r0, #1
 80096f0:	d103      	bne.n	80096fa <_printf_common+0xba>
 80096f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fa:	3501      	adds	r5, #1
 80096fc:	e7c3      	b.n	8009686 <_printf_common+0x46>
 80096fe:	18e1      	adds	r1, r4, r3
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	2030      	movs	r0, #48	; 0x30
 8009704:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009708:	4422      	add	r2, r4
 800970a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800970e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009712:	3302      	adds	r3, #2
 8009714:	e7c5      	b.n	80096a2 <_printf_common+0x62>
 8009716:	2301      	movs	r3, #1
 8009718:	4622      	mov	r2, r4
 800971a:	4639      	mov	r1, r7
 800971c:	4630      	mov	r0, r6
 800971e:	47c0      	blx	r8
 8009720:	3001      	adds	r0, #1
 8009722:	d0e6      	beq.n	80096f2 <_printf_common+0xb2>
 8009724:	f109 0901 	add.w	r9, r9, #1
 8009728:	e7d8      	b.n	80096dc <_printf_common+0x9c>
	...

0800972c <_printf_i>:
 800972c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009730:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009734:	460c      	mov	r4, r1
 8009736:	7e09      	ldrb	r1, [r1, #24]
 8009738:	b085      	sub	sp, #20
 800973a:	296e      	cmp	r1, #110	; 0x6e
 800973c:	4617      	mov	r7, r2
 800973e:	4606      	mov	r6, r0
 8009740:	4698      	mov	r8, r3
 8009742:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009744:	f000 80b3 	beq.w	80098ae <_printf_i+0x182>
 8009748:	d822      	bhi.n	8009790 <_printf_i+0x64>
 800974a:	2963      	cmp	r1, #99	; 0x63
 800974c:	d036      	beq.n	80097bc <_printf_i+0x90>
 800974e:	d80a      	bhi.n	8009766 <_printf_i+0x3a>
 8009750:	2900      	cmp	r1, #0
 8009752:	f000 80b9 	beq.w	80098c8 <_printf_i+0x19c>
 8009756:	2958      	cmp	r1, #88	; 0x58
 8009758:	f000 8083 	beq.w	8009862 <_printf_i+0x136>
 800975c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009760:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009764:	e032      	b.n	80097cc <_printf_i+0xa0>
 8009766:	2964      	cmp	r1, #100	; 0x64
 8009768:	d001      	beq.n	800976e <_printf_i+0x42>
 800976a:	2969      	cmp	r1, #105	; 0x69
 800976c:	d1f6      	bne.n	800975c <_printf_i+0x30>
 800976e:	6820      	ldr	r0, [r4, #0]
 8009770:	6813      	ldr	r3, [r2, #0]
 8009772:	0605      	lsls	r5, r0, #24
 8009774:	f103 0104 	add.w	r1, r3, #4
 8009778:	d52a      	bpl.n	80097d0 <_printf_i+0xa4>
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6011      	str	r1, [r2, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	da03      	bge.n	800978a <_printf_i+0x5e>
 8009782:	222d      	movs	r2, #45	; 0x2d
 8009784:	425b      	negs	r3, r3
 8009786:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800978a:	486f      	ldr	r0, [pc, #444]	; (8009948 <_printf_i+0x21c>)
 800978c:	220a      	movs	r2, #10
 800978e:	e039      	b.n	8009804 <_printf_i+0xd8>
 8009790:	2973      	cmp	r1, #115	; 0x73
 8009792:	f000 809d 	beq.w	80098d0 <_printf_i+0x1a4>
 8009796:	d808      	bhi.n	80097aa <_printf_i+0x7e>
 8009798:	296f      	cmp	r1, #111	; 0x6f
 800979a:	d020      	beq.n	80097de <_printf_i+0xb2>
 800979c:	2970      	cmp	r1, #112	; 0x70
 800979e:	d1dd      	bne.n	800975c <_printf_i+0x30>
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	f043 0320 	orr.w	r3, r3, #32
 80097a6:	6023      	str	r3, [r4, #0]
 80097a8:	e003      	b.n	80097b2 <_printf_i+0x86>
 80097aa:	2975      	cmp	r1, #117	; 0x75
 80097ac:	d017      	beq.n	80097de <_printf_i+0xb2>
 80097ae:	2978      	cmp	r1, #120	; 0x78
 80097b0:	d1d4      	bne.n	800975c <_printf_i+0x30>
 80097b2:	2378      	movs	r3, #120	; 0x78
 80097b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097b8:	4864      	ldr	r0, [pc, #400]	; (800994c <_printf_i+0x220>)
 80097ba:	e055      	b.n	8009868 <_printf_i+0x13c>
 80097bc:	6813      	ldr	r3, [r2, #0]
 80097be:	1d19      	adds	r1, r3, #4
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6011      	str	r1, [r2, #0]
 80097c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097cc:	2301      	movs	r3, #1
 80097ce:	e08c      	b.n	80098ea <_printf_i+0x1be>
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6011      	str	r1, [r2, #0]
 80097d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097d8:	bf18      	it	ne
 80097da:	b21b      	sxthne	r3, r3
 80097dc:	e7cf      	b.n	800977e <_printf_i+0x52>
 80097de:	6813      	ldr	r3, [r2, #0]
 80097e0:	6825      	ldr	r5, [r4, #0]
 80097e2:	1d18      	adds	r0, r3, #4
 80097e4:	6010      	str	r0, [r2, #0]
 80097e6:	0628      	lsls	r0, r5, #24
 80097e8:	d501      	bpl.n	80097ee <_printf_i+0xc2>
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	e002      	b.n	80097f4 <_printf_i+0xc8>
 80097ee:	0668      	lsls	r0, r5, #25
 80097f0:	d5fb      	bpl.n	80097ea <_printf_i+0xbe>
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	4854      	ldr	r0, [pc, #336]	; (8009948 <_printf_i+0x21c>)
 80097f6:	296f      	cmp	r1, #111	; 0x6f
 80097f8:	bf14      	ite	ne
 80097fa:	220a      	movne	r2, #10
 80097fc:	2208      	moveq	r2, #8
 80097fe:	2100      	movs	r1, #0
 8009800:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009804:	6865      	ldr	r5, [r4, #4]
 8009806:	60a5      	str	r5, [r4, #8]
 8009808:	2d00      	cmp	r5, #0
 800980a:	f2c0 8095 	blt.w	8009938 <_printf_i+0x20c>
 800980e:	6821      	ldr	r1, [r4, #0]
 8009810:	f021 0104 	bic.w	r1, r1, #4
 8009814:	6021      	str	r1, [r4, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d13d      	bne.n	8009896 <_printf_i+0x16a>
 800981a:	2d00      	cmp	r5, #0
 800981c:	f040 808e 	bne.w	800993c <_printf_i+0x210>
 8009820:	4665      	mov	r5, ip
 8009822:	2a08      	cmp	r2, #8
 8009824:	d10b      	bne.n	800983e <_printf_i+0x112>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	07db      	lsls	r3, r3, #31
 800982a:	d508      	bpl.n	800983e <_printf_i+0x112>
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	6862      	ldr	r2, [r4, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	bfde      	ittt	le
 8009834:	2330      	movle	r3, #48	; 0x30
 8009836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800983a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800983e:	ebac 0305 	sub.w	r3, ip, r5
 8009842:	6123      	str	r3, [r4, #16]
 8009844:	f8cd 8000 	str.w	r8, [sp]
 8009848:	463b      	mov	r3, r7
 800984a:	aa03      	add	r2, sp, #12
 800984c:	4621      	mov	r1, r4
 800984e:	4630      	mov	r0, r6
 8009850:	f7ff fef6 	bl	8009640 <_printf_common>
 8009854:	3001      	adds	r0, #1
 8009856:	d14d      	bne.n	80098f4 <_printf_i+0x1c8>
 8009858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800985c:	b005      	add	sp, #20
 800985e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009862:	4839      	ldr	r0, [pc, #228]	; (8009948 <_printf_i+0x21c>)
 8009864:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009868:	6813      	ldr	r3, [r2, #0]
 800986a:	6821      	ldr	r1, [r4, #0]
 800986c:	1d1d      	adds	r5, r3, #4
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6015      	str	r5, [r2, #0]
 8009872:	060a      	lsls	r2, r1, #24
 8009874:	d50b      	bpl.n	800988e <_printf_i+0x162>
 8009876:	07ca      	lsls	r2, r1, #31
 8009878:	bf44      	itt	mi
 800987a:	f041 0120 	orrmi.w	r1, r1, #32
 800987e:	6021      	strmi	r1, [r4, #0]
 8009880:	b91b      	cbnz	r3, 800988a <_printf_i+0x15e>
 8009882:	6822      	ldr	r2, [r4, #0]
 8009884:	f022 0220 	bic.w	r2, r2, #32
 8009888:	6022      	str	r2, [r4, #0]
 800988a:	2210      	movs	r2, #16
 800988c:	e7b7      	b.n	80097fe <_printf_i+0xd2>
 800988e:	064d      	lsls	r5, r1, #25
 8009890:	bf48      	it	mi
 8009892:	b29b      	uxthmi	r3, r3
 8009894:	e7ef      	b.n	8009876 <_printf_i+0x14a>
 8009896:	4665      	mov	r5, ip
 8009898:	fbb3 f1f2 	udiv	r1, r3, r2
 800989c:	fb02 3311 	mls	r3, r2, r1, r3
 80098a0:	5cc3      	ldrb	r3, [r0, r3]
 80098a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80098a6:	460b      	mov	r3, r1
 80098a8:	2900      	cmp	r1, #0
 80098aa:	d1f5      	bne.n	8009898 <_printf_i+0x16c>
 80098ac:	e7b9      	b.n	8009822 <_printf_i+0xf6>
 80098ae:	6813      	ldr	r3, [r2, #0]
 80098b0:	6825      	ldr	r5, [r4, #0]
 80098b2:	6961      	ldr	r1, [r4, #20]
 80098b4:	1d18      	adds	r0, r3, #4
 80098b6:	6010      	str	r0, [r2, #0]
 80098b8:	0628      	lsls	r0, r5, #24
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	d501      	bpl.n	80098c2 <_printf_i+0x196>
 80098be:	6019      	str	r1, [r3, #0]
 80098c0:	e002      	b.n	80098c8 <_printf_i+0x19c>
 80098c2:	066a      	lsls	r2, r5, #25
 80098c4:	d5fb      	bpl.n	80098be <_printf_i+0x192>
 80098c6:	8019      	strh	r1, [r3, #0]
 80098c8:	2300      	movs	r3, #0
 80098ca:	6123      	str	r3, [r4, #16]
 80098cc:	4665      	mov	r5, ip
 80098ce:	e7b9      	b.n	8009844 <_printf_i+0x118>
 80098d0:	6813      	ldr	r3, [r2, #0]
 80098d2:	1d19      	adds	r1, r3, #4
 80098d4:	6011      	str	r1, [r2, #0]
 80098d6:	681d      	ldr	r5, [r3, #0]
 80098d8:	6862      	ldr	r2, [r4, #4]
 80098da:	2100      	movs	r1, #0
 80098dc:	4628      	mov	r0, r5
 80098de:	f7f6 fc77 	bl	80001d0 <memchr>
 80098e2:	b108      	cbz	r0, 80098e8 <_printf_i+0x1bc>
 80098e4:	1b40      	subs	r0, r0, r5
 80098e6:	6060      	str	r0, [r4, #4]
 80098e8:	6863      	ldr	r3, [r4, #4]
 80098ea:	6123      	str	r3, [r4, #16]
 80098ec:	2300      	movs	r3, #0
 80098ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098f2:	e7a7      	b.n	8009844 <_printf_i+0x118>
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	462a      	mov	r2, r5
 80098f8:	4639      	mov	r1, r7
 80098fa:	4630      	mov	r0, r6
 80098fc:	47c0      	blx	r8
 80098fe:	3001      	adds	r0, #1
 8009900:	d0aa      	beq.n	8009858 <_printf_i+0x12c>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	079b      	lsls	r3, r3, #30
 8009906:	d413      	bmi.n	8009930 <_printf_i+0x204>
 8009908:	68e0      	ldr	r0, [r4, #12]
 800990a:	9b03      	ldr	r3, [sp, #12]
 800990c:	4298      	cmp	r0, r3
 800990e:	bfb8      	it	lt
 8009910:	4618      	movlt	r0, r3
 8009912:	e7a3      	b.n	800985c <_printf_i+0x130>
 8009914:	2301      	movs	r3, #1
 8009916:	464a      	mov	r2, r9
 8009918:	4639      	mov	r1, r7
 800991a:	4630      	mov	r0, r6
 800991c:	47c0      	blx	r8
 800991e:	3001      	adds	r0, #1
 8009920:	d09a      	beq.n	8009858 <_printf_i+0x12c>
 8009922:	3501      	adds	r5, #1
 8009924:	68e3      	ldr	r3, [r4, #12]
 8009926:	9a03      	ldr	r2, [sp, #12]
 8009928:	1a9b      	subs	r3, r3, r2
 800992a:	42ab      	cmp	r3, r5
 800992c:	dcf2      	bgt.n	8009914 <_printf_i+0x1e8>
 800992e:	e7eb      	b.n	8009908 <_printf_i+0x1dc>
 8009930:	2500      	movs	r5, #0
 8009932:	f104 0919 	add.w	r9, r4, #25
 8009936:	e7f5      	b.n	8009924 <_printf_i+0x1f8>
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1ac      	bne.n	8009896 <_printf_i+0x16a>
 800993c:	7803      	ldrb	r3, [r0, #0]
 800993e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009942:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009946:	e76c      	b.n	8009822 <_printf_i+0xf6>
 8009948:	08009fa1 	.word	0x08009fa1
 800994c:	08009fb2 	.word	0x08009fb2

08009950 <_putc_r>:
 8009950:	b570      	push	{r4, r5, r6, lr}
 8009952:	460d      	mov	r5, r1
 8009954:	4614      	mov	r4, r2
 8009956:	4606      	mov	r6, r0
 8009958:	b118      	cbz	r0, 8009962 <_putc_r+0x12>
 800995a:	6983      	ldr	r3, [r0, #24]
 800995c:	b90b      	cbnz	r3, 8009962 <_putc_r+0x12>
 800995e:	f7ff fca3 	bl	80092a8 <__sinit>
 8009962:	4b13      	ldr	r3, [pc, #76]	; (80099b0 <_putc_r+0x60>)
 8009964:	429c      	cmp	r4, r3
 8009966:	d112      	bne.n	800998e <_putc_r+0x3e>
 8009968:	6874      	ldr	r4, [r6, #4]
 800996a:	68a3      	ldr	r3, [r4, #8]
 800996c:	3b01      	subs	r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	60a3      	str	r3, [r4, #8]
 8009972:	da16      	bge.n	80099a2 <_putc_r+0x52>
 8009974:	69a2      	ldr	r2, [r4, #24]
 8009976:	4293      	cmp	r3, r2
 8009978:	db02      	blt.n	8009980 <_putc_r+0x30>
 800997a:	b2eb      	uxtb	r3, r5
 800997c:	2b0a      	cmp	r3, #10
 800997e:	d110      	bne.n	80099a2 <_putc_r+0x52>
 8009980:	4622      	mov	r2, r4
 8009982:	4629      	mov	r1, r5
 8009984:	4630      	mov	r0, r6
 8009986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800998a:	f000 b85b 	b.w	8009a44 <__swbuf_r>
 800998e:	4b09      	ldr	r3, [pc, #36]	; (80099b4 <_putc_r+0x64>)
 8009990:	429c      	cmp	r4, r3
 8009992:	d101      	bne.n	8009998 <_putc_r+0x48>
 8009994:	68b4      	ldr	r4, [r6, #8]
 8009996:	e7e8      	b.n	800996a <_putc_r+0x1a>
 8009998:	4b07      	ldr	r3, [pc, #28]	; (80099b8 <_putc_r+0x68>)
 800999a:	429c      	cmp	r4, r3
 800999c:	bf08      	it	eq
 800999e:	68f4      	ldreq	r4, [r6, #12]
 80099a0:	e7e3      	b.n	800996a <_putc_r+0x1a>
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	6022      	str	r2, [r4, #0]
 80099a8:	701d      	strb	r5, [r3, #0]
 80099aa:	b2e8      	uxtb	r0, r5
 80099ac:	bd70      	pop	{r4, r5, r6, pc}
 80099ae:	bf00      	nop
 80099b0:	08009f50 	.word	0x08009f50
 80099b4:	08009f70 	.word	0x08009f70
 80099b8:	08009f30 	.word	0x08009f30

080099bc <__sread>:
 80099bc:	b510      	push	{r4, lr}
 80099be:	460c      	mov	r4, r1
 80099c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c4:	f000 fa46 	bl	8009e54 <_read_r>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	bfab      	itete	ge
 80099cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099ce:	89a3      	ldrhlt	r3, [r4, #12]
 80099d0:	181b      	addge	r3, r3, r0
 80099d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099d6:	bfac      	ite	ge
 80099d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80099da:	81a3      	strhlt	r3, [r4, #12]
 80099dc:	bd10      	pop	{r4, pc}

080099de <__swrite>:
 80099de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e2:	461f      	mov	r7, r3
 80099e4:	898b      	ldrh	r3, [r1, #12]
 80099e6:	05db      	lsls	r3, r3, #23
 80099e8:	4605      	mov	r5, r0
 80099ea:	460c      	mov	r4, r1
 80099ec:	4616      	mov	r6, r2
 80099ee:	d505      	bpl.n	80099fc <__swrite+0x1e>
 80099f0:	2302      	movs	r3, #2
 80099f2:	2200      	movs	r2, #0
 80099f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f8:	f000 f9b6 	bl	8009d68 <_lseek_r>
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a06:	81a3      	strh	r3, [r4, #12]
 8009a08:	4632      	mov	r2, r6
 8009a0a:	463b      	mov	r3, r7
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a12:	f000 b869 	b.w	8009ae8 <_write_r>

08009a16 <__sseek>:
 8009a16:	b510      	push	{r4, lr}
 8009a18:	460c      	mov	r4, r1
 8009a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a1e:	f000 f9a3 	bl	8009d68 <_lseek_r>
 8009a22:	1c43      	adds	r3, r0, #1
 8009a24:	89a3      	ldrh	r3, [r4, #12]
 8009a26:	bf15      	itete	ne
 8009a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a32:	81a3      	strheq	r3, [r4, #12]
 8009a34:	bf18      	it	ne
 8009a36:	81a3      	strhne	r3, [r4, #12]
 8009a38:	bd10      	pop	{r4, pc}

08009a3a <__sclose>:
 8009a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3e:	f000 b8d3 	b.w	8009be8 <_close_r>
	...

08009a44 <__swbuf_r>:
 8009a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a46:	460e      	mov	r6, r1
 8009a48:	4614      	mov	r4, r2
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	b118      	cbz	r0, 8009a56 <__swbuf_r+0x12>
 8009a4e:	6983      	ldr	r3, [r0, #24]
 8009a50:	b90b      	cbnz	r3, 8009a56 <__swbuf_r+0x12>
 8009a52:	f7ff fc29 	bl	80092a8 <__sinit>
 8009a56:	4b21      	ldr	r3, [pc, #132]	; (8009adc <__swbuf_r+0x98>)
 8009a58:	429c      	cmp	r4, r3
 8009a5a:	d12a      	bne.n	8009ab2 <__swbuf_r+0x6e>
 8009a5c:	686c      	ldr	r4, [r5, #4]
 8009a5e:	69a3      	ldr	r3, [r4, #24]
 8009a60:	60a3      	str	r3, [r4, #8]
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	071a      	lsls	r2, r3, #28
 8009a66:	d52e      	bpl.n	8009ac6 <__swbuf_r+0x82>
 8009a68:	6923      	ldr	r3, [r4, #16]
 8009a6a:	b363      	cbz	r3, 8009ac6 <__swbuf_r+0x82>
 8009a6c:	6923      	ldr	r3, [r4, #16]
 8009a6e:	6820      	ldr	r0, [r4, #0]
 8009a70:	1ac0      	subs	r0, r0, r3
 8009a72:	6963      	ldr	r3, [r4, #20]
 8009a74:	b2f6      	uxtb	r6, r6
 8009a76:	4283      	cmp	r3, r0
 8009a78:	4637      	mov	r7, r6
 8009a7a:	dc04      	bgt.n	8009a86 <__swbuf_r+0x42>
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f000 f948 	bl	8009d14 <_fflush_r>
 8009a84:	bb28      	cbnz	r0, 8009ad2 <__swbuf_r+0x8e>
 8009a86:	68a3      	ldr	r3, [r4, #8]
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	60a3      	str	r3, [r4, #8]
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	6022      	str	r2, [r4, #0]
 8009a92:	701e      	strb	r6, [r3, #0]
 8009a94:	6963      	ldr	r3, [r4, #20]
 8009a96:	3001      	adds	r0, #1
 8009a98:	4283      	cmp	r3, r0
 8009a9a:	d004      	beq.n	8009aa6 <__swbuf_r+0x62>
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	07db      	lsls	r3, r3, #31
 8009aa0:	d519      	bpl.n	8009ad6 <__swbuf_r+0x92>
 8009aa2:	2e0a      	cmp	r6, #10
 8009aa4:	d117      	bne.n	8009ad6 <__swbuf_r+0x92>
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	f000 f933 	bl	8009d14 <_fflush_r>
 8009aae:	b190      	cbz	r0, 8009ad6 <__swbuf_r+0x92>
 8009ab0:	e00f      	b.n	8009ad2 <__swbuf_r+0x8e>
 8009ab2:	4b0b      	ldr	r3, [pc, #44]	; (8009ae0 <__swbuf_r+0x9c>)
 8009ab4:	429c      	cmp	r4, r3
 8009ab6:	d101      	bne.n	8009abc <__swbuf_r+0x78>
 8009ab8:	68ac      	ldr	r4, [r5, #8]
 8009aba:	e7d0      	b.n	8009a5e <__swbuf_r+0x1a>
 8009abc:	4b09      	ldr	r3, [pc, #36]	; (8009ae4 <__swbuf_r+0xa0>)
 8009abe:	429c      	cmp	r4, r3
 8009ac0:	bf08      	it	eq
 8009ac2:	68ec      	ldreq	r4, [r5, #12]
 8009ac4:	e7cb      	b.n	8009a5e <__swbuf_r+0x1a>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f000 f81f 	bl	8009b0c <__swsetup_r>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d0cc      	beq.n	8009a6c <__swbuf_r+0x28>
 8009ad2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ada:	bf00      	nop
 8009adc:	08009f50 	.word	0x08009f50
 8009ae0:	08009f70 	.word	0x08009f70
 8009ae4:	08009f30 	.word	0x08009f30

08009ae8 <_write_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4c07      	ldr	r4, [pc, #28]	; (8009b08 <_write_r+0x20>)
 8009aec:	4605      	mov	r5, r0
 8009aee:	4608      	mov	r0, r1
 8009af0:	4611      	mov	r1, r2
 8009af2:	2200      	movs	r2, #0
 8009af4:	6022      	str	r2, [r4, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	f7f7 fe37 	bl	800176a <_write>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_write_r+0x1e>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_write_r+0x1e>
 8009b04:	602b      	str	r3, [r5, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	200008cc 	.word	0x200008cc

08009b0c <__swsetup_r>:
 8009b0c:	4b32      	ldr	r3, [pc, #200]	; (8009bd8 <__swsetup_r+0xcc>)
 8009b0e:	b570      	push	{r4, r5, r6, lr}
 8009b10:	681d      	ldr	r5, [r3, #0]
 8009b12:	4606      	mov	r6, r0
 8009b14:	460c      	mov	r4, r1
 8009b16:	b125      	cbz	r5, 8009b22 <__swsetup_r+0x16>
 8009b18:	69ab      	ldr	r3, [r5, #24]
 8009b1a:	b913      	cbnz	r3, 8009b22 <__swsetup_r+0x16>
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	f7ff fbc3 	bl	80092a8 <__sinit>
 8009b22:	4b2e      	ldr	r3, [pc, #184]	; (8009bdc <__swsetup_r+0xd0>)
 8009b24:	429c      	cmp	r4, r3
 8009b26:	d10f      	bne.n	8009b48 <__swsetup_r+0x3c>
 8009b28:	686c      	ldr	r4, [r5, #4]
 8009b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	0715      	lsls	r5, r2, #28
 8009b32:	d42c      	bmi.n	8009b8e <__swsetup_r+0x82>
 8009b34:	06d0      	lsls	r0, r2, #27
 8009b36:	d411      	bmi.n	8009b5c <__swsetup_r+0x50>
 8009b38:	2209      	movs	r2, #9
 8009b3a:	6032      	str	r2, [r6, #0]
 8009b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b40:	81a3      	strh	r3, [r4, #12]
 8009b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b46:	e03e      	b.n	8009bc6 <__swsetup_r+0xba>
 8009b48:	4b25      	ldr	r3, [pc, #148]	; (8009be0 <__swsetup_r+0xd4>)
 8009b4a:	429c      	cmp	r4, r3
 8009b4c:	d101      	bne.n	8009b52 <__swsetup_r+0x46>
 8009b4e:	68ac      	ldr	r4, [r5, #8]
 8009b50:	e7eb      	b.n	8009b2a <__swsetup_r+0x1e>
 8009b52:	4b24      	ldr	r3, [pc, #144]	; (8009be4 <__swsetup_r+0xd8>)
 8009b54:	429c      	cmp	r4, r3
 8009b56:	bf08      	it	eq
 8009b58:	68ec      	ldreq	r4, [r5, #12]
 8009b5a:	e7e6      	b.n	8009b2a <__swsetup_r+0x1e>
 8009b5c:	0751      	lsls	r1, r2, #29
 8009b5e:	d512      	bpl.n	8009b86 <__swsetup_r+0x7a>
 8009b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b62:	b141      	cbz	r1, 8009b76 <__swsetup_r+0x6a>
 8009b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b68:	4299      	cmp	r1, r3
 8009b6a:	d002      	beq.n	8009b72 <__swsetup_r+0x66>
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f7ff fa77 	bl	8009060 <_free_r>
 8009b72:	2300      	movs	r3, #0
 8009b74:	6363      	str	r3, [r4, #52]	; 0x34
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b7c:	81a3      	strh	r3, [r4, #12]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	6063      	str	r3, [r4, #4]
 8009b82:	6923      	ldr	r3, [r4, #16]
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	f043 0308 	orr.w	r3, r3, #8
 8009b8c:	81a3      	strh	r3, [r4, #12]
 8009b8e:	6923      	ldr	r3, [r4, #16]
 8009b90:	b94b      	cbnz	r3, 8009ba6 <__swsetup_r+0x9a>
 8009b92:	89a3      	ldrh	r3, [r4, #12]
 8009b94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b9c:	d003      	beq.n	8009ba6 <__swsetup_r+0x9a>
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f000 f917 	bl	8009dd4 <__smakebuf_r>
 8009ba6:	89a2      	ldrh	r2, [r4, #12]
 8009ba8:	f012 0301 	ands.w	r3, r2, #1
 8009bac:	d00c      	beq.n	8009bc8 <__swsetup_r+0xbc>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60a3      	str	r3, [r4, #8]
 8009bb2:	6963      	ldr	r3, [r4, #20]
 8009bb4:	425b      	negs	r3, r3
 8009bb6:	61a3      	str	r3, [r4, #24]
 8009bb8:	6923      	ldr	r3, [r4, #16]
 8009bba:	b953      	cbnz	r3, 8009bd2 <__swsetup_r+0xc6>
 8009bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009bc4:	d1ba      	bne.n	8009b3c <__swsetup_r+0x30>
 8009bc6:	bd70      	pop	{r4, r5, r6, pc}
 8009bc8:	0792      	lsls	r2, r2, #30
 8009bca:	bf58      	it	pl
 8009bcc:	6963      	ldrpl	r3, [r4, #20]
 8009bce:	60a3      	str	r3, [r4, #8]
 8009bd0:	e7f2      	b.n	8009bb8 <__swsetup_r+0xac>
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	e7f7      	b.n	8009bc6 <__swsetup_r+0xba>
 8009bd6:	bf00      	nop
 8009bd8:	20000030 	.word	0x20000030
 8009bdc:	08009f50 	.word	0x08009f50
 8009be0:	08009f70 	.word	0x08009f70
 8009be4:	08009f30 	.word	0x08009f30

08009be8 <_close_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4c06      	ldr	r4, [pc, #24]	; (8009c04 <_close_r+0x1c>)
 8009bec:	2300      	movs	r3, #0
 8009bee:	4605      	mov	r5, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	f7f7 fdd5 	bl	80017a2 <_close>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d102      	bne.n	8009c02 <_close_r+0x1a>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	b103      	cbz	r3, 8009c02 <_close_r+0x1a>
 8009c00:	602b      	str	r3, [r5, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	200008cc 	.word	0x200008cc

08009c08 <__sflush_r>:
 8009c08:	898a      	ldrh	r2, [r1, #12]
 8009c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0e:	4605      	mov	r5, r0
 8009c10:	0710      	lsls	r0, r2, #28
 8009c12:	460c      	mov	r4, r1
 8009c14:	d458      	bmi.n	8009cc8 <__sflush_r+0xc0>
 8009c16:	684b      	ldr	r3, [r1, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	dc05      	bgt.n	8009c28 <__sflush_r+0x20>
 8009c1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	dc02      	bgt.n	8009c28 <__sflush_r+0x20>
 8009c22:	2000      	movs	r0, #0
 8009c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c2a:	2e00      	cmp	r6, #0
 8009c2c:	d0f9      	beq.n	8009c22 <__sflush_r+0x1a>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c34:	682f      	ldr	r7, [r5, #0]
 8009c36:	6a21      	ldr	r1, [r4, #32]
 8009c38:	602b      	str	r3, [r5, #0]
 8009c3a:	d032      	beq.n	8009ca2 <__sflush_r+0x9a>
 8009c3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c3e:	89a3      	ldrh	r3, [r4, #12]
 8009c40:	075a      	lsls	r2, r3, #29
 8009c42:	d505      	bpl.n	8009c50 <__sflush_r+0x48>
 8009c44:	6863      	ldr	r3, [r4, #4]
 8009c46:	1ac0      	subs	r0, r0, r3
 8009c48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c4a:	b10b      	cbz	r3, 8009c50 <__sflush_r+0x48>
 8009c4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c4e:	1ac0      	subs	r0, r0, r3
 8009c50:	2300      	movs	r3, #0
 8009c52:	4602      	mov	r2, r0
 8009c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c56:	6a21      	ldr	r1, [r4, #32]
 8009c58:	4628      	mov	r0, r5
 8009c5a:	47b0      	blx	r6
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	d106      	bne.n	8009c70 <__sflush_r+0x68>
 8009c62:	6829      	ldr	r1, [r5, #0]
 8009c64:	291d      	cmp	r1, #29
 8009c66:	d848      	bhi.n	8009cfa <__sflush_r+0xf2>
 8009c68:	4a29      	ldr	r2, [pc, #164]	; (8009d10 <__sflush_r+0x108>)
 8009c6a:	40ca      	lsrs	r2, r1
 8009c6c:	07d6      	lsls	r6, r2, #31
 8009c6e:	d544      	bpl.n	8009cfa <__sflush_r+0xf2>
 8009c70:	2200      	movs	r2, #0
 8009c72:	6062      	str	r2, [r4, #4]
 8009c74:	04d9      	lsls	r1, r3, #19
 8009c76:	6922      	ldr	r2, [r4, #16]
 8009c78:	6022      	str	r2, [r4, #0]
 8009c7a:	d504      	bpl.n	8009c86 <__sflush_r+0x7e>
 8009c7c:	1c42      	adds	r2, r0, #1
 8009c7e:	d101      	bne.n	8009c84 <__sflush_r+0x7c>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b903      	cbnz	r3, 8009c86 <__sflush_r+0x7e>
 8009c84:	6560      	str	r0, [r4, #84]	; 0x54
 8009c86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c88:	602f      	str	r7, [r5, #0]
 8009c8a:	2900      	cmp	r1, #0
 8009c8c:	d0c9      	beq.n	8009c22 <__sflush_r+0x1a>
 8009c8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c92:	4299      	cmp	r1, r3
 8009c94:	d002      	beq.n	8009c9c <__sflush_r+0x94>
 8009c96:	4628      	mov	r0, r5
 8009c98:	f7ff f9e2 	bl	8009060 <_free_r>
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	6360      	str	r0, [r4, #52]	; 0x34
 8009ca0:	e7c0      	b.n	8009c24 <__sflush_r+0x1c>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	47b0      	blx	r6
 8009ca8:	1c41      	adds	r1, r0, #1
 8009caa:	d1c8      	bne.n	8009c3e <__sflush_r+0x36>
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d0c5      	beq.n	8009c3e <__sflush_r+0x36>
 8009cb2:	2b1d      	cmp	r3, #29
 8009cb4:	d001      	beq.n	8009cba <__sflush_r+0xb2>
 8009cb6:	2b16      	cmp	r3, #22
 8009cb8:	d101      	bne.n	8009cbe <__sflush_r+0xb6>
 8009cba:	602f      	str	r7, [r5, #0]
 8009cbc:	e7b1      	b.n	8009c22 <__sflush_r+0x1a>
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc4:	81a3      	strh	r3, [r4, #12]
 8009cc6:	e7ad      	b.n	8009c24 <__sflush_r+0x1c>
 8009cc8:	690f      	ldr	r7, [r1, #16]
 8009cca:	2f00      	cmp	r7, #0
 8009ccc:	d0a9      	beq.n	8009c22 <__sflush_r+0x1a>
 8009cce:	0793      	lsls	r3, r2, #30
 8009cd0:	680e      	ldr	r6, [r1, #0]
 8009cd2:	bf08      	it	eq
 8009cd4:	694b      	ldreq	r3, [r1, #20]
 8009cd6:	600f      	str	r7, [r1, #0]
 8009cd8:	bf18      	it	ne
 8009cda:	2300      	movne	r3, #0
 8009cdc:	eba6 0807 	sub.w	r8, r6, r7
 8009ce0:	608b      	str	r3, [r1, #8]
 8009ce2:	f1b8 0f00 	cmp.w	r8, #0
 8009ce6:	dd9c      	ble.n	8009c22 <__sflush_r+0x1a>
 8009ce8:	4643      	mov	r3, r8
 8009cea:	463a      	mov	r2, r7
 8009cec:	6a21      	ldr	r1, [r4, #32]
 8009cee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b0      	blx	r6
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	dc06      	bgt.n	8009d06 <__sflush_r+0xfe>
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cfe:	81a3      	strh	r3, [r4, #12]
 8009d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d04:	e78e      	b.n	8009c24 <__sflush_r+0x1c>
 8009d06:	4407      	add	r7, r0
 8009d08:	eba8 0800 	sub.w	r8, r8, r0
 8009d0c:	e7e9      	b.n	8009ce2 <__sflush_r+0xda>
 8009d0e:	bf00      	nop
 8009d10:	20400001 	.word	0x20400001

08009d14 <_fflush_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	690b      	ldr	r3, [r1, #16]
 8009d18:	4605      	mov	r5, r0
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	b1db      	cbz	r3, 8009d56 <_fflush_r+0x42>
 8009d1e:	b118      	cbz	r0, 8009d28 <_fflush_r+0x14>
 8009d20:	6983      	ldr	r3, [r0, #24]
 8009d22:	b90b      	cbnz	r3, 8009d28 <_fflush_r+0x14>
 8009d24:	f7ff fac0 	bl	80092a8 <__sinit>
 8009d28:	4b0c      	ldr	r3, [pc, #48]	; (8009d5c <_fflush_r+0x48>)
 8009d2a:	429c      	cmp	r4, r3
 8009d2c:	d109      	bne.n	8009d42 <_fflush_r+0x2e>
 8009d2e:	686c      	ldr	r4, [r5, #4]
 8009d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d34:	b17b      	cbz	r3, 8009d56 <_fflush_r+0x42>
 8009d36:	4621      	mov	r1, r4
 8009d38:	4628      	mov	r0, r5
 8009d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d3e:	f7ff bf63 	b.w	8009c08 <__sflush_r>
 8009d42:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <_fflush_r+0x4c>)
 8009d44:	429c      	cmp	r4, r3
 8009d46:	d101      	bne.n	8009d4c <_fflush_r+0x38>
 8009d48:	68ac      	ldr	r4, [r5, #8]
 8009d4a:	e7f1      	b.n	8009d30 <_fflush_r+0x1c>
 8009d4c:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <_fflush_r+0x50>)
 8009d4e:	429c      	cmp	r4, r3
 8009d50:	bf08      	it	eq
 8009d52:	68ec      	ldreq	r4, [r5, #12]
 8009d54:	e7ec      	b.n	8009d30 <_fflush_r+0x1c>
 8009d56:	2000      	movs	r0, #0
 8009d58:	bd38      	pop	{r3, r4, r5, pc}
 8009d5a:	bf00      	nop
 8009d5c:	08009f50 	.word	0x08009f50
 8009d60:	08009f70 	.word	0x08009f70
 8009d64:	08009f30 	.word	0x08009f30

08009d68 <_lseek_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4c07      	ldr	r4, [pc, #28]	; (8009d88 <_lseek_r+0x20>)
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	4608      	mov	r0, r1
 8009d70:	4611      	mov	r1, r2
 8009d72:	2200      	movs	r2, #0
 8009d74:	6022      	str	r2, [r4, #0]
 8009d76:	461a      	mov	r2, r3
 8009d78:	f7f7 fd3a 	bl	80017f0 <_lseek>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d102      	bne.n	8009d86 <_lseek_r+0x1e>
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	b103      	cbz	r3, 8009d86 <_lseek_r+0x1e>
 8009d84:	602b      	str	r3, [r5, #0]
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	200008cc 	.word	0x200008cc

08009d8c <__swhatbuf_r>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	460e      	mov	r6, r1
 8009d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d94:	2900      	cmp	r1, #0
 8009d96:	b096      	sub	sp, #88	; 0x58
 8009d98:	4614      	mov	r4, r2
 8009d9a:	461d      	mov	r5, r3
 8009d9c:	da07      	bge.n	8009dae <__swhatbuf_r+0x22>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	602b      	str	r3, [r5, #0]
 8009da2:	89b3      	ldrh	r3, [r6, #12]
 8009da4:	061a      	lsls	r2, r3, #24
 8009da6:	d410      	bmi.n	8009dca <__swhatbuf_r+0x3e>
 8009da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dac:	e00e      	b.n	8009dcc <__swhatbuf_r+0x40>
 8009dae:	466a      	mov	r2, sp
 8009db0:	f000 f862 	bl	8009e78 <_fstat_r>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	dbf2      	blt.n	8009d9e <__swhatbuf_r+0x12>
 8009db8:	9a01      	ldr	r2, [sp, #4]
 8009dba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009dc2:	425a      	negs	r2, r3
 8009dc4:	415a      	adcs	r2, r3
 8009dc6:	602a      	str	r2, [r5, #0]
 8009dc8:	e7ee      	b.n	8009da8 <__swhatbuf_r+0x1c>
 8009dca:	2340      	movs	r3, #64	; 0x40
 8009dcc:	2000      	movs	r0, #0
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	b016      	add	sp, #88	; 0x58
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}

08009dd4 <__smakebuf_r>:
 8009dd4:	898b      	ldrh	r3, [r1, #12]
 8009dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dd8:	079d      	lsls	r5, r3, #30
 8009dda:	4606      	mov	r6, r0
 8009ddc:	460c      	mov	r4, r1
 8009dde:	d507      	bpl.n	8009df0 <__smakebuf_r+0x1c>
 8009de0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	6123      	str	r3, [r4, #16]
 8009de8:	2301      	movs	r3, #1
 8009dea:	6163      	str	r3, [r4, #20]
 8009dec:	b002      	add	sp, #8
 8009dee:	bd70      	pop	{r4, r5, r6, pc}
 8009df0:	ab01      	add	r3, sp, #4
 8009df2:	466a      	mov	r2, sp
 8009df4:	f7ff ffca 	bl	8009d8c <__swhatbuf_r>
 8009df8:	9900      	ldr	r1, [sp, #0]
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f7ff f97d 	bl	80090fc <_malloc_r>
 8009e02:	b948      	cbnz	r0, 8009e18 <__smakebuf_r+0x44>
 8009e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e08:	059a      	lsls	r2, r3, #22
 8009e0a:	d4ef      	bmi.n	8009dec <__smakebuf_r+0x18>
 8009e0c:	f023 0303 	bic.w	r3, r3, #3
 8009e10:	f043 0302 	orr.w	r3, r3, #2
 8009e14:	81a3      	strh	r3, [r4, #12]
 8009e16:	e7e3      	b.n	8009de0 <__smakebuf_r+0xc>
 8009e18:	4b0d      	ldr	r3, [pc, #52]	; (8009e50 <__smakebuf_r+0x7c>)
 8009e1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	6020      	str	r0, [r4, #0]
 8009e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e24:	81a3      	strh	r3, [r4, #12]
 8009e26:	9b00      	ldr	r3, [sp, #0]
 8009e28:	6163      	str	r3, [r4, #20]
 8009e2a:	9b01      	ldr	r3, [sp, #4]
 8009e2c:	6120      	str	r0, [r4, #16]
 8009e2e:	b15b      	cbz	r3, 8009e48 <__smakebuf_r+0x74>
 8009e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e34:	4630      	mov	r0, r6
 8009e36:	f000 f831 	bl	8009e9c <_isatty_r>
 8009e3a:	b128      	cbz	r0, 8009e48 <__smakebuf_r+0x74>
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	f023 0303 	bic.w	r3, r3, #3
 8009e42:	f043 0301 	orr.w	r3, r3, #1
 8009e46:	81a3      	strh	r3, [r4, #12]
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	431d      	orrs	r5, r3
 8009e4c:	81a5      	strh	r5, [r4, #12]
 8009e4e:	e7cd      	b.n	8009dec <__smakebuf_r+0x18>
 8009e50:	08009271 	.word	0x08009271

08009e54 <_read_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4c07      	ldr	r4, [pc, #28]	; (8009e74 <_read_r+0x20>)
 8009e58:	4605      	mov	r5, r0
 8009e5a:	4608      	mov	r0, r1
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	2200      	movs	r2, #0
 8009e60:	6022      	str	r2, [r4, #0]
 8009e62:	461a      	mov	r2, r3
 8009e64:	f7f7 fc64 	bl	8001730 <_read>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_read_r+0x1e>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_read_r+0x1e>
 8009e70:	602b      	str	r3, [r5, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	200008cc 	.word	0x200008cc

08009e78 <_fstat_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4c07      	ldr	r4, [pc, #28]	; (8009e98 <_fstat_r+0x20>)
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	4605      	mov	r5, r0
 8009e80:	4608      	mov	r0, r1
 8009e82:	4611      	mov	r1, r2
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	f7f7 fc98 	bl	80017ba <_fstat>
 8009e8a:	1c43      	adds	r3, r0, #1
 8009e8c:	d102      	bne.n	8009e94 <_fstat_r+0x1c>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	b103      	cbz	r3, 8009e94 <_fstat_r+0x1c>
 8009e92:	602b      	str	r3, [r5, #0]
 8009e94:	bd38      	pop	{r3, r4, r5, pc}
 8009e96:	bf00      	nop
 8009e98:	200008cc 	.word	0x200008cc

08009e9c <_isatty_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4c06      	ldr	r4, [pc, #24]	; (8009eb8 <_isatty_r+0x1c>)
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4605      	mov	r5, r0
 8009ea4:	4608      	mov	r0, r1
 8009ea6:	6023      	str	r3, [r4, #0]
 8009ea8:	f7f7 fc97 	bl	80017da <_isatty>
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	d102      	bne.n	8009eb6 <_isatty_r+0x1a>
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	b103      	cbz	r3, 8009eb6 <_isatty_r+0x1a>
 8009eb4:	602b      	str	r3, [r5, #0]
 8009eb6:	bd38      	pop	{r3, r4, r5, pc}
 8009eb8:	200008cc 	.word	0x200008cc

08009ebc <_init>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	bf00      	nop
 8009ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec2:	bc08      	pop	{r3}
 8009ec4:	469e      	mov	lr, r3
 8009ec6:	4770      	bx	lr

08009ec8 <_fini>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	bf00      	nop
 8009ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ece:	bc08      	pop	{r3}
 8009ed0:	469e      	mov	lr, r3
 8009ed2:	4770      	bx	lr
