
CV Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ec0  08009ec0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08009ec0  08009ec0  00019ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ec8  08009ec8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ec8  08009ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ecc  08009ecc  00019ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08009ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  20000094  08009f64  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000878  08009f64  00020878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001962e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036bf  00000000  00000000  000396f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001148  00000000  00000000  0003cdb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  0003df00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024be4  00000000  00000000  0003eee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001034a  00000000  00000000  00063acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc03f  00000000  00000000  00073e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013fe55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005004  00000000  00000000  0013fed0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009db8 	.word	0x08009db8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08009db8 	.word	0x08009db8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	0000      	movs	r0, r0
	...

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b598      	push	{r3, r4, r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fdac 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f8e8 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 f9fc 	bl	80011f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e00:	f000 f9da 	bl	80011b8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000e04:	f000 f980 	bl	8001108 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 8000e08:	f007 fda8 	bl	800895c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000e0c:	f000 f9aa 	bl	8001164 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000e10:	f000 f946 	bl	80010a0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  valByte = (uint8_t)((valVolt/3.0)*255);
 8000e14:	4b64      	ldr	r3, [pc, #400]	; (8000fa8 <main+0x1b8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fb8d 	bl	8000538 <__aeabi_f2d>
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	4b62      	ldr	r3, [pc, #392]	; (8000fac <main+0x1bc>)
 8000e24:	f7ff fd0a 	bl	800083c <__aeabi_ddiv>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	4621      	mov	r1, r4
 8000e30:	a359      	add	r3, pc, #356	; (adr r3, 8000f98 <main+0x1a8>)
 8000e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e36:	f7ff fbd7 	bl	80005e8 <__aeabi_dmul>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460c      	mov	r4, r1
 8000e3e:	4618      	mov	r0, r3
 8000e40:	4621      	mov	r1, r4
 8000e42:	f7ff fde3 	bl	8000a0c <__aeabi_d2uiz>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b59      	ldr	r3, [pc, #356]	; (8000fb0 <main+0x1c0>)
 8000e4c:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart2, RxData, 3);
 8000e4e:	2203      	movs	r2, #3
 8000e50:	4958      	ldr	r1, [pc, #352]	; (8000fb4 <main+0x1c4>)
 8000e52:	4859      	ldr	r0, [pc, #356]	; (8000fb8 <main+0x1c8>)
 8000e54:	f004 f854 	bl	8004f00 <HAL_UART_Receive_DMA>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4858      	ldr	r0, [pc, #352]	; (8000fbc <main+0x1cc>)
 8000e5c:	f000 ff3f 	bl	8001cde <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, valByte);
 8000e60:	4b53      	ldr	r3, [pc, #332]	; (8000fb0 <main+0x1c0>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2208      	movs	r2, #8
 8000e66:	2100      	movs	r1, #0
 8000e68:	4854      	ldr	r0, [pc, #336]	; (8000fbc <main+0x1cc>)
 8000e6a:	f000 ffeb 	bl	8001e44 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4852      	ldr	r0, [pc, #328]	; (8000fbc <main+0x1cc>)
 8000e72:	f000 ff34 	bl	8001cde <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, 0);
 8000e76:	2300      	movs	r3, #0
 8000e78:	2208      	movs	r2, #8
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	484f      	ldr	r0, [pc, #316]	; (8000fbc <main+0x1cc>)
 8000e7e:	f000 ffe1 	bl	8001e44 <HAL_DAC_SetValue>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e82:	f007 fd91 	bl	80089a8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    //DAC1 Pitch
    if (RxData[midi_pitch] > 120) { //Rounding off to 120 so 1v/oct scales properly
 8000e86:	2301      	movs	r3, #1
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b4a      	ldr	r3, [pc, #296]	; (8000fb4 <main+0x1c4>)
 8000e8c:	5c9b      	ldrb	r3, [r3, r2]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b78      	cmp	r3, #120	; 0x78
 8000e92:	d904      	bls.n	8000e9e <main+0xae>
        RxData[midi_pitch] = 120;
 8000e94:	2301      	movs	r3, #1
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <main+0x1c4>)
 8000e9a:	2178      	movs	r1, #120	; 0x78
 8000e9c:	5499      	strb	r1, [r3, r2]
    }
    valVolt = (RxData[midi_pitch] * 3.3) / 120;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b44      	ldr	r3, [pc, #272]	; (8000fb4 <main+0x1c4>)
 8000ea4:	5c9b      	ldrb	r3, [r3, r2]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fb33 	bl	8000514 <__aeabi_i2d>
 8000eae:	a33c      	add	r3, pc, #240	; (adr r3, 8000fa0 <main+0x1b0>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff fb98 	bl	80005e8 <__aeabi_dmul>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	460c      	mov	r4, r1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <main+0x1d0>)
 8000ec6:	f7ff fcb9 	bl	800083c <__aeabi_ddiv>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460c      	mov	r4, r1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	f7ff fdbb 	bl	8000a4c <__aeabi_d2f>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <main+0x1b8>)
 8000eda:	601a      	str	r2, [r3, #0]
    valByte = (uint8_t)((valVolt/3.3)*255);
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <main+0x1b8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fb29 	bl	8000538 <__aeabi_f2d>
 8000ee6:	a32e      	add	r3, pc, #184	; (adr r3, 8000fa0 <main+0x1b0>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	f7ff fca6 	bl	800083c <__aeabi_ddiv>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	460c      	mov	r4, r1
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	4621      	mov	r1, r4
 8000ef8:	a327      	add	r3, pc, #156	; (adr r3, 8000f98 <main+0x1a8>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	f7ff fb73 	bl	80005e8 <__aeabi_dmul>
 8000f02:	4603      	mov	r3, r0
 8000f04:	460c      	mov	r4, r1
 8000f06:	4618      	mov	r0, r3
 8000f08:	4621      	mov	r1, r4
 8000f0a:	f7ff fd7f 	bl	8000a0c <__aeabi_d2uiz>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <main+0x1c0>)
 8000f14:	701a      	strb	r2, [r3, #0]
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, valByte);
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <main+0x1c0>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4827      	ldr	r0, [pc, #156]	; (8000fbc <main+0x1cc>)
 8000f20:	f000 ff90 	bl	8001e44 <HAL_DAC_SetValue>

    //DAC2 Gate
    if (RxData[midi_status] == 0x90) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <main+0x1c4>)
 8000f2a:	5c9b      	ldrb	r3, [r3, r2]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b90      	cmp	r3, #144	; 0x90
 8000f30:	d105      	bne.n	8000f3e <main+0x14e>
    	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, 255);
 8000f32:	23ff      	movs	r3, #255	; 0xff
 8000f34:	2208      	movs	r2, #8
 8000f36:	2110      	movs	r1, #16
 8000f38:	4820      	ldr	r0, [pc, #128]	; (8000fbc <main+0x1cc>)
 8000f3a:	f000 ff83 	bl	8001e44 <HAL_DAC_SetValue>
    }
    if (RxData[midi_status] == 0x80) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <main+0x1c4>)
 8000f44:	5c9b      	ldrb	r3, [r3, r2]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b80      	cmp	r3, #128	; 0x80
 8000f4a:	d105      	bne.n	8000f58 <main+0x168>
    	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, 0);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2208      	movs	r2, #8
 8000f50:	2110      	movs	r1, #16
 8000f52:	481a      	ldr	r0, [pc, #104]	; (8000fbc <main+0x1cc>)
 8000f54:	f000 ff76 	bl	8001e44 <HAL_DAC_SetValue>
    }

    printf("Status is 0x%X, pitch is 0x%X, velocity is 0x%X \n\n", RxData[midi_status], RxData[midi_pitch], RxData[midi_velocity]);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <main+0x1c4>)
 8000f5e:	5c9b      	ldrb	r3, [r3, r2]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	2301      	movs	r3, #1
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <main+0x1c4>)
 8000f6a:	5c9b      	ldrb	r3, [r3, r2]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	2302      	movs	r3, #2
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <main+0x1c4>)
 8000f76:	5c9b      	ldrb	r3, [r3, r2]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <main+0x1d4>)
 8000f7e:	f008 f8df 	bl	8009140 <iprintf>

    HAL_Delay(500);
 8000f82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f86:	f000 fd55 	bl	8001a34 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000f8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f8e:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <main+0x1d8>)
 8000f90:	f001 fcc1 	bl	8002916 <HAL_GPIO_TogglePin>
    MX_USB_HOST_Process();
 8000f94:	e775      	b.n	8000e82 <main+0x92>
 8000f96:	bf00      	nop
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	406fe000 	.word	0x406fe000
 8000fa0:	66666666 	.word	0x66666666
 8000fa4:	400a6666 	.word	0x400a6666
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	40080000 	.word	0x40080000
 8000fb0:	2000018c 	.word	0x2000018c
 8000fb4:	20000190 	.word	0x20000190
 8000fb8:	20000194 	.word	0x20000194
 8000fbc:	20000178 	.word	0x20000178
 8000fc0:	405e0000 	.word	0x405e0000
 8000fc4:	08009dd0 	.word	0x08009dd0
 8000fc8:	40020c00 	.word	0x40020c00

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b094      	sub	sp, #80	; 0x50
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0320 	add.w	r3, r7, #32
 8000fd6:	2230      	movs	r2, #48	; 0x30
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f008 f800 	bl	8008fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <SystemClock_Config+0xcc>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	4a27      	ldr	r2, [pc, #156]	; (8001098 <SystemClock_Config+0xcc>)
 8000ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <SystemClock_Config+0xcc>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <SystemClock_Config+0xd0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <SystemClock_Config+0xd0>)
 8001016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <SystemClock_Config+0xd0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001028:	2301      	movs	r3, #1
 800102a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800102c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001032:	2302      	movs	r3, #2
 8001034:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001036:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800103c:	2304      	movs	r3, #4
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001040:	2360      	movs	r3, #96	; 0x60
 8001042:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001044:	2306      	movs	r3, #6
 8001046:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001048:	2304      	movs	r3, #4
 800104a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104c:	f107 0320 	add.w	r3, r7, #32
 8001050:	4618      	mov	r0, r3
 8001052:	f003 faa5 	bl	80045a0 <HAL_RCC_OscConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800105c:	f000 f9ea 	bl	8001434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001060:	230f      	movs	r3, #15
 8001062:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001064:	2302      	movs	r3, #2
 8001066:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800106c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001070:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2101      	movs	r1, #1
 800107e:	4618      	mov	r0, r3
 8001080:	f003 fcfe 	bl	8004a80 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800108a:	f000 f9d3 	bl	8001434 <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	3750      	adds	r7, #80	; 0x50
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_DAC_Init+0x60>)
 80010b0:	4a14      	ldr	r2, [pc, #80]	; (8001104 <MX_DAC_Init+0x64>)
 80010b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010b4:	4812      	ldr	r0, [pc, #72]	; (8001100 <MX_DAC_Init+0x60>)
 80010b6:	f000 fdf0 	bl	8001c9a <HAL_DAC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010c0:	f000 f9b8 	bl	8001434 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	480b      	ldr	r0, [pc, #44]	; (8001100 <MX_DAC_Init+0x60>)
 80010d4:	f000 fe69 	bl	8001daa <HAL_DAC_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010de:	f000 f9a9 	bl	8001434 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	2210      	movs	r2, #16
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_DAC_Init+0x60>)
 80010ea:	f000 fe5e 	bl	8001daa <HAL_DAC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80010f4:	f000 f99e 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000178 	.word	0x20000178
 8001104:	40007400 	.word	0x40007400

08001108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_I2C1_Init+0x50>)
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <MX_I2C1_Init+0x54>)
 8001110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_I2C1_Init+0x50>)
 8001114:	4a12      	ldr	r2, [pc, #72]	; (8001160 <MX_I2C1_Init+0x58>)
 8001116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_I2C1_Init+0x50>)
 8001126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_I2C1_Init+0x50>)
 8001146:	f003 f8f3 	bl	8004330 <HAL_I2C_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001150:	f000 f970 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000124 	.word	0x20000124
 800115c:	40005400 	.word	0x40005400
 8001160:	000186a0 	.word	0x000186a0

08001164 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_USART2_UART_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001170:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800119c:	f003 fe62 	bl	8004e64 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a6:	f000 f945 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000194 	.word	0x20000194
 80011b4:	40004400 	.word	0x40004400

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_DMA_Init+0x3c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <MX_DMA_Init+0x3c>)
 80011c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_DMA_Init+0x3c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2010      	movs	r0, #16
 80011e0:	f000 fd25 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011e4:	2010      	movs	r0, #16
 80011e6:	f000 fd3e 	bl	8001c66 <HAL_NVIC_EnableIRQ>

}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800

080011f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	4b81      	ldr	r3, [pc, #516]	; (8001418 <MX_GPIO_Init+0x220>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a80      	ldr	r2, [pc, #512]	; (8001418 <MX_GPIO_Init+0x220>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b7e      	ldr	r3, [pc, #504]	; (8001418 <MX_GPIO_Init+0x220>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	4b7a      	ldr	r3, [pc, #488]	; (8001418 <MX_GPIO_Init+0x220>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a79      	ldr	r2, [pc, #484]	; (8001418 <MX_GPIO_Init+0x220>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b77      	ldr	r3, [pc, #476]	; (8001418 <MX_GPIO_Init+0x220>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b73      	ldr	r3, [pc, #460]	; (8001418 <MX_GPIO_Init+0x220>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a72      	ldr	r2, [pc, #456]	; (8001418 <MX_GPIO_Init+0x220>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b70      	ldr	r3, [pc, #448]	; (8001418 <MX_GPIO_Init+0x220>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b6c      	ldr	r3, [pc, #432]	; (8001418 <MX_GPIO_Init+0x220>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a6b      	ldr	r2, [pc, #428]	; (8001418 <MX_GPIO_Init+0x220>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b69      	ldr	r3, [pc, #420]	; (8001418 <MX_GPIO_Init+0x220>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b65      	ldr	r3, [pc, #404]	; (8001418 <MX_GPIO_Init+0x220>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a64      	ldr	r2, [pc, #400]	; (8001418 <MX_GPIO_Init+0x220>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b62      	ldr	r3, [pc, #392]	; (8001418 <MX_GPIO_Init+0x220>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b5e      	ldr	r3, [pc, #376]	; (8001418 <MX_GPIO_Init+0x220>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a5d      	ldr	r2, [pc, #372]	; (8001418 <MX_GPIO_Init+0x220>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b5b      	ldr	r3, [pc, #364]	; (8001418 <MX_GPIO_Init+0x220>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2108      	movs	r1, #8
 80012ba:	4858      	ldr	r0, [pc, #352]	; (800141c <MX_GPIO_Init+0x224>)
 80012bc:	f001 fb12 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2101      	movs	r1, #1
 80012c4:	4856      	ldr	r0, [pc, #344]	; (8001420 <MX_GPIO_Init+0x228>)
 80012c6:	f001 fb0d 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012ca:	2200      	movs	r2, #0
 80012cc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80012d0:	4854      	ldr	r0, [pc, #336]	; (8001424 <MX_GPIO_Init+0x22c>)
 80012d2:	f001 fb07 	bl	80028e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012d6:	2308      	movs	r3, #8
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	484b      	ldr	r0, [pc, #300]	; (800141c <MX_GPIO_Init+0x224>)
 80012ee:	f001 f95f 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4845      	ldr	r0, [pc, #276]	; (8001420 <MX_GPIO_Init+0x228>)
 800130a:	f001 f951 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800130e:	2308      	movs	r3, #8
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800131e:	2305      	movs	r3, #5
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	483d      	ldr	r0, [pc, #244]	; (8001420 <MX_GPIO_Init+0x228>)
 800132a:	f001 f941 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132e:	2301      	movs	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <MX_GPIO_Init+0x230>)
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	483a      	ldr	r0, [pc, #232]	; (800142c <MX_GPIO_Init+0x234>)
 8001342:	f001 f935 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001346:	23c0      	movs	r3, #192	; 0xc0
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001356:	2305      	movs	r3, #5
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4832      	ldr	r0, [pc, #200]	; (800142c <MX_GPIO_Init+0x234>)
 8001362:	f001 f925 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001366:	2304      	movs	r3, #4
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	482d      	ldr	r0, [pc, #180]	; (8001430 <MX_GPIO_Init+0x238>)
 800137a:	f001 f919 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001390:	2305      	movs	r3, #5
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4825      	ldr	r0, [pc, #148]	; (8001430 <MX_GPIO_Init+0x238>)
 800139c:	f001 f908 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013a0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80013a4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	481a      	ldr	r0, [pc, #104]	; (8001424 <MX_GPIO_Init+0x22c>)
 80013ba:	f001 f8f9 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013be:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d0:	2306      	movs	r3, #6
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	4811      	ldr	r0, [pc, #68]	; (8001420 <MX_GPIO_Init+0x228>)
 80013dc:	f001 f8e8 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013e0:	2320      	movs	r3, #32
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_GPIO_Init+0x22c>)
 80013f4:	f001 f8dc 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <MX_GPIO_Init+0x230>)
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_GPIO_Init+0x224>)
 800140c:	f001 f8d0 	bl	80025b0 <HAL_GPIO_Init>

}
 8001410:	bf00      	nop
 8001412:	3730      	adds	r7, #48	; 0x30
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40021000 	.word	0x40021000
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00
 8001428:	10120000 	.word	0x10120000
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143a:	e7fe      	b.n	800143a <Error_Handler+0x6>

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_MspInit+0x4c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_MspInit+0x4c>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800147a:	2007      	movs	r0, #7
 800147c:	f000 fbcc 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800

0800148c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a17      	ldr	r2, [pc, #92]	; (8001508 <HAL_DAC_MspInit+0x7c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d127      	bne.n	80014fe <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_DAC_MspInit+0x80>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a15      	ldr	r2, [pc, #84]	; (800150c <HAL_DAC_MspInit+0x80>)
 80014b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_DAC_MspInit+0x80>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_DAC_MspInit+0x80>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_DAC_MspInit+0x80>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_DAC_MspInit+0x80>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014e6:	2330      	movs	r3, #48	; 0x30
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ea:	2303      	movs	r3, #3
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <HAL_DAC_MspInit+0x84>)
 80014fa:	f001 f859 	bl	80025b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40007400 	.word	0x40007400
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000

08001514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a19      	ldr	r2, [pc, #100]	; (8001598 <HAL_I2C_MspInit+0x84>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d12c      	bne.n	8001590 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_I2C_MspInit+0x88>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a17      	ldr	r2, [pc, #92]	; (800159c <HAL_I2C_MspInit+0x88>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_I2C_MspInit+0x88>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001552:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001558:	2312      	movs	r3, #18
 800155a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155c:	2301      	movs	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001564:	2304      	movs	r3, #4
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	480c      	ldr	r0, [pc, #48]	; (80015a0 <HAL_I2C_MspInit+0x8c>)
 8001570:	f001 f81e 	bl	80025b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_I2C_MspInit+0x88>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_I2C_MspInit+0x88>)
 800157e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_I2C_MspInit+0x88>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40005400 	.word	0x40005400
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020400 	.word	0x40020400

080015a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a34      	ldr	r2, [pc, #208]	; (8001694 <HAL_UART_MspInit+0xf0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d162      	bne.n	800168c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b33      	ldr	r3, [pc, #204]	; (8001698 <HAL_UART_MspInit+0xf4>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a32      	ldr	r2, [pc, #200]	; (8001698 <HAL_UART_MspInit+0xf4>)
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <HAL_UART_MspInit+0xf4>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <HAL_UART_MspInit+0xf4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a2b      	ldr	r2, [pc, #172]	; (8001698 <HAL_UART_MspInit+0xf4>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_UART_MspInit+0xf4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015fe:	230c      	movs	r3, #12
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160e:	2307      	movs	r3, #7
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4820      	ldr	r0, [pc, #128]	; (800169c <HAL_UART_MspInit+0xf8>)
 800161a:	f000 ffc9 	bl	80025b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 8001620:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <HAL_UART_MspInit+0x100>)
 8001622:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 8001626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800162a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 800163a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 800164e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001652:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 800165c:	2200      	movs	r2, #0
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001660:	480f      	ldr	r0, [pc, #60]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 8001662:	f000 fc15 	bl	8001e90 <HAL_DMA_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800166c:	f7ff fee2 	bl	8001434 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 8001674:	635a      	str	r2, [r3, #52]	; 0x34
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_UART_MspInit+0xfc>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	2026      	movs	r0, #38	; 0x26
 8001682:	f000 fad4 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001686:	2026      	movs	r0, #38	; 0x26
 8001688:	f000 faed 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40004400 	.word	0x40004400
 8001698:	40023800 	.word	0x40023800
 800169c:	40020000 	.word	0x40020000
 80016a0:	200000c4 	.word	0x200000c4
 80016a4:	40026088 	.word	0x40026088

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f4:	f000 f97e 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <DMA1_Stream5_IRQHandler+0x10>)
 8001702:	f000 fced 	bl	80020e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200000c4 	.word	0x200000c4

08001710 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <USART2_IRQHandler+0x10>)
 8001716:	f003 fc73 	bl	8005000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000194 	.word	0x20000194

08001724 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <OTG_FS_IRQHandler+0x10>)
 800172a:	f001 fb9f 	bl	8002e6c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200005b0 	.word	0x200005b0

08001738 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <ITM_SendChar+0x48>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <ITM_SendChar+0x48>)
 8001748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800174c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <ITM_SendChar+0x4c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <ITM_SendChar+0x4c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800175a:	bf00      	nop
 800175c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f8      	beq.n	800175c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800176a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	6013      	str	r3, [r2, #0]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000edfc 	.word	0xe000edfc
 8001784:	e0000e00 	.word	0xe0000e00

08001788 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e00a      	b.n	80017b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800179a:	f3af 8000 	nop.w
 800179e:	4601      	mov	r1, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	60ba      	str	r2, [r7, #8]
 80017a6:	b2ca      	uxtb	r2, r1
 80017a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbf0      	blt.n	800179a <_read+0x12>
	}

return len;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e009      	b.n	80017e8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ffab 	bl	8001738 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbf1      	blt.n	80017d4 <_write+0x12>
	}
	return len;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_close>:

int _close(int file)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
	return -1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001822:	605a      	str	r2, [r3, #4]
	return 0;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_isatty>:

int _isatty(int file)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	return 1;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
	return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <_sbrk+0x5c>)
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <_sbrk+0x60>)
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <_sbrk+0x64>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <_sbrk+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001894:	f007 fb6a 	bl	8008f6c <__errno>
 8001898:	4602      	mov	r2, r0
 800189a:	230c      	movs	r3, #12
 800189c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a2:	e009      	b.n	80018b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <_sbrk+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20020000 	.word	0x20020000
 80018c4:	00000400 	.word	0x00000400
 80018c8:	200000b0 	.word	0x200000b0
 80018cc:	20000878 	.word	0x20000878

080018d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <SystemInit+0x28>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <SystemInit+0x28>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SystemInit+0x28>)
 80018e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ea:	609a      	str	r2, [r3, #8]
#endif
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001900:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001902:	e003      	b.n	800190c <LoopCopyDataInit>

08001904 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001906:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001908:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800190a:	3104      	adds	r1, #4

0800190c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800190c:	480b      	ldr	r0, [pc, #44]	; (800193c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001910:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001912:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001914:	d3f6      	bcc.n	8001904 <CopyDataInit>
  ldr  r2, =_sbss
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001918:	e002      	b.n	8001920 <LoopFillZerobss>

0800191a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800191a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800191c:	f842 3b04 	str.w	r3, [r2], #4

08001920 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001922:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001924:	d3f9      	bcc.n	800191a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001926:	f7ff ffd3 	bl	80018d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192a:	f007 fb25 	bl	8008f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff fa5f 	bl	8000df0 <main>
  bx  lr    
 8001932:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001934:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001938:	08009ed0 	.word	0x08009ed0
  ldr  r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001940:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001944:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001948:	20000878 	.word	0x20000878

0800194c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <HAL_Init+0x40>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_Init+0x40>)
 8001966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_Init+0x40>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 f94d 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff fd5a 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f965 	bl	8001c82 <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d0:	f000 f92d 	bl	8001c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000004 	.word	0x20000004
 80019ec:	2000000c 	.word	0x2000000c
 80019f0:	20000008 	.word	0x20000008

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	2000000c 	.word	0x2000000c
 8001a18:	200001d4 	.word	0x200001d4

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200001d4 	.word	0x200001d4

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_Delay+0x40>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2000000c 	.word	0x2000000c

08001a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db0b      	blt.n	8001b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4907      	ldr	r1, [pc, #28]	; (8001b14 <__NVIC_EnableIRQ+0x38>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2001      	movs	r0, #1
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	; (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	; (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
         );
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf8:	f7ff ff8e 	bl	8001b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff29 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff3e 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ff8e 	bl	8001b6c <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff5d 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff31 	bl	8001adc <__NVIC_EnableIRQ>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffa2 	bl	8001bd4 <SysTick_Config>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e014      	b.n	8001cd6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	791b      	ldrb	r3, [r3, #4]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d105      	bne.n	8001cc2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fbe5 	bl	800148c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	795b      	ldrb	r3, [r3, #5]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_DAC_Start+0x1e>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e050      	b.n	8001d9e <HAL_DAC_Start+0xc0>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2202      	movs	r2, #2
 8001d06:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	409a      	lsls	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d11a      	bne.n	8001d58 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d38:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d127      	bne.n	8001d90 <HAL_DAC_Start+0xb2>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b38      	cmp	r3, #56	; 0x38
 8001d44:	d124      	bne.n	8001d90 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	e01b      	b.n	8001d90 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d62:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8001d6e:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d76:	d10b      	bne.n	8001d90 <HAL_DAC_Start+0xb2>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001d7e:	d107      	bne.n	8001d90 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0202 	orr.w	r2, r2, #2
 8001d8e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	795b      	ldrb	r3, [r3, #5]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_DAC_ConfigChannel+0x20>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e036      	b.n	8001e38 <HAL_DAC_ConfigChannel+0x8e>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001dde:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4013      	ands	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6819      	ldr	r1, [r3, #0]
 8001e18:	22c0      	movs	r2, #192	; 0xc0
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43da      	mvns	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	400a      	ands	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d105      	bne.n	8001e6e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	3308      	adds	r3, #8
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e004      	b.n	8001e78 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	3314      	adds	r3, #20
 8001e76:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff fdbe 	bl	8001a1c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e099      	b.n	8001fe0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ecc:	e00f      	b.n	8001eee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ece:	f7ff fda5 	bl	8001a1c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d908      	bls.n	8001eee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e078      	b.n	8001fe0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1e8      	bne.n	8001ece <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <HAL_DMA_Init+0x158>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d107      	bne.n	8001f58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	4313      	orrs	r3, r2
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f023 0307 	bic.w	r3, r3, #7
 8001f6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d117      	bne.n	8001fb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00e      	beq.n	8001fb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fa91 	bl	80024bc <DMA_CheckFifoParam>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e016      	b.n	8001fe0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fa48 	bl	8002450 <DMA_CalcBaseAndBitshift>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	223f      	movs	r2, #63	; 0x3f
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	f010803f 	.word	0xf010803f

08001fec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_DMA_Start_IT+0x26>
 800200e:	2302      	movs	r3, #2
 8002010:	e040      	b.n	8002094 <HAL_DMA_Start_IT+0xa8>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d12f      	bne.n	8002086 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2202      	movs	r2, #2
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f9da 	bl	80023f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	223f      	movs	r2, #63	; 0x3f
 8002046:	409a      	lsls	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0216 	orr.w	r2, r2, #22
 800205a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	2b00      	cmp	r3, #0
 8002062:	d007      	beq.n	8002074 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0208 	orr.w	r2, r2, #8
 8002072:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	e005      	b.n	8002092 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800208e:	2302      	movs	r3, #2
 8002090:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002092:	7dfb      	ldrb	r3, [r7, #23]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d004      	beq.n	80020ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2280      	movs	r2, #128	; 0x80
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e00c      	b.n	80020d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2205      	movs	r2, #5
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020ec:	4b92      	ldr	r3, [pc, #584]	; (8002338 <HAL_DMA_IRQHandler+0x258>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a92      	ldr	r2, [pc, #584]	; (800233c <HAL_DMA_IRQHandler+0x25c>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0a9b      	lsrs	r3, r3, #10
 80020f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2208      	movs	r2, #8
 800210c:	409a      	lsls	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01a      	beq.n	800214c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0204 	bic.w	r2, r2, #4
 8002132:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	2208      	movs	r2, #8
 800213a:	409a      	lsls	r2, r3
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	2201      	movs	r2, #1
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d012      	beq.n	8002182 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	2201      	movs	r2, #1
 8002170:	409a      	lsls	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	f043 0202 	orr.w	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	2204      	movs	r2, #4
 8002188:	409a      	lsls	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d012      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00b      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	2204      	movs	r2, #4
 80021a6:	409a      	lsls	r2, r3
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b0:	f043 0204 	orr.w	r2, r3, #4
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	2210      	movs	r2, #16
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d043      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d03c      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	2210      	movs	r2, #16
 80021dc:	409a      	lsls	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d018      	beq.n	8002222 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d108      	bne.n	8002210 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d024      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
 800220e:	e01f      	b.n	8002250 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01b      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
 8002220:	e016      	b.n	8002250 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0208 	bic.w	r2, r2, #8
 800223e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	2220      	movs	r2, #32
 8002256:	409a      	lsls	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 808e 	beq.w	800237e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8086 	beq.w	800237e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	2220      	movs	r2, #32
 8002278:	409a      	lsls	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b05      	cmp	r3, #5
 8002288:	d136      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0216 	bic.w	r2, r2, #22
 8002298:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d103      	bne.n	80022ba <HAL_DMA_IRQHandler+0x1da>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0208 	bic.w	r2, r2, #8
 80022c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ce:	223f      	movs	r2, #63	; 0x3f
 80022d0:	409a      	lsls	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d07d      	beq.n	80023ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
        }
        return;
 80022f6:	e078      	b.n	80023ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d01c      	beq.n	8002340 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d108      	bne.n	8002326 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	2b00      	cmp	r3, #0
 800231a:	d030      	beq.n	800237e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	4798      	blx	r3
 8002324:	e02b      	b.n	800237e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d027      	beq.n	800237e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
 8002336:	e022      	b.n	800237e <HAL_DMA_IRQHandler+0x29e>
 8002338:	20000004 	.word	0x20000004
 800233c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10f      	bne.n	800236e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0210 	bic.w	r2, r2, #16
 800235c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	2b00      	cmp	r3, #0
 8002384:	d032      	beq.n	80023ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d022      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2205      	movs	r2, #5
 8002396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0201 	bic.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3301      	adds	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d307      	bcc.n	80023c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f2      	bne.n	80023aa <HAL_DMA_IRQHandler+0x2ca>
 80023c4:	e000      	b.n	80023c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80023c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
 80023e8:	e000      	b.n	80023ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80023ea:	bf00      	nop
    }
  }
}
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop

080023f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002410:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d108      	bne.n	8002434 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002432:	e007      	b.n	8002444 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	60da      	str	r2, [r3, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	3b10      	subs	r3, #16
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <DMA_CalcBaseAndBitshift+0x68>)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b03      	cmp	r3, #3
 800247c:	d909      	bls.n	8002492 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002486:	f023 0303 	bic.w	r3, r3, #3
 800248a:	1d1a      	adds	r2, r3, #4
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	659a      	str	r2, [r3, #88]	; 0x58
 8002490:	e007      	b.n	80024a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	aaaaaaab 	.word	0xaaaaaaab
 80024b8:	08009e20 	.word	0x08009e20

080024bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11f      	bne.n	8002516 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d855      	bhi.n	8002588 <DMA_CheckFifoParam+0xcc>
 80024dc:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <DMA_CheckFifoParam+0x28>)
 80024de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	08002507 	.word	0x08002507
 80024ec:	080024f5 	.word	0x080024f5
 80024f0:	08002589 	.word	0x08002589
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d045      	beq.n	800258c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002504:	e042      	b.n	800258c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800250e:	d13f      	bne.n	8002590 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002514:	e03c      	b.n	8002590 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251e:	d121      	bne.n	8002564 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d836      	bhi.n	8002594 <DMA_CheckFifoParam+0xd8>
 8002526:	a201      	add	r2, pc, #4	; (adr r2, 800252c <DMA_CheckFifoParam+0x70>)
 8002528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252c:	0800253d 	.word	0x0800253d
 8002530:	08002543 	.word	0x08002543
 8002534:	0800253d 	.word	0x0800253d
 8002538:	08002555 	.word	0x08002555
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      break;
 8002540:	e02f      	b.n	80025a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d024      	beq.n	8002598 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002552:	e021      	b.n	8002598 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800255c:	d11e      	bne.n	800259c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002562:	e01b      	b.n	800259c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d902      	bls.n	8002570 <DMA_CheckFifoParam+0xb4>
 800256a:	2b03      	cmp	r3, #3
 800256c:	d003      	beq.n	8002576 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800256e:	e018      	b.n	80025a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      break;
 8002574:	e015      	b.n	80025a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00e      	beq.n	80025a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
      break;
 8002586:	e00b      	b.n	80025a0 <DMA_CheckFifoParam+0xe4>
      break;
 8002588:	bf00      	nop
 800258a:	e00a      	b.n	80025a2 <DMA_CheckFifoParam+0xe6>
      break;
 800258c:	bf00      	nop
 800258e:	e008      	b.n	80025a2 <DMA_CheckFifoParam+0xe6>
      break;
 8002590:	bf00      	nop
 8002592:	e006      	b.n	80025a2 <DMA_CheckFifoParam+0xe6>
      break;
 8002594:	bf00      	nop
 8002596:	e004      	b.n	80025a2 <DMA_CheckFifoParam+0xe6>
      break;
 8002598:	bf00      	nop
 800259a:	e002      	b.n	80025a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800259c:	bf00      	nop
 800259e:	e000      	b.n	80025a2 <DMA_CheckFifoParam+0xe6>
      break;
 80025a0:	bf00      	nop
    }
  } 
  
  return status; 
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	e16b      	b.n	80028a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	f040 815a 	bne.w	800289e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d00b      	beq.n	800260a <HAL_GPIO_Init+0x5a>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025fe:	2b11      	cmp	r3, #17
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b12      	cmp	r3, #18
 8002608:	d130      	bne.n	800266c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	2203      	movs	r2, #3
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002640:	2201      	movs	r2, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 0201 	and.w	r2, r3, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0xfc>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b12      	cmp	r3, #18
 80026aa:	d123      	bne.n	80026f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	08da      	lsrs	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3208      	adds	r2, #8
 80026b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	220f      	movs	r2, #15
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	08da      	lsrs	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3208      	adds	r2, #8
 80026ee:	69b9      	ldr	r1, [r7, #24]
 80026f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0203 	and.w	r2, r3, #3
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80b4 	beq.w	800289e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_GPIO_Init+0x308>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a5e      	ldr	r2, [pc, #376]	; (80028b8 <HAL_GPIO_Init+0x308>)
 8002740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b5c      	ldr	r3, [pc, #368]	; (80028b8 <HAL_GPIO_Init+0x308>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002752:	4a5a      	ldr	r2, [pc, #360]	; (80028bc <HAL_GPIO_Init+0x30c>)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	3302      	adds	r3, #2
 800275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a51      	ldr	r2, [pc, #324]	; (80028c0 <HAL_GPIO_Init+0x310>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d02b      	beq.n	80027d6 <HAL_GPIO_Init+0x226>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <HAL_GPIO_Init+0x314>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d025      	beq.n	80027d2 <HAL_GPIO_Init+0x222>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4f      	ldr	r2, [pc, #316]	; (80028c8 <HAL_GPIO_Init+0x318>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d01f      	beq.n	80027ce <HAL_GPIO_Init+0x21e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4e      	ldr	r2, [pc, #312]	; (80028cc <HAL_GPIO_Init+0x31c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d019      	beq.n	80027ca <HAL_GPIO_Init+0x21a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4d      	ldr	r2, [pc, #308]	; (80028d0 <HAL_GPIO_Init+0x320>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_GPIO_Init+0x216>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4c      	ldr	r2, [pc, #304]	; (80028d4 <HAL_GPIO_Init+0x324>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00d      	beq.n	80027c2 <HAL_GPIO_Init+0x212>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4b      	ldr	r2, [pc, #300]	; (80028d8 <HAL_GPIO_Init+0x328>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d007      	beq.n	80027be <HAL_GPIO_Init+0x20e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4a      	ldr	r2, [pc, #296]	; (80028dc <HAL_GPIO_Init+0x32c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d101      	bne.n	80027ba <HAL_GPIO_Init+0x20a>
 80027b6:	2307      	movs	r3, #7
 80027b8:	e00e      	b.n	80027d8 <HAL_GPIO_Init+0x228>
 80027ba:	2308      	movs	r3, #8
 80027bc:	e00c      	b.n	80027d8 <HAL_GPIO_Init+0x228>
 80027be:	2306      	movs	r3, #6
 80027c0:	e00a      	b.n	80027d8 <HAL_GPIO_Init+0x228>
 80027c2:	2305      	movs	r3, #5
 80027c4:	e008      	b.n	80027d8 <HAL_GPIO_Init+0x228>
 80027c6:	2304      	movs	r3, #4
 80027c8:	e006      	b.n	80027d8 <HAL_GPIO_Init+0x228>
 80027ca:	2303      	movs	r3, #3
 80027cc:	e004      	b.n	80027d8 <HAL_GPIO_Init+0x228>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e002      	b.n	80027d8 <HAL_GPIO_Init+0x228>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_GPIO_Init+0x228>
 80027d6:	2300      	movs	r3, #0
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	f002 0203 	and.w	r2, r2, #3
 80027de:	0092      	lsls	r2, r2, #2
 80027e0:	4093      	lsls	r3, r2
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027e8:	4934      	ldr	r1, [pc, #208]	; (80028bc <HAL_GPIO_Init+0x30c>)
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	089b      	lsrs	r3, r3, #2
 80027ee:	3302      	adds	r3, #2
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f6:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <HAL_GPIO_Init+0x330>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800281a:	4a31      	ldr	r2, [pc, #196]	; (80028e0 <HAL_GPIO_Init+0x330>)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002820:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HAL_GPIO_Init+0x330>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002844:	4a26      	ldr	r2, [pc, #152]	; (80028e0 <HAL_GPIO_Init+0x330>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800284a:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <HAL_GPIO_Init+0x330>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800286e:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <HAL_GPIO_Init+0x330>)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <HAL_GPIO_Init+0x330>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002898:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <HAL_GPIO_Init+0x330>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3301      	adds	r3, #1
 80028a2:	61fb      	str	r3, [r7, #28]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	2b0f      	cmp	r3, #15
 80028a8:	f67f ae90 	bls.w	80025cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028ac:	bf00      	nop
 80028ae:	3724      	adds	r7, #36	; 0x24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40013800 	.word	0x40013800
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40020400 	.word	0x40020400
 80028c8:	40020800 	.word	0x40020800
 80028cc:	40020c00 	.word	0x40020c00
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40021400 	.word	0x40021400
 80028d8:	40021800 	.word	0x40021800
 80028dc:	40021c00 	.word	0x40021c00
 80028e0:	40013c00 	.word	0x40013c00

080028e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
 80028f0:	4613      	mov	r3, r2
 80028f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f4:	787b      	ldrb	r3, [r7, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002900:	e003      	b.n	800290a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	041a      	lsls	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	619a      	str	r2, [r3, #24]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	401a      	ands	r2, r3
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	429a      	cmp	r2, r3
 800292e:	d104      	bne.n	800293a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002930:	887b      	ldrh	r3, [r7, #2]
 8002932:	041a      	lsls	r2, r3, #16
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002938:	e002      	b.n	8002940 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	619a      	str	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294e:	b08f      	sub	sp, #60	; 0x3c
 8002950:	af0a      	add	r7, sp, #40	; 0x28
 8002952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e054      	b.n	8002a08 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f006 f84d 	bl	8008a18 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2203      	movs	r2, #3
 8002982:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f003 fa09 	bl	8005db4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	687e      	ldr	r6, [r7, #4]
 80029aa:	466d      	mov	r5, sp
 80029ac:	f106 0410 	add.w	r4, r6, #16
 80029b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80029c0:	1d33      	adds	r3, r6, #4
 80029c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c4:	6838      	ldr	r0, [r7, #0]
 80029c6:	f003 f983 	bl	8005cd0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2101      	movs	r1, #1
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 fa00 	bl	8005dd6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	687e      	ldr	r6, [r7, #4]
 80029de:	466d      	mov	r5, sp
 80029e0:	f106 0410 	add.w	r4, r6, #16
 80029e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80029f4:	1d33      	adds	r3, r6, #4
 80029f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f8:	6838      	ldr	r0, [r7, #0]
 80029fa:	f003 fb13 	bl	8006024 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a10 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af04      	add	r7, sp, #16
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	4608      	mov	r0, r1
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4603      	mov	r3, r0
 8002a20:	70fb      	strb	r3, [r7, #3]
 8002a22:	460b      	mov	r3, r1
 8002a24:	70bb      	strb	r3, [r7, #2]
 8002a26:	4613      	mov	r3, r2
 8002a28:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_HCD_HC_Init+0x28>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e07f      	b.n	8002b38 <HAL_HCD_HC_Init+0x128>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	333d      	adds	r3, #61	; 0x3d
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	3338      	adds	r3, #56	; 0x38
 8002a64:	787a      	ldrb	r2, [r7, #1]
 8002a66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	3340      	adds	r3, #64	; 0x40
 8002a78:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a7a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	3339      	adds	r3, #57	; 0x39
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	333f      	adds	r3, #63	; 0x3f
 8002aa0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002aa4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	78bb      	ldrb	r3, [r7, #2]
 8002aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aae:	b2d8      	uxtb	r0, r3
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	333a      	adds	r3, #58	; 0x3a
 8002abe:	4602      	mov	r2, r0
 8002ac0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002ac2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	da0a      	bge.n	8002ae0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	333b      	adds	r3, #59	; 0x3b
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e009      	b.n	8002af4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	333b      	adds	r3, #59	; 0x3b
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	333c      	adds	r3, #60	; 0x3c
 8002b04:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b08:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	787c      	ldrb	r4, [r7, #1]
 8002b10:	78ba      	ldrb	r2, [r7, #2]
 8002b12:	78f9      	ldrb	r1, [r7, #3]
 8002b14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b16:	9302      	str	r3, [sp, #8]
 8002b18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	4623      	mov	r3, r4
 8002b26:	f003 fbff 	bl	8006328 <USB_HC_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd90      	pop	{r4, r7, pc}

08002b40 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_HCD_HC_Halt+0x1e>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e00f      	b.n	8002b7e <HAL_HCD_HC_Halt+0x3e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fe3b 	bl	80067ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	4608      	mov	r0, r1
 8002b92:	4611      	mov	r1, r2
 8002b94:	461a      	mov	r2, r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	70fb      	strb	r3, [r7, #3]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	70bb      	strb	r3, [r7, #2]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	333b      	adds	r3, #59	; 0x3b
 8002bb2:	78ba      	ldrb	r2, [r7, #2]
 8002bb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	333f      	adds	r3, #63	; 0x3f
 8002bc6:	787a      	ldrb	r2, [r7, #1]
 8002bc8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002bca:	7c3b      	ldrb	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d114      	bne.n	8002bfa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	440b      	add	r3, r1
 8002bde:	3342      	adds	r3, #66	; 0x42
 8002be0:	2203      	movs	r2, #3
 8002be2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	333d      	adds	r3, #61	; 0x3d
 8002bf4:	7f3a      	ldrb	r2, [r7, #28]
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	e009      	b.n	8002c0e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	440b      	add	r3, r1
 8002c08:	3342      	adds	r3, #66	; 0x42
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c0e:	787b      	ldrb	r3, [r7, #1]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	f200 80d6 	bhi.w	8002dc2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002c16:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1c:	08002c2d 	.word	0x08002c2d
 8002c20:	08002dad 	.word	0x08002dad
 8002c24:	08002c99 	.word	0x08002c99
 8002c28:	08002d23 	.word	0x08002d23
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002c2c:	7c3b      	ldrb	r3, [r7, #16]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	f040 80c9 	bne.w	8002dc6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002c34:	78bb      	ldrb	r3, [r7, #2]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 80c5 	bne.w	8002dc6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002c3c:	8b3b      	ldrh	r3, [r7, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	3351      	adds	r3, #81	; 0x51
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	3351      	adds	r3, #81	; 0x51
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	3342      	adds	r3, #66	; 0x42
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c80:	e0a1      	b.n	8002dc6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	3342      	adds	r3, #66	; 0x42
 8002c92:	2202      	movs	r2, #2
 8002c94:	701a      	strb	r2, [r3, #0]
      break;
 8002c96:	e096      	b.n	8002dc6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c98:	78bb      	ldrb	r3, [r7, #2]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d120      	bne.n	8002ce0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	3351      	adds	r3, #81	; 0x51
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3342      	adds	r3, #66	; 0x42
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002cc8:	e07e      	b.n	8002dc8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3342      	adds	r3, #66	; 0x42
 8002cda:	2202      	movs	r2, #2
 8002cdc:	701a      	strb	r2, [r3, #0]
      break;
 8002cde:	e073      	b.n	8002dc8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	3350      	adds	r3, #80	; 0x50
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	3342      	adds	r3, #66	; 0x42
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
      break;
 8002d0a:	e05d      	b.n	8002dc8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	3342      	adds	r3, #66	; 0x42
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	701a      	strb	r2, [r3, #0]
      break;
 8002d20:	e052      	b.n	8002dc8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d22:	78bb      	ldrb	r3, [r7, #2]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d120      	bne.n	8002d6a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	3351      	adds	r3, #81	; 0x51
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3342      	adds	r3, #66	; 0x42
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d52:	e039      	b.n	8002dc8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	3342      	adds	r3, #66	; 0x42
 8002d64:	2202      	movs	r2, #2
 8002d66:	701a      	strb	r2, [r3, #0]
      break;
 8002d68:	e02e      	b.n	8002dc8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	3350      	adds	r3, #80	; 0x50
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3342      	adds	r3, #66	; 0x42
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
      break;
 8002d94:	e018      	b.n	8002dc8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	3342      	adds	r3, #66	; 0x42
 8002da6:	2202      	movs	r2, #2
 8002da8:	701a      	strb	r2, [r3, #0]
      break;
 8002daa:	e00d      	b.n	8002dc8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	3342      	adds	r3, #66	; 0x42
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
      break;
 8002dc0:	e002      	b.n	8002dc8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002dc6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3344      	adds	r3, #68	; 0x44
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	8b39      	ldrh	r1, [r7, #24]
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4403      	add	r3, r0
 8002dec:	3348      	adds	r3, #72	; 0x48
 8002dee:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	335c      	adds	r3, #92	; 0x5c
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	334c      	adds	r3, #76	; 0x4c
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	3339      	adds	r3, #57	; 0x39
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	440b      	add	r3, r1
 8002e3a:	335d      	adds	r3, #93	; 0x5d
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	3338      	adds	r3, #56	; 0x38
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	18d1      	adds	r1, r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f003 fb6e 	bl	800653c <USB_HC_StartXfer>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop

08002e6c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f003 f88b 	bl	8005f9e <USB_GetMode>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	f040 80ef 	bne.w	800306e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 f86f 	bl	8005f78 <USB_ReadInterrupts>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80e5 	beq.w	800306c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f003 f866 	bl	8005f78 <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb6:	d104      	bne.n	8002ec2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ec0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 f856 	bl	8005f78 <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ed6:	d104      	bne.n	8002ee2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ee0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 f846 	bl	8005f78 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ef2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ef6:	d104      	bne.n	8002f02 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 f836 	bl	8005f78 <USB_ReadInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d103      	bne.n	8002f1e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f003 f828 	bl	8005f78 <USB_ReadInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f32:	d115      	bne.n	8002f60 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002f3c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d108      	bne.n	8002f60 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f005 fde0 	bl	8008b14 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f003 f91e 	bl	800619c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f003 f807 	bl	8005f78 <USB_ReadInterrupts>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f74:	d102      	bne.n	8002f7c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f001 f966 	bl	8004248 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f002 fff9 	bl	8005f78 <USB_ReadInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d106      	bne.n	8002f9e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f005 fda3 	bl	8008adc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f002 ffe8 	bl	8005f78 <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fb2:	d138      	bne.n	8003026 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 fc05 	bl	80067c8 <USB_HC_ReadInterrupt>
 8002fbe:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e025      	b.n	8003012 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d018      	beq.n	800300c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff0:	d106      	bne.n	8003000 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f8cf 	bl	800319c <HCD_HC_IN_IRQHandler>
 8002ffe:	e005      	b.n	800300c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fcfd 	bl	8003a06 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	3301      	adds	r3, #1
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	429a      	cmp	r2, r3
 800301a:	d3d4      	bcc.n	8002fc6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003024:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f002 ffa4 	bl	8005f78 <USB_ReadInterrupts>
 8003030:	4603      	mov	r3, r0
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b10      	cmp	r3, #16
 8003038:	d101      	bne.n	800303e <HAL_HCD_IRQHandler+0x1d2>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_HCD_IRQHandler+0x1d4>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d014      	beq.n	800306e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0210 	bic.w	r2, r2, #16
 8003052:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f001 f84b 	bl	80040f0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0210 	orr.w	r2, r2, #16
 8003068:	619a      	str	r2, [r3, #24]
 800306a:	e000      	b.n	800306e <HAL_HCD_IRQHandler+0x202>
      return;
 800306c:	bf00      	nop
    }
  }
}
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_HCD_Start+0x16>
 8003086:	2302      	movs	r3, #2
 8003088:	e013      	b.n	80030b2 <HAL_HCD_Start+0x3e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f002 fe7b 	bl	8005d92 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 f8de 	bl	8006264 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_HCD_Stop+0x16>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e00d      	b.n	80030ec <HAL_HCD_Stop+0x32>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 fcbf 	bl	8006a60 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f003 f885 	bl	8006210 <USB_ResetPort>
 8003106:	4603      	mov	r3, r0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	335c      	adds	r3, #92	; 0x5c
 800312c:	781b      	ldrb	r3, [r3, #0]
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	440b      	add	r3, r1
 8003154:	334c      	adds	r3, #76	; 0x4c
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f003 f8c7 	bl	8006304 <USB_GetCurrentFrame>
 8003176:	4603      	mov	r3, r0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f003 f8a2 	bl	80062d6 <USB_GetHostSpeed>
 8003192:	4603      	mov	r3, r0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d119      	bne.n	8003200 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	2304      	movs	r3, #4
 80031dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	0151      	lsls	r1, r2, #5
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	440a      	add	r2, r1
 80031f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	60d3      	str	r3, [r2, #12]
 80031fe:	e0ce      	b.n	800339e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003216:	d12c      	bne.n	8003272 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003224:	461a      	mov	r2, r3
 8003226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800322a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	440b      	add	r3, r1
 800323a:	335d      	adds	r3, #93	; 0x5d
 800323c:	2207      	movs	r2, #7
 800323e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	0151      	lsls	r1, r2, #5
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	440a      	add	r2, r1
 8003256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800325a:	f043 0302 	orr.w	r3, r3, #2
 800325e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f003 fabd 	bl	80067ea <USB_HC_Halt>
 8003270:	e095      	b.n	800339e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b20      	cmp	r3, #32
 8003286:	d109      	bne.n	800329c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	461a      	mov	r2, r3
 8003296:	2320      	movs	r3, #32
 8003298:	6093      	str	r3, [r2, #8]
 800329a:	e080      	b.n	800339e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d134      	bne.n	800331c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	0151      	lsls	r1, r2, #5
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	440a      	add	r2, r1
 80032c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	335d      	adds	r3, #93	; 0x5d
 80032e2:	2205      	movs	r2, #5
 80032e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	2310      	movs	r3, #16
 80032f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003304:	461a      	mov	r2, r3
 8003306:	2308      	movs	r3, #8
 8003308:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f003 fa68 	bl	80067ea <USB_HC_Halt>
 800331a:	e040      	b.n	800339e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003332:	d134      	bne.n	800339e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	0151      	lsls	r1, r2, #5
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	440a      	add	r2, r1
 800334a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800334e:	f043 0302 	orr.w	r3, r3, #2
 8003352:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f003 fa43 	bl	80067ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	461a      	mov	r2, r3
 8003372:	2310      	movs	r3, #16
 8003374:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	440b      	add	r3, r1
 8003384:	335d      	adds	r3, #93	; 0x5d
 8003386:	2208      	movs	r2, #8
 8003388:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	461a      	mov	r2, r3
 8003398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800339c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b4:	d122      	bne.n	80033fc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	0151      	lsls	r1, r2, #5
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	440a      	add	r2, r1
 80033cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f003 fa02 	bl	80067ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f2:	461a      	mov	r2, r3
 80033f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033f8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80033fa:	e300      	b.n	80039fe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b01      	cmp	r3, #1
 8003410:	f040 80fd 	bne.w	800360e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01b      	beq.n	8003454 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	440b      	add	r3, r1
 800342a:	3348      	adds	r3, #72	; 0x48
 800342c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	0159      	lsls	r1, r3, #5
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	440b      	add	r3, r1
 8003436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003440:	1ad1      	subs	r1, r2, r3
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4403      	add	r3, r0
 8003450:	334c      	adds	r3, #76	; 0x4c
 8003452:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	440b      	add	r3, r1
 8003462:	335d      	adds	r3, #93	; 0x5d
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	440b      	add	r3, r1
 8003476:	3358      	adds	r3, #88	; 0x58
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	461a      	mov	r2, r3
 800348a:	2301      	movs	r3, #1
 800348c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	333f      	adds	r3, #63	; 0x3f
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	333f      	adds	r3, #63	; 0x3f
 80034b4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d121      	bne.n	80034fe <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	0151      	lsls	r1, r2, #5
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	440a      	add	r2, r1
 80034d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 f980 	bl	80067ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	461a      	mov	r2, r3
 80034f8:	2310      	movs	r3, #16
 80034fa:	6093      	str	r3, [r2, #8]
 80034fc:	e070      	b.n	80035e0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	440b      	add	r3, r1
 800350c:	333f      	adds	r3, #63	; 0x3f
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d12a      	bne.n	800356a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4413      	add	r3, r2
 800351c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	0151      	lsls	r1, r2, #5
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	440a      	add	r2, r1
 800352a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800352e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003532:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	335c      	adds	r3, #92	; 0x5c
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	b2d8      	uxtb	r0, r3
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	440b      	add	r3, r1
 800355a:	335c      	adds	r3, #92	; 0x5c
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	4601      	mov	r1, r0
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f005 fae4 	bl	8008b30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003568:	e03a      	b.n	80035e0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	333f      	adds	r3, #63	; 0x3f
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d12f      	bne.n	80035e0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	335c      	adds	r3, #92	; 0x5c
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	3350      	adds	r3, #80	; 0x50
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	f083 0301 	eor.w	r3, r3, #1
 80035aa:	b2d8      	uxtb	r0, r3
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	440b      	add	r3, r1
 80035ba:	3350      	adds	r3, #80	; 0x50
 80035bc:	4602      	mov	r2, r0
 80035be:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	b2d8      	uxtb	r0, r3
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	440b      	add	r3, r1
 80035d2:	335c      	adds	r3, #92	; 0x5c
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	4601      	mov	r1, r0
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f005 faa8 	bl	8008b30 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	3350      	adds	r3, #80	; 0x50
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	f083 0301 	eor.w	r3, r3, #1
 80035f6:	b2d8      	uxtb	r0, r3
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	440b      	add	r3, r1
 8003606:	3350      	adds	r3, #80	; 0x50
 8003608:	4602      	mov	r2, r0
 800360a:	701a      	strb	r2, [r3, #0]
}
 800360c:	e1f7      	b.n	80039fe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b02      	cmp	r3, #2
 8003622:	f040 811a 	bne.w	800385a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4413      	add	r3, r2
 800362e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	0151      	lsls	r1, r2, #5
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	440a      	add	r2, r1
 800363c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003640:	f023 0302 	bic.w	r3, r3, #2
 8003644:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	335d      	adds	r3, #93	; 0x5d
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d10a      	bne.n	8003672 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	335c      	adds	r3, #92	; 0x5c
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e0d9      	b.n	8003826 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	440b      	add	r3, r1
 8003680:	335d      	adds	r3, #93	; 0x5d
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b05      	cmp	r3, #5
 8003686:	d10a      	bne.n	800369e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	440b      	add	r3, r1
 8003696:	335c      	adds	r3, #92	; 0x5c
 8003698:	2205      	movs	r2, #5
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	e0c3      	b.n	8003826 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	440b      	add	r3, r1
 80036ac:	335d      	adds	r3, #93	; 0x5d
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b06      	cmp	r3, #6
 80036b2:	d00a      	beq.n	80036ca <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	440b      	add	r3, r1
 80036c2:	335d      	adds	r3, #93	; 0x5d
 80036c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d156      	bne.n	8003778 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	440b      	add	r3, r1
 80036d8:	3358      	adds	r3, #88	; 0x58
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	1c59      	adds	r1, r3, #1
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4403      	add	r3, r0
 80036ec:	3358      	adds	r3, #88	; 0x58
 80036ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	3358      	adds	r3, #88	; 0x58
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d914      	bls.n	8003730 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	440b      	add	r3, r1
 8003714:	3358      	adds	r3, #88	; 0x58
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	440b      	add	r3, r1
 8003728:	335c      	adds	r3, #92	; 0x5c
 800372a:	2204      	movs	r2, #4
 800372c:	701a      	strb	r2, [r3, #0]
 800372e:	e009      	b.n	8003744 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	440b      	add	r3, r1
 800373e:	335c      	adds	r3, #92	; 0x5c
 8003740:	2202      	movs	r2, #2
 8003742:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800375a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003762:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4413      	add	r3, r2
 800376c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003770:	461a      	mov	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e056      	b.n	8003826 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	440b      	add	r3, r1
 8003786:	335d      	adds	r3, #93	; 0x5d
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d123      	bne.n	80037d6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	440b      	add	r3, r1
 800379c:	335c      	adds	r3, #92	; 0x5c
 800379e:	2202      	movs	r2, #2
 80037a0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037b8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037c0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ce:	461a      	mov	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	e027      	b.n	8003826 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	440b      	add	r3, r1
 80037e4:	335d      	adds	r3, #93	; 0x5d
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b07      	cmp	r3, #7
 80037ea:	d11c      	bne.n	8003826 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	3358      	adds	r3, #88	; 0x58
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4403      	add	r3, r0
 800380e:	3358      	adds	r3, #88	; 0x58
 8003810:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	440b      	add	r3, r1
 8003820:	335c      	adds	r3, #92	; 0x5c
 8003822:	2204      	movs	r2, #4
 8003824:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003832:	461a      	mov	r2, r3
 8003834:	2302      	movs	r3, #2
 8003836:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	b2d8      	uxtb	r0, r3
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	440b      	add	r3, r1
 800384a:	335c      	adds	r3, #92	; 0x5c
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	4601      	mov	r1, r0
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f005 f96c 	bl	8008b30 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003858:	e0d1      	b.n	80039fe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4413      	add	r3, r2
 8003862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	2b80      	cmp	r3, #128	; 0x80
 800386e:	d13e      	bne.n	80038ee <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4413      	add	r3, r2
 8003878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	0151      	lsls	r1, r2, #5
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	440a      	add	r2, r1
 8003886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800388a:	f043 0302 	orr.w	r3, r3, #2
 800388e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	440b      	add	r3, r1
 800389e:	3358      	adds	r3, #88	; 0x58
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4403      	add	r3, r0
 80038b2:	3358      	adds	r3, #88	; 0x58
 80038b4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	335d      	adds	r3, #93	; 0x5d
 80038c6:	2206      	movs	r2, #6
 80038c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f002 ff88 	bl	80067ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e6:	461a      	mov	r2, r3
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	6093      	str	r3, [r2, #8]
}
 80038ec:	e087      	b.n	80039fe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b10      	cmp	r3, #16
 8003902:	d17c      	bne.n	80039fe <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	440b      	add	r3, r1
 8003912:	333f      	adds	r3, #63	; 0x3f
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d122      	bne.n	8003960 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	440b      	add	r3, r1
 8003928:	3358      	adds	r3, #88	; 0x58
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4413      	add	r3, r2
 8003936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	0151      	lsls	r1, r2, #5
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	440a      	add	r2, r1
 8003944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003948:	f043 0302 	orr.w	r3, r3, #2
 800394c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	4611      	mov	r1, r2
 8003958:	4618      	mov	r0, r3
 800395a:	f002 ff46 	bl	80067ea <USB_HC_Halt>
 800395e:	e045      	b.n	80039ec <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	440b      	add	r3, r1
 800396e:	333f      	adds	r3, #63	; 0x3f
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	440b      	add	r3, r1
 8003984:	333f      	adds	r3, #63	; 0x3f
 8003986:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003988:	2b02      	cmp	r3, #2
 800398a:	d12f      	bne.n	80039ec <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	440b      	add	r3, r1
 800399a:	3358      	adds	r3, #88	; 0x58
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d121      	bne.n	80039ec <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	440b      	add	r3, r1
 80039b6:	335d      	adds	r3, #93	; 0x5d
 80039b8:	2203      	movs	r2, #3
 80039ba:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	0151      	lsls	r1, r2, #5
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	440a      	add	r2, r1
 80039d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039d6:	f043 0302 	orr.w	r3, r3, #2
 80039da:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	4611      	mov	r1, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 feff 	bl	80067ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f8:	461a      	mov	r2, r3
 80039fa:	2310      	movs	r3, #16
 80039fc:	6093      	str	r3, [r2, #8]
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d119      	bne.n	8003a6a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a42:	461a      	mov	r2, r3
 8003a44:	2304      	movs	r3, #4
 8003a46:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	0151      	lsls	r1, r2, #5
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a62:	f043 0302 	orr.w	r3, r3, #2
 8003a66:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003a68:	e33e      	b.n	80040e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d141      	bne.n	8003b04 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2320      	movs	r3, #32
 8003a90:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	440b      	add	r3, r1
 8003aa0:	333d      	adds	r3, #61	; 0x3d
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	f040 831f 	bne.w	80040e8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	333d      	adds	r3, #61	; 0x3d
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	440b      	add	r3, r1
 8003acc:	335c      	adds	r3, #92	; 0x5c
 8003ace:	2202      	movs	r2, #2
 8003ad0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	0151      	lsls	r1, r2, #5
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	440a      	add	r2, r1
 8003ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aec:	f043 0302 	orr.w	r3, r3, #2
 8003af0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f002 fe74 	bl	80067ea <USB_HC_Halt>
}
 8003b02:	e2f1      	b.n	80040e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	d13f      	bne.n	8003b9a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	440b      	add	r3, r1
 8003b28:	335d      	adds	r3, #93	; 0x5d
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	440b      	add	r3, r1
 8003b3c:	333d      	adds	r3, #61	; 0x3d
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4613      	mov	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	440b      	add	r3, r1
 8003b50:	3358      	adds	r3, #88	; 0x58
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	0151      	lsls	r1, r2, #5
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	440a      	add	r2, r1
 8003b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f002 fe32 	bl	80067ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b92:	461a      	mov	r2, r3
 8003b94:	2340      	movs	r3, #64	; 0x40
 8003b96:	6093      	str	r3, [r2, #8]
}
 8003b98:	e2a6      	b.n	80040e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb0:	d122      	bne.n	8003bf8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	0151      	lsls	r1, r2, #5
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	440a      	add	r2, r1
 8003bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f002 fe04 	bl	80067ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf4:	6093      	str	r3, [r2, #8]
}
 8003bf6:	e277      	b.n	80040e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d135      	bne.n	8003c7a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3358      	adds	r3, #88	; 0x58
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	0151      	lsls	r1, r2, #5
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	440a      	add	r2, r1
 8003c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c3c:	f043 0302 	orr.w	r3, r3, #2
 8003c40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f002 fdcc 	bl	80067ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2301      	movs	r3, #1
 8003c62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	440b      	add	r3, r1
 8003c72:	335d      	adds	r3, #93	; 0x5d
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
}
 8003c78:	e236      	b.n	80040e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d12b      	bne.n	8003ce8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f002 fd8c 	bl	80067ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	440b      	add	r3, r1
 8003ce0:	335d      	adds	r3, #93	; 0x5d
 8003ce2:	2205      	movs	r2, #5
 8003ce4:	701a      	strb	r2, [r3, #0]
}
 8003ce6:	e1ff      	b.n	80040e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b10      	cmp	r3, #16
 8003cfc:	d155      	bne.n	8003daa <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	3358      	adds	r3, #88	; 0x58
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	335d      	adds	r3, #93	; 0x5d
 8003d22:	2203      	movs	r2, #3
 8003d24:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	440b      	add	r3, r1
 8003d34:	333d      	adds	r3, #61	; 0x3d
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d114      	bne.n	8003d66 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	440b      	add	r3, r1
 8003d4a:	333c      	adds	r3, #60	; 0x3c
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	440b      	add	r3, r1
 8003d60:	333d      	adds	r3, #61	; 0x3d
 8003d62:	2201      	movs	r2, #1
 8003d64:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	0151      	lsls	r1, r2, #5
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	440a      	add	r2, r1
 8003d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d80:	f043 0302 	orr.w	r3, r3, #2
 8003d84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f002 fd2a 	bl	80067ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da2:	461a      	mov	r2, r3
 8003da4:	2310      	movs	r3, #16
 8003da6:	6093      	str	r3, [r2, #8]
}
 8003da8:	e19e      	b.n	80040e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbc:	2b80      	cmp	r3, #128	; 0x80
 8003dbe:	d12b      	bne.n	8003e18 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	0151      	lsls	r1, r2, #5
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	440a      	add	r2, r1
 8003dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dda:	f043 0302 	orr.w	r3, r3, #2
 8003dde:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	4611      	mov	r1, r2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f002 fcfd 	bl	80067ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	440b      	add	r3, r1
 8003dfe:	335d      	adds	r3, #93	; 0x5d
 8003e00:	2206      	movs	r2, #6
 8003e02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e10:	461a      	mov	r2, r3
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	6093      	str	r3, [r2, #8]
}
 8003e16:	e167      	b.n	80040e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2e:	d135      	bne.n	8003e9c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	0151      	lsls	r1, r2, #5
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	440a      	add	r2, r1
 8003e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e4a:	f043 0302 	orr.w	r3, r3, #2
 8003e4e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f002 fcc5 	bl	80067ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2310      	movs	r3, #16
 8003e70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	440b      	add	r3, r1
 8003e94:	335d      	adds	r3, #93	; 0x5d
 8003e96:	2208      	movs	r2, #8
 8003e98:	701a      	strb	r2, [r3, #0]
}
 8003e9a:	e125      	b.n	80040e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	f040 811a 	bne.w	80040e8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	0151      	lsls	r1, r2, #5
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	440a      	add	r2, r1
 8003eca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ece:	f023 0302 	bic.w	r3, r3, #2
 8003ed2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	335d      	adds	r3, #93	; 0x5d
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d137      	bne.n	8003f5a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	440b      	add	r3, r1
 8003ef8:	335c      	adds	r3, #92	; 0x5c
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	440b      	add	r3, r1
 8003f0c:	333f      	adds	r3, #63	; 0x3f
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d00b      	beq.n	8003f2c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	440b      	add	r3, r1
 8003f22:	333f      	adds	r3, #63	; 0x3f
 8003f24:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	f040 80c5 	bne.w	80040b6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	440b      	add	r3, r1
 8003f3a:	3351      	adds	r3, #81	; 0x51
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	f083 0301 	eor.w	r3, r3, #1
 8003f42:	b2d8      	uxtb	r0, r3
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	3351      	adds	r3, #81	; 0x51
 8003f54:	4602      	mov	r2, r0
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e0ad      	b.n	80040b6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	335d      	adds	r3, #93	; 0x5d
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d10a      	bne.n	8003f86 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	440b      	add	r3, r1
 8003f7e:	335c      	adds	r3, #92	; 0x5c
 8003f80:	2202      	movs	r2, #2
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	e097      	b.n	80040b6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	440b      	add	r3, r1
 8003f94:	335d      	adds	r3, #93	; 0x5d
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d10a      	bne.n	8003fb2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	335c      	adds	r3, #92	; 0x5c
 8003fac:	2202      	movs	r2, #2
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	e081      	b.n	80040b6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	440b      	add	r3, r1
 8003fc0:	335d      	adds	r3, #93	; 0x5d
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b05      	cmp	r3, #5
 8003fc6:	d10a      	bne.n	8003fde <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	440b      	add	r3, r1
 8003fd6:	335c      	adds	r3, #92	; 0x5c
 8003fd8:	2205      	movs	r2, #5
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e06b      	b.n	80040b6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	440b      	add	r3, r1
 8003fec:	335d      	adds	r3, #93	; 0x5d
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b06      	cmp	r3, #6
 8003ff2:	d00a      	beq.n	800400a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	440b      	add	r3, r1
 8004002:	335d      	adds	r3, #93	; 0x5d
 8004004:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004006:	2b08      	cmp	r3, #8
 8004008:	d155      	bne.n	80040b6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	440b      	add	r3, r1
 8004018:	3358      	adds	r3, #88	; 0x58
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1c59      	adds	r1, r3, #1
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4403      	add	r3, r0
 800402c:	3358      	adds	r3, #88	; 0x58
 800402e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	440b      	add	r3, r1
 800403e:	3358      	adds	r3, #88	; 0x58
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b03      	cmp	r3, #3
 8004044:	d914      	bls.n	8004070 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	3358      	adds	r3, #88	; 0x58
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	440b      	add	r3, r1
 8004068:	335c      	adds	r3, #92	; 0x5c
 800406a:	2204      	movs	r2, #4
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e009      	b.n	8004084 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	440b      	add	r3, r1
 800407e:	335c      	adds	r3, #92	; 0x5c
 8004080:	2202      	movs	r2, #2
 8004082:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800409a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b0:	461a      	mov	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c2:	461a      	mov	r2, r3
 80040c4:	2302      	movs	r3, #2
 80040c6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	b2d8      	uxtb	r0, r3
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	440b      	add	r3, r1
 80040da:	335c      	adds	r3, #92	; 0x5c
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	4601      	mov	r1, r0
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f004 fd24 	bl	8008b30 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80040e8:	bf00      	nop
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	; 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	0c5b      	lsrs	r3, r3, #17
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004124:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d003      	beq.n	8004134 <HCD_RXQLVL_IRQHandler+0x44>
 800412c:	2b05      	cmp	r3, #5
 800412e:	f000 8082 	beq.w	8004236 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004132:	e083      	b.n	800423c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d07f      	beq.n	800423a <HCD_RXQLVL_IRQHandler+0x14a>
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	440b      	add	r3, r1
 8004148:	3344      	adds	r3, #68	; 0x44
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d074      	beq.n	800423a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	440b      	add	r3, r1
 8004162:	3344      	adds	r3, #68	; 0x44
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	b292      	uxth	r2, r2
 800416a:	4619      	mov	r1, r3
 800416c:	f001 fedb 	bl	8005f26 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	440b      	add	r3, r1
 800417e:	3344      	adds	r3, #68	; 0x44
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	18d1      	adds	r1, r2, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4403      	add	r3, r0
 8004194:	3344      	adds	r3, #68	; 0x44
 8004196:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	440b      	add	r3, r1
 80041a6:	334c      	adds	r3, #76	; 0x4c
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	18d1      	adds	r1, r2, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4403      	add	r3, r0
 80041bc:	334c      	adds	r3, #76	; 0x4c
 80041be:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <HCD_RXQLVL_IRQHandler+0x154>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d031      	beq.n	800423a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041ec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041f4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	440b      	add	r3, r1
 8004216:	3350      	adds	r3, #80	; 0x50
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	f083 0301 	eor.w	r3, r3, #1
 800421e:	b2d8      	uxtb	r0, r3
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	440b      	add	r3, r1
 800422e:	3350      	adds	r3, #80	; 0x50
 8004230:	4602      	mov	r2, r0
 8004232:	701a      	strb	r2, [r3, #0]
      break;
 8004234:	e001      	b.n	800423a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800423a:	bf00      	nop
  }
}
 800423c:	bf00      	nop
 800423e:	3728      	adds	r7, #40	; 0x28
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	1ff80000 	.word	0x1ff80000

08004248 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004274:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b02      	cmp	r3, #2
 800427e:	d10b      	bne.n	8004298 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b01      	cmp	r3, #1
 8004288:	d102      	bne.n	8004290 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f004 fc34 	bl	8008af8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f043 0302 	orr.w	r3, r3, #2
 8004296:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d132      	bne.n	8004308 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f043 0308 	orr.w	r3, r3, #8
 80042a8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d126      	bne.n	8004302 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d113      	bne.n	80042e4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80042c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042c6:	d106      	bne.n	80042d6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2102      	movs	r1, #2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f001 ff64 	bl	800619c <USB_InitFSLSPClkSel>
 80042d4:	e011      	b.n	80042fa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2101      	movs	r1, #1
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 ff5d 	bl	800619c <USB_InitFSLSPClkSel>
 80042e2:	e00a      	b.n	80042fa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d106      	bne.n	80042fa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042f2:	461a      	mov	r2, r3
 80042f4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80042f8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f004 fc26 	bl	8008b4c <HAL_HCD_PortEnabled_Callback>
 8004300:	e002      	b.n	8004308 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f004 fc30 	bl	8008b68 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b20      	cmp	r3, #32
 8004310:	d103      	bne.n	800431a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f043 0320 	orr.w	r3, r3, #32
 8004318:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004320:	461a      	mov	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6013      	str	r3, [r2, #0]
}
 8004326:	bf00      	nop
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e11f      	b.n	8004582 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fd f8dc 	bl	8001514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2224      	movs	r2, #36	; 0x24
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004394:	f000 fd3e 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8004398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4a7b      	ldr	r2, [pc, #492]	; (800458c <HAL_I2C_Init+0x25c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d807      	bhi.n	80043b4 <HAL_I2C_Init+0x84>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a7a      	ldr	r2, [pc, #488]	; (8004590 <HAL_I2C_Init+0x260>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	bf94      	ite	ls
 80043ac:	2301      	movls	r3, #1
 80043ae:	2300      	movhi	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e006      	b.n	80043c2 <HAL_I2C_Init+0x92>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a77      	ldr	r2, [pc, #476]	; (8004594 <HAL_I2C_Init+0x264>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	bf94      	ite	ls
 80043bc:	2301      	movls	r3, #1
 80043be:	2300      	movhi	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e0db      	b.n	8004582 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4a72      	ldr	r2, [pc, #456]	; (8004598 <HAL_I2C_Init+0x268>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0c9b      	lsrs	r3, r3, #18
 80043d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4a64      	ldr	r2, [pc, #400]	; (800458c <HAL_I2C_Init+0x25c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d802      	bhi.n	8004404 <HAL_I2C_Init+0xd4>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3301      	adds	r3, #1
 8004402:	e009      	b.n	8004418 <HAL_I2C_Init+0xe8>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800440a:	fb02 f303 	mul.w	r3, r2, r3
 800440e:	4a63      	ldr	r2, [pc, #396]	; (800459c <HAL_I2C_Init+0x26c>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	3301      	adds	r3, #1
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	430b      	orrs	r3, r1
 800441e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800442a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4956      	ldr	r1, [pc, #344]	; (800458c <HAL_I2C_Init+0x25c>)
 8004434:	428b      	cmp	r3, r1
 8004436:	d80d      	bhi.n	8004454 <HAL_I2C_Init+0x124>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1e59      	subs	r1, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	fbb1 f3f3 	udiv	r3, r1, r3
 8004446:	3301      	adds	r3, #1
 8004448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444c:	2b04      	cmp	r3, #4
 800444e:	bf38      	it	cc
 8004450:	2304      	movcc	r3, #4
 8004452:	e04f      	b.n	80044f4 <HAL_I2C_Init+0x1c4>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d111      	bne.n	8004480 <HAL_I2C_Init+0x150>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1e58      	subs	r0, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6859      	ldr	r1, [r3, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	440b      	add	r3, r1
 800446a:	fbb0 f3f3 	udiv	r3, r0, r3
 800446e:	3301      	adds	r3, #1
 8004470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e012      	b.n	80044a6 <HAL_I2C_Init+0x176>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	1e58      	subs	r0, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	0099      	lsls	r1, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	fbb0 f3f3 	udiv	r3, r0, r3
 8004496:	3301      	adds	r3, #1
 8004498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_I2C_Init+0x17e>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e022      	b.n	80044f4 <HAL_I2C_Init+0x1c4>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10e      	bne.n	80044d4 <HAL_I2C_Init+0x1a4>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1e58      	subs	r0, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6859      	ldr	r1, [r3, #4]
 80044be:	460b      	mov	r3, r1
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	440b      	add	r3, r1
 80044c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80044c8:	3301      	adds	r3, #1
 80044ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d2:	e00f      	b.n	80044f4 <HAL_I2C_Init+0x1c4>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1e58      	subs	r0, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6859      	ldr	r1, [r3, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	0099      	lsls	r1, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ea:	3301      	adds	r3, #1
 80044ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	6809      	ldr	r1, [r1, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69da      	ldr	r2, [r3, #28]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004522:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6911      	ldr	r1, [r2, #16]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68d2      	ldr	r2, [r2, #12]
 800452e:	4311      	orrs	r1, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	430b      	orrs	r3, r1
 8004536:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	000186a0 	.word	0x000186a0
 8004590:	001e847f 	.word	0x001e847f
 8004594:	003d08ff 	.word	0x003d08ff
 8004598:	431bde83 	.word	0x431bde83
 800459c:	10624dd3 	.word	0x10624dd3

080045a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e25b      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d075      	beq.n	80046aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045be:	4ba3      	ldr	r3, [pc, #652]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d00c      	beq.n	80045e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ca:	4ba0      	ldr	r3, [pc, #640]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d112      	bne.n	80045fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045d6:	4b9d      	ldr	r3, [pc, #628]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e2:	d10b      	bne.n	80045fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	4b99      	ldr	r3, [pc, #612]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d05b      	beq.n	80046a8 <HAL_RCC_OscConfig+0x108>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d157      	bne.n	80046a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e236      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004604:	d106      	bne.n	8004614 <HAL_RCC_OscConfig+0x74>
 8004606:	4b91      	ldr	r3, [pc, #580]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a90      	ldr	r2, [pc, #576]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 800460c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	e01d      	b.n	8004650 <HAL_RCC_OscConfig+0xb0>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800461c:	d10c      	bne.n	8004638 <HAL_RCC_OscConfig+0x98>
 800461e:	4b8b      	ldr	r3, [pc, #556]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a8a      	ldr	r2, [pc, #552]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 8004624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	4b88      	ldr	r3, [pc, #544]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a87      	ldr	r2, [pc, #540]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e00b      	b.n	8004650 <HAL_RCC_OscConfig+0xb0>
 8004638:	4b84      	ldr	r3, [pc, #528]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a83      	ldr	r2, [pc, #524]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 800463e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	4b81      	ldr	r3, [pc, #516]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a80      	ldr	r2, [pc, #512]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 800464a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800464e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d013      	beq.n	8004680 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004658:	f7fd f9e0 	bl	8001a1c <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004660:	f7fd f9dc 	bl	8001a1c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e1fb      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	4b76      	ldr	r3, [pc, #472]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0xc0>
 800467e:	e014      	b.n	80046aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004680:	f7fd f9cc 	bl	8001a1c <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004688:	f7fd f9c8 	bl	8001a1c <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b64      	cmp	r3, #100	; 0x64
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e1e7      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469a:	4b6c      	ldr	r3, [pc, #432]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0xe8>
 80046a6:	e000      	b.n	80046aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d063      	beq.n	800477e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046b6:	4b65      	ldr	r3, [pc, #404]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046c2:	4b62      	ldr	r3, [pc, #392]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d11c      	bne.n	8004708 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ce:	4b5f      	ldr	r3, [pc, #380]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d116      	bne.n	8004708 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046da:	4b5c      	ldr	r3, [pc, #368]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <HAL_RCC_OscConfig+0x152>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d001      	beq.n	80046f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e1bb      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f2:	4b56      	ldr	r3, [pc, #344]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4952      	ldr	r1, [pc, #328]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004706:	e03a      	b.n	800477e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004710:	4b4f      	ldr	r3, [pc, #316]	; (8004850 <HAL_RCC_OscConfig+0x2b0>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004716:	f7fd f981 	bl	8001a1c <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800471e:	f7fd f97d 	bl	8001a1c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e19c      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004730:	4b46      	ldr	r3, [pc, #280]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473c:	4b43      	ldr	r3, [pc, #268]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4940      	ldr	r1, [pc, #256]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 800474c:	4313      	orrs	r3, r2
 800474e:	600b      	str	r3, [r1, #0]
 8004750:	e015      	b.n	800477e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004752:	4b3f      	ldr	r3, [pc, #252]	; (8004850 <HAL_RCC_OscConfig+0x2b0>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fd f960 	bl	8001a1c <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004760:	f7fd f95c 	bl	8001a1c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e17b      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004772:	4b36      	ldr	r3, [pc, #216]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d030      	beq.n	80047ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004792:	4b30      	ldr	r3, [pc, #192]	; (8004854 <HAL_RCC_OscConfig+0x2b4>)
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7fd f940 	bl	8001a1c <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047a0:	f7fd f93c 	bl	8001a1c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e15b      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b2:	4b26      	ldr	r3, [pc, #152]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 80047b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x200>
 80047be:	e015      	b.n	80047ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c0:	4b24      	ldr	r3, [pc, #144]	; (8004854 <HAL_RCC_OscConfig+0x2b4>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c6:	f7fd f929 	bl	8001a1c <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ce:	f7fd f925 	bl	8001a1c <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e144      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e0:	4b1a      	ldr	r3, [pc, #104]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 80047e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80a0 	beq.w	800493a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047fa:	2300      	movs	r3, #0
 80047fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047fe:	4b13      	ldr	r3, [pc, #76]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10f      	bne.n	800482a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	4a0e      	ldr	r2, [pc, #56]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 8004814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004818:	6413      	str	r3, [r2, #64]	; 0x40
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <HAL_RCC_OscConfig+0x2ac>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004822:	60bb      	str	r3, [r7, #8]
 8004824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004826:	2301      	movs	r3, #1
 8004828:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482a:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <HAL_RCC_OscConfig+0x2b8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004832:	2b00      	cmp	r3, #0
 8004834:	d121      	bne.n	800487a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004836:	4b08      	ldr	r3, [pc, #32]	; (8004858 <HAL_RCC_OscConfig+0x2b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a07      	ldr	r2, [pc, #28]	; (8004858 <HAL_RCC_OscConfig+0x2b8>)
 800483c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004842:	f7fd f8eb 	bl	8001a1c <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004848:	e011      	b.n	800486e <HAL_RCC_OscConfig+0x2ce>
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800
 8004850:	42470000 	.word	0x42470000
 8004854:	42470e80 	.word	0x42470e80
 8004858:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485c:	f7fd f8de 	bl	8001a1c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e0fd      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486e:	4b81      	ldr	r3, [pc, #516]	; (8004a74 <HAL_RCC_OscConfig+0x4d4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d106      	bne.n	8004890 <HAL_RCC_OscConfig+0x2f0>
 8004882:	4b7d      	ldr	r3, [pc, #500]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	4a7c      	ldr	r2, [pc, #496]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	6713      	str	r3, [r2, #112]	; 0x70
 800488e:	e01c      	b.n	80048ca <HAL_RCC_OscConfig+0x32a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b05      	cmp	r3, #5
 8004896:	d10c      	bne.n	80048b2 <HAL_RCC_OscConfig+0x312>
 8004898:	4b77      	ldr	r3, [pc, #476]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489c:	4a76      	ldr	r2, [pc, #472]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 800489e:	f043 0304 	orr.w	r3, r3, #4
 80048a2:	6713      	str	r3, [r2, #112]	; 0x70
 80048a4:	4b74      	ldr	r3, [pc, #464]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a8:	4a73      	ldr	r2, [pc, #460]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	6713      	str	r3, [r2, #112]	; 0x70
 80048b0:	e00b      	b.n	80048ca <HAL_RCC_OscConfig+0x32a>
 80048b2:	4b71      	ldr	r3, [pc, #452]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	4a70      	ldr	r2, [pc, #448]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	6713      	str	r3, [r2, #112]	; 0x70
 80048be:	4b6e      	ldr	r3, [pc, #440]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	4a6d      	ldr	r2, [pc, #436]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 80048c4:	f023 0304 	bic.w	r3, r3, #4
 80048c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d015      	beq.n	80048fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d2:	f7fd f8a3 	bl	8001a1c <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d8:	e00a      	b.n	80048f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048da:	f7fd f89f 	bl	8001a1c <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e0bc      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f0:	4b61      	ldr	r3, [pc, #388]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 80048f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0ee      	beq.n	80048da <HAL_RCC_OscConfig+0x33a>
 80048fc:	e014      	b.n	8004928 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fe:	f7fd f88d 	bl	8001a1c <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004904:	e00a      	b.n	800491c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fd f889 	bl	8001a1c <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f241 3288 	movw	r2, #5000	; 0x1388
 8004914:	4293      	cmp	r3, r2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0a6      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800491c:	4b56      	ldr	r3, [pc, #344]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1ee      	bne.n	8004906 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004928:	7dfb      	ldrb	r3, [r7, #23]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d105      	bne.n	800493a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800492e:	4b52      	ldr	r3, [pc, #328]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	4a51      	ldr	r2, [pc, #324]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 8004934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004938:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8092 	beq.w	8004a68 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004944:	4b4c      	ldr	r3, [pc, #304]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 030c 	and.w	r3, r3, #12
 800494c:	2b08      	cmp	r3, #8
 800494e:	d05c      	beq.n	8004a0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b02      	cmp	r3, #2
 8004956:	d141      	bne.n	80049dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004958:	4b48      	ldr	r3, [pc, #288]	; (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495e:	f7fd f85d 	bl	8001a1c <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004966:	f7fd f859 	bl	8001a1c <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e078      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004978:	4b3f      	ldr	r3, [pc, #252]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1f0      	bne.n	8004966 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69da      	ldr	r2, [r3, #28]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	019b      	lsls	r3, r3, #6
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	3b01      	subs	r3, #1
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	061b      	lsls	r3, r3, #24
 80049a8:	4933      	ldr	r1, [pc, #204]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ae:	4b33      	ldr	r3, [pc, #204]	; (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fd f832 	bl	8001a1c <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fd f82e 	bl	8001a1c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e04d      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ce:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x41c>
 80049da:	e045      	b.n	8004a68 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049dc:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e2:	f7fd f81b 	bl	8001a1c <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ea:	f7fd f817 	bl	8001a1c <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e036      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fc:	4b1e      	ldr	r3, [pc, #120]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f0      	bne.n	80049ea <HAL_RCC_OscConfig+0x44a>
 8004a08:	e02e      	b.n	8004a68 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e029      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a16:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <HAL_RCC_OscConfig+0x4d8>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d11c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d115      	bne.n	8004a64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a3e:	4013      	ands	r3, r2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10d      	bne.n	8004a64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d106      	bne.n	8004a64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40007000 	.word	0x40007000
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	42470060 	.word	0x42470060

08004a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0cc      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a94:	4b68      	ldr	r3, [pc, #416]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d90c      	bls.n	8004abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b65      	ldr	r3, [pc, #404]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b63      	ldr	r3, [pc, #396]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0b8      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d020      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ad4:	4b59      	ldr	r3, [pc, #356]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a58      	ldr	r2, [pc, #352]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aec:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4a52      	ldr	r2, [pc, #328]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af8:	4b50      	ldr	r3, [pc, #320]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	494d      	ldr	r1, [pc, #308]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d044      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1e:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d119      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e07f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d003      	beq.n	8004b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d107      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3e:	4b3f      	ldr	r3, [pc, #252]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e06f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4e:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e067      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b5e:	4b37      	ldr	r3, [pc, #220]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f023 0203 	bic.w	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4934      	ldr	r1, [pc, #208]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b70:	f7fc ff54 	bl	8001a1c <HAL_GetTick>
 8004b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b76:	e00a      	b.n	8004b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b78:	f7fc ff50 	bl	8001a1c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e04f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8e:	4b2b      	ldr	r3, [pc, #172]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 020c 	and.w	r2, r3, #12
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d1eb      	bne.n	8004b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d20c      	bcs.n	8004bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b22      	ldr	r3, [pc, #136]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e032      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4916      	ldr	r1, [pc, #88]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	490e      	ldr	r1, [pc, #56]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c06:	f000 f821 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <HAL_RCC_ClockConfig+0x1c0>)
 8004c18:	5cd3      	ldrb	r3, [r2, r3]
 8004c1a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_ClockConfig+0x1c8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fc feb4 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40023c00 	.word	0x40023c00
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	08009e08 	.word	0x08009e08
 8004c44:	20000004 	.word	0x20000004
 8004c48:	20000008 	.word	0x20000008

08004c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c62:	4b63      	ldr	r3, [pc, #396]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d007      	beq.n	8004c7e <HAL_RCC_GetSysClockFreq+0x32>
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d008      	beq.n	8004c84 <HAL_RCC_GetSysClockFreq+0x38>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 80b4 	bne.w	8004de0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c78:	4b5e      	ldr	r3, [pc, #376]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c7a:	60bb      	str	r3, [r7, #8]
       break;
 8004c7c:	e0b3      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c7e:	4b5e      	ldr	r3, [pc, #376]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004c80:	60bb      	str	r3, [r7, #8]
      break;
 8004c82:	e0b0      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c84:	4b5a      	ldr	r3, [pc, #360]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c8e:	4b58      	ldr	r3, [pc, #352]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d04a      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9a:	4b55      	ldr	r3, [pc, #340]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	099b      	lsrs	r3, r3, #6
 8004ca0:	f04f 0400 	mov.w	r4, #0
 8004ca4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	ea03 0501 	and.w	r5, r3, r1
 8004cb0:	ea04 0602 	and.w	r6, r4, r2
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	4632      	mov	r2, r6
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	f04f 0400 	mov.w	r4, #0
 8004cc0:	0154      	lsls	r4, r2, #5
 8004cc2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004cc6:	014b      	lsls	r3, r1, #5
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4622      	mov	r2, r4
 8004ccc:	1b49      	subs	r1, r1, r5
 8004cce:	eb62 0206 	sbc.w	r2, r2, r6
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	f04f 0400 	mov.w	r4, #0
 8004cda:	0194      	lsls	r4, r2, #6
 8004cdc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ce0:	018b      	lsls	r3, r1, #6
 8004ce2:	1a5b      	subs	r3, r3, r1
 8004ce4:	eb64 0402 	sbc.w	r4, r4, r2
 8004ce8:	f04f 0100 	mov.w	r1, #0
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	00e2      	lsls	r2, r4, #3
 8004cf2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cf6:	00d9      	lsls	r1, r3, #3
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4614      	mov	r4, r2
 8004cfc:	195b      	adds	r3, r3, r5
 8004cfe:	eb44 0406 	adc.w	r4, r4, r6
 8004d02:	f04f 0100 	mov.w	r1, #0
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	0262      	lsls	r2, r4, #9
 8004d0c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004d10:	0259      	lsls	r1, r3, #9
 8004d12:	460b      	mov	r3, r1
 8004d14:	4614      	mov	r4, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	4621      	mov	r1, r4
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f04f 0400 	mov.w	r4, #0
 8004d20:	461a      	mov	r2, r3
 8004d22:	4623      	mov	r3, r4
 8004d24:	f7fb fee2 	bl	8000aec <__aeabi_uldivmod>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	e049      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d30:	4b2f      	ldr	r3, [pc, #188]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	099b      	lsrs	r3, r3, #6
 8004d36:	f04f 0400 	mov.w	r4, #0
 8004d3a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	ea03 0501 	and.w	r5, r3, r1
 8004d46:	ea04 0602 	and.w	r6, r4, r2
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4632      	mov	r2, r6
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	f04f 0400 	mov.w	r4, #0
 8004d56:	0154      	lsls	r4, r2, #5
 8004d58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d5c:	014b      	lsls	r3, r1, #5
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4622      	mov	r2, r4
 8004d62:	1b49      	subs	r1, r1, r5
 8004d64:	eb62 0206 	sbc.w	r2, r2, r6
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	f04f 0400 	mov.w	r4, #0
 8004d70:	0194      	lsls	r4, r2, #6
 8004d72:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d76:	018b      	lsls	r3, r1, #6
 8004d78:	1a5b      	subs	r3, r3, r1
 8004d7a:	eb64 0402 	sbc.w	r4, r4, r2
 8004d7e:	f04f 0100 	mov.w	r1, #0
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	00e2      	lsls	r2, r4, #3
 8004d88:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d8c:	00d9      	lsls	r1, r3, #3
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4614      	mov	r4, r2
 8004d92:	195b      	adds	r3, r3, r5
 8004d94:	eb44 0406 	adc.w	r4, r4, r6
 8004d98:	f04f 0100 	mov.w	r1, #0
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	02a2      	lsls	r2, r4, #10
 8004da2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004da6:	0299      	lsls	r1, r3, #10
 8004da8:	460b      	mov	r3, r1
 8004daa:	4614      	mov	r4, r2
 8004dac:	4618      	mov	r0, r3
 8004dae:	4621      	mov	r1, r4
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f04f 0400 	mov.w	r4, #0
 8004db6:	461a      	mov	r2, r3
 8004db8:	4623      	mov	r3, r4
 8004dba:	f7fb fe97 	bl	8000aec <__aeabi_uldivmod>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	3301      	adds	r3, #1
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	60bb      	str	r3, [r7, #8]
      break;
 8004dde:	e002      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004de0:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004de2:	60bb      	str	r3, [r7, #8]
      break;
 8004de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004de6:	68bb      	ldr	r3, [r7, #8]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004df0:	40023800 	.word	0x40023800
 8004df4:	00f42400 	.word	0x00f42400
 8004df8:	007a1200 	.word	0x007a1200

08004dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e00:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e02:	681b      	ldr	r3, [r3, #0]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000004 	.word	0x20000004

08004e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e18:	f7ff fff0 	bl	8004dfc <HAL_RCC_GetHCLKFreq>
 8004e1c:	4601      	mov	r1, r0
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	0a9b      	lsrs	r3, r3, #10
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4a03      	ldr	r2, [pc, #12]	; (8004e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e2a:	5cd3      	ldrb	r3, [r2, r3]
 8004e2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40023800 	.word	0x40023800
 8004e38:	08009e18 	.word	0x08009e18

08004e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e40:	f7ff ffdc 	bl	8004dfc <HAL_RCC_GetHCLKFreq>
 8004e44:	4601      	mov	r1, r0
 8004e46:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	0b5b      	lsrs	r3, r3, #13
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	4a03      	ldr	r2, [pc, #12]	; (8004e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e52:	5cd3      	ldrb	r3, [r2, r3]
 8004e54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	08009e18 	.word	0x08009e18

08004e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e03f      	b.n	8004ef6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fc fb8a 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2224      	movs	r2, #36	; 0x24
 8004e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fb95 	bl	80055d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695a      	ldr	r2, [r3, #20]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d166      	bne.n	8004fe8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <HAL_UART_Receive_DMA+0x26>
 8004f20:	88fb      	ldrh	r3, [r7, #6]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e05f      	b.n	8004fea <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_UART_Receive_DMA+0x38>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e058      	b.n	8004fea <HAL_UART_Receive_DMA+0xea>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	88fa      	ldrh	r2, [r7, #6]
 8004f4a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2222      	movs	r2, #34	; 0x22
 8004f56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5e:	4a25      	ldr	r2, [pc, #148]	; (8004ff4 <HAL_UART_Receive_DMA+0xf4>)
 8004f60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	4a24      	ldr	r2, [pc, #144]	; (8004ff8 <HAL_UART_Receive_DMA+0xf8>)
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6e:	4a23      	ldr	r2, [pc, #140]	; (8004ffc <HAL_UART_Receive_DMA+0xfc>)
 8004f70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	2200      	movs	r2, #0
 8004f78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004f7a:	f107 0308 	add.w	r3, r7, #8
 8004f7e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	88fb      	ldrh	r3, [r7, #6]
 8004f92:	f7fd f82b 	bl	8001fec <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004f96:	2300      	movs	r3, #0
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695a      	ldr	r2, [r3, #20]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695a      	ldr	r2, [r3, #20]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e000      	b.n	8004fea <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
  }
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	08005251 	.word	0x08005251
 8004ff8:	080052b9 	.word	0x080052b9
 8004ffc:	080052d5 	.word	0x080052d5

08005000 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10d      	bne.n	8005052 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <HAL_UART_IRQHandler+0x52>
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa42 	bl	80054d4 <UART_Receive_IT>
      return;
 8005050:	e0d1      	b.n	80051f6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80b0 	beq.w	80051ba <HAL_UART_IRQHandler+0x1ba>
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d105      	bne.n	8005070 <HAL_UART_IRQHandler+0x70>
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80a5 	beq.w	80051ba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_UART_IRQHandler+0x90>
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005088:	f043 0201 	orr.w	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_UART_IRQHandler+0xb0>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	f043 0202 	orr.w	r2, r3, #2
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_UART_IRQHandler+0xd0>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c8:	f043 0204 	orr.w	r2, r3, #4
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00f      	beq.n	80050fa <HAL_UART_IRQHandler+0xfa>
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <HAL_UART_IRQHandler+0xee>
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	f043 0208 	orr.w	r2, r3, #8
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d078      	beq.n	80051f4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <HAL_UART_IRQHandler+0x11c>
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f9dc 	bl	80054d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005126:	2b40      	cmp	r3, #64	; 0x40
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <HAL_UART_IRQHandler+0x144>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d031      	beq.n	80051a8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f925 	bl	8005394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d123      	bne.n	80051a0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005166:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516c:	2b00      	cmp	r3, #0
 800516e:	d013      	beq.n	8005198 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005174:	4a21      	ldr	r2, [pc, #132]	; (80051fc <HAL_UART_IRQHandler+0x1fc>)
 8005176:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517c:	4618      	mov	r0, r3
 800517e:	f7fc ff8d 	bl	800209c <HAL_DMA_Abort_IT>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d016      	beq.n	80051b6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005192:	4610      	mov	r0, r2
 8005194:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005196:	e00e      	b.n	80051b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f84f 	bl	800523c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519e:	e00a      	b.n	80051b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f84b 	bl	800523c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a6:	e006      	b.n	80051b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f847 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80051b4:	e01e      	b.n	80051f4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b6:	bf00      	nop
    return;
 80051b8:	e01c      	b.n	80051f4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <HAL_UART_IRQHandler+0x1d6>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f912 	bl	80053f8 <UART_Transmit_IT>
    return;
 80051d4:	e00f      	b.n	80051f6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_UART_IRQHandler+0x1f6>
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f95a 	bl	80054a4 <UART_EndTransmit_IT>
    return;
 80051f0:	bf00      	nop
 80051f2:	e000      	b.n	80051f6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80051f4:	bf00      	nop
  }
}
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	080053d1 	.word	0x080053d1

08005200 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d11e      	bne.n	80052aa <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005280:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695a      	ldr	r2, [r3, #20]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695a      	ldr	r2, [r3, #20]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff ffb2 	bl	8005214 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052b0:	bf00      	nop
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7ff ffae 	bl	8005228 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f0:	2b80      	cmp	r3, #128	; 0x80
 80052f2:	bf0c      	ite	eq
 80052f4:	2301      	moveq	r3, #1
 80052f6:	2300      	movne	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b21      	cmp	r3, #33	; 0x21
 8005306:	d108      	bne.n	800531a <UART_DMAError+0x46>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2200      	movs	r2, #0
 8005312:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005314:	68b8      	ldr	r0, [r7, #8]
 8005316:	f000 f827 	bl	8005368 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	bf0c      	ite	eq
 8005328:	2301      	moveq	r3, #1
 800532a:	2300      	movne	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b22      	cmp	r3, #34	; 0x22
 800533a:	d108      	bne.n	800534e <UART_DMAError+0x7a>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2200      	movs	r2, #0
 8005346:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005348:	68b8      	ldr	r0, [r7, #8]
 800534a:	f000 f823 	bl	8005394 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	f043 0210 	orr.w	r2, r3, #16
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800535a:	68b8      	ldr	r0, [r7, #8]
 800535c:	f7ff ff6e 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800537e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0201 	bic.w	r2, r2, #1
 80053ba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f7ff ff26 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b21      	cmp	r3, #33	; 0x21
 800540a:	d144      	bne.n	8005496 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005414:	d11a      	bne.n	800544c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800542a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d105      	bne.n	8005440 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	1c9a      	adds	r2, r3, #2
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	621a      	str	r2, [r3, #32]
 800543e:	e00e      	b.n	800545e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	621a      	str	r2, [r3, #32]
 800544a:	e008      	b.n	800545e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	1c59      	adds	r1, r3, #1
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6211      	str	r1, [r2, #32]
 8005456:	781a      	ldrb	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29b      	uxth	r3, r3
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4619      	mov	r1, r3
 800546c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10f      	bne.n	8005492 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005480:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005490:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	e000      	b.n	8005498 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005496:	2302      	movs	r3, #2
  }
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff fe9b 	bl	8005200 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b22      	cmp	r3, #34	; 0x22
 80054e6:	d171      	bne.n	80055cc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f0:	d123      	bne.n	800553a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10e      	bne.n	800551e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	b29b      	uxth	r3, r3
 8005508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	1c9a      	adds	r2, r3, #2
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	629a      	str	r2, [r3, #40]	; 0x28
 800551c:	e029      	b.n	8005572 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	b29b      	uxth	r3, r3
 8005526:	b2db      	uxtb	r3, r3
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	629a      	str	r2, [r3, #40]	; 0x28
 8005538:	e01b      	b.n	8005572 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6858      	ldr	r0, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	1c59      	adds	r1, r3, #1
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6291      	str	r1, [r2, #40]	; 0x28
 8005552:	b2c2      	uxtb	r2, r0
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	e00c      	b.n	8005572 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	b2da      	uxtb	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	1c58      	adds	r0, r3, #1
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	6288      	str	r0, [r1, #40]	; 0x28
 800556a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29b      	uxth	r3, r3
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4619      	mov	r1, r3
 8005580:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005582:	2b00      	cmp	r3, #0
 8005584:	d120      	bne.n	80055c8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0220 	bic.w	r2, r2, #32
 8005594:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695a      	ldr	r2, [r3, #20]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0201 	bic.w	r2, r2, #1
 80055b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff fe28 	bl	8005214 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e002      	b.n	80055ce <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800561a:	f023 030c 	bic.w	r3, r3, #12
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	68f9      	ldr	r1, [r7, #12]
 8005624:	430b      	orrs	r3, r1
 8005626:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005646:	f040 818b 	bne.w	8005960 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4ac1      	ldr	r2, [pc, #772]	; (8005954 <UART_SetConfig+0x37c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d005      	beq.n	8005660 <UART_SetConfig+0x88>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4abf      	ldr	r2, [pc, #764]	; (8005958 <UART_SetConfig+0x380>)
 800565a:	4293      	cmp	r3, r2
 800565c:	f040 80bd 	bne.w	80057da <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005660:	f7ff fbec 	bl	8004e3c <HAL_RCC_GetPCLK2Freq>
 8005664:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	461d      	mov	r5, r3
 800566a:	f04f 0600 	mov.w	r6, #0
 800566e:	46a8      	mov	r8, r5
 8005670:	46b1      	mov	r9, r6
 8005672:	eb18 0308 	adds.w	r3, r8, r8
 8005676:	eb49 0409 	adc.w	r4, r9, r9
 800567a:	4698      	mov	r8, r3
 800567c:	46a1      	mov	r9, r4
 800567e:	eb18 0805 	adds.w	r8, r8, r5
 8005682:	eb49 0906 	adc.w	r9, r9, r6
 8005686:	f04f 0100 	mov.w	r1, #0
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005692:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005696:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800569a:	4688      	mov	r8, r1
 800569c:	4691      	mov	r9, r2
 800569e:	eb18 0005 	adds.w	r0, r8, r5
 80056a2:	eb49 0106 	adc.w	r1, r9, r6
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	461d      	mov	r5, r3
 80056ac:	f04f 0600 	mov.w	r6, #0
 80056b0:	196b      	adds	r3, r5, r5
 80056b2:	eb46 0406 	adc.w	r4, r6, r6
 80056b6:	461a      	mov	r2, r3
 80056b8:	4623      	mov	r3, r4
 80056ba:	f7fb fa17 	bl	8000aec <__aeabi_uldivmod>
 80056be:	4603      	mov	r3, r0
 80056c0:	460c      	mov	r4, r1
 80056c2:	461a      	mov	r2, r3
 80056c4:	4ba5      	ldr	r3, [pc, #660]	; (800595c <UART_SetConfig+0x384>)
 80056c6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	461d      	mov	r5, r3
 80056d4:	f04f 0600 	mov.w	r6, #0
 80056d8:	46a9      	mov	r9, r5
 80056da:	46b2      	mov	sl, r6
 80056dc:	eb19 0309 	adds.w	r3, r9, r9
 80056e0:	eb4a 040a 	adc.w	r4, sl, sl
 80056e4:	4699      	mov	r9, r3
 80056e6:	46a2      	mov	sl, r4
 80056e8:	eb19 0905 	adds.w	r9, r9, r5
 80056ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80056f0:	f04f 0100 	mov.w	r1, #0
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005700:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005704:	4689      	mov	r9, r1
 8005706:	4692      	mov	sl, r2
 8005708:	eb19 0005 	adds.w	r0, r9, r5
 800570c:	eb4a 0106 	adc.w	r1, sl, r6
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	461d      	mov	r5, r3
 8005716:	f04f 0600 	mov.w	r6, #0
 800571a:	196b      	adds	r3, r5, r5
 800571c:	eb46 0406 	adc.w	r4, r6, r6
 8005720:	461a      	mov	r2, r3
 8005722:	4623      	mov	r3, r4
 8005724:	f7fb f9e2 	bl	8000aec <__aeabi_uldivmod>
 8005728:	4603      	mov	r3, r0
 800572a:	460c      	mov	r4, r1
 800572c:	461a      	mov	r2, r3
 800572e:	4b8b      	ldr	r3, [pc, #556]	; (800595c <UART_SetConfig+0x384>)
 8005730:	fba3 1302 	umull	r1, r3, r3, r2
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	2164      	movs	r1, #100	; 0x64
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	3332      	adds	r3, #50	; 0x32
 8005742:	4a86      	ldr	r2, [pc, #536]	; (800595c <UART_SetConfig+0x384>)
 8005744:	fba2 2303 	umull	r2, r3, r2, r3
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005750:	4498      	add	r8, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	461d      	mov	r5, r3
 8005756:	f04f 0600 	mov.w	r6, #0
 800575a:	46a9      	mov	r9, r5
 800575c:	46b2      	mov	sl, r6
 800575e:	eb19 0309 	adds.w	r3, r9, r9
 8005762:	eb4a 040a 	adc.w	r4, sl, sl
 8005766:	4699      	mov	r9, r3
 8005768:	46a2      	mov	sl, r4
 800576a:	eb19 0905 	adds.w	r9, r9, r5
 800576e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005772:	f04f 0100 	mov.w	r1, #0
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800577e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005782:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005786:	4689      	mov	r9, r1
 8005788:	4692      	mov	sl, r2
 800578a:	eb19 0005 	adds.w	r0, r9, r5
 800578e:	eb4a 0106 	adc.w	r1, sl, r6
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	461d      	mov	r5, r3
 8005798:	f04f 0600 	mov.w	r6, #0
 800579c:	196b      	adds	r3, r5, r5
 800579e:	eb46 0406 	adc.w	r4, r6, r6
 80057a2:	461a      	mov	r2, r3
 80057a4:	4623      	mov	r3, r4
 80057a6:	f7fb f9a1 	bl	8000aec <__aeabi_uldivmod>
 80057aa:	4603      	mov	r3, r0
 80057ac:	460c      	mov	r4, r1
 80057ae:	461a      	mov	r2, r3
 80057b0:	4b6a      	ldr	r3, [pc, #424]	; (800595c <UART_SetConfig+0x384>)
 80057b2:	fba3 1302 	umull	r1, r3, r3, r2
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	2164      	movs	r1, #100	; 0x64
 80057ba:	fb01 f303 	mul.w	r3, r1, r3
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	3332      	adds	r3, #50	; 0x32
 80057c4:	4a65      	ldr	r2, [pc, #404]	; (800595c <UART_SetConfig+0x384>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	f003 0207 	and.w	r2, r3, #7
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4442      	add	r2, r8
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	e26f      	b.n	8005cba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057da:	f7ff fb1b 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 80057de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	461d      	mov	r5, r3
 80057e4:	f04f 0600 	mov.w	r6, #0
 80057e8:	46a8      	mov	r8, r5
 80057ea:	46b1      	mov	r9, r6
 80057ec:	eb18 0308 	adds.w	r3, r8, r8
 80057f0:	eb49 0409 	adc.w	r4, r9, r9
 80057f4:	4698      	mov	r8, r3
 80057f6:	46a1      	mov	r9, r4
 80057f8:	eb18 0805 	adds.w	r8, r8, r5
 80057fc:	eb49 0906 	adc.w	r9, r9, r6
 8005800:	f04f 0100 	mov.w	r1, #0
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800580c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005810:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005814:	4688      	mov	r8, r1
 8005816:	4691      	mov	r9, r2
 8005818:	eb18 0005 	adds.w	r0, r8, r5
 800581c:	eb49 0106 	adc.w	r1, r9, r6
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	461d      	mov	r5, r3
 8005826:	f04f 0600 	mov.w	r6, #0
 800582a:	196b      	adds	r3, r5, r5
 800582c:	eb46 0406 	adc.w	r4, r6, r6
 8005830:	461a      	mov	r2, r3
 8005832:	4623      	mov	r3, r4
 8005834:	f7fb f95a 	bl	8000aec <__aeabi_uldivmod>
 8005838:	4603      	mov	r3, r0
 800583a:	460c      	mov	r4, r1
 800583c:	461a      	mov	r2, r3
 800583e:	4b47      	ldr	r3, [pc, #284]	; (800595c <UART_SetConfig+0x384>)
 8005840:	fba3 2302 	umull	r2, r3, r3, r2
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	461d      	mov	r5, r3
 800584e:	f04f 0600 	mov.w	r6, #0
 8005852:	46a9      	mov	r9, r5
 8005854:	46b2      	mov	sl, r6
 8005856:	eb19 0309 	adds.w	r3, r9, r9
 800585a:	eb4a 040a 	adc.w	r4, sl, sl
 800585e:	4699      	mov	r9, r3
 8005860:	46a2      	mov	sl, r4
 8005862:	eb19 0905 	adds.w	r9, r9, r5
 8005866:	eb4a 0a06 	adc.w	sl, sl, r6
 800586a:	f04f 0100 	mov.w	r1, #0
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005876:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800587a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800587e:	4689      	mov	r9, r1
 8005880:	4692      	mov	sl, r2
 8005882:	eb19 0005 	adds.w	r0, r9, r5
 8005886:	eb4a 0106 	adc.w	r1, sl, r6
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	461d      	mov	r5, r3
 8005890:	f04f 0600 	mov.w	r6, #0
 8005894:	196b      	adds	r3, r5, r5
 8005896:	eb46 0406 	adc.w	r4, r6, r6
 800589a:	461a      	mov	r2, r3
 800589c:	4623      	mov	r3, r4
 800589e:	f7fb f925 	bl	8000aec <__aeabi_uldivmod>
 80058a2:	4603      	mov	r3, r0
 80058a4:	460c      	mov	r4, r1
 80058a6:	461a      	mov	r2, r3
 80058a8:	4b2c      	ldr	r3, [pc, #176]	; (800595c <UART_SetConfig+0x384>)
 80058aa:	fba3 1302 	umull	r1, r3, r3, r2
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	2164      	movs	r1, #100	; 0x64
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	3332      	adds	r3, #50	; 0x32
 80058bc:	4a27      	ldr	r2, [pc, #156]	; (800595c <UART_SetConfig+0x384>)
 80058be:	fba2 2303 	umull	r2, r3, r2, r3
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058ca:	4498      	add	r8, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	461d      	mov	r5, r3
 80058d0:	f04f 0600 	mov.w	r6, #0
 80058d4:	46a9      	mov	r9, r5
 80058d6:	46b2      	mov	sl, r6
 80058d8:	eb19 0309 	adds.w	r3, r9, r9
 80058dc:	eb4a 040a 	adc.w	r4, sl, sl
 80058e0:	4699      	mov	r9, r3
 80058e2:	46a2      	mov	sl, r4
 80058e4:	eb19 0905 	adds.w	r9, r9, r5
 80058e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80058ec:	f04f 0100 	mov.w	r1, #0
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005900:	4689      	mov	r9, r1
 8005902:	4692      	mov	sl, r2
 8005904:	eb19 0005 	adds.w	r0, r9, r5
 8005908:	eb4a 0106 	adc.w	r1, sl, r6
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	461d      	mov	r5, r3
 8005912:	f04f 0600 	mov.w	r6, #0
 8005916:	196b      	adds	r3, r5, r5
 8005918:	eb46 0406 	adc.w	r4, r6, r6
 800591c:	461a      	mov	r2, r3
 800591e:	4623      	mov	r3, r4
 8005920:	f7fb f8e4 	bl	8000aec <__aeabi_uldivmod>
 8005924:	4603      	mov	r3, r0
 8005926:	460c      	mov	r4, r1
 8005928:	461a      	mov	r2, r3
 800592a:	4b0c      	ldr	r3, [pc, #48]	; (800595c <UART_SetConfig+0x384>)
 800592c:	fba3 1302 	umull	r1, r3, r3, r2
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	2164      	movs	r1, #100	; 0x64
 8005934:	fb01 f303 	mul.w	r3, r1, r3
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	3332      	adds	r3, #50	; 0x32
 800593e:	4a07      	ldr	r2, [pc, #28]	; (800595c <UART_SetConfig+0x384>)
 8005940:	fba2 2303 	umull	r2, r3, r2, r3
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	f003 0207 	and.w	r2, r3, #7
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4442      	add	r2, r8
 8005950:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005952:	e1b2      	b.n	8005cba <UART_SetConfig+0x6e2>
 8005954:	40011000 	.word	0x40011000
 8005958:	40011400 	.word	0x40011400
 800595c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4ad7      	ldr	r2, [pc, #860]	; (8005cc4 <UART_SetConfig+0x6ec>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d005      	beq.n	8005976 <UART_SetConfig+0x39e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4ad6      	ldr	r2, [pc, #856]	; (8005cc8 <UART_SetConfig+0x6f0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	f040 80d1 	bne.w	8005b18 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005976:	f7ff fa61 	bl	8004e3c <HAL_RCC_GetPCLK2Freq>
 800597a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	469a      	mov	sl, r3
 8005980:	f04f 0b00 	mov.w	fp, #0
 8005984:	46d0      	mov	r8, sl
 8005986:	46d9      	mov	r9, fp
 8005988:	eb18 0308 	adds.w	r3, r8, r8
 800598c:	eb49 0409 	adc.w	r4, r9, r9
 8005990:	4698      	mov	r8, r3
 8005992:	46a1      	mov	r9, r4
 8005994:	eb18 080a 	adds.w	r8, r8, sl
 8005998:	eb49 090b 	adc.w	r9, r9, fp
 800599c:	f04f 0100 	mov.w	r1, #0
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059b0:	4688      	mov	r8, r1
 80059b2:	4691      	mov	r9, r2
 80059b4:	eb1a 0508 	adds.w	r5, sl, r8
 80059b8:	eb4b 0609 	adc.w	r6, fp, r9
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	4619      	mov	r1, r3
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	f04f 0400 	mov.w	r4, #0
 80059ce:	0094      	lsls	r4, r2, #2
 80059d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059d4:	008b      	lsls	r3, r1, #2
 80059d6:	461a      	mov	r2, r3
 80059d8:	4623      	mov	r3, r4
 80059da:	4628      	mov	r0, r5
 80059dc:	4631      	mov	r1, r6
 80059de:	f7fb f885 	bl	8000aec <__aeabi_uldivmod>
 80059e2:	4603      	mov	r3, r0
 80059e4:	460c      	mov	r4, r1
 80059e6:	461a      	mov	r2, r3
 80059e8:	4bb8      	ldr	r3, [pc, #736]	; (8005ccc <UART_SetConfig+0x6f4>)
 80059ea:	fba3 2302 	umull	r2, r3, r3, r2
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	469b      	mov	fp, r3
 80059f8:	f04f 0c00 	mov.w	ip, #0
 80059fc:	46d9      	mov	r9, fp
 80059fe:	46e2      	mov	sl, ip
 8005a00:	eb19 0309 	adds.w	r3, r9, r9
 8005a04:	eb4a 040a 	adc.w	r4, sl, sl
 8005a08:	4699      	mov	r9, r3
 8005a0a:	46a2      	mov	sl, r4
 8005a0c:	eb19 090b 	adds.w	r9, r9, fp
 8005a10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a28:	4689      	mov	r9, r1
 8005a2a:	4692      	mov	sl, r2
 8005a2c:	eb1b 0509 	adds.w	r5, fp, r9
 8005a30:	eb4c 060a 	adc.w	r6, ip, sl
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	f04f 0400 	mov.w	r4, #0
 8005a46:	0094      	lsls	r4, r2, #2
 8005a48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a4c:	008b      	lsls	r3, r1, #2
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4623      	mov	r3, r4
 8005a52:	4628      	mov	r0, r5
 8005a54:	4631      	mov	r1, r6
 8005a56:	f7fb f849 	bl	8000aec <__aeabi_uldivmod>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4b9a      	ldr	r3, [pc, #616]	; (8005ccc <UART_SetConfig+0x6f4>)
 8005a62:	fba3 1302 	umull	r1, r3, r3, r2
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	2164      	movs	r1, #100	; 0x64
 8005a6a:	fb01 f303 	mul.w	r3, r1, r3
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	3332      	adds	r3, #50	; 0x32
 8005a74:	4a95      	ldr	r2, [pc, #596]	; (8005ccc <UART_SetConfig+0x6f4>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a80:	4498      	add	r8, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	469b      	mov	fp, r3
 8005a86:	f04f 0c00 	mov.w	ip, #0
 8005a8a:	46d9      	mov	r9, fp
 8005a8c:	46e2      	mov	sl, ip
 8005a8e:	eb19 0309 	adds.w	r3, r9, r9
 8005a92:	eb4a 040a 	adc.w	r4, sl, sl
 8005a96:	4699      	mov	r9, r3
 8005a98:	46a2      	mov	sl, r4
 8005a9a:	eb19 090b 	adds.w	r9, r9, fp
 8005a9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005aa2:	f04f 0100 	mov.w	r1, #0
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ab2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ab6:	4689      	mov	r9, r1
 8005ab8:	4692      	mov	sl, r2
 8005aba:	eb1b 0509 	adds.w	r5, fp, r9
 8005abe:	eb4c 060a 	adc.w	r6, ip, sl
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	f04f 0400 	mov.w	r4, #0
 8005ad4:	0094      	lsls	r4, r2, #2
 8005ad6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ada:	008b      	lsls	r3, r1, #2
 8005adc:	461a      	mov	r2, r3
 8005ade:	4623      	mov	r3, r4
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	f7fb f802 	bl	8000aec <__aeabi_uldivmod>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	461a      	mov	r2, r3
 8005aee:	4b77      	ldr	r3, [pc, #476]	; (8005ccc <UART_SetConfig+0x6f4>)
 8005af0:	fba3 1302 	umull	r1, r3, r3, r2
 8005af4:	095b      	lsrs	r3, r3, #5
 8005af6:	2164      	movs	r1, #100	; 0x64
 8005af8:	fb01 f303 	mul.w	r3, r1, r3
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	3332      	adds	r3, #50	; 0x32
 8005b02:	4a72      	ldr	r2, [pc, #456]	; (8005ccc <UART_SetConfig+0x6f4>)
 8005b04:	fba2 2303 	umull	r2, r3, r2, r3
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	f003 020f 	and.w	r2, r3, #15
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4442      	add	r2, r8
 8005b14:	609a      	str	r2, [r3, #8]
 8005b16:	e0d0      	b.n	8005cba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b18:	f7ff f97c 	bl	8004e14 <HAL_RCC_GetPCLK1Freq>
 8005b1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	469a      	mov	sl, r3
 8005b22:	f04f 0b00 	mov.w	fp, #0
 8005b26:	46d0      	mov	r8, sl
 8005b28:	46d9      	mov	r9, fp
 8005b2a:	eb18 0308 	adds.w	r3, r8, r8
 8005b2e:	eb49 0409 	adc.w	r4, r9, r9
 8005b32:	4698      	mov	r8, r3
 8005b34:	46a1      	mov	r9, r4
 8005b36:	eb18 080a 	adds.w	r8, r8, sl
 8005b3a:	eb49 090b 	adc.w	r9, r9, fp
 8005b3e:	f04f 0100 	mov.w	r1, #0
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b52:	4688      	mov	r8, r1
 8005b54:	4691      	mov	r9, r2
 8005b56:	eb1a 0508 	adds.w	r5, sl, r8
 8005b5a:	eb4b 0609 	adc.w	r6, fp, r9
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4619      	mov	r1, r3
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	f04f 0400 	mov.w	r4, #0
 8005b70:	0094      	lsls	r4, r2, #2
 8005b72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b76:	008b      	lsls	r3, r1, #2
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4623      	mov	r3, r4
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	4631      	mov	r1, r6
 8005b80:	f7fa ffb4 	bl	8000aec <__aeabi_uldivmod>
 8005b84:	4603      	mov	r3, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4b50      	ldr	r3, [pc, #320]	; (8005ccc <UART_SetConfig+0x6f4>)
 8005b8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	469b      	mov	fp, r3
 8005b9a:	f04f 0c00 	mov.w	ip, #0
 8005b9e:	46d9      	mov	r9, fp
 8005ba0:	46e2      	mov	sl, ip
 8005ba2:	eb19 0309 	adds.w	r3, r9, r9
 8005ba6:	eb4a 040a 	adc.w	r4, sl, sl
 8005baa:	4699      	mov	r9, r3
 8005bac:	46a2      	mov	sl, r4
 8005bae:	eb19 090b 	adds.w	r9, r9, fp
 8005bb2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005bb6:	f04f 0100 	mov.w	r1, #0
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bca:	4689      	mov	r9, r1
 8005bcc:	4692      	mov	sl, r2
 8005bce:	eb1b 0509 	adds.w	r5, fp, r9
 8005bd2:	eb4c 060a 	adc.w	r6, ip, sl
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	f04f 0400 	mov.w	r4, #0
 8005be8:	0094      	lsls	r4, r2, #2
 8005bea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bee:	008b      	lsls	r3, r1, #2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4623      	mov	r3, r4
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	f7fa ff78 	bl	8000aec <__aeabi_uldivmod>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	460c      	mov	r4, r1
 8005c00:	461a      	mov	r2, r3
 8005c02:	4b32      	ldr	r3, [pc, #200]	; (8005ccc <UART_SetConfig+0x6f4>)
 8005c04:	fba3 1302 	umull	r1, r3, r3, r2
 8005c08:	095b      	lsrs	r3, r3, #5
 8005c0a:	2164      	movs	r1, #100	; 0x64
 8005c0c:	fb01 f303 	mul.w	r3, r1, r3
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	3332      	adds	r3, #50	; 0x32
 8005c16:	4a2d      	ldr	r2, [pc, #180]	; (8005ccc <UART_SetConfig+0x6f4>)
 8005c18:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c22:	4498      	add	r8, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	469b      	mov	fp, r3
 8005c28:	f04f 0c00 	mov.w	ip, #0
 8005c2c:	46d9      	mov	r9, fp
 8005c2e:	46e2      	mov	sl, ip
 8005c30:	eb19 0309 	adds.w	r3, r9, r9
 8005c34:	eb4a 040a 	adc.w	r4, sl, sl
 8005c38:	4699      	mov	r9, r3
 8005c3a:	46a2      	mov	sl, r4
 8005c3c:	eb19 090b 	adds.w	r9, r9, fp
 8005c40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c44:	f04f 0100 	mov.w	r1, #0
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c58:	4689      	mov	r9, r1
 8005c5a:	4692      	mov	sl, r2
 8005c5c:	eb1b 0509 	adds.w	r5, fp, r9
 8005c60:	eb4c 060a 	adc.w	r6, ip, sl
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	f04f 0400 	mov.w	r4, #0
 8005c76:	0094      	lsls	r4, r2, #2
 8005c78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c7c:	008b      	lsls	r3, r1, #2
 8005c7e:	461a      	mov	r2, r3
 8005c80:	4623      	mov	r3, r4
 8005c82:	4628      	mov	r0, r5
 8005c84:	4631      	mov	r1, r6
 8005c86:	f7fa ff31 	bl	8000aec <__aeabi_uldivmod>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4b0e      	ldr	r3, [pc, #56]	; (8005ccc <UART_SetConfig+0x6f4>)
 8005c92:	fba3 1302 	umull	r1, r3, r3, r2
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	2164      	movs	r1, #100	; 0x64
 8005c9a:	fb01 f303 	mul.w	r3, r1, r3
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	3332      	adds	r3, #50	; 0x32
 8005ca4:	4a09      	ldr	r2, [pc, #36]	; (8005ccc <UART_SetConfig+0x6f4>)
 8005ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	f003 020f 	and.w	r2, r3, #15
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4442      	add	r2, r8
 8005cb6:	609a      	str	r2, [r3, #8]
}
 8005cb8:	e7ff      	b.n	8005cba <UART_SetConfig+0x6e2>
 8005cba:	bf00      	nop
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc4:	40011000 	.word	0x40011000
 8005cc8:	40011400 	.word	0x40011400
 8005ccc:	51eb851f 	.word	0x51eb851f

08005cd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	f107 001c 	add.w	r0, r7, #28
 8005cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d122      	bne.n	8005d2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d105      	bne.n	8005d22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f94a 	bl	8005fbc <USB_CoreReset>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	73fb      	strb	r3, [r7, #15]
 8005d2c:	e01a      	b.n	8005d64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f93e 	bl	8005fbc <USB_CoreReset>
 8005d40:	4603      	mov	r3, r0
 8005d42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38
 8005d56:	e005      	b.n	8005d64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d10b      	bne.n	8005d82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f043 0206 	orr.w	r2, r3, #6
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f043 0220 	orr.w	r2, r3, #32
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d8e:	b004      	add	sp, #16
 8005d90:	4770      	bx	lr

08005d92 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f043 0201 	orr.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f023 0201 	bic.w	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d106      	bne.n	8005e02 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60da      	str	r2, [r3, #12]
 8005e00:	e00b      	b.n	8005e1a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60da      	str	r2, [r3, #12]
 8005e14:	e001      	b.n	8005e1a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e003      	b.n	8005e22 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005e1a:	2032      	movs	r0, #50	; 0x32
 8005e1c:	f7fb fe0a 	bl	8001a34 <HAL_Delay>

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	019b      	lsls	r3, r3, #6
 8005e3e:	f043 0220 	orr.w	r2, r3, #32
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4a09      	ldr	r2, [pc, #36]	; (8005e74 <USB_FlushTxFifo+0x48>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d901      	bls.n	8005e58 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e006      	b.n	8005e66 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d0f0      	beq.n	8005e46 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	00030d40 	.word	0x00030d40

08005e78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2210      	movs	r2, #16
 8005e88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4a09      	ldr	r2, [pc, #36]	; (8005eb8 <USB_FlushRxFifo+0x40>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d901      	bls.n	8005e9c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e006      	b.n	8005eaa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d0f0      	beq.n	8005e8a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	00030d40 	.word	0x00030d40

08005ebc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b089      	sub	sp, #36	; 0x24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	461a      	mov	r2, r3
 8005eca:	460b      	mov	r3, r1
 8005ecc:	71fb      	strb	r3, [r7, #7]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005eda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d11a      	bne.n	8005f18 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ee2:	88bb      	ldrh	r3, [r7, #4]
 8005ee4:	3303      	adds	r3, #3
 8005ee6:	089b      	lsrs	r3, r3, #2
 8005ee8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005eea:	2300      	movs	r3, #0
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	e00f      	b.n	8005f10 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	031a      	lsls	r2, r3, #12
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005efc:	461a      	mov	r2, r3
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	3304      	adds	r3, #4
 8005f08:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	61bb      	str	r3, [r7, #24]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d3eb      	bcc.n	8005ef0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3724      	adds	r7, #36	; 0x24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b089      	sub	sp, #36	; 0x24
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	4613      	mov	r3, r2
 8005f32:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	3303      	adds	r3, #3
 8005f40:	089b      	lsrs	r3, r3, #2
 8005f42:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005f44:	2300      	movs	r3, #0
 8005f46:	61bb      	str	r3, [r7, #24]
 8005f48:	e00b      	b.n	8005f62 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d3ef      	bcc.n	8005f4a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005f6a:	69fb      	ldr	r3, [r7, #28]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3724      	adds	r7, #36	; 0x24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f90:	68fb      	ldr	r3, [r7, #12]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f003 0301 	and.w	r3, r3, #1
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
	...

08005fbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4a13      	ldr	r2, [pc, #76]	; (8006020 <USB_CoreReset+0x64>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e01b      	b.n	8006012 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	daf2      	bge.n	8005fc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f043 0201 	orr.w	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4a09      	ldr	r2, [pc, #36]	; (8006020 <USB_CoreReset+0x64>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d901      	bls.n	8006004 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e006      	b.n	8006012 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b01      	cmp	r3, #1
 800600e:	d0f0      	beq.n	8005ff2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	00030d40 	.word	0x00030d40

08006024 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006024:	b084      	sub	sp, #16
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	f107 001c 	add.w	r0, r7, #28
 8006032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006040:	461a      	mov	r2, r3
 8006042:	2300      	movs	r3, #0
 8006044:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006072:	2b00      	cmp	r3, #0
 8006074:	d018      	beq.n	80060a8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	2b01      	cmp	r3, #1
 800607a:	d10a      	bne.n	8006092 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800608a:	f043 0304 	orr.w	r3, r3, #4
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	e014      	b.n	80060bc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060a0:	f023 0304 	bic.w	r3, r3, #4
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	e009      	b.n	80060bc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060b6:	f023 0304 	bic.w	r3, r3, #4
 80060ba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80060bc:	2110      	movs	r1, #16
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff feb4 	bl	8005e2c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff fed7 	bl	8005e78 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	e015      	b.n	80060fc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060dc:	461a      	mov	r2, r3
 80060de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060e2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f0:	461a      	mov	r2, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3301      	adds	r3, #1
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	429a      	cmp	r2, r3
 8006102:	d3e5      	bcc.n	80060d0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006104:	2101      	movs	r1, #1
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f8ac 	bl	8006264 <USB_DriveVbus>

  HAL_Delay(200U);
 800610c:	20c8      	movs	r0, #200	; 0xc8
 800610e:	f7fb fc91 	bl	8001a34 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800611e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00b      	beq.n	8006144 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006132:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a14      	ldr	r2, [pc, #80]	; (8006188 <USB_HostInit+0x164>)
 8006138:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a13      	ldr	r2, [pc, #76]	; (800618c <USB_HostInit+0x168>)
 800613e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006142:	e009      	b.n	8006158 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2280      	movs	r2, #128	; 0x80
 8006148:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a10      	ldr	r2, [pc, #64]	; (8006190 <USB_HostInit+0x16c>)
 800614e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a10      	ldr	r2, [pc, #64]	; (8006194 <USB_HostInit+0x170>)
 8006154:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	2b00      	cmp	r3, #0
 800615c:	d105      	bne.n	800616a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f043 0210 	orr.w	r2, r3, #16
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <USB_HostInit+0x174>)
 8006170:	4313      	orrs	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006182:	b004      	add	sp, #16
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	01000200 	.word	0x01000200
 800618c:	00e00300 	.word	0x00e00300
 8006190:	00600080 	.word	0x00600080
 8006194:	004000e0 	.word	0x004000e0
 8006198:	a3200008 	.word	0xa3200008

0800619c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061ba:	f023 0303 	bic.w	r3, r3, #3
 80061be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80061d4:	4313      	orrs	r3, r2
 80061d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d107      	bne.n	80061ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061e4:	461a      	mov	r2, r3
 80061e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80061ea:	6053      	str	r3, [r2, #4]
 80061ec:	e009      	b.n	8006202 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80061ee:	78fb      	ldrb	r3, [r7, #3]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d106      	bne.n	8006202 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061fa:	461a      	mov	r2, r3
 80061fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8006200:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006230:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800623a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800623e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006240:	2064      	movs	r0, #100	; 0x64
 8006242:	f7fb fbf7 	bl	8001a34 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800624e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006252:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006254:	200a      	movs	r0, #10
 8006256:	f7fb fbed 	bl	8001a34 <HAL_Delay>

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	460b      	mov	r3, r1
 800626e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006288:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d109      	bne.n	80062a8 <USB_DriveVbus+0x44>
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d106      	bne.n	80062a8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062a6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b2:	d109      	bne.n	80062c8 <USB_DriveVbus+0x64>
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	0c5b      	lsrs	r3, r3, #17
 80062f4:	f003 0303 	and.w	r3, r3, #3
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	b29b      	uxth	r3, r3
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	4608      	mov	r0, r1
 8006332:	4611      	mov	r1, r2
 8006334:	461a      	mov	r2, r3
 8006336:	4603      	mov	r3, r0
 8006338:	70fb      	strb	r3, [r7, #3]
 800633a:	460b      	mov	r3, r1
 800633c:	70bb      	strb	r3, [r7, #2]
 800633e:	4613      	mov	r3, r2
 8006340:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	4413      	add	r3, r2
 8006352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006356:	461a      	mov	r2, r3
 8006358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800635c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800635e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006362:	2b03      	cmp	r3, #3
 8006364:	d87e      	bhi.n	8006464 <USB_HC_Init+0x13c>
 8006366:	a201      	add	r2, pc, #4	; (adr r2, 800636c <USB_HC_Init+0x44>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	0800637d 	.word	0x0800637d
 8006370:	08006427 	.word	0x08006427
 8006374:	0800637d 	.word	0x0800637d
 8006378:	080063e9 	.word	0x080063e9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4413      	add	r3, r2
 8006384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006388:	461a      	mov	r2, r3
 800638a:	f240 439d 	movw	r3, #1181	; 0x49d
 800638e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006390:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006394:	2b00      	cmp	r3, #0
 8006396:	da10      	bge.n	80063ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	78fa      	ldrb	r2, [r7, #3]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80063b8:	e057      	b.n	800646a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d051      	beq.n	800646a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	78fa      	ldrb	r2, [r7, #3]
 80063d6:	0151      	lsls	r1, r2, #5
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	440a      	add	r2, r1
 80063dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80063e4:	60d3      	str	r3, [r2, #12]
      break;
 80063e6:	e040      	b.n	800646a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f4:	461a      	mov	r2, r3
 80063f6:	f240 639d 	movw	r3, #1693	; 0x69d
 80063fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006400:	2b00      	cmp	r3, #0
 8006402:	da34      	bge.n	800646e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4413      	add	r3, r2
 800640c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	78fa      	ldrb	r2, [r7, #3]
 8006414:	0151      	lsls	r1, r2, #5
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	440a      	add	r2, r1
 800641a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800641e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006422:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006424:	e023      	b.n	800646e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4413      	add	r3, r2
 800642e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006432:	461a      	mov	r2, r3
 8006434:	f240 2325 	movw	r3, #549	; 0x225
 8006438:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800643a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800643e:	2b00      	cmp	r3, #0
 8006440:	da17      	bge.n	8006472 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4413      	add	r3, r2
 800644a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	78fa      	ldrb	r2, [r7, #3]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	440a      	add	r2, r1
 8006458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800645c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006460:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006462:	e006      	b.n	8006472 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	75fb      	strb	r3, [r7, #23]
      break;
 8006468:	e004      	b.n	8006474 <USB_HC_Init+0x14c>
      break;
 800646a:	bf00      	nop
 800646c:	e002      	b.n	8006474 <USB_HC_Init+0x14c>
      break;
 800646e:	bf00      	nop
 8006470:	e000      	b.n	8006474 <USB_HC_Init+0x14c>
      break;
 8006472:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800647a:	699a      	ldr	r2, [r3, #24]
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	2101      	movs	r1, #1
 8006484:	fa01 f303 	lsl.w	r3, r1, r3
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800648e:	4313      	orrs	r3, r2
 8006490:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800649e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	da03      	bge.n	80064ae <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80064a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	e001      	b.n	80064b2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80064b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d103      	bne.n	80064c2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80064ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e001      	b.n	80064c6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064c6:	787b      	ldrb	r3, [r7, #1]
 80064c8:	059b      	lsls	r3, r3, #22
 80064ca:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064ce:	78bb      	ldrb	r3, [r7, #2]
 80064d0:	02db      	lsls	r3, r3, #11
 80064d2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064dc:	049b      	lsls	r3, r3, #18
 80064de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064ea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	0159      	lsls	r1, r3, #5
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	440b      	add	r3, r1
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006502:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006504:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006508:	2b03      	cmp	r3, #3
 800650a:	d10f      	bne.n	800652c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4413      	add	r3, r2
 8006514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	78fa      	ldrb	r2, [r7, #3]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	440a      	add	r2, r1
 8006522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800652a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800652c:	7dfb      	ldrb	r3, [r7, #23]
}
 800652e:	4618      	mov	r0, r3
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop

0800653c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08c      	sub	sp, #48	; 0x30
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	4613      	mov	r3, r2
 8006548:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006558:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	d028      	beq.n	80065b8 <USB_HC_StartXfer+0x7c>
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	791b      	ldrb	r3, [r3, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d124      	bne.n	80065b8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800656e:	79fb      	ldrb	r3, [r7, #7]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10b      	bne.n	800658c <USB_HC_StartXfer+0x50>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	795b      	ldrb	r3, [r3, #5]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d107      	bne.n	800658c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	785b      	ldrb	r3, [r3, #1]
 8006580:	4619      	mov	r1, r3
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 fa30 	bl	80069e8 <USB_DoPing>
      return HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	e114      	b.n	80067b6 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800658c:	79fb      	ldrb	r3, [r7, #7]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d112      	bne.n	80065b8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	6a3a      	ldr	r2, [r7, #32]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ac:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80065b0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2200      	movs	r2, #0
 80065b6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d018      	beq.n	80065f2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	8912      	ldrh	r2, [r2, #8]
 80065c8:	4413      	add	r3, r2
 80065ca:	3b01      	subs	r3, #1
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	8912      	ldrh	r2, [r2, #8]
 80065d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80065d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80065d8:	8b7b      	ldrh	r3, [r7, #26]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d90b      	bls.n	80065f6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80065de:	8b7b      	ldrh	r3, [r7, #26]
 80065e0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80065e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	8912      	ldrh	r2, [r2, #8]
 80065e8:	fb02 f203 	mul.w	r2, r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	611a      	str	r2, [r3, #16]
 80065f0:	e001      	b.n	80065f6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80065f2:	2301      	movs	r3, #1
 80065f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	78db      	ldrb	r3, [r3, #3]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d006      	beq.n	800660c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80065fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	8912      	ldrh	r2, [r2, #8]
 8006604:	fb02 f203 	mul.w	r2, r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006616:	04d9      	lsls	r1, r3, #19
 8006618:	4b69      	ldr	r3, [pc, #420]	; (80067c0 <USB_HC_StartXfer+0x284>)
 800661a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800661c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	7a9b      	ldrb	r3, [r3, #10]
 8006622:	075b      	lsls	r3, r3, #29
 8006624:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006628:	69f9      	ldr	r1, [r7, #28]
 800662a:	0148      	lsls	r0, r1, #5
 800662c:	6a39      	ldr	r1, [r7, #32]
 800662e:	4401      	add	r1, r0
 8006630:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006634:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006636:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	68d9      	ldr	r1, [r3, #12]
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	460a      	mov	r2, r1
 8006650:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	bf0c      	ite	eq
 8006662:	2301      	moveq	r3, #1
 8006664:	2300      	movne	r3, #0
 8006666:	b2db      	uxtb	r3, r3
 8006668:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	4413      	add	r3, r2
 8006672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	0151      	lsls	r1, r2, #5
 800667c:	6a3a      	ldr	r2, [r7, #32]
 800667e:	440a      	add	r2, r1
 8006680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006684:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006688:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	7e7b      	ldrb	r3, [r7, #25]
 800669a:	075b      	lsls	r3, r3, #29
 800669c:	69f9      	ldr	r1, [r7, #28]
 800669e:	0148      	lsls	r0, r1, #5
 80066a0:	6a39      	ldr	r1, [r7, #32]
 80066a2:	4401      	add	r1, r0
 80066a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80066a8:	4313      	orrs	r3, r2
 80066aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a42      	ldr	r2, [pc, #264]	; (80067c4 <USB_HC_StartXfer+0x288>)
 80066bc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066be:	4b41      	ldr	r3, [pc, #260]	; (80067c4 <USB_HC_StartXfer+0x288>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066c6:	4a3f      	ldr	r2, [pc, #252]	; (80067c4 <USB_HC_StartXfer+0x288>)
 80066c8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	78db      	ldrb	r3, [r3, #3]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d006      	beq.n	80066e0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066d2:	4b3c      	ldr	r3, [pc, #240]	; (80067c4 <USB_HC_StartXfer+0x288>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066da:	4a3a      	ldr	r2, [pc, #232]	; (80067c4 <USB_HC_StartXfer+0x288>)
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e005      	b.n	80066ec <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066e0:	4b38      	ldr	r3, [pc, #224]	; (80067c4 <USB_HC_StartXfer+0x288>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066e8:	4a36      	ldr	r2, [pc, #216]	; (80067c4 <USB_HC_StartXfer+0x288>)
 80066ea:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066ec:	4b35      	ldr	r3, [pc, #212]	; (80067c4 <USB_HC_StartXfer+0x288>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066f4:	4a33      	ldr	r2, [pc, #204]	; (80067c4 <USB_HC_StartXfer+0x288>)
 80066f6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006704:	461a      	mov	r2, r3
 8006706:	4b2f      	ldr	r3, [pc, #188]	; (80067c4 <USB_HC_StartXfer+0x288>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	e04f      	b.n	80067b6 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	78db      	ldrb	r3, [r3, #3]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d14a      	bne.n	80067b4 <USB_HC_StartXfer+0x278>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d046      	beq.n	80067b4 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	79db      	ldrb	r3, [r3, #7]
 800672a:	2b03      	cmp	r3, #3
 800672c:	d830      	bhi.n	8006790 <USB_HC_StartXfer+0x254>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <USB_HC_StartXfer+0x1f8>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006745 	.word	0x08006745
 8006738:	08006769 	.word	0x08006769
 800673c:	08006745 	.word	0x08006745
 8006740:	08006769 	.word	0x08006769
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	3303      	adds	r3, #3
 800674a:	089b      	lsrs	r3, r3, #2
 800674c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800674e:	8afa      	ldrh	r2, [r7, #22]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	b29b      	uxth	r3, r3
 8006756:	429a      	cmp	r2, r3
 8006758:	d91c      	bls.n	8006794 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f043 0220 	orr.w	r2, r3, #32
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	619a      	str	r2, [r3, #24]
        }
        break;
 8006766:	e015      	b.n	8006794 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	3303      	adds	r3, #3
 800676e:	089b      	lsrs	r3, r3, #2
 8006770:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006772:	8afa      	ldrh	r2, [r7, #22]
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	b29b      	uxth	r3, r3
 800677e:	429a      	cmp	r2, r3
 8006780:	d90a      	bls.n	8006798 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	619a      	str	r2, [r3, #24]
        }
        break;
 800678e:	e003      	b.n	8006798 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006790:	bf00      	nop
 8006792:	e002      	b.n	800679a <USB_HC_StartXfer+0x25e>
        break;
 8006794:	bf00      	nop
 8006796:	e000      	b.n	800679a <USB_HC_StartXfer+0x25e>
        break;
 8006798:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	68d9      	ldr	r1, [r3, #12]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	785a      	ldrb	r2, [r3, #1]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	b298      	uxth	r0, r3
 80067a8:	2300      	movs	r3, #0
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	4603      	mov	r3, r0
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff fb84 	bl	8005ebc <USB_WritePacket>
  }

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3728      	adds	r7, #40	; 0x28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	1ff80000 	.word	0x1ff80000
 80067c4:	200000b4 	.word	0x200000b4

080067c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	b29b      	uxth	r3, r3
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b087      	sub	sp, #28
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	4413      	add	r3, r2
 800680a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	0c9b      	lsrs	r3, r3, #18
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <USB_HC_Halt+0x3a>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d16c      	bne.n	80068fe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	0151      	lsls	r1, r2, #5
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	440a      	add	r2, r1
 800683a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800683e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006842:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d143      	bne.n	80068d8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	440a      	add	r2, r1
 8006866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800686a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800686e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	4413      	add	r3, r2
 8006878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	440a      	add	r2, r1
 8006886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800688a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800688e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	4413      	add	r3, r2
 8006898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	0151      	lsls	r1, r2, #5
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	440a      	add	r2, r1
 80068a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068ae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	3301      	adds	r3, #1
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068bc:	d81d      	bhi.n	80068fa <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068d4:	d0ec      	beq.n	80068b0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068d6:	e080      	b.n	80069da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	0151      	lsls	r1, r2, #5
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	440a      	add	r2, r1
 80068ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068f6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068f8:	e06f      	b.n	80069da <USB_HC_Halt+0x1f0>
          break;
 80068fa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068fc:	e06d      	b.n	80069da <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	440a      	add	r2, r1
 8006914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800691c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d143      	bne.n	80069b6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	440a      	add	r2, r1
 8006944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800694c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	4413      	add	r3, r2
 8006956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	440a      	add	r2, r1
 8006964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800696c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	4413      	add	r3, r2
 8006976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	0151      	lsls	r1, r2, #5
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	440a      	add	r2, r1
 8006984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800698c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	3301      	adds	r3, #1
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800699a:	d81d      	bhi.n	80069d8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b2:	d0ec      	beq.n	800698e <USB_HC_Halt+0x1a4>
 80069b4:	e011      	b.n	80069da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	e000      	b.n	80069da <USB_HC_Halt+0x1f0>
          break;
 80069d8:	bf00      	nop
    }
  }

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80069fc:	2301      	movs	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	04da      	lsls	r2, r3, #19
 8006a04:	4b15      	ldr	r3, [pc, #84]	; (8006a5c <USB_DoPing+0x74>)
 8006a06:	4013      	ands	r3, r2
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a18:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a30:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a38:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a46:	461a      	mov	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	371c      	adds	r7, #28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	1ff80000 	.word	0x1ff80000

08006a60 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff f99f 	bl	8005db4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006a76:	2110      	movs	r1, #16
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff f9d7 	bl	8005e2c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff f9fa 	bl	8005e78 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a84:	2300      	movs	r3, #0
 8006a86:	613b      	str	r3, [r7, #16]
 8006a88:	e01f      	b.n	8006aca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aa8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ab0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2b0f      	cmp	r3, #15
 8006ace:	d9dc      	bls.n	8006a8a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	e034      	b.n	8006b40 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006afc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	3301      	adds	r3, #1
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b1c:	d80c      	bhi.n	8006b38 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b34:	d0ec      	beq.n	8006b10 <USB_StopHost+0xb0>
 8006b36:	e000      	b.n	8006b3a <USB_StopHost+0xda>
        break;
 8006b38:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b0f      	cmp	r3, #15
 8006b44:	d9c7      	bls.n	8006ad6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b52:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b5a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7ff f918 	bl	8005d92 <USB_EnableGlobalInt>

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006b6c:	b590      	push	{r4, r7, lr}
 8006b6e:	b089      	sub	sp, #36	; 0x24
 8006b70:	af04      	add	r7, sp, #16
 8006b72:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006b74:	2301      	movs	r3, #1
 8006b76:	2202      	movs	r2, #2
 8006b78:	2102      	movs	r1, #2
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fc68 	bl	8007450 <USBH_FindInterface>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	2bff      	cmp	r3, #255	; 0xff
 8006b88:	d002      	beq.n	8006b90 <USBH_CDC_InterfaceInit+0x24>
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d901      	bls.n	8006b94 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b90:	2302      	movs	r3, #2
 8006b92:	e13d      	b.n	8006e10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fc3d 	bl	8007418 <USBH_SelectInterface>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e131      	b.n	8006e10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006bb2:	2050      	movs	r0, #80	; 0x50
 8006bb4:	f002 fa04 	bl	8008fc0 <malloc>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e11f      	b.n	8006e10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006bd0:	2250      	movs	r2, #80	; 0x50
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	68b8      	ldr	r0, [r7, #8]
 8006bd6:	f002 fa03 	bl	8008fe0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	211a      	movs	r1, #26
 8006be0:	fb01 f303 	mul.w	r3, r1, r3
 8006be4:	4413      	add	r3, r2
 8006be6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	b25b      	sxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	da15      	bge.n	8006c1e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	211a      	movs	r1, #26
 8006bf8:	fb01 f303 	mul.w	r3, r1, r3
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c02:	781a      	ldrb	r2, [r3, #0]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	211a      	movs	r1, #26
 8006c0e:	fb01 f303 	mul.w	r3, r1, r3
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c18:	881a      	ldrh	r2, [r3, #0]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 fe36 	bl	8008896 <USBH_AllocPipe>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	7819      	ldrb	r1, [r3, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	7858      	ldrb	r0, [r3, #1]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	8952      	ldrh	r2, [r2, #10]
 8006c4a:	9202      	str	r2, [sp, #8]
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	9201      	str	r2, [sp, #4]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	4623      	mov	r3, r4
 8006c54:	4602      	mov	r2, r0
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fdee 	bl	8008838 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2200      	movs	r2, #0
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f002 f8fb 	bl	8008e60 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	210a      	movs	r1, #10
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fbed 	bl	8007450 <USBH_FindInterface>
 8006c76:	4603      	mov	r3, r0
 8006c78:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	2bff      	cmp	r3, #255	; 0xff
 8006c7e:	d002      	beq.n	8006c86 <USBH_CDC_InterfaceInit+0x11a>
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d901      	bls.n	8006c8a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c86:	2302      	movs	r3, #2
 8006c88:	e0c2      	b.n	8006e10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	211a      	movs	r1, #26
 8006c90:	fb01 f303 	mul.w	r3, r1, r3
 8006c94:	4413      	add	r3, r2
 8006c96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	b25b      	sxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	da16      	bge.n	8006cd0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	211a      	movs	r1, #26
 8006ca8:	fb01 f303 	mul.w	r3, r1, r3
 8006cac:	4413      	add	r3, r2
 8006cae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cb2:	781a      	ldrb	r2, [r3, #0]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	211a      	movs	r1, #26
 8006cbe:	fb01 f303 	mul.w	r3, r1, r3
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006cc8:	881a      	ldrh	r2, [r3, #0]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	835a      	strh	r2, [r3, #26]
 8006cce:	e015      	b.n	8006cfc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	211a      	movs	r1, #26
 8006cd6:	fb01 f303 	mul.w	r3, r1, r3
 8006cda:	4413      	add	r3, r2
 8006cdc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	211a      	movs	r1, #26
 8006cec:	fb01 f303 	mul.w	r3, r1, r3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006cf6:	881a      	ldrh	r2, [r3, #0]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	211a      	movs	r1, #26
 8006d02:	fb01 f303 	mul.w	r3, r1, r3
 8006d06:	4413      	add	r3, r2
 8006d08:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b25b      	sxtb	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	da16      	bge.n	8006d42 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	211a      	movs	r1, #26
 8006d1a:	fb01 f303 	mul.w	r3, r1, r3
 8006d1e:	4413      	add	r3, r2
 8006d20:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d24:	781a      	ldrb	r2, [r3, #0]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	211a      	movs	r1, #26
 8006d30:	fb01 f303 	mul.w	r3, r1, r3
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006d3a:	881a      	ldrh	r2, [r3, #0]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	835a      	strh	r2, [r3, #26]
 8006d40:	e015      	b.n	8006d6e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	211a      	movs	r1, #26
 8006d48:	fb01 f303 	mul.w	r3, r1, r3
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d52:	781a      	ldrb	r2, [r3, #0]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	211a      	movs	r1, #26
 8006d5e:	fb01 f303 	mul.w	r3, r1, r3
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006d68:	881a      	ldrh	r2, [r3, #0]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	7b9b      	ldrb	r3, [r3, #14]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 fd8e 	bl	8008896 <USBH_AllocPipe>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	7bdb      	ldrb	r3, [r3, #15]
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 fd84 	bl	8008896 <USBH_AllocPipe>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	461a      	mov	r2, r3
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	7b59      	ldrb	r1, [r3, #13]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	7b98      	ldrb	r0, [r3, #14]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	8b12      	ldrh	r2, [r2, #24]
 8006dae:	9202      	str	r2, [sp, #8]
 8006db0:	2202      	movs	r2, #2
 8006db2:	9201      	str	r2, [sp, #4]
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	4623      	mov	r3, r4
 8006db8:	4602      	mov	r2, r0
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 fd3c 	bl	8008838 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	7b19      	ldrb	r1, [r3, #12]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	7bd8      	ldrb	r0, [r3, #15]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	8b52      	ldrh	r2, [r2, #26]
 8006dd8:	9202      	str	r2, [sp, #8]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	9201      	str	r2, [sp, #4]
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	4623      	mov	r3, r4
 8006de2:	4602      	mov	r2, r0
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fd27 	bl	8008838 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	7b5b      	ldrb	r3, [r3, #13]
 8006df6:	2200      	movs	r2, #0
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f002 f830 	bl	8008e60 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	7b1b      	ldrb	r3, [r3, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f002 f829 	bl	8008e60 <USBH_LL_SetToggle>

  return USBH_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd90      	pop	{r4, r7, pc}

08006e18 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00e      	beq.n	8006e50 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fd1c 	bl	8008876 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fd47 	bl	80088d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	7b1b      	ldrb	r3, [r3, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00e      	beq.n	8006e76 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	7b1b      	ldrb	r3, [r3, #12]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fd09 	bl	8008876 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	7b1b      	ldrb	r3, [r3, #12]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 fd34 	bl	80088d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	7b5b      	ldrb	r3, [r3, #13]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00e      	beq.n	8006e9c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	7b5b      	ldrb	r3, [r3, #13]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 fcf6 	bl	8008876 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	7b5b      	ldrb	r3, [r3, #13]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 fd21 	bl	80088d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00b      	beq.n	8006ec0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f002 f88d 	bl	8008fd0 <free>
    phost->pActiveClass->pData = 0U;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3340      	adds	r3, #64	; 0x40
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f8b1 	bl	800704a <GetLineCoding>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006eec:	7afb      	ldrb	r3, [r7, #11]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d105      	bne.n	8006efe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ef8:	2102      	movs	r1, #2
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006efe:	7afb      	ldrb	r3, [r7, #11]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f10:	2301      	movs	r3, #1
 8006f12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d877      	bhi.n	800701c <USBH_CDC_Process+0x114>
 8006f2c:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <USBH_CDC_Process+0x2c>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	08006f49 	.word	0x08006f49
 8006f38:	08006f4f 	.word	0x08006f4f
 8006f3c:	08006f7f 	.word	0x08006f7f
 8006f40:	08006ff3 	.word	0x08006ff3
 8006f44:	08007001 	.word	0x08007001
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f4c:	e06d      	b.n	800702a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f897 	bl	8007088 <SetLineCoding>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f6c:	e058      	b.n	8007020 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d055      	beq.n	8007020 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2204      	movs	r2, #4
 8006f78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f7c:	e050      	b.n	8007020 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	3340      	adds	r3, #64	; 0x40
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f860 	bl	800704a <GetLineCoding>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d126      	bne.n	8006fe2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa6:	791b      	ldrb	r3, [r3, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d13b      	bne.n	8007024 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d133      	bne.n	8007024 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d12b      	bne.n	8007024 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d124      	bne.n	8007024 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f95a 	bl	8007294 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006fe0:	e020      	b.n	8007024 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d01d      	beq.n	8007024 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2204      	movs	r2, #4
 8006fec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ff0:	e018      	b.n	8007024 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f867 	bl	80070c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f8dc 	bl	80071b6 <CDC_ProcessReception>
      break;
 8006ffe:	e014      	b.n	800702a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007000:	2100      	movs	r1, #0
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 ffe5 	bl	8007fd2 <USBH_ClrFeature>
 8007008:	4603      	mov	r3, r0
 800700a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800701a:	e005      	b.n	8007028 <USBH_CDC_Process+0x120>

    default:
      break;
 800701c:	bf00      	nop
 800701e:	e004      	b.n	800702a <USBH_CDC_Process+0x122>
      break;
 8007020:	bf00      	nop
 8007022:	e002      	b.n	800702a <USBH_CDC_Process+0x122>
      break;
 8007024:	bf00      	nop
 8007026:	e000      	b.n	800702a <USBH_CDC_Process+0x122>
      break;
 8007028:	bf00      	nop

  }

  return status;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	22a1      	movs	r2, #161	; 0xa1
 8007058:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2221      	movs	r2, #33	; 0x21
 800705e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2207      	movs	r2, #7
 8007070:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2207      	movs	r2, #7
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f98a 	bl	8008392 <USBH_CtlReq>
 800707e:	4603      	mov	r3, r0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2221      	movs	r2, #33	; 0x21
 8007096:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2220      	movs	r2, #32
 800709c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2207      	movs	r2, #7
 80070ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2207      	movs	r2, #7
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 f96b 	bl	8008392 <USBH_CtlReq>
 80070bc:	4603      	mov	r3, r0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b086      	sub	sp, #24
 80070ca:	af02      	add	r7, sp, #8
 80070cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070d8:	2300      	movs	r3, #0
 80070da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d002      	beq.n	80070ec <CDC_ProcessTransmission+0x26>
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d025      	beq.n	8007136 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80070ea:	e060      	b.n	80071ae <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	8b12      	ldrh	r2, [r2, #24]
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d90c      	bls.n	8007112 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	69d9      	ldr	r1, [r3, #28]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8b1a      	ldrh	r2, [r3, #24]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	7b58      	ldrb	r0, [r3, #13]
 8007104:	2301      	movs	r3, #1
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	4603      	mov	r3, r0
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 fb51 	bl	80087b2 <USBH_BulkSendData>
 8007110:	e00c      	b.n	800712c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800711a:	b29a      	uxth	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	7b58      	ldrb	r0, [r3, #13]
 8007120:	2301      	movs	r3, #1
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	4603      	mov	r3, r0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fb43 	bl	80087b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007134:	e03b      	b.n	80071ae <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	7b5b      	ldrb	r3, [r3, #13]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fe65 	bl	8008e0c <USBH_LL_GetURBState>
 8007142:	4603      	mov	r3, r0
 8007144:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007146:	7afb      	ldrb	r3, [r7, #11]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d128      	bne.n	800719e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	8b12      	ldrh	r2, [r2, #24]
 8007154:	4293      	cmp	r3, r2
 8007156:	d90e      	bls.n	8007176 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	8b12      	ldrh	r2, [r2, #24]
 8007160:	1a9a      	subs	r2, r3, r2
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	8b12      	ldrh	r2, [r2, #24]
 800716e:	441a      	add	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	61da      	str	r2, [r3, #28]
 8007174:	e002      	b.n	800717c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	2b00      	cmp	r3, #0
 8007182:	d004      	beq.n	800718e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800718c:	e00e      	b.n	80071ac <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f868 	bl	800726c <USBH_CDC_TransmitCallback>
      break;
 800719c:	e006      	b.n	80071ac <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800719e:	7afb      	ldrb	r3, [r7, #11]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d103      	bne.n	80071ac <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80071ac:	bf00      	nop
  }
}
 80071ae:	bf00      	nop
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b086      	sub	sp, #24
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071c8:	2300      	movs	r3, #0
 80071ca:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d002      	beq.n	80071dc <CDC_ProcessReception+0x26>
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d00e      	beq.n	80071f8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80071da:	e043      	b.n	8007264 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	6a19      	ldr	r1, [r3, #32]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	8b5a      	ldrh	r2, [r3, #26]
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	7b1b      	ldrb	r3, [r3, #12]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fb07 	bl	80087fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2204      	movs	r2, #4
 80071f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80071f6:	e035      	b.n	8007264 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	7b1b      	ldrb	r3, [r3, #12]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 fe04 	bl	8008e0c <USBH_LL_GetURBState>
 8007204:	4603      	mov	r3, r0
 8007206:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007208:	7cfb      	ldrb	r3, [r7, #19]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d129      	bne.n	8007262 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	7b1b      	ldrb	r3, [r3, #12]
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 fd67 	bl	8008ce8 <USBH_LL_GetLastXferSize>
 800721a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	429a      	cmp	r2, r3
 8007224:	d016      	beq.n	8007254 <CDC_ProcessReception+0x9e>
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	8b5b      	ldrh	r3, [r3, #26]
 800722a:	461a      	mov	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4293      	cmp	r3, r2
 8007230:	d910      	bls.n	8007254 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	1ad2      	subs	r2, r2, r3
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	6a1a      	ldr	r2, [r3, #32]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	441a      	add	r2, r3
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2203      	movs	r2, #3
 800724e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007252:	e006      	b.n	8007262 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f80f 	bl	8007280 <USBH_CDC_ReceiveCallback>
      break;
 8007262:	bf00      	nop
  }
}
 8007264:	bf00      	nop
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80072bc:	2302      	movs	r3, #2
 80072be:	e029      	b.n	8007314 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	79fa      	ldrb	r2, [r7, #7]
 80072c4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f81f 	bl	800731c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f001 fc39 	bl	8008b84 <USBH_LL_Init>

  return USBH_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	e009      	b.n	8007342 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	33e0      	adds	r3, #224	; 0xe0
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	2200      	movs	r2, #0
 800733a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3301      	adds	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b0e      	cmp	r3, #14
 8007346:	d9f2      	bls.n	800732e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	e009      	b.n	8007362 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4413      	add	r3, r2
 8007354:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007358:	2200      	movs	r2, #0
 800735a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007368:	d3f1      	bcc.n	800734e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2240      	movs	r2, #64	; 0x40
 800738e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d016      	beq.n	8007406 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10e      	bne.n	8007400 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073e8:	1c59      	adds	r1, r3, #1
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	33de      	adds	r3, #222	; 0xde
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]
 80073fe:	e004      	b.n	800740a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007400:	2302      	movs	r3, #2
 8007402:	73fb      	strb	r3, [r7, #15]
 8007404:	e001      	b.n	800740a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007406:	2302      	movs	r3, #2
 8007408:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800740a:	7bfb      	ldrb	r3, [r7, #15]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800742e:	78fa      	ldrb	r2, [r7, #3]
 8007430:	429a      	cmp	r2, r3
 8007432:	d204      	bcs.n	800743e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	78fa      	ldrb	r2, [r7, #3]
 8007438:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800743c:	e001      	b.n	8007442 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800743e:	2302      	movs	r3, #2
 8007440:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	4608      	mov	r0, r1
 800745a:	4611      	mov	r1, r2
 800745c:	461a      	mov	r2, r3
 800745e:	4603      	mov	r3, r0
 8007460:	70fb      	strb	r3, [r7, #3]
 8007462:	460b      	mov	r3, r1
 8007464:	70bb      	strb	r3, [r7, #2]
 8007466:	4613      	mov	r3, r2
 8007468:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800746e:	2300      	movs	r3, #0
 8007470:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007478:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800747a:	e025      	b.n	80074c8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	221a      	movs	r2, #26
 8007480:	fb02 f303 	mul.w	r3, r2, r3
 8007484:	3308      	adds	r3, #8
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	4413      	add	r3, r2
 800748a:	3302      	adds	r3, #2
 800748c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	795b      	ldrb	r3, [r3, #5]
 8007492:	78fa      	ldrb	r2, [r7, #3]
 8007494:	429a      	cmp	r2, r3
 8007496:	d002      	beq.n	800749e <USBH_FindInterface+0x4e>
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	2bff      	cmp	r3, #255	; 0xff
 800749c:	d111      	bne.n	80074c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80074a2:	78ba      	ldrb	r2, [r7, #2]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d002      	beq.n	80074ae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80074a8:	78bb      	ldrb	r3, [r7, #2]
 80074aa:	2bff      	cmp	r3, #255	; 0xff
 80074ac:	d109      	bne.n	80074c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80074b2:	787a      	ldrb	r2, [r7, #1]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d002      	beq.n	80074be <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074b8:	787b      	ldrb	r3, [r7, #1]
 80074ba:	2bff      	cmp	r3, #255	; 0xff
 80074bc:	d101      	bne.n	80074c2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	e006      	b.n	80074d0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	3301      	adds	r3, #1
 80074c6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d9d6      	bls.n	800747c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80074ce:	23ff      	movs	r3, #255	; 0xff
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 fb89 	bl	8008bfc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80074ea:	2101      	movs	r1, #1
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 fca0 	bl	8008e32 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af04      	add	r7, sp, #16
 8007502:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007504:	2302      	movs	r3, #2
 8007506:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b01      	cmp	r3, #1
 8007516:	d102      	bne.n	800751e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2203      	movs	r2, #3
 800751c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b0b      	cmp	r3, #11
 8007526:	f200 81b3 	bhi.w	8007890 <USBH_Process+0x394>
 800752a:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <USBH_Process+0x34>)
 800752c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007530:	08007561 	.word	0x08007561
 8007534:	08007593 	.word	0x08007593
 8007538:	080075fb 	.word	0x080075fb
 800753c:	0800782b 	.word	0x0800782b
 8007540:	08007891 	.word	0x08007891
 8007544:	0800769f 	.word	0x0800769f
 8007548:	080077d1 	.word	0x080077d1
 800754c:	080076d5 	.word	0x080076d5
 8007550:	080076f5 	.word	0x080076f5
 8007554:	08007715 	.word	0x08007715
 8007558:	08007743 	.word	0x08007743
 800755c:	08007813 	.word	0x08007813
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 8193 	beq.w	8007894 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007574:	20c8      	movs	r0, #200	; 0xc8
 8007576:	f001 fca6 	bl	8008ec6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 fb99 	bl	8008cb2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007590:	e180      	b.n	8007894 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007598:	2b01      	cmp	r3, #1
 800759a:	d107      	bne.n	80075ac <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075aa:	e182      	b.n	80078b2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80075b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075b6:	d914      	bls.n	80075e2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80075be:	3301      	adds	r3, #1
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d903      	bls.n	80075da <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	220d      	movs	r2, #13
 80075d6:	701a      	strb	r2, [r3, #0]
      break;
 80075d8:	e16b      	b.n	80078b2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	701a      	strb	r2, [r3, #0]
      break;
 80075e0:	e167      	b.n	80078b2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80075e8:	f103 020a 	add.w	r2, r3, #10
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80075f2:	200a      	movs	r0, #10
 80075f4:	f001 fc67 	bl	8008ec6 <USBH_Delay>
      break;
 80075f8:	e15b      	b.n	80078b2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800760a:	2104      	movs	r1, #4
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007610:	2064      	movs	r0, #100	; 0x64
 8007612:	f001 fc58 	bl	8008ec6 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f001 fb26 	bl	8008c68 <USBH_LL_GetSpeed>
 800761c:	4603      	mov	r3, r0
 800761e:	461a      	mov	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2205      	movs	r2, #5
 800762a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800762c:	2100      	movs	r1, #0
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 f931 	bl	8008896 <USBH_AllocPipe>
 8007634:	4603      	mov	r3, r0
 8007636:	461a      	mov	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800763c:	2180      	movs	r1, #128	; 0x80
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 f929 	bl	8008896 <USBH_AllocPipe>
 8007644:	4603      	mov	r3, r0
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	7919      	ldrb	r1, [r3, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007660:	b292      	uxth	r2, r2
 8007662:	9202      	str	r2, [sp, #8]
 8007664:	2200      	movs	r2, #0
 8007666:	9201      	str	r2, [sp, #4]
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	4603      	mov	r3, r0
 800766c:	2280      	movs	r2, #128	; 0x80
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 f8e2 	bl	8008838 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	7959      	ldrb	r1, [r3, #5]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007688:	b292      	uxth	r2, r2
 800768a:	9202      	str	r2, [sp, #8]
 800768c:	2200      	movs	r2, #0
 800768e:	9201      	str	r2, [sp, #4]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	4603      	mov	r3, r0
 8007694:	2200      	movs	r2, #0
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 f8ce 	bl	8008838 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800769c:	e109      	b.n	80078b2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f90c 	bl	80078bc <USBH_HandleEnum>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f040 80f3 	bne.w	8007898 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d103      	bne.n	80076cc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2208      	movs	r2, #8
 80076c8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80076ca:	e0e5      	b.n	8007898 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2207      	movs	r2, #7
 80076d0:	701a      	strb	r2, [r3, #0]
      break;
 80076d2:	e0e1      	b.n	8007898 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 80de 	beq.w	800789c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076e6:	2101      	movs	r1, #1
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2208      	movs	r2, #8
 80076f0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80076f2:	e0d3      	b.n	800789c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fc20 	bl	8007f44 <USBH_SetCfg>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	f040 80ca 	bne.w	80078a0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2209      	movs	r2, #9
 8007710:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007712:	e0c5      	b.n	80078a0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007722:	2101      	movs	r1, #1
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fc30 	bl	8007f8a <USBH_SetFeature>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	f040 80b9 	bne.w	80078a4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	220a      	movs	r2, #10
 8007736:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007738:	e0b4      	b.n	80078a4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	220a      	movs	r2, #10
 800773e:	701a      	strb	r2, [r3, #0]
      break;
 8007740:	e0b0      	b.n	80078a4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 80ad 	beq.w	80078a8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]
 800775a:	e016      	b.n	800778a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800775c:	7bfa      	ldrb	r2, [r7, #15]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	32de      	adds	r2, #222	; 0xde
 8007762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007766:	791a      	ldrb	r2, [r3, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800776e:	429a      	cmp	r2, r3
 8007770:	d108      	bne.n	8007784 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007772:	7bfa      	ldrb	r2, [r7, #15]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	32de      	adds	r2, #222	; 0xde
 8007778:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007782:	e005      	b.n	8007790 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	3301      	adds	r3, #1
 8007788:	73fb      	strb	r3, [r7, #15]
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0e5      	beq.n	800775c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d016      	beq.n	80077c8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d109      	bne.n	80077c0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2206      	movs	r2, #6
 80077b0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077b8:	2103      	movs	r1, #3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077be:	e073      	b.n	80078a8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	220d      	movs	r2, #13
 80077c4:	701a      	strb	r2, [r3, #0]
      break;
 80077c6:	e06f      	b.n	80078a8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	220d      	movs	r2, #13
 80077cc:	701a      	strb	r2, [r3, #0]
      break;
 80077ce:	e06b      	b.n	80078a8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d017      	beq.n	800780a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
 80077e6:	4603      	mov	r3, r0
 80077e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d103      	bne.n	80077fa <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	220b      	movs	r2, #11
 80077f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077f8:	e058      	b.n	80078ac <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d154      	bne.n	80078ac <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	220d      	movs	r2, #13
 8007806:	701a      	strb	r2, [r3, #0]
      break;
 8007808:	e050      	b.n	80078ac <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	220d      	movs	r2, #13
 800780e:	701a      	strb	r2, [r3, #0]
      break;
 8007810:	e04c      	b.n	80078ac <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007818:	2b00      	cmp	r3, #0
 800781a:	d049      	beq.n	80078b0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
      }
      break;
 8007828:	e042      	b.n	80078b0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff fd72 	bl	800731c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800783e:	2b00      	cmp	r3, #0
 8007840:	d009      	beq.n	8007856 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007866:	2105      	movs	r1, #5
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b01      	cmp	r3, #1
 8007876:	d107      	bne.n	8007888 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff fe2b 	bl	80074dc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007886:	e014      	b.n	80078b2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 f9b7 	bl	8008bfc <USBH_LL_Start>
      break;
 800788e:	e010      	b.n	80078b2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007890:	bf00      	nop
 8007892:	e00e      	b.n	80078b2 <USBH_Process+0x3b6>
      break;
 8007894:	bf00      	nop
 8007896:	e00c      	b.n	80078b2 <USBH_Process+0x3b6>
      break;
 8007898:	bf00      	nop
 800789a:	e00a      	b.n	80078b2 <USBH_Process+0x3b6>
    break;
 800789c:	bf00      	nop
 800789e:	e008      	b.n	80078b2 <USBH_Process+0x3b6>
      break;
 80078a0:	bf00      	nop
 80078a2:	e006      	b.n	80078b2 <USBH_Process+0x3b6>
      break;
 80078a4:	bf00      	nop
 80078a6:	e004      	b.n	80078b2 <USBH_Process+0x3b6>
      break;
 80078a8:	bf00      	nop
 80078aa:	e002      	b.n	80078b2 <USBH_Process+0x3b6>
      break;
 80078ac:	bf00      	nop
 80078ae:	e000      	b.n	80078b2 <USBH_Process+0x3b6>
      break;
 80078b0:	bf00      	nop
  }
  return USBH_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af04      	add	r7, sp, #16
 80078c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80078c4:	2301      	movs	r3, #1
 80078c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80078c8:	2301      	movs	r3, #1
 80078ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	785b      	ldrb	r3, [r3, #1]
 80078d0:	2b07      	cmp	r3, #7
 80078d2:	f200 81c1 	bhi.w	8007c58 <USBH_HandleEnum+0x39c>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <USBH_HandleEnum+0x20>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	080078fd 	.word	0x080078fd
 80078e0:	080079bb 	.word	0x080079bb
 80078e4:	08007a25 	.word	0x08007a25
 80078e8:	08007ab3 	.word	0x08007ab3
 80078ec:	08007b1d 	.word	0x08007b1d
 80078f0:	08007b8d 	.word	0x08007b8d
 80078f4:	08007bd3 	.word	0x08007bd3
 80078f8:	08007c19 	.word	0x08007c19
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80078fc:	2108      	movs	r1, #8
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa50 	bl	8007da4 <USBH_Get_DevDesc>
 8007904:	4603      	mov	r3, r0
 8007906:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d130      	bne.n	8007970 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	7919      	ldrb	r1, [r3, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007932:	b292      	uxth	r2, r2
 8007934:	9202      	str	r2, [sp, #8]
 8007936:	2200      	movs	r2, #0
 8007938:	9201      	str	r2, [sp, #4]
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4603      	mov	r3, r0
 800793e:	2280      	movs	r2, #128	; 0x80
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 ff79 	bl	8008838 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7959      	ldrb	r1, [r3, #5]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800795a:	b292      	uxth	r2, r2
 800795c:	9202      	str	r2, [sp, #8]
 800795e:	2200      	movs	r2, #0
 8007960:	9201      	str	r2, [sp, #4]
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	4603      	mov	r3, r0
 8007966:	2200      	movs	r2, #0
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 ff65 	bl	8008838 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800796e:	e175      	b.n	8007c5c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	2b03      	cmp	r3, #3
 8007974:	f040 8172 	bne.w	8007c5c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800797e:	3301      	adds	r3, #1
 8007980:	b2da      	uxtb	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800798e:	2b03      	cmp	r3, #3
 8007990:	d903      	bls.n	800799a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	220d      	movs	r2, #13
 8007996:	701a      	strb	r2, [r3, #0]
      break;
 8007998:	e160      	b.n	8007c5c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	795b      	ldrb	r3, [r3, #5]
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 ff99 	bl	80088d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	791b      	ldrb	r3, [r3, #4]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 ff93 	bl	80088d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	701a      	strb	r2, [r3, #0]
      break;
 80079b8:	e150      	b.n	8007c5c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80079ba:	2112      	movs	r1, #18
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f9f1 	bl	8007da4 <USBH_Get_DevDesc>
 80079c2:	4603      	mov	r3, r0
 80079c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d103      	bne.n	80079d4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079d2:	e145      	b.n	8007c60 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	f040 8142 	bne.w	8007c60 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079e2:	3301      	adds	r3, #1
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d903      	bls.n	80079fe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	220d      	movs	r2, #13
 80079fa:	701a      	strb	r2, [r3, #0]
      break;
 80079fc:	e130      	b.n	8007c60 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	795b      	ldrb	r3, [r3, #5]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 ff67 	bl	80088d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	791b      	ldrb	r3, [r3, #4]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 ff61 	bl	80088d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	701a      	strb	r2, [r3, #0]
      break;
 8007a22:	e11d      	b.n	8007c60 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a24:	2101      	movs	r1, #1
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa68 	bl	8007efc <USBH_SetAddress>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d132      	bne.n	8007a9c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007a36:	2002      	movs	r0, #2
 8007a38:	f001 fa45 	bl	8008ec6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2203      	movs	r2, #3
 8007a48:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	7919      	ldrb	r1, [r3, #4]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a5e:	b292      	uxth	r2, r2
 8007a60:	9202      	str	r2, [sp, #8]
 8007a62:	2200      	movs	r2, #0
 8007a64:	9201      	str	r2, [sp, #4]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2280      	movs	r2, #128	; 0x80
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fee3 	bl	8008838 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	7959      	ldrb	r1, [r3, #5]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a86:	b292      	uxth	r2, r2
 8007a88:	9202      	str	r2, [sp, #8]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	9201      	str	r2, [sp, #4]
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	4603      	mov	r3, r0
 8007a92:	2200      	movs	r2, #0
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fecf 	bl	8008838 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a9a:	e0e3      	b.n	8007c64 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	f040 80e0 	bne.w	8007c64 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	220d      	movs	r2, #13
 8007aa8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	705a      	strb	r2, [r3, #1]
      break;
 8007ab0:	e0d8      	b.n	8007c64 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007ab2:	2109      	movs	r1, #9
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f99d 	bl	8007df4 <USBH_Get_CfgDesc>
 8007aba:	4603      	mov	r3, r0
 8007abc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2204      	movs	r2, #4
 8007ac8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007aca:	e0cd      	b.n	8007c68 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	f040 80ca 	bne.w	8007c68 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ada:	3301      	adds	r3, #1
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d903      	bls.n	8007af6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	220d      	movs	r2, #13
 8007af2:	701a      	strb	r2, [r3, #0]
      break;
 8007af4:	e0b8      	b.n	8007c68 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	795b      	ldrb	r3, [r3, #5]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 feeb 	bl	80088d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	791b      	ldrb	r3, [r3, #4]
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fee5 	bl	80088d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
      break;
 8007b1a:	e0a5      	b.n	8007c68 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f965 	bl	8007df4 <USBH_Get_CfgDesc>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d103      	bne.n	8007b3c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2205      	movs	r2, #5
 8007b38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b3a:	e097      	b.n	8007c6c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	f040 8094 	bne.w	8007c6c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d903      	bls.n	8007b66 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	220d      	movs	r2, #13
 8007b62:	701a      	strb	r2, [r3, #0]
      break;
 8007b64:	e082      	b.n	8007c6c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	795b      	ldrb	r3, [r3, #5]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 feb3 	bl	80088d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	791b      	ldrb	r3, [r3, #4]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fead 	bl	80088d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	701a      	strb	r2, [r3, #0]
      break;
 8007b8a:	e06f      	b.n	8007c6c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d019      	beq.n	8007bca <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ba2:	23ff      	movs	r3, #255	; 0xff
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f949 	bl	8007e3c <USBH_Get_StringDesc>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d103      	bne.n	8007bbc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2206      	movs	r2, #6
 8007bb8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007bba:	e059      	b.n	8007c70 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d156      	bne.n	8007c70 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2206      	movs	r2, #6
 8007bc6:	705a      	strb	r2, [r3, #1]
      break;
 8007bc8:	e052      	b.n	8007c70 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2206      	movs	r2, #6
 8007bce:	705a      	strb	r2, [r3, #1]
      break;
 8007bd0:	e04e      	b.n	8007c70 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d019      	beq.n	8007c10 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007be8:	23ff      	movs	r3, #255	; 0xff
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f926 	bl	8007e3c <USBH_Get_StringDesc>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2207      	movs	r2, #7
 8007bfe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c00:	e038      	b.n	8007c74 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d135      	bne.n	8007c74 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2207      	movs	r2, #7
 8007c0c:	705a      	strb	r2, [r3, #1]
      break;
 8007c0e:	e031      	b.n	8007c74 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2207      	movs	r2, #7
 8007c14:	705a      	strb	r2, [r3, #1]
      break;
 8007c16:	e02d      	b.n	8007c74 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d017      	beq.n	8007c52 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c2e:	23ff      	movs	r3, #255	; 0xff
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f903 	bl	8007e3c <USBH_Get_StringDesc>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d102      	bne.n	8007c46 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007c44:	e018      	b.n	8007c78 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d115      	bne.n	8007c78 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c50:	e012      	b.n	8007c78 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]
      break;
 8007c56:	e00f      	b.n	8007c78 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007c58:	bf00      	nop
 8007c5a:	e00e      	b.n	8007c7a <USBH_HandleEnum+0x3be>
      break;
 8007c5c:	bf00      	nop
 8007c5e:	e00c      	b.n	8007c7a <USBH_HandleEnum+0x3be>
      break;
 8007c60:	bf00      	nop
 8007c62:	e00a      	b.n	8007c7a <USBH_HandleEnum+0x3be>
      break;
 8007c64:	bf00      	nop
 8007c66:	e008      	b.n	8007c7a <USBH_HandleEnum+0x3be>
      break;
 8007c68:	bf00      	nop
 8007c6a:	e006      	b.n	8007c7a <USBH_HandleEnum+0x3be>
      break;
 8007c6c:	bf00      	nop
 8007c6e:	e004      	b.n	8007c7a <USBH_HandleEnum+0x3be>
      break;
 8007c70:	bf00      	nop
 8007c72:	e002      	b.n	8007c7a <USBH_HandleEnum+0x3be>
      break;
 8007c74:	bf00      	nop
 8007c76:	e000      	b.n	8007c7a <USBH_HandleEnum+0x3be>
      break;
 8007c78:	bf00      	nop
  }
  return Status;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f804 	bl	8007cc6 <USBH_HandleSof>
}
 8007cbe:	bf00      	nop
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b0b      	cmp	r3, #11
 8007cd6:	d10a      	bne.n	8007cee <USBH_HandleSof+0x28>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	4798      	blx	r3
  }
}
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007d06:	bf00      	nop
}
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007d22:	bf00      	nop
}
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 ff58 	bl	8008c32 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	791b      	ldrb	r3, [r3, #4]
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fda5 	bl	80088d8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	795b      	ldrb	r3, [r3, #5]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fd9f 	bl	80088d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f864 	bl	8007e92 <USBH_GetDescriptor>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73fb      	strb	r3, [r7, #15]
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007de0:	78fa      	ldrb	r2, [r7, #3]
 8007de2:	b292      	uxth	r2, r2
 8007de4:	4619      	mov	r1, r3
 8007de6:	f000 f918 	bl	800801a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af02      	add	r7, sp, #8
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	331c      	adds	r3, #28
 8007e04:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007e06:	887b      	ldrh	r3, [r7, #2]
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e10:	2100      	movs	r1, #0
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f83d 	bl	8007e92 <USBH_GetDescriptor>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	72fb      	strb	r3, [r7, #11]
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d107      	bne.n	8007e32 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e28:	887a      	ldrh	r2, [r7, #2]
 8007e2a:	68f9      	ldr	r1, [r7, #12]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 f964 	bl	80080fa <USBH_ParseCfgDesc>
  }

  return status;
 8007e32:	7afb      	ldrb	r3, [r7, #11]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b088      	sub	sp, #32
 8007e40:	af02      	add	r7, sp, #8
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	607a      	str	r2, [r7, #4]
 8007e46:	461a      	mov	r2, r3
 8007e48:	460b      	mov	r3, r1
 8007e4a:	72fb      	strb	r3, [r7, #11]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007e50:	7afb      	ldrb	r3, [r7, #11]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007e58:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007e60:	893b      	ldrh	r3, [r7, #8]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	460b      	mov	r3, r1
 8007e66:	2100      	movs	r1, #0
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 f812 	bl	8007e92 <USBH_GetDescriptor>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75fb      	strb	r3, [r7, #23]
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d107      	bne.n	8007e88 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e7e:	893a      	ldrh	r2, [r7, #8]
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fa37 	bl	80082f6 <USBH_ParseStringDesc>
  }

  return status;
 8007e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	607b      	str	r3, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	72fb      	strb	r3, [r7, #11]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	789b      	ldrb	r3, [r3, #2]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d11c      	bne.n	8007ee6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007eac:	7afb      	ldrb	r3, [r7, #11]
 8007eae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2206      	movs	r2, #6
 8007ebc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	893a      	ldrh	r2, [r7, #8]
 8007ec2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ec4:	893b      	ldrh	r3, [r7, #8]
 8007ec6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ece:	d104      	bne.n	8007eda <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f240 4209 	movw	r2, #1033	; 0x409
 8007ed6:	829a      	strh	r2, [r3, #20]
 8007ed8:	e002      	b.n	8007ee0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	8b3a      	ldrh	r2, [r7, #24]
 8007ee4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ee6:	8b3b      	ldrh	r3, [r7, #24]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 fa50 	bl	8008392 <USBH_CtlReq>
 8007ef2:	4603      	mov	r3, r0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	789b      	ldrb	r3, [r3, #2]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d10f      	bne.n	8007f30 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2205      	movs	r2, #5
 8007f1a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007f30:	2200      	movs	r2, #0
 8007f32:	2100      	movs	r1, #0
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fa2c 	bl	8008392 <USBH_CtlReq>
 8007f3a:	4603      	mov	r3, r0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	789b      	ldrb	r3, [r3, #2]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d10e      	bne.n	8007f76 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2209      	movs	r2, #9
 8007f62:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	887a      	ldrh	r2, [r7, #2]
 8007f68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007f76:	2200      	movs	r2, #0
 8007f78:	2100      	movs	r1, #0
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fa09 	bl	8008392 <USBH_CtlReq>
 8007f80:	4603      	mov	r3, r0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	460b      	mov	r3, r1
 8007f94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	789b      	ldrb	r3, [r3, #2]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d10f      	bne.n	8007fbe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2203      	movs	r2, #3
 8007fa8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007faa:	78fb      	ldrb	r3, [r7, #3]
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f9e5 	bl	8008392 <USBH_CtlReq>
 8007fc8:	4603      	mov	r3, r0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b082      	sub	sp, #8
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	789b      	ldrb	r3, [r3, #2]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d10f      	bne.n	8008006 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008006:	2200      	movs	r2, #0
 8008008:	2100      	movs	r1, #0
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f9c1 	bl	8008392 <USBH_CtlReq>
 8008010:	4603      	mov	r3, r0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	4613      	mov	r3, r2
 8008026:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	781a      	ldrb	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	785a      	ldrb	r2, [r3, #1]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	3302      	adds	r3, #2
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b29a      	uxth	r2, r3
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	3303      	adds	r3, #3
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	b29b      	uxth	r3, r3
 8008048:	021b      	lsls	r3, r3, #8
 800804a:	b29b      	uxth	r3, r3
 800804c:	4313      	orrs	r3, r2
 800804e:	b29a      	uxth	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	791a      	ldrb	r2, [r3, #4]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	795a      	ldrb	r2, [r3, #5]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	799a      	ldrb	r2, [r3, #6]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	79da      	ldrb	r2, [r3, #7]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008074:	88fb      	ldrh	r3, [r7, #6]
 8008076:	2b08      	cmp	r3, #8
 8008078:	d939      	bls.n	80080ee <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	3308      	adds	r3, #8
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	b29a      	uxth	r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	3309      	adds	r3, #9
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	021b      	lsls	r3, r3, #8
 800808c:	b29b      	uxth	r3, r3
 800808e:	4313      	orrs	r3, r2
 8008090:	b29a      	uxth	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	330a      	adds	r3, #10
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	b29a      	uxth	r2, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	330b      	adds	r3, #11
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	021b      	lsls	r3, r3, #8
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	4313      	orrs	r3, r2
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	330c      	adds	r3, #12
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	330d      	adds	r3, #13
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	4313      	orrs	r3, r2
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	7b9a      	ldrb	r2, [r3, #14]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	7bda      	ldrb	r2, [r3, #15]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	7c1a      	ldrb	r2, [r3, #16]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	7c5a      	ldrb	r2, [r3, #17]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	745a      	strb	r2, [r3, #17]
  }
}
 80080ee:	bf00      	nop
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b08a      	sub	sp, #40	; 0x28
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	4613      	mov	r3, r2
 8008106:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	781a      	ldrb	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	785a      	ldrb	r2, [r3, #1]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	3302      	adds	r3, #2
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	b29a      	uxth	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	3303      	adds	r3, #3
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	b29b      	uxth	r3, r3
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	b29b      	uxth	r3, r3
 8008140:	4313      	orrs	r3, r2
 8008142:	b29a      	uxth	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	791a      	ldrb	r2, [r3, #4]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	795a      	ldrb	r2, [r3, #5]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	799a      	ldrb	r2, [r3, #6]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	79da      	ldrb	r2, [r3, #7]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	7a1a      	ldrb	r2, [r3, #8]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008170:	88fb      	ldrh	r3, [r7, #6]
 8008172:	2b09      	cmp	r3, #9
 8008174:	d95f      	bls.n	8008236 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008176:	2309      	movs	r3, #9
 8008178:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800817a:	2300      	movs	r3, #0
 800817c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800817e:	e051      	b.n	8008224 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008180:	f107 0316 	add.w	r3, r7, #22
 8008184:	4619      	mov	r1, r3
 8008186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008188:	f000 f8e8 	bl	800835c <USBH_GetNextDesc>
 800818c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	2b04      	cmp	r3, #4
 8008194:	d146      	bne.n	8008224 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800819a:	221a      	movs	r2, #26
 800819c:	fb02 f303 	mul.w	r3, r2, r3
 80081a0:	3308      	adds	r3, #8
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4413      	add	r3, r2
 80081a6:	3302      	adds	r3, #2
 80081a8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80081aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081ac:	69f8      	ldr	r0, [r7, #28]
 80081ae:	f000 f846 	bl	800823e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081bc:	e022      	b.n	8008204 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80081be:	f107 0316 	add.w	r3, r7, #22
 80081c2:	4619      	mov	r1, r3
 80081c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081c6:	f000 f8c9 	bl	800835c <USBH_GetNextDesc>
 80081ca:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	785b      	ldrb	r3, [r3, #1]
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	d117      	bne.n	8008204 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80081d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80081dc:	3201      	adds	r2, #1
 80081de:	00d2      	lsls	r2, r2, #3
 80081e0:	211a      	movs	r1, #26
 80081e2:	fb01 f303 	mul.w	r3, r1, r3
 80081e6:	4413      	add	r3, r2
 80081e8:	3308      	adds	r3, #8
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	4413      	add	r3, r2
 80081ee:	3304      	adds	r3, #4
 80081f0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80081f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081f4:	69b8      	ldr	r0, [r7, #24]
 80081f6:	f000 f851 	bl	800829c <USBH_ParseEPDesc>
            ep_ix++;
 80081fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80081fe:	3301      	adds	r3, #1
 8008200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	791b      	ldrb	r3, [r3, #4]
 8008208:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800820c:	429a      	cmp	r2, r3
 800820e:	d204      	bcs.n	800821a <USBH_ParseCfgDesc+0x120>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	885a      	ldrh	r2, [r3, #2]
 8008214:	8afb      	ldrh	r3, [r7, #22]
 8008216:	429a      	cmp	r2, r3
 8008218:	d8d1      	bhi.n	80081be <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800821a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800821e:	3301      	adds	r3, #1
 8008220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008228:	2b01      	cmp	r3, #1
 800822a:	d804      	bhi.n	8008236 <USBH_ParseCfgDesc+0x13c>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	885a      	ldrh	r2, [r3, #2]
 8008230:	8afb      	ldrh	r3, [r7, #22]
 8008232:	429a      	cmp	r2, r3
 8008234:	d8a4      	bhi.n	8008180 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008236:	bf00      	nop
 8008238:	3728      	adds	r7, #40	; 0x28
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800823e:	b480      	push	{r7}
 8008240:	b083      	sub	sp, #12
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781a      	ldrb	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	785a      	ldrb	r2, [r3, #1]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	789a      	ldrb	r2, [r3, #2]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	78da      	ldrb	r2, [r3, #3]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	791a      	ldrb	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	795a      	ldrb	r2, [r3, #5]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	799a      	ldrb	r2, [r3, #6]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	79da      	ldrb	r2, [r3, #7]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	7a1a      	ldrb	r2, [r3, #8]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	721a      	strb	r2, [r3, #8]
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781a      	ldrb	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	785a      	ldrb	r2, [r3, #1]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	789a      	ldrb	r2, [r3, #2]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	78da      	ldrb	r2, [r3, #3]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	3304      	adds	r3, #4
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	3305      	adds	r3, #5
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	b29b      	uxth	r3, r3
 80082da:	4313      	orrs	r3, r2
 80082dc:	b29a      	uxth	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	799a      	ldrb	r2, [r3, #6]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	719a      	strb	r2, [r3, #6]
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b087      	sub	sp, #28
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	4613      	mov	r3, r2
 8008302:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	3301      	adds	r3, #1
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	2b03      	cmp	r3, #3
 800830c:	d120      	bne.n	8008350 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	1e9a      	subs	r2, r3, #2
 8008314:	88fb      	ldrh	r3, [r7, #6]
 8008316:	4293      	cmp	r3, r2
 8008318:	bf28      	it	cs
 800831a:	4613      	movcs	r3, r2
 800831c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3302      	adds	r3, #2
 8008322:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008324:	2300      	movs	r3, #0
 8008326:	82fb      	strh	r3, [r7, #22]
 8008328:	e00b      	b.n	8008342 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800832a:	8afb      	ldrh	r3, [r7, #22]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	4413      	add	r3, r2
 8008330:	781a      	ldrb	r2, [r3, #0]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	3301      	adds	r3, #1
 800833a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800833c:	8afb      	ldrh	r3, [r7, #22]
 800833e:	3302      	adds	r3, #2
 8008340:	82fb      	strh	r3, [r7, #22]
 8008342:	8afa      	ldrh	r2, [r7, #22]
 8008344:	8abb      	ldrh	r3, [r7, #20]
 8008346:	429a      	cmp	r2, r3
 8008348:	d3ef      	bcc.n	800832a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2200      	movs	r2, #0
 800834e:	701a      	strb	r2, [r3, #0]
  }
}
 8008350:	bf00      	nop
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	881a      	ldrh	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	4413      	add	r3, r2
 8008372:	b29a      	uxth	r2, r3
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4413      	add	r3, r2
 8008382:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008384:	68fb      	ldr	r3, [r7, #12]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b086      	sub	sp, #24
 8008396:	af00      	add	r7, sp, #0
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	4613      	mov	r3, r2
 800839e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80083a0:	2301      	movs	r3, #1
 80083a2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	789b      	ldrb	r3, [r3, #2]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d002      	beq.n	80083b2 <USBH_CtlReq+0x20>
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d00f      	beq.n	80083d0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80083b0:	e027      	b.n	8008402 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	88fa      	ldrh	r2, [r7, #6]
 80083bc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2202      	movs	r2, #2
 80083c8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80083ca:	2301      	movs	r3, #1
 80083cc:	75fb      	strb	r3, [r7, #23]
      break;
 80083ce:	e018      	b.n	8008402 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 f81b 	bl	800840c <USBH_HandleControl>
 80083d6:	4603      	mov	r3, r0
 80083d8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <USBH_CtlReq+0x54>
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d106      	bne.n	80083f4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	761a      	strb	r2, [r3, #24]
      break;
 80083f2:	e005      	b.n	8008400 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d102      	bne.n	8008400 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2201      	movs	r2, #1
 80083fe:	709a      	strb	r2, [r3, #2]
      break;
 8008400:	bf00      	nop
  }
  return status;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af02      	add	r7, sp, #8
 8008412:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008414:	2301      	movs	r3, #1
 8008416:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008418:	2300      	movs	r3, #0
 800841a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	7e1b      	ldrb	r3, [r3, #24]
 8008420:	3b01      	subs	r3, #1
 8008422:	2b0a      	cmp	r3, #10
 8008424:	f200 8158 	bhi.w	80086d8 <USBH_HandleControl+0x2cc>
 8008428:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <USBH_HandleControl+0x24>)
 800842a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842e:	bf00      	nop
 8008430:	0800845d 	.word	0x0800845d
 8008434:	08008477 	.word	0x08008477
 8008438:	080084e1 	.word	0x080084e1
 800843c:	08008507 	.word	0x08008507
 8008440:	0800853f 	.word	0x0800853f
 8008444:	0800856b 	.word	0x0800856b
 8008448:	080085bd 	.word	0x080085bd
 800844c:	080085df 	.word	0x080085df
 8008450:	0800861b 	.word	0x0800861b
 8008454:	08008643 	.word	0x08008643
 8008458:	08008681 	.word	0x08008681
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f103 0110 	add.w	r1, r3, #16
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	795b      	ldrb	r3, [r3, #5]
 8008466:	461a      	mov	r2, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f945 	bl	80086f8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2202      	movs	r2, #2
 8008472:	761a      	strb	r2, [r3, #24]
      break;
 8008474:	e13b      	b.n	80086ee <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	795b      	ldrb	r3, [r3, #5]
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fcc5 	bl	8008e0c <USBH_LL_GetURBState>
 8008482:	4603      	mov	r3, r0
 8008484:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d11e      	bne.n	80084ca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	7c1b      	ldrb	r3, [r3, #16]
 8008490:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008494:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	8adb      	ldrh	r3, [r3, #22]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800849e:	7b7b      	ldrb	r3, [r7, #13]
 80084a0:	2b80      	cmp	r3, #128	; 0x80
 80084a2:	d103      	bne.n	80084ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2203      	movs	r2, #3
 80084a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80084aa:	e117      	b.n	80086dc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2205      	movs	r2, #5
 80084b0:	761a      	strb	r2, [r3, #24]
      break;
 80084b2:	e113      	b.n	80086dc <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80084b4:	7b7b      	ldrb	r3, [r7, #13]
 80084b6:	2b80      	cmp	r3, #128	; 0x80
 80084b8:	d103      	bne.n	80084c2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2209      	movs	r2, #9
 80084be:	761a      	strb	r2, [r3, #24]
      break;
 80084c0:	e10c      	b.n	80086dc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2207      	movs	r2, #7
 80084c6:	761a      	strb	r2, [r3, #24]
      break;
 80084c8:	e108      	b.n	80086dc <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d003      	beq.n	80084d8 <USBH_HandleControl+0xcc>
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	f040 8102 	bne.w	80086dc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	220b      	movs	r2, #11
 80084dc:	761a      	strb	r2, [r3, #24]
      break;
 80084de:	e0fd      	b.n	80086dc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6899      	ldr	r1, [r3, #8]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	899a      	ldrh	r2, [r3, #12]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	791b      	ldrb	r3, [r3, #4]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f93c 	bl	8008776 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2204      	movs	r2, #4
 8008502:	761a      	strb	r2, [r3, #24]
      break;
 8008504:	e0f3      	b.n	80086ee <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	791b      	ldrb	r3, [r3, #4]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fc7d 	bl	8008e0c <USBH_LL_GetURBState>
 8008512:	4603      	mov	r3, r0
 8008514:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008516:	7bbb      	ldrb	r3, [r7, #14]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d102      	bne.n	8008522 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2209      	movs	r2, #9
 8008520:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b05      	cmp	r3, #5
 8008526:	d102      	bne.n	800852e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008528:	2303      	movs	r3, #3
 800852a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800852c:	e0d8      	b.n	80086e0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b04      	cmp	r3, #4
 8008532:	f040 80d5 	bne.w	80086e0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	220b      	movs	r2, #11
 800853a:	761a      	strb	r2, [r3, #24]
      break;
 800853c:	e0d0      	b.n	80086e0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6899      	ldr	r1, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	899a      	ldrh	r2, [r3, #12]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	7958      	ldrb	r0, [r3, #5]
 800854a:	2301      	movs	r3, #1
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	4603      	mov	r3, r0
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f8eb 	bl	800872c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800855c:	b29a      	uxth	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2206      	movs	r2, #6
 8008566:	761a      	strb	r2, [r3, #24]
      break;
 8008568:	e0c1      	b.n	80086ee <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	795b      	ldrb	r3, [r3, #5]
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fc4b 	bl	8008e0c <USBH_LL_GetURBState>
 8008576:	4603      	mov	r3, r0
 8008578:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d103      	bne.n	8008588 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2207      	movs	r2, #7
 8008584:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008586:	e0ad      	b.n	80086e4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	2b05      	cmp	r3, #5
 800858c:	d105      	bne.n	800859a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	220c      	movs	r2, #12
 8008592:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008594:	2303      	movs	r3, #3
 8008596:	73fb      	strb	r3, [r7, #15]
      break;
 8008598:	e0a4      	b.n	80086e4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	2b02      	cmp	r3, #2
 800859e:	d103      	bne.n	80085a8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2205      	movs	r2, #5
 80085a4:	761a      	strb	r2, [r3, #24]
      break;
 80085a6:	e09d      	b.n	80086e4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	f040 809a 	bne.w	80086e4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	220b      	movs	r2, #11
 80085b4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80085b6:	2302      	movs	r3, #2
 80085b8:	73fb      	strb	r3, [r7, #15]
      break;
 80085ba:	e093      	b.n	80086e4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	791b      	ldrb	r3, [r3, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	2100      	movs	r1, #0
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f8d6 	bl	8008776 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2208      	movs	r2, #8
 80085da:	761a      	strb	r2, [r3, #24]

      break;
 80085dc:	e087      	b.n	80086ee <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	791b      	ldrb	r3, [r3, #4]
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fc11 	bl	8008e0c <USBH_LL_GetURBState>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d105      	bne.n	8008600 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	220d      	movs	r2, #13
 80085f8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085fe:	e073      	b.n	80086e8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	2b04      	cmp	r3, #4
 8008604:	d103      	bne.n	800860e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	220b      	movs	r2, #11
 800860a:	761a      	strb	r2, [r3, #24]
      break;
 800860c:	e06c      	b.n	80086e8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	2b05      	cmp	r3, #5
 8008612:	d169      	bne.n	80086e8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008614:	2303      	movs	r3, #3
 8008616:	73fb      	strb	r3, [r7, #15]
      break;
 8008618:	e066      	b.n	80086e8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	795a      	ldrb	r2, [r3, #5]
 800861e:	2301      	movs	r3, #1
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	4613      	mov	r3, r2
 8008624:	2200      	movs	r2, #0
 8008626:	2100      	movs	r1, #0
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f87f 	bl	800872c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008634:	b29a      	uxth	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	220a      	movs	r2, #10
 800863e:	761a      	strb	r2, [r3, #24]
      break;
 8008640:	e055      	b.n	80086ee <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	795b      	ldrb	r3, [r3, #5]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fbdf 	bl	8008e0c <USBH_LL_GetURBState>
 800864e:	4603      	mov	r3, r0
 8008650:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008652:	7bbb      	ldrb	r3, [r7, #14]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d105      	bne.n	8008664 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	220d      	movs	r2, #13
 8008660:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008662:	e043      	b.n	80086ec <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d103      	bne.n	8008672 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2209      	movs	r2, #9
 800866e:	761a      	strb	r2, [r3, #24]
      break;
 8008670:	e03c      	b.n	80086ec <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b04      	cmp	r3, #4
 8008676:	d139      	bne.n	80086ec <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	220b      	movs	r2, #11
 800867c:	761a      	strb	r2, [r3, #24]
      break;
 800867e:	e035      	b.n	80086ec <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	7e5b      	ldrb	r3, [r3, #25]
 8008684:	3301      	adds	r3, #1
 8008686:	b2da      	uxtb	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	765a      	strb	r2, [r3, #25]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	7e5b      	ldrb	r3, [r3, #25]
 8008690:	2b02      	cmp	r3, #2
 8008692:	d806      	bhi.n	80086a2 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80086a0:	e025      	b.n	80086ee <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086a8:	2106      	movs	r1, #6
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	795b      	ldrb	r3, [r3, #5]
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f90c 	bl	80088d8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	791b      	ldrb	r3, [r3, #4]
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f906 	bl	80088d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80086d2:	2302      	movs	r3, #2
 80086d4:	73fb      	strb	r3, [r7, #15]
      break;
 80086d6:	e00a      	b.n	80086ee <USBH_HandleControl+0x2e2>

    default:
      break;
 80086d8:	bf00      	nop
 80086da:	e008      	b.n	80086ee <USBH_HandleControl+0x2e2>
      break;
 80086dc:	bf00      	nop
 80086de:	e006      	b.n	80086ee <USBH_HandleControl+0x2e2>
      break;
 80086e0:	bf00      	nop
 80086e2:	e004      	b.n	80086ee <USBH_HandleControl+0x2e2>
      break;
 80086e4:	bf00      	nop
 80086e6:	e002      	b.n	80086ee <USBH_HandleControl+0x2e2>
      break;
 80086e8:	bf00      	nop
 80086ea:	e000      	b.n	80086ee <USBH_HandleControl+0x2e2>
      break;
 80086ec:	bf00      	nop
  }

  return status;
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af04      	add	r7, sp, #16
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008706:	79f9      	ldrb	r1, [r7, #7]
 8008708:	2300      	movs	r3, #0
 800870a:	9303      	str	r3, [sp, #12]
 800870c:	2308      	movs	r3, #8
 800870e:	9302      	str	r3, [sp, #8]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	2300      	movs	r3, #0
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	2300      	movs	r3, #0
 800871a:	2200      	movs	r2, #0
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 fb44 	bl	8008daa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af04      	add	r7, sp, #16
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	4611      	mov	r1, r2
 8008738:	461a      	mov	r2, r3
 800873a:	460b      	mov	r3, r1
 800873c:	80fb      	strh	r3, [r7, #6]
 800873e:	4613      	mov	r3, r2
 8008740:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008750:	7979      	ldrb	r1, [r7, #5]
 8008752:	7e3b      	ldrb	r3, [r7, #24]
 8008754:	9303      	str	r3, [sp, #12]
 8008756:	88fb      	ldrh	r3, [r7, #6]
 8008758:	9302      	str	r3, [sp, #8]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	2301      	movs	r3, #1
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	2300      	movs	r3, #0
 8008764:	2200      	movs	r2, #0
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 fb1f 	bl	8008daa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b088      	sub	sp, #32
 800877a:	af04      	add	r7, sp, #16
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	4611      	mov	r1, r2
 8008782:	461a      	mov	r2, r3
 8008784:	460b      	mov	r3, r1
 8008786:	80fb      	strh	r3, [r7, #6]
 8008788:	4613      	mov	r3, r2
 800878a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800878c:	7979      	ldrb	r1, [r7, #5]
 800878e:	2300      	movs	r3, #0
 8008790:	9303      	str	r3, [sp, #12]
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	9302      	str	r3, [sp, #8]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	2301      	movs	r3, #1
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	2300      	movs	r3, #0
 80087a0:	2201      	movs	r2, #1
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 fb01 	bl	8008daa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80087a8:	2300      	movs	r3, #0

}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b088      	sub	sp, #32
 80087b6:	af04      	add	r7, sp, #16
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	4611      	mov	r1, r2
 80087be:	461a      	mov	r2, r3
 80087c0:	460b      	mov	r3, r1
 80087c2:	80fb      	strh	r3, [r7, #6]
 80087c4:	4613      	mov	r3, r2
 80087c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80087d6:	7979      	ldrb	r1, [r7, #5]
 80087d8:	7e3b      	ldrb	r3, [r7, #24]
 80087da:	9303      	str	r3, [sp, #12]
 80087dc:	88fb      	ldrh	r3, [r7, #6]
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	2301      	movs	r3, #1
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	2302      	movs	r3, #2
 80087ea:	2200      	movs	r2, #0
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 fadc 	bl	8008daa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af04      	add	r7, sp, #16
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	4611      	mov	r1, r2
 8008808:	461a      	mov	r2, r3
 800880a:	460b      	mov	r3, r1
 800880c:	80fb      	strh	r3, [r7, #6]
 800880e:	4613      	mov	r3, r2
 8008810:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008812:	7979      	ldrb	r1, [r7, #5]
 8008814:	2300      	movs	r3, #0
 8008816:	9303      	str	r3, [sp, #12]
 8008818:	88fb      	ldrh	r3, [r7, #6]
 800881a:	9302      	str	r3, [sp, #8]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	9301      	str	r3, [sp, #4]
 8008820:	2301      	movs	r3, #1
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	2302      	movs	r3, #2
 8008826:	2201      	movs	r2, #1
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 fabe 	bl	8008daa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af04      	add	r7, sp, #16
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	4608      	mov	r0, r1
 8008842:	4611      	mov	r1, r2
 8008844:	461a      	mov	r2, r3
 8008846:	4603      	mov	r3, r0
 8008848:	70fb      	strb	r3, [r7, #3]
 800884a:	460b      	mov	r3, r1
 800884c:	70bb      	strb	r3, [r7, #2]
 800884e:	4613      	mov	r3, r2
 8008850:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008852:	7878      	ldrb	r0, [r7, #1]
 8008854:	78ba      	ldrb	r2, [r7, #2]
 8008856:	78f9      	ldrb	r1, [r7, #3]
 8008858:	8b3b      	ldrh	r3, [r7, #24]
 800885a:	9302      	str	r3, [sp, #8]
 800885c:	7d3b      	ldrb	r3, [r7, #20]
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	7c3b      	ldrb	r3, [r7, #16]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	4603      	mov	r3, r0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fa51 	bl	8008d0e <USBH_LL_OpenPipe>

  return USBH_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008882:	78fb      	ldrb	r3, [r7, #3]
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fa70 	bl	8008d6c <USBH_LL_ClosePipe>

  return USBH_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	460b      	mov	r3, r1
 80088a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f836 	bl	8008914 <USBH_GetFreePipe>
 80088a8:	4603      	mov	r3, r0
 80088aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80088ac:	89fb      	ldrh	r3, [r7, #14]
 80088ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d00a      	beq.n	80088cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80088b6:	78fa      	ldrb	r2, [r7, #3]
 80088b8:	89fb      	ldrh	r3, [r7, #14]
 80088ba:	f003 030f 	and.w	r3, r3, #15
 80088be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	33e0      	adds	r3, #224	; 0xe0
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80088cc:	89fb      	ldrh	r3, [r7, #14]
 80088ce:	b2db      	uxtb	r3, r3
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	2b0a      	cmp	r3, #10
 80088e8:	d80d      	bhi.n	8008906 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80088ea:	78fb      	ldrb	r3, [r7, #3]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	33e0      	adds	r3, #224	; 0xe0
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80088fc:	6879      	ldr	r1, [r7, #4]
 80088fe:	33e0      	adds	r3, #224	; 0xe0
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008920:	2300      	movs	r3, #0
 8008922:	73fb      	strb	r3, [r7, #15]
 8008924:	e00f      	b.n	8008946 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	33e0      	adds	r3, #224	; 0xe0
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800893a:	7bfb      	ldrb	r3, [r7, #15]
 800893c:	b29b      	uxth	r3, r3
 800893e:	e007      	b.n	8008950 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	3301      	adds	r3, #1
 8008944:	73fb      	strb	r3, [r7, #15]
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	2b0a      	cmp	r3, #10
 800894a:	d9ec      	bls.n	8008926 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800894c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008960:	2201      	movs	r2, #1
 8008962:	490e      	ldr	r1, [pc, #56]	; (800899c <MX_USB_HOST_Init+0x40>)
 8008964:	480e      	ldr	r0, [pc, #56]	; (80089a0 <MX_USB_HOST_Init+0x44>)
 8008966:	f7fe fc9f 	bl	80072a8 <USBH_Init>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008970:	f7f8 fd60 	bl	8001434 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008974:	490b      	ldr	r1, [pc, #44]	; (80089a4 <MX_USB_HOST_Init+0x48>)
 8008976:	480a      	ldr	r0, [pc, #40]	; (80089a0 <MX_USB_HOST_Init+0x44>)
 8008978:	f7fe fd24 	bl	80073c4 <USBH_RegisterClass>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008982:	f7f8 fd57 	bl	8001434 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008986:	4806      	ldr	r0, [pc, #24]	; (80089a0 <MX_USB_HOST_Init+0x44>)
 8008988:	f7fe fda8 	bl	80074dc <USBH_Start>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008992:	f7f8 fd4f 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008996:	bf00      	nop
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	080089bd 	.word	0x080089bd
 80089a0:	200001d8 	.word	0x200001d8
 80089a4:	20000010 	.word	0x20000010

080089a8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80089ac:	4802      	ldr	r0, [pc, #8]	; (80089b8 <MX_USB_HOST_Process+0x10>)
 80089ae:	f7fe fda5 	bl	80074fc <USBH_Process>
}
 80089b2:	bf00      	nop
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	200001d8 	.word	0x200001d8

080089bc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	2b04      	cmp	r3, #4
 80089ce:	d819      	bhi.n	8008a04 <USBH_UserProcess+0x48>
 80089d0:	a201      	add	r2, pc, #4	; (adr r2, 80089d8 <USBH_UserProcess+0x1c>)
 80089d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d6:	bf00      	nop
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	080089f5 	.word	0x080089f5
 80089e0:	08008a05 	.word	0x08008a05
 80089e4:	080089fd 	.word	0x080089fd
 80089e8:	080089ed 	.word	0x080089ed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80089ec:	4b09      	ldr	r3, [pc, #36]	; (8008a14 <USBH_UserProcess+0x58>)
 80089ee:	2203      	movs	r2, #3
 80089f0:	701a      	strb	r2, [r3, #0]
  break;
 80089f2:	e008      	b.n	8008a06 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80089f4:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <USBH_UserProcess+0x58>)
 80089f6:	2202      	movs	r2, #2
 80089f8:	701a      	strb	r2, [r3, #0]
  break;
 80089fa:	e004      	b.n	8008a06 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80089fc:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <USBH_UserProcess+0x58>)
 80089fe:	2201      	movs	r2, #1
 8008a00:	701a      	strb	r2, [r3, #0]
  break;
 8008a02:	e000      	b.n	8008a06 <USBH_UserProcess+0x4a>

  default:
  break;
 8008a04:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	200000b8 	.word	0x200000b8

08008a18 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b08a      	sub	sp, #40	; 0x28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a20:	f107 0314 	add.w	r3, r7, #20
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	605a      	str	r2, [r3, #4]
 8008a2a:	609a      	str	r2, [r3, #8]
 8008a2c:	60da      	str	r2, [r3, #12]
 8008a2e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a38:	d147      	bne.n	8008aca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	613b      	str	r3, [r7, #16]
 8008a3e:	4b25      	ldr	r3, [pc, #148]	; (8008ad4 <HAL_HCD_MspInit+0xbc>)
 8008a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a42:	4a24      	ldr	r2, [pc, #144]	; (8008ad4 <HAL_HCD_MspInit+0xbc>)
 8008a44:	f043 0301 	orr.w	r3, r3, #1
 8008a48:	6313      	str	r3, [r2, #48]	; 0x30
 8008a4a:	4b22      	ldr	r3, [pc, #136]	; (8008ad4 <HAL_HCD_MspInit+0xbc>)
 8008a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	613b      	str	r3, [r7, #16]
 8008a54:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a60:	2300      	movs	r3, #0
 8008a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a64:	f107 0314 	add.w	r3, r7, #20
 8008a68:	4619      	mov	r1, r3
 8008a6a:	481b      	ldr	r0, [pc, #108]	; (8008ad8 <HAL_HCD_MspInit+0xc0>)
 8008a6c:	f7f9 fda0 	bl	80025b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a70:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a76:	2302      	movs	r3, #2
 8008a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a82:	230a      	movs	r3, #10
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a86:	f107 0314 	add.w	r3, r7, #20
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4812      	ldr	r0, [pc, #72]	; (8008ad8 <HAL_HCD_MspInit+0xc0>)
 8008a8e:	f7f9 fd8f 	bl	80025b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a92:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <HAL_HCD_MspInit+0xbc>)
 8008a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a96:	4a0f      	ldr	r2, [pc, #60]	; (8008ad4 <HAL_HCD_MspInit+0xbc>)
 8008a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9c:	6353      	str	r3, [r2, #52]	; 0x34
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	4b0c      	ldr	r3, [pc, #48]	; (8008ad4 <HAL_HCD_MspInit+0xbc>)
 8008aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa6:	4a0b      	ldr	r2, [pc, #44]	; (8008ad4 <HAL_HCD_MspInit+0xbc>)
 8008aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008aac:	6453      	str	r3, [r2, #68]	; 0x44
 8008aae:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <HAL_HCD_MspInit+0xbc>)
 8008ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008aba:	2200      	movs	r2, #0
 8008abc:	2100      	movs	r1, #0
 8008abe:	2043      	movs	r0, #67	; 0x43
 8008ac0:	f7f9 f8b5 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ac4:	2043      	movs	r0, #67	; 0x43
 8008ac6:	f7f9 f8ce 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008aca:	bf00      	nop
 8008acc:	3728      	adds	r7, #40	; 0x28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	40023800 	.word	0x40023800
 8008ad8:	40020000 	.word	0x40020000

08008adc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff f8d9 	bl	8007ca2 <USBH_LL_IncTimer>
}
 8008af0:	bf00      	nop
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7ff f911 	bl	8007d2e <USBH_LL_Connect>
}
 8008b0c:	bf00      	nop
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7ff f91a 	bl	8007d5c <USBH_LL_Disconnect>
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff f8cb 	bl	8007cf6 <USBH_LL_PortEnabled>
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7ff f8cb 	bl	8007d12 <USBH_LL_PortDisabled>
}
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d12a      	bne.n	8008bec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008b96:	4a18      	ldr	r2, [pc, #96]	; (8008bf8 <USBH_LL_Init+0x74>)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a15      	ldr	r2, [pc, #84]	; (8008bf8 <USBH_LL_Init+0x74>)
 8008ba2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ba6:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <USBH_LL_Init+0x74>)
 8008ba8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008bae:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <USBH_LL_Init+0x74>)
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008bb4:	4b10      	ldr	r3, [pc, #64]	; (8008bf8 <USBH_LL_Init+0x74>)
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bba:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <USBH_LL_Init+0x74>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008bc0:	4b0d      	ldr	r3, [pc, #52]	; (8008bf8 <USBH_LL_Init+0x74>)
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bc6:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <USBH_LL_Init+0x74>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008bcc:	480a      	ldr	r0, [pc, #40]	; (8008bf8 <USBH_LL_Init+0x74>)
 8008bce:	f7f9 febd 	bl	800294c <HAL_HCD_Init>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008bd8:	f7f8 fc2c 	bl	8001434 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008bdc:	4806      	ldr	r0, [pc, #24]	; (8008bf8 <USBH_LL_Init+0x74>)
 8008bde:	f7fa fac1 	bl	8003164 <HAL_HCD_GetCurrentFrame>
 8008be2:	4603      	mov	r3, r0
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff f84c 	bl	8007c84 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	200005b0 	.word	0x200005b0

08008bfc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fa fa2e 	bl	8003074 <HAL_HCD_Start>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 f95c 	bl	8008edc <USBH_Get_USB_Status>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fa fa36 	bl	80030ba <HAL_HCD_Stop>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 f941 	bl	8008edc <USBH_Get_USB_Status>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008c70:	2301      	movs	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fa fa80 	bl	8003180 <HAL_HCD_GetCurrentSpeed>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d007      	beq.n	8008c96 <USBH_LL_GetSpeed+0x2e>
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d302      	bcc.n	8008c90 <USBH_LL_GetSpeed+0x28>
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d006      	beq.n	8008c9c <USBH_LL_GetSpeed+0x34>
 8008c8e:	e008      	b.n	8008ca2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]
    break;
 8008c94:	e008      	b.n	8008ca8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008c96:	2301      	movs	r3, #1
 8008c98:	73fb      	strb	r3, [r7, #15]
    break;
 8008c9a:	e005      	b.n	8008ca8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca0:	e002      	b.n	8008ca8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca6:	bf00      	nop
  }
  return  speed;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fa fa13 	bl	80030f4 <HAL_HCD_ResetPort>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 f901 	bl	8008edc <USBH_Get_USB_Status>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fa fa1b 	bl	800313a <HAL_HCD_HC_GetXferCount>
 8008d04:	4603      	mov	r3, r0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d0e:	b590      	push	{r4, r7, lr}
 8008d10:	b089      	sub	sp, #36	; 0x24
 8008d12:	af04      	add	r7, sp, #16
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	4608      	mov	r0, r1
 8008d18:	4611      	mov	r1, r2
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	70fb      	strb	r3, [r7, #3]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70bb      	strb	r3, [r7, #2]
 8008d24:	4613      	mov	r3, r2
 8008d26:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008d36:	787c      	ldrb	r4, [r7, #1]
 8008d38:	78ba      	ldrb	r2, [r7, #2]
 8008d3a:	78f9      	ldrb	r1, [r7, #3]
 8008d3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d3e:	9302      	str	r3, [sp, #8]
 8008d40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	4623      	mov	r3, r4
 8008d4e:	f7f9 fe5f 	bl	8002a10 <HAL_HCD_HC_Init>
 8008d52:	4603      	mov	r3, r0
 8008d54:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 f8bf 	bl	8008edc <USBH_Get_USB_Status>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd90      	pop	{r4, r7, pc}

08008d6c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d86:	78fa      	ldrb	r2, [r7, #3]
 8008d88:	4611      	mov	r1, r2
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7f9 fed8 	bl	8002b40 <HAL_HCD_HC_Halt>
 8008d90:	4603      	mov	r3, r0
 8008d92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 f8a0 	bl	8008edc <USBH_Get_USB_Status>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008daa:	b590      	push	{r4, r7, lr}
 8008dac:	b089      	sub	sp, #36	; 0x24
 8008dae:	af04      	add	r7, sp, #16
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	4608      	mov	r0, r1
 8008db4:	4611      	mov	r1, r2
 8008db6:	461a      	mov	r2, r3
 8008db8:	4603      	mov	r3, r0
 8008dba:	70fb      	strb	r3, [r7, #3]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70bb      	strb	r3, [r7, #2]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008dd2:	787c      	ldrb	r4, [r7, #1]
 8008dd4:	78ba      	ldrb	r2, [r7, #2]
 8008dd6:	78f9      	ldrb	r1, [r7, #3]
 8008dd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ddc:	9303      	str	r3, [sp, #12]
 8008dde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008de0:	9302      	str	r3, [sp, #8]
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	9301      	str	r3, [sp, #4]
 8008de6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	4623      	mov	r3, r4
 8008dee:	f7f9 fecb 	bl	8002b88 <HAL_HCD_HC_SubmitRequest>
 8008df2:	4603      	mov	r3, r0
 8008df4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 f86f 	bl	8008edc <USBH_Get_USB_Status>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd90      	pop	{r4, r7, pc}

08008e0c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e1e:	78fa      	ldrb	r2, [r7, #3]
 8008e20:	4611      	mov	r1, r2
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fa f974 	bl	8003110 <HAL_HCD_HC_GetURBState>
 8008e28:	4603      	mov	r3, r0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b082      	sub	sp, #8
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d103      	bne.n	8008e50 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 f872 	bl	8008f34 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008e50:	20c8      	movs	r0, #200	; 0xc8
 8008e52:	f7f8 fdef 	bl	8001a34 <HAL_Delay>
  return USBH_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e76:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008e78:	78fa      	ldrb	r2, [r7, #3]
 8008e7a:	68f9      	ldr	r1, [r7, #12]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	440b      	add	r3, r1
 8008e86:	333b      	adds	r3, #59	; 0x3b
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	68f9      	ldr	r1, [r7, #12]
 8008e92:	4613      	mov	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	00db      	lsls	r3, r3, #3
 8008e9a:	440b      	add	r3, r1
 8008e9c:	3350      	adds	r3, #80	; 0x50
 8008e9e:	78ba      	ldrb	r2, [r7, #2]
 8008ea0:	701a      	strb	r2, [r3, #0]
 8008ea2:	e009      	b.n	8008eb8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008ea4:	78fa      	ldrb	r2, [r7, #3]
 8008ea6:	68f9      	ldr	r1, [r7, #12]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	440b      	add	r3, r1
 8008eb2:	3351      	adds	r3, #81	; 0x51
 8008eb4:	78ba      	ldrb	r2, [r7, #2]
 8008eb6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7f8 fdb0 	bl	8001a34 <HAL_Delay>
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d817      	bhi.n	8008f20 <USBH_Get_USB_Status+0x44>
 8008ef0:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <USBH_Get_USB_Status+0x1c>)
 8008ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef6:	bf00      	nop
 8008ef8:	08008f09 	.word	0x08008f09
 8008efc:	08008f0f 	.word	0x08008f0f
 8008f00:	08008f15 	.word	0x08008f15
 8008f04:	08008f1b 	.word	0x08008f1b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0c:	e00b      	b.n	8008f26 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	73fb      	strb	r3, [r7, #15]
    break;
 8008f12:	e008      	b.n	8008f26 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008f14:	2301      	movs	r3, #1
 8008f16:	73fb      	strb	r3, [r7, #15]
    break;
 8008f18:	e005      	b.n	8008f26 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f1e:	e002      	b.n	8008f26 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008f20:	2302      	movs	r3, #2
 8008f22:	73fb      	strb	r3, [r7, #15]
    break;
 8008f24:	bf00      	nop
  }
  return usb_status;
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008f42:	79fb      	ldrb	r3, [r7, #7]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d102      	bne.n	8008f4e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	73fb      	strb	r3, [r7, #15]
 8008f4c:	e001      	b.n	8008f52 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	461a      	mov	r2, r3
 8008f56:	2101      	movs	r1, #1
 8008f58:	4803      	ldr	r0, [pc, #12]	; (8008f68 <MX_DriverVbusFS+0x34>)
 8008f5a:	f7f9 fcc3 	bl	80028e4 <HAL_GPIO_WritePin>
}
 8008f5e:	bf00      	nop
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	40020800 	.word	0x40020800

08008f6c <__errno>:
 8008f6c:	4b01      	ldr	r3, [pc, #4]	; (8008f74 <__errno+0x8>)
 8008f6e:	6818      	ldr	r0, [r3, #0]
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	20000030 	.word	0x20000030

08008f78 <__libc_init_array>:
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	4e0d      	ldr	r6, [pc, #52]	; (8008fb0 <__libc_init_array+0x38>)
 8008f7c:	4c0d      	ldr	r4, [pc, #52]	; (8008fb4 <__libc_init_array+0x3c>)
 8008f7e:	1ba4      	subs	r4, r4, r6
 8008f80:	10a4      	asrs	r4, r4, #2
 8008f82:	2500      	movs	r5, #0
 8008f84:	42a5      	cmp	r5, r4
 8008f86:	d109      	bne.n	8008f9c <__libc_init_array+0x24>
 8008f88:	4e0b      	ldr	r6, [pc, #44]	; (8008fb8 <__libc_init_array+0x40>)
 8008f8a:	4c0c      	ldr	r4, [pc, #48]	; (8008fbc <__libc_init_array+0x44>)
 8008f8c:	f000 ff14 	bl	8009db8 <_init>
 8008f90:	1ba4      	subs	r4, r4, r6
 8008f92:	10a4      	asrs	r4, r4, #2
 8008f94:	2500      	movs	r5, #0
 8008f96:	42a5      	cmp	r5, r4
 8008f98:	d105      	bne.n	8008fa6 <__libc_init_array+0x2e>
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008fa0:	4798      	blx	r3
 8008fa2:	3501      	adds	r5, #1
 8008fa4:	e7ee      	b.n	8008f84 <__libc_init_array+0xc>
 8008fa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008faa:	4798      	blx	r3
 8008fac:	3501      	adds	r5, #1
 8008fae:	e7f2      	b.n	8008f96 <__libc_init_array+0x1e>
 8008fb0:	08009ec8 	.word	0x08009ec8
 8008fb4:	08009ec8 	.word	0x08009ec8
 8008fb8:	08009ec8 	.word	0x08009ec8
 8008fbc:	08009ecc 	.word	0x08009ecc

08008fc0 <malloc>:
 8008fc0:	4b02      	ldr	r3, [pc, #8]	; (8008fcc <malloc+0xc>)
 8008fc2:	4601      	mov	r1, r0
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	f000 b861 	b.w	800908c <_malloc_r>
 8008fca:	bf00      	nop
 8008fcc:	20000030 	.word	0x20000030

08008fd0 <free>:
 8008fd0:	4b02      	ldr	r3, [pc, #8]	; (8008fdc <free+0xc>)
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	6818      	ldr	r0, [r3, #0]
 8008fd6:	f000 b80b 	b.w	8008ff0 <_free_r>
 8008fda:	bf00      	nop
 8008fdc:	20000030 	.word	0x20000030

08008fe0 <memset>:
 8008fe0:	4402      	add	r2, r0
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d100      	bne.n	8008fea <memset+0xa>
 8008fe8:	4770      	bx	lr
 8008fea:	f803 1b01 	strb.w	r1, [r3], #1
 8008fee:	e7f9      	b.n	8008fe4 <memset+0x4>

08008ff0 <_free_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	2900      	cmp	r1, #0
 8008ff6:	d045      	beq.n	8009084 <_free_r+0x94>
 8008ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ffc:	1f0c      	subs	r4, r1, #4
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfb8      	it	lt
 8009002:	18e4      	addlt	r4, r4, r3
 8009004:	f000 f98e 	bl	8009324 <__malloc_lock>
 8009008:	4a1f      	ldr	r2, [pc, #124]	; (8009088 <_free_r+0x98>)
 800900a:	6813      	ldr	r3, [r2, #0]
 800900c:	4610      	mov	r0, r2
 800900e:	b933      	cbnz	r3, 800901e <_free_r+0x2e>
 8009010:	6063      	str	r3, [r4, #4]
 8009012:	6014      	str	r4, [r2, #0]
 8009014:	4628      	mov	r0, r5
 8009016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800901a:	f000 b984 	b.w	8009326 <__malloc_unlock>
 800901e:	42a3      	cmp	r3, r4
 8009020:	d90c      	bls.n	800903c <_free_r+0x4c>
 8009022:	6821      	ldr	r1, [r4, #0]
 8009024:	1862      	adds	r2, r4, r1
 8009026:	4293      	cmp	r3, r2
 8009028:	bf04      	itt	eq
 800902a:	681a      	ldreq	r2, [r3, #0]
 800902c:	685b      	ldreq	r3, [r3, #4]
 800902e:	6063      	str	r3, [r4, #4]
 8009030:	bf04      	itt	eq
 8009032:	1852      	addeq	r2, r2, r1
 8009034:	6022      	streq	r2, [r4, #0]
 8009036:	6004      	str	r4, [r0, #0]
 8009038:	e7ec      	b.n	8009014 <_free_r+0x24>
 800903a:	4613      	mov	r3, r2
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	b10a      	cbz	r2, 8009044 <_free_r+0x54>
 8009040:	42a2      	cmp	r2, r4
 8009042:	d9fa      	bls.n	800903a <_free_r+0x4a>
 8009044:	6819      	ldr	r1, [r3, #0]
 8009046:	1858      	adds	r0, r3, r1
 8009048:	42a0      	cmp	r0, r4
 800904a:	d10b      	bne.n	8009064 <_free_r+0x74>
 800904c:	6820      	ldr	r0, [r4, #0]
 800904e:	4401      	add	r1, r0
 8009050:	1858      	adds	r0, r3, r1
 8009052:	4282      	cmp	r2, r0
 8009054:	6019      	str	r1, [r3, #0]
 8009056:	d1dd      	bne.n	8009014 <_free_r+0x24>
 8009058:	6810      	ldr	r0, [r2, #0]
 800905a:	6852      	ldr	r2, [r2, #4]
 800905c:	605a      	str	r2, [r3, #4]
 800905e:	4401      	add	r1, r0
 8009060:	6019      	str	r1, [r3, #0]
 8009062:	e7d7      	b.n	8009014 <_free_r+0x24>
 8009064:	d902      	bls.n	800906c <_free_r+0x7c>
 8009066:	230c      	movs	r3, #12
 8009068:	602b      	str	r3, [r5, #0]
 800906a:	e7d3      	b.n	8009014 <_free_r+0x24>
 800906c:	6820      	ldr	r0, [r4, #0]
 800906e:	1821      	adds	r1, r4, r0
 8009070:	428a      	cmp	r2, r1
 8009072:	bf04      	itt	eq
 8009074:	6811      	ldreq	r1, [r2, #0]
 8009076:	6852      	ldreq	r2, [r2, #4]
 8009078:	6062      	str	r2, [r4, #4]
 800907a:	bf04      	itt	eq
 800907c:	1809      	addeq	r1, r1, r0
 800907e:	6021      	streq	r1, [r4, #0]
 8009080:	605c      	str	r4, [r3, #4]
 8009082:	e7c7      	b.n	8009014 <_free_r+0x24>
 8009084:	bd38      	pop	{r3, r4, r5, pc}
 8009086:	bf00      	nop
 8009088:	200000bc 	.word	0x200000bc

0800908c <_malloc_r>:
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	1ccd      	adds	r5, r1, #3
 8009090:	f025 0503 	bic.w	r5, r5, #3
 8009094:	3508      	adds	r5, #8
 8009096:	2d0c      	cmp	r5, #12
 8009098:	bf38      	it	cc
 800909a:	250c      	movcc	r5, #12
 800909c:	2d00      	cmp	r5, #0
 800909e:	4606      	mov	r6, r0
 80090a0:	db01      	blt.n	80090a6 <_malloc_r+0x1a>
 80090a2:	42a9      	cmp	r1, r5
 80090a4:	d903      	bls.n	80090ae <_malloc_r+0x22>
 80090a6:	230c      	movs	r3, #12
 80090a8:	6033      	str	r3, [r6, #0]
 80090aa:	2000      	movs	r0, #0
 80090ac:	bd70      	pop	{r4, r5, r6, pc}
 80090ae:	f000 f939 	bl	8009324 <__malloc_lock>
 80090b2:	4a21      	ldr	r2, [pc, #132]	; (8009138 <_malloc_r+0xac>)
 80090b4:	6814      	ldr	r4, [r2, #0]
 80090b6:	4621      	mov	r1, r4
 80090b8:	b991      	cbnz	r1, 80090e0 <_malloc_r+0x54>
 80090ba:	4c20      	ldr	r4, [pc, #128]	; (800913c <_malloc_r+0xb0>)
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	b91b      	cbnz	r3, 80090c8 <_malloc_r+0x3c>
 80090c0:	4630      	mov	r0, r6
 80090c2:	f000 f855 	bl	8009170 <_sbrk_r>
 80090c6:	6020      	str	r0, [r4, #0]
 80090c8:	4629      	mov	r1, r5
 80090ca:	4630      	mov	r0, r6
 80090cc:	f000 f850 	bl	8009170 <_sbrk_r>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d124      	bne.n	800911e <_malloc_r+0x92>
 80090d4:	230c      	movs	r3, #12
 80090d6:	6033      	str	r3, [r6, #0]
 80090d8:	4630      	mov	r0, r6
 80090da:	f000 f924 	bl	8009326 <__malloc_unlock>
 80090de:	e7e4      	b.n	80090aa <_malloc_r+0x1e>
 80090e0:	680b      	ldr	r3, [r1, #0]
 80090e2:	1b5b      	subs	r3, r3, r5
 80090e4:	d418      	bmi.n	8009118 <_malloc_r+0x8c>
 80090e6:	2b0b      	cmp	r3, #11
 80090e8:	d90f      	bls.n	800910a <_malloc_r+0x7e>
 80090ea:	600b      	str	r3, [r1, #0]
 80090ec:	50cd      	str	r5, [r1, r3]
 80090ee:	18cc      	adds	r4, r1, r3
 80090f0:	4630      	mov	r0, r6
 80090f2:	f000 f918 	bl	8009326 <__malloc_unlock>
 80090f6:	f104 000b 	add.w	r0, r4, #11
 80090fa:	1d23      	adds	r3, r4, #4
 80090fc:	f020 0007 	bic.w	r0, r0, #7
 8009100:	1ac3      	subs	r3, r0, r3
 8009102:	d0d3      	beq.n	80090ac <_malloc_r+0x20>
 8009104:	425a      	negs	r2, r3
 8009106:	50e2      	str	r2, [r4, r3]
 8009108:	e7d0      	b.n	80090ac <_malloc_r+0x20>
 800910a:	428c      	cmp	r4, r1
 800910c:	684b      	ldr	r3, [r1, #4]
 800910e:	bf16      	itet	ne
 8009110:	6063      	strne	r3, [r4, #4]
 8009112:	6013      	streq	r3, [r2, #0]
 8009114:	460c      	movne	r4, r1
 8009116:	e7eb      	b.n	80090f0 <_malloc_r+0x64>
 8009118:	460c      	mov	r4, r1
 800911a:	6849      	ldr	r1, [r1, #4]
 800911c:	e7cc      	b.n	80090b8 <_malloc_r+0x2c>
 800911e:	1cc4      	adds	r4, r0, #3
 8009120:	f024 0403 	bic.w	r4, r4, #3
 8009124:	42a0      	cmp	r0, r4
 8009126:	d005      	beq.n	8009134 <_malloc_r+0xa8>
 8009128:	1a21      	subs	r1, r4, r0
 800912a:	4630      	mov	r0, r6
 800912c:	f000 f820 	bl	8009170 <_sbrk_r>
 8009130:	3001      	adds	r0, #1
 8009132:	d0cf      	beq.n	80090d4 <_malloc_r+0x48>
 8009134:	6025      	str	r5, [r4, #0]
 8009136:	e7db      	b.n	80090f0 <_malloc_r+0x64>
 8009138:	200000bc 	.word	0x200000bc
 800913c:	200000c0 	.word	0x200000c0

08009140 <iprintf>:
 8009140:	b40f      	push	{r0, r1, r2, r3}
 8009142:	4b0a      	ldr	r3, [pc, #40]	; (800916c <iprintf+0x2c>)
 8009144:	b513      	push	{r0, r1, r4, lr}
 8009146:	681c      	ldr	r4, [r3, #0]
 8009148:	b124      	cbz	r4, 8009154 <iprintf+0x14>
 800914a:	69a3      	ldr	r3, [r4, #24]
 800914c:	b913      	cbnz	r3, 8009154 <iprintf+0x14>
 800914e:	4620      	mov	r0, r4
 8009150:	f000 f85e 	bl	8009210 <__sinit>
 8009154:	ab05      	add	r3, sp, #20
 8009156:	9a04      	ldr	r2, [sp, #16]
 8009158:	68a1      	ldr	r1, [r4, #8]
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	4620      	mov	r0, r4
 800915e:	f000 f90d 	bl	800937c <_vfiprintf_r>
 8009162:	b002      	add	sp, #8
 8009164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009168:	b004      	add	sp, #16
 800916a:	4770      	bx	lr
 800916c:	20000030 	.word	0x20000030

08009170 <_sbrk_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4c06      	ldr	r4, [pc, #24]	; (800918c <_sbrk_r+0x1c>)
 8009174:	2300      	movs	r3, #0
 8009176:	4605      	mov	r5, r0
 8009178:	4608      	mov	r0, r1
 800917a:	6023      	str	r3, [r4, #0]
 800917c:	f7f8 fb72 	bl	8001864 <_sbrk>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	d102      	bne.n	800918a <_sbrk_r+0x1a>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	b103      	cbz	r3, 800918a <_sbrk_r+0x1a>
 8009188:	602b      	str	r3, [r5, #0]
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	20000874 	.word	0x20000874

08009190 <std>:
 8009190:	2300      	movs	r3, #0
 8009192:	b510      	push	{r4, lr}
 8009194:	4604      	mov	r4, r0
 8009196:	e9c0 3300 	strd	r3, r3, [r0]
 800919a:	6083      	str	r3, [r0, #8]
 800919c:	8181      	strh	r1, [r0, #12]
 800919e:	6643      	str	r3, [r0, #100]	; 0x64
 80091a0:	81c2      	strh	r2, [r0, #14]
 80091a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091a6:	6183      	str	r3, [r0, #24]
 80091a8:	4619      	mov	r1, r3
 80091aa:	2208      	movs	r2, #8
 80091ac:	305c      	adds	r0, #92	; 0x5c
 80091ae:	f7ff ff17 	bl	8008fe0 <memset>
 80091b2:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <std+0x38>)
 80091b4:	6263      	str	r3, [r4, #36]	; 0x24
 80091b6:	4b05      	ldr	r3, [pc, #20]	; (80091cc <std+0x3c>)
 80091b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80091ba:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <std+0x40>)
 80091bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <std+0x44>)
 80091c0:	6224      	str	r4, [r4, #32]
 80091c2:	6323      	str	r3, [r4, #48]	; 0x30
 80091c4:	bd10      	pop	{r4, pc}
 80091c6:	bf00      	nop
 80091c8:	080098b9 	.word	0x080098b9
 80091cc:	080098db 	.word	0x080098db
 80091d0:	08009913 	.word	0x08009913
 80091d4:	08009937 	.word	0x08009937

080091d8 <_cleanup_r>:
 80091d8:	4901      	ldr	r1, [pc, #4]	; (80091e0 <_cleanup_r+0x8>)
 80091da:	f000 b885 	b.w	80092e8 <_fwalk_reent>
 80091de:	bf00      	nop
 80091e0:	08009c11 	.word	0x08009c11

080091e4 <__sfmoreglue>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	1e4a      	subs	r2, r1, #1
 80091e8:	2568      	movs	r5, #104	; 0x68
 80091ea:	4355      	muls	r5, r2
 80091ec:	460e      	mov	r6, r1
 80091ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091f2:	f7ff ff4b 	bl	800908c <_malloc_r>
 80091f6:	4604      	mov	r4, r0
 80091f8:	b140      	cbz	r0, 800920c <__sfmoreglue+0x28>
 80091fa:	2100      	movs	r1, #0
 80091fc:	e9c0 1600 	strd	r1, r6, [r0]
 8009200:	300c      	adds	r0, #12
 8009202:	60a0      	str	r0, [r4, #8]
 8009204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009208:	f7ff feea 	bl	8008fe0 <memset>
 800920c:	4620      	mov	r0, r4
 800920e:	bd70      	pop	{r4, r5, r6, pc}

08009210 <__sinit>:
 8009210:	6983      	ldr	r3, [r0, #24]
 8009212:	b510      	push	{r4, lr}
 8009214:	4604      	mov	r4, r0
 8009216:	bb33      	cbnz	r3, 8009266 <__sinit+0x56>
 8009218:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800921c:	6503      	str	r3, [r0, #80]	; 0x50
 800921e:	4b12      	ldr	r3, [pc, #72]	; (8009268 <__sinit+0x58>)
 8009220:	4a12      	ldr	r2, [pc, #72]	; (800926c <__sinit+0x5c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6282      	str	r2, [r0, #40]	; 0x28
 8009226:	4298      	cmp	r0, r3
 8009228:	bf04      	itt	eq
 800922a:	2301      	moveq	r3, #1
 800922c:	6183      	streq	r3, [r0, #24]
 800922e:	f000 f81f 	bl	8009270 <__sfp>
 8009232:	6060      	str	r0, [r4, #4]
 8009234:	4620      	mov	r0, r4
 8009236:	f000 f81b 	bl	8009270 <__sfp>
 800923a:	60a0      	str	r0, [r4, #8]
 800923c:	4620      	mov	r0, r4
 800923e:	f000 f817 	bl	8009270 <__sfp>
 8009242:	2200      	movs	r2, #0
 8009244:	60e0      	str	r0, [r4, #12]
 8009246:	2104      	movs	r1, #4
 8009248:	6860      	ldr	r0, [r4, #4]
 800924a:	f7ff ffa1 	bl	8009190 <std>
 800924e:	2201      	movs	r2, #1
 8009250:	2109      	movs	r1, #9
 8009252:	68a0      	ldr	r0, [r4, #8]
 8009254:	f7ff ff9c 	bl	8009190 <std>
 8009258:	2202      	movs	r2, #2
 800925a:	2112      	movs	r1, #18
 800925c:	68e0      	ldr	r0, [r4, #12]
 800925e:	f7ff ff97 	bl	8009190 <std>
 8009262:	2301      	movs	r3, #1
 8009264:	61a3      	str	r3, [r4, #24]
 8009266:	bd10      	pop	{r4, pc}
 8009268:	08009e28 	.word	0x08009e28
 800926c:	080091d9 	.word	0x080091d9

08009270 <__sfp>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	4b1b      	ldr	r3, [pc, #108]	; (80092e0 <__sfp+0x70>)
 8009274:	681e      	ldr	r6, [r3, #0]
 8009276:	69b3      	ldr	r3, [r6, #24]
 8009278:	4607      	mov	r7, r0
 800927a:	b913      	cbnz	r3, 8009282 <__sfp+0x12>
 800927c:	4630      	mov	r0, r6
 800927e:	f7ff ffc7 	bl	8009210 <__sinit>
 8009282:	3648      	adds	r6, #72	; 0x48
 8009284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009288:	3b01      	subs	r3, #1
 800928a:	d503      	bpl.n	8009294 <__sfp+0x24>
 800928c:	6833      	ldr	r3, [r6, #0]
 800928e:	b133      	cbz	r3, 800929e <__sfp+0x2e>
 8009290:	6836      	ldr	r6, [r6, #0]
 8009292:	e7f7      	b.n	8009284 <__sfp+0x14>
 8009294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009298:	b16d      	cbz	r5, 80092b6 <__sfp+0x46>
 800929a:	3468      	adds	r4, #104	; 0x68
 800929c:	e7f4      	b.n	8009288 <__sfp+0x18>
 800929e:	2104      	movs	r1, #4
 80092a0:	4638      	mov	r0, r7
 80092a2:	f7ff ff9f 	bl	80091e4 <__sfmoreglue>
 80092a6:	6030      	str	r0, [r6, #0]
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d1f1      	bne.n	8009290 <__sfp+0x20>
 80092ac:	230c      	movs	r3, #12
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	4604      	mov	r4, r0
 80092b2:	4620      	mov	r0, r4
 80092b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092b6:	4b0b      	ldr	r3, [pc, #44]	; (80092e4 <__sfp+0x74>)
 80092b8:	6665      	str	r5, [r4, #100]	; 0x64
 80092ba:	e9c4 5500 	strd	r5, r5, [r4]
 80092be:	60a5      	str	r5, [r4, #8]
 80092c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80092c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80092c8:	2208      	movs	r2, #8
 80092ca:	4629      	mov	r1, r5
 80092cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092d0:	f7ff fe86 	bl	8008fe0 <memset>
 80092d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092dc:	e7e9      	b.n	80092b2 <__sfp+0x42>
 80092de:	bf00      	nop
 80092e0:	08009e28 	.word	0x08009e28
 80092e4:	ffff0001 	.word	0xffff0001

080092e8 <_fwalk_reent>:
 80092e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092ec:	4680      	mov	r8, r0
 80092ee:	4689      	mov	r9, r1
 80092f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092f4:	2600      	movs	r6, #0
 80092f6:	b914      	cbnz	r4, 80092fe <_fwalk_reent+0x16>
 80092f8:	4630      	mov	r0, r6
 80092fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009302:	3f01      	subs	r7, #1
 8009304:	d501      	bpl.n	800930a <_fwalk_reent+0x22>
 8009306:	6824      	ldr	r4, [r4, #0]
 8009308:	e7f5      	b.n	80092f6 <_fwalk_reent+0xe>
 800930a:	89ab      	ldrh	r3, [r5, #12]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d907      	bls.n	8009320 <_fwalk_reent+0x38>
 8009310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009314:	3301      	adds	r3, #1
 8009316:	d003      	beq.n	8009320 <_fwalk_reent+0x38>
 8009318:	4629      	mov	r1, r5
 800931a:	4640      	mov	r0, r8
 800931c:	47c8      	blx	r9
 800931e:	4306      	orrs	r6, r0
 8009320:	3568      	adds	r5, #104	; 0x68
 8009322:	e7ee      	b.n	8009302 <_fwalk_reent+0x1a>

08009324 <__malloc_lock>:
 8009324:	4770      	bx	lr

08009326 <__malloc_unlock>:
 8009326:	4770      	bx	lr

08009328 <__sfputc_r>:
 8009328:	6893      	ldr	r3, [r2, #8]
 800932a:	3b01      	subs	r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	b410      	push	{r4}
 8009330:	6093      	str	r3, [r2, #8]
 8009332:	da08      	bge.n	8009346 <__sfputc_r+0x1e>
 8009334:	6994      	ldr	r4, [r2, #24]
 8009336:	42a3      	cmp	r3, r4
 8009338:	db01      	blt.n	800933e <__sfputc_r+0x16>
 800933a:	290a      	cmp	r1, #10
 800933c:	d103      	bne.n	8009346 <__sfputc_r+0x1e>
 800933e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009342:	f000 bafd 	b.w	8009940 <__swbuf_r>
 8009346:	6813      	ldr	r3, [r2, #0]
 8009348:	1c58      	adds	r0, r3, #1
 800934a:	6010      	str	r0, [r2, #0]
 800934c:	7019      	strb	r1, [r3, #0]
 800934e:	4608      	mov	r0, r1
 8009350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009354:	4770      	bx	lr

08009356 <__sfputs_r>:
 8009356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009358:	4606      	mov	r6, r0
 800935a:	460f      	mov	r7, r1
 800935c:	4614      	mov	r4, r2
 800935e:	18d5      	adds	r5, r2, r3
 8009360:	42ac      	cmp	r4, r5
 8009362:	d101      	bne.n	8009368 <__sfputs_r+0x12>
 8009364:	2000      	movs	r0, #0
 8009366:	e007      	b.n	8009378 <__sfputs_r+0x22>
 8009368:	463a      	mov	r2, r7
 800936a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800936e:	4630      	mov	r0, r6
 8009370:	f7ff ffda 	bl	8009328 <__sfputc_r>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d1f3      	bne.n	8009360 <__sfputs_r+0xa>
 8009378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800937c <_vfiprintf_r>:
 800937c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009380:	460c      	mov	r4, r1
 8009382:	b09d      	sub	sp, #116	; 0x74
 8009384:	4617      	mov	r7, r2
 8009386:	461d      	mov	r5, r3
 8009388:	4606      	mov	r6, r0
 800938a:	b118      	cbz	r0, 8009394 <_vfiprintf_r+0x18>
 800938c:	6983      	ldr	r3, [r0, #24]
 800938e:	b90b      	cbnz	r3, 8009394 <_vfiprintf_r+0x18>
 8009390:	f7ff ff3e 	bl	8009210 <__sinit>
 8009394:	4b7c      	ldr	r3, [pc, #496]	; (8009588 <_vfiprintf_r+0x20c>)
 8009396:	429c      	cmp	r4, r3
 8009398:	d158      	bne.n	800944c <_vfiprintf_r+0xd0>
 800939a:	6874      	ldr	r4, [r6, #4]
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	0718      	lsls	r0, r3, #28
 80093a0:	d55e      	bpl.n	8009460 <_vfiprintf_r+0xe4>
 80093a2:	6923      	ldr	r3, [r4, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d05b      	beq.n	8009460 <_vfiprintf_r+0xe4>
 80093a8:	2300      	movs	r3, #0
 80093aa:	9309      	str	r3, [sp, #36]	; 0x24
 80093ac:	2320      	movs	r3, #32
 80093ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093b2:	2330      	movs	r3, #48	; 0x30
 80093b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093b8:	9503      	str	r5, [sp, #12]
 80093ba:	f04f 0b01 	mov.w	fp, #1
 80093be:	46b8      	mov	r8, r7
 80093c0:	4645      	mov	r5, r8
 80093c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093c6:	b10b      	cbz	r3, 80093cc <_vfiprintf_r+0x50>
 80093c8:	2b25      	cmp	r3, #37	; 0x25
 80093ca:	d154      	bne.n	8009476 <_vfiprintf_r+0xfa>
 80093cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80093d0:	d00b      	beq.n	80093ea <_vfiprintf_r+0x6e>
 80093d2:	4653      	mov	r3, sl
 80093d4:	463a      	mov	r2, r7
 80093d6:	4621      	mov	r1, r4
 80093d8:	4630      	mov	r0, r6
 80093da:	f7ff ffbc 	bl	8009356 <__sfputs_r>
 80093de:	3001      	adds	r0, #1
 80093e0:	f000 80c2 	beq.w	8009568 <_vfiprintf_r+0x1ec>
 80093e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e6:	4453      	add	r3, sl
 80093e8:	9309      	str	r3, [sp, #36]	; 0x24
 80093ea:	f898 3000 	ldrb.w	r3, [r8]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 80ba 	beq.w	8009568 <_vfiprintf_r+0x1ec>
 80093f4:	2300      	movs	r3, #0
 80093f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093fe:	9304      	str	r3, [sp, #16]
 8009400:	9307      	str	r3, [sp, #28]
 8009402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009406:	931a      	str	r3, [sp, #104]	; 0x68
 8009408:	46a8      	mov	r8, r5
 800940a:	2205      	movs	r2, #5
 800940c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009410:	485e      	ldr	r0, [pc, #376]	; (800958c <_vfiprintf_r+0x210>)
 8009412:	f7f6 fedd 	bl	80001d0 <memchr>
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	bb78      	cbnz	r0, 800947a <_vfiprintf_r+0xfe>
 800941a:	06d9      	lsls	r1, r3, #27
 800941c:	bf44      	itt	mi
 800941e:	2220      	movmi	r2, #32
 8009420:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009424:	071a      	lsls	r2, r3, #28
 8009426:	bf44      	itt	mi
 8009428:	222b      	movmi	r2, #43	; 0x2b
 800942a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800942e:	782a      	ldrb	r2, [r5, #0]
 8009430:	2a2a      	cmp	r2, #42	; 0x2a
 8009432:	d02a      	beq.n	800948a <_vfiprintf_r+0x10e>
 8009434:	9a07      	ldr	r2, [sp, #28]
 8009436:	46a8      	mov	r8, r5
 8009438:	2000      	movs	r0, #0
 800943a:	250a      	movs	r5, #10
 800943c:	4641      	mov	r1, r8
 800943e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009442:	3b30      	subs	r3, #48	; 0x30
 8009444:	2b09      	cmp	r3, #9
 8009446:	d969      	bls.n	800951c <_vfiprintf_r+0x1a0>
 8009448:	b360      	cbz	r0, 80094a4 <_vfiprintf_r+0x128>
 800944a:	e024      	b.n	8009496 <_vfiprintf_r+0x11a>
 800944c:	4b50      	ldr	r3, [pc, #320]	; (8009590 <_vfiprintf_r+0x214>)
 800944e:	429c      	cmp	r4, r3
 8009450:	d101      	bne.n	8009456 <_vfiprintf_r+0xda>
 8009452:	68b4      	ldr	r4, [r6, #8]
 8009454:	e7a2      	b.n	800939c <_vfiprintf_r+0x20>
 8009456:	4b4f      	ldr	r3, [pc, #316]	; (8009594 <_vfiprintf_r+0x218>)
 8009458:	429c      	cmp	r4, r3
 800945a:	bf08      	it	eq
 800945c:	68f4      	ldreq	r4, [r6, #12]
 800945e:	e79d      	b.n	800939c <_vfiprintf_r+0x20>
 8009460:	4621      	mov	r1, r4
 8009462:	4630      	mov	r0, r6
 8009464:	f000 fad0 	bl	8009a08 <__swsetup_r>
 8009468:	2800      	cmp	r0, #0
 800946a:	d09d      	beq.n	80093a8 <_vfiprintf_r+0x2c>
 800946c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009470:	b01d      	add	sp, #116	; 0x74
 8009472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009476:	46a8      	mov	r8, r5
 8009478:	e7a2      	b.n	80093c0 <_vfiprintf_r+0x44>
 800947a:	4a44      	ldr	r2, [pc, #272]	; (800958c <_vfiprintf_r+0x210>)
 800947c:	1a80      	subs	r0, r0, r2
 800947e:	fa0b f000 	lsl.w	r0, fp, r0
 8009482:	4318      	orrs	r0, r3
 8009484:	9004      	str	r0, [sp, #16]
 8009486:	4645      	mov	r5, r8
 8009488:	e7be      	b.n	8009408 <_vfiprintf_r+0x8c>
 800948a:	9a03      	ldr	r2, [sp, #12]
 800948c:	1d11      	adds	r1, r2, #4
 800948e:	6812      	ldr	r2, [r2, #0]
 8009490:	9103      	str	r1, [sp, #12]
 8009492:	2a00      	cmp	r2, #0
 8009494:	db01      	blt.n	800949a <_vfiprintf_r+0x11e>
 8009496:	9207      	str	r2, [sp, #28]
 8009498:	e004      	b.n	80094a4 <_vfiprintf_r+0x128>
 800949a:	4252      	negs	r2, r2
 800949c:	f043 0302 	orr.w	r3, r3, #2
 80094a0:	9207      	str	r2, [sp, #28]
 80094a2:	9304      	str	r3, [sp, #16]
 80094a4:	f898 3000 	ldrb.w	r3, [r8]
 80094a8:	2b2e      	cmp	r3, #46	; 0x2e
 80094aa:	d10e      	bne.n	80094ca <_vfiprintf_r+0x14e>
 80094ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80094b0:	2b2a      	cmp	r3, #42	; 0x2a
 80094b2:	d138      	bne.n	8009526 <_vfiprintf_r+0x1aa>
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	1d1a      	adds	r2, r3, #4
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	9203      	str	r2, [sp, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	bfb8      	it	lt
 80094c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094c4:	f108 0802 	add.w	r8, r8, #2
 80094c8:	9305      	str	r3, [sp, #20]
 80094ca:	4d33      	ldr	r5, [pc, #204]	; (8009598 <_vfiprintf_r+0x21c>)
 80094cc:	f898 1000 	ldrb.w	r1, [r8]
 80094d0:	2203      	movs	r2, #3
 80094d2:	4628      	mov	r0, r5
 80094d4:	f7f6 fe7c 	bl	80001d0 <memchr>
 80094d8:	b140      	cbz	r0, 80094ec <_vfiprintf_r+0x170>
 80094da:	2340      	movs	r3, #64	; 0x40
 80094dc:	1b40      	subs	r0, r0, r5
 80094de:	fa03 f000 	lsl.w	r0, r3, r0
 80094e2:	9b04      	ldr	r3, [sp, #16]
 80094e4:	4303      	orrs	r3, r0
 80094e6:	f108 0801 	add.w	r8, r8, #1
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	f898 1000 	ldrb.w	r1, [r8]
 80094f0:	482a      	ldr	r0, [pc, #168]	; (800959c <_vfiprintf_r+0x220>)
 80094f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094f6:	2206      	movs	r2, #6
 80094f8:	f108 0701 	add.w	r7, r8, #1
 80094fc:	f7f6 fe68 	bl	80001d0 <memchr>
 8009500:	2800      	cmp	r0, #0
 8009502:	d037      	beq.n	8009574 <_vfiprintf_r+0x1f8>
 8009504:	4b26      	ldr	r3, [pc, #152]	; (80095a0 <_vfiprintf_r+0x224>)
 8009506:	bb1b      	cbnz	r3, 8009550 <_vfiprintf_r+0x1d4>
 8009508:	9b03      	ldr	r3, [sp, #12]
 800950a:	3307      	adds	r3, #7
 800950c:	f023 0307 	bic.w	r3, r3, #7
 8009510:	3308      	adds	r3, #8
 8009512:	9303      	str	r3, [sp, #12]
 8009514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009516:	444b      	add	r3, r9
 8009518:	9309      	str	r3, [sp, #36]	; 0x24
 800951a:	e750      	b.n	80093be <_vfiprintf_r+0x42>
 800951c:	fb05 3202 	mla	r2, r5, r2, r3
 8009520:	2001      	movs	r0, #1
 8009522:	4688      	mov	r8, r1
 8009524:	e78a      	b.n	800943c <_vfiprintf_r+0xc0>
 8009526:	2300      	movs	r3, #0
 8009528:	f108 0801 	add.w	r8, r8, #1
 800952c:	9305      	str	r3, [sp, #20]
 800952e:	4619      	mov	r1, r3
 8009530:	250a      	movs	r5, #10
 8009532:	4640      	mov	r0, r8
 8009534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009538:	3a30      	subs	r2, #48	; 0x30
 800953a:	2a09      	cmp	r2, #9
 800953c:	d903      	bls.n	8009546 <_vfiprintf_r+0x1ca>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0c3      	beq.n	80094ca <_vfiprintf_r+0x14e>
 8009542:	9105      	str	r1, [sp, #20]
 8009544:	e7c1      	b.n	80094ca <_vfiprintf_r+0x14e>
 8009546:	fb05 2101 	mla	r1, r5, r1, r2
 800954a:	2301      	movs	r3, #1
 800954c:	4680      	mov	r8, r0
 800954e:	e7f0      	b.n	8009532 <_vfiprintf_r+0x1b6>
 8009550:	ab03      	add	r3, sp, #12
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	4622      	mov	r2, r4
 8009556:	4b13      	ldr	r3, [pc, #76]	; (80095a4 <_vfiprintf_r+0x228>)
 8009558:	a904      	add	r1, sp, #16
 800955a:	4630      	mov	r0, r6
 800955c:	f3af 8000 	nop.w
 8009560:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009564:	4681      	mov	r9, r0
 8009566:	d1d5      	bne.n	8009514 <_vfiprintf_r+0x198>
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	065b      	lsls	r3, r3, #25
 800956c:	f53f af7e 	bmi.w	800946c <_vfiprintf_r+0xf0>
 8009570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009572:	e77d      	b.n	8009470 <_vfiprintf_r+0xf4>
 8009574:	ab03      	add	r3, sp, #12
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	4622      	mov	r2, r4
 800957a:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <_vfiprintf_r+0x228>)
 800957c:	a904      	add	r1, sp, #16
 800957e:	4630      	mov	r0, r6
 8009580:	f000 f888 	bl	8009694 <_printf_i>
 8009584:	e7ec      	b.n	8009560 <_vfiprintf_r+0x1e4>
 8009586:	bf00      	nop
 8009588:	08009e4c 	.word	0x08009e4c
 800958c:	08009e8c 	.word	0x08009e8c
 8009590:	08009e6c 	.word	0x08009e6c
 8009594:	08009e2c 	.word	0x08009e2c
 8009598:	08009e92 	.word	0x08009e92
 800959c:	08009e96 	.word	0x08009e96
 80095a0:	00000000 	.word	0x00000000
 80095a4:	08009357 	.word	0x08009357

080095a8 <_printf_common>:
 80095a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ac:	4691      	mov	r9, r2
 80095ae:	461f      	mov	r7, r3
 80095b0:	688a      	ldr	r2, [r1, #8]
 80095b2:	690b      	ldr	r3, [r1, #16]
 80095b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095b8:	4293      	cmp	r3, r2
 80095ba:	bfb8      	it	lt
 80095bc:	4613      	movlt	r3, r2
 80095be:	f8c9 3000 	str.w	r3, [r9]
 80095c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095c6:	4606      	mov	r6, r0
 80095c8:	460c      	mov	r4, r1
 80095ca:	b112      	cbz	r2, 80095d2 <_printf_common+0x2a>
 80095cc:	3301      	adds	r3, #1
 80095ce:	f8c9 3000 	str.w	r3, [r9]
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	0699      	lsls	r1, r3, #26
 80095d6:	bf42      	ittt	mi
 80095d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80095dc:	3302      	addmi	r3, #2
 80095de:	f8c9 3000 	strmi.w	r3, [r9]
 80095e2:	6825      	ldr	r5, [r4, #0]
 80095e4:	f015 0506 	ands.w	r5, r5, #6
 80095e8:	d107      	bne.n	80095fa <_printf_common+0x52>
 80095ea:	f104 0a19 	add.w	sl, r4, #25
 80095ee:	68e3      	ldr	r3, [r4, #12]
 80095f0:	f8d9 2000 	ldr.w	r2, [r9]
 80095f4:	1a9b      	subs	r3, r3, r2
 80095f6:	42ab      	cmp	r3, r5
 80095f8:	dc28      	bgt.n	800964c <_printf_common+0xa4>
 80095fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80095fe:	6822      	ldr	r2, [r4, #0]
 8009600:	3300      	adds	r3, #0
 8009602:	bf18      	it	ne
 8009604:	2301      	movne	r3, #1
 8009606:	0692      	lsls	r2, r2, #26
 8009608:	d42d      	bmi.n	8009666 <_printf_common+0xbe>
 800960a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800960e:	4639      	mov	r1, r7
 8009610:	4630      	mov	r0, r6
 8009612:	47c0      	blx	r8
 8009614:	3001      	adds	r0, #1
 8009616:	d020      	beq.n	800965a <_printf_common+0xb2>
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	68e5      	ldr	r5, [r4, #12]
 800961c:	f8d9 2000 	ldr.w	r2, [r9]
 8009620:	f003 0306 	and.w	r3, r3, #6
 8009624:	2b04      	cmp	r3, #4
 8009626:	bf08      	it	eq
 8009628:	1aad      	subeq	r5, r5, r2
 800962a:	68a3      	ldr	r3, [r4, #8]
 800962c:	6922      	ldr	r2, [r4, #16]
 800962e:	bf0c      	ite	eq
 8009630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009634:	2500      	movne	r5, #0
 8009636:	4293      	cmp	r3, r2
 8009638:	bfc4      	itt	gt
 800963a:	1a9b      	subgt	r3, r3, r2
 800963c:	18ed      	addgt	r5, r5, r3
 800963e:	f04f 0900 	mov.w	r9, #0
 8009642:	341a      	adds	r4, #26
 8009644:	454d      	cmp	r5, r9
 8009646:	d11a      	bne.n	800967e <_printf_common+0xd6>
 8009648:	2000      	movs	r0, #0
 800964a:	e008      	b.n	800965e <_printf_common+0xb6>
 800964c:	2301      	movs	r3, #1
 800964e:	4652      	mov	r2, sl
 8009650:	4639      	mov	r1, r7
 8009652:	4630      	mov	r0, r6
 8009654:	47c0      	blx	r8
 8009656:	3001      	adds	r0, #1
 8009658:	d103      	bne.n	8009662 <_printf_common+0xba>
 800965a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800965e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009662:	3501      	adds	r5, #1
 8009664:	e7c3      	b.n	80095ee <_printf_common+0x46>
 8009666:	18e1      	adds	r1, r4, r3
 8009668:	1c5a      	adds	r2, r3, #1
 800966a:	2030      	movs	r0, #48	; 0x30
 800966c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009670:	4422      	add	r2, r4
 8009672:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009676:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800967a:	3302      	adds	r3, #2
 800967c:	e7c5      	b.n	800960a <_printf_common+0x62>
 800967e:	2301      	movs	r3, #1
 8009680:	4622      	mov	r2, r4
 8009682:	4639      	mov	r1, r7
 8009684:	4630      	mov	r0, r6
 8009686:	47c0      	blx	r8
 8009688:	3001      	adds	r0, #1
 800968a:	d0e6      	beq.n	800965a <_printf_common+0xb2>
 800968c:	f109 0901 	add.w	r9, r9, #1
 8009690:	e7d8      	b.n	8009644 <_printf_common+0x9c>
	...

08009694 <_printf_i>:
 8009694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009698:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800969c:	460c      	mov	r4, r1
 800969e:	7e09      	ldrb	r1, [r1, #24]
 80096a0:	b085      	sub	sp, #20
 80096a2:	296e      	cmp	r1, #110	; 0x6e
 80096a4:	4617      	mov	r7, r2
 80096a6:	4606      	mov	r6, r0
 80096a8:	4698      	mov	r8, r3
 80096aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096ac:	f000 80b3 	beq.w	8009816 <_printf_i+0x182>
 80096b0:	d822      	bhi.n	80096f8 <_printf_i+0x64>
 80096b2:	2963      	cmp	r1, #99	; 0x63
 80096b4:	d036      	beq.n	8009724 <_printf_i+0x90>
 80096b6:	d80a      	bhi.n	80096ce <_printf_i+0x3a>
 80096b8:	2900      	cmp	r1, #0
 80096ba:	f000 80b9 	beq.w	8009830 <_printf_i+0x19c>
 80096be:	2958      	cmp	r1, #88	; 0x58
 80096c0:	f000 8083 	beq.w	80097ca <_printf_i+0x136>
 80096c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80096cc:	e032      	b.n	8009734 <_printf_i+0xa0>
 80096ce:	2964      	cmp	r1, #100	; 0x64
 80096d0:	d001      	beq.n	80096d6 <_printf_i+0x42>
 80096d2:	2969      	cmp	r1, #105	; 0x69
 80096d4:	d1f6      	bne.n	80096c4 <_printf_i+0x30>
 80096d6:	6820      	ldr	r0, [r4, #0]
 80096d8:	6813      	ldr	r3, [r2, #0]
 80096da:	0605      	lsls	r5, r0, #24
 80096dc:	f103 0104 	add.w	r1, r3, #4
 80096e0:	d52a      	bpl.n	8009738 <_printf_i+0xa4>
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6011      	str	r1, [r2, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	da03      	bge.n	80096f2 <_printf_i+0x5e>
 80096ea:	222d      	movs	r2, #45	; 0x2d
 80096ec:	425b      	negs	r3, r3
 80096ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80096f2:	486f      	ldr	r0, [pc, #444]	; (80098b0 <_printf_i+0x21c>)
 80096f4:	220a      	movs	r2, #10
 80096f6:	e039      	b.n	800976c <_printf_i+0xd8>
 80096f8:	2973      	cmp	r1, #115	; 0x73
 80096fa:	f000 809d 	beq.w	8009838 <_printf_i+0x1a4>
 80096fe:	d808      	bhi.n	8009712 <_printf_i+0x7e>
 8009700:	296f      	cmp	r1, #111	; 0x6f
 8009702:	d020      	beq.n	8009746 <_printf_i+0xb2>
 8009704:	2970      	cmp	r1, #112	; 0x70
 8009706:	d1dd      	bne.n	80096c4 <_printf_i+0x30>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	f043 0320 	orr.w	r3, r3, #32
 800970e:	6023      	str	r3, [r4, #0]
 8009710:	e003      	b.n	800971a <_printf_i+0x86>
 8009712:	2975      	cmp	r1, #117	; 0x75
 8009714:	d017      	beq.n	8009746 <_printf_i+0xb2>
 8009716:	2978      	cmp	r1, #120	; 0x78
 8009718:	d1d4      	bne.n	80096c4 <_printf_i+0x30>
 800971a:	2378      	movs	r3, #120	; 0x78
 800971c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009720:	4864      	ldr	r0, [pc, #400]	; (80098b4 <_printf_i+0x220>)
 8009722:	e055      	b.n	80097d0 <_printf_i+0x13c>
 8009724:	6813      	ldr	r3, [r2, #0]
 8009726:	1d19      	adds	r1, r3, #4
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6011      	str	r1, [r2, #0]
 800972c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009734:	2301      	movs	r3, #1
 8009736:	e08c      	b.n	8009852 <_printf_i+0x1be>
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6011      	str	r1, [r2, #0]
 800973c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009740:	bf18      	it	ne
 8009742:	b21b      	sxthne	r3, r3
 8009744:	e7cf      	b.n	80096e6 <_printf_i+0x52>
 8009746:	6813      	ldr	r3, [r2, #0]
 8009748:	6825      	ldr	r5, [r4, #0]
 800974a:	1d18      	adds	r0, r3, #4
 800974c:	6010      	str	r0, [r2, #0]
 800974e:	0628      	lsls	r0, r5, #24
 8009750:	d501      	bpl.n	8009756 <_printf_i+0xc2>
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	e002      	b.n	800975c <_printf_i+0xc8>
 8009756:	0668      	lsls	r0, r5, #25
 8009758:	d5fb      	bpl.n	8009752 <_printf_i+0xbe>
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	4854      	ldr	r0, [pc, #336]	; (80098b0 <_printf_i+0x21c>)
 800975e:	296f      	cmp	r1, #111	; 0x6f
 8009760:	bf14      	ite	ne
 8009762:	220a      	movne	r2, #10
 8009764:	2208      	moveq	r2, #8
 8009766:	2100      	movs	r1, #0
 8009768:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800976c:	6865      	ldr	r5, [r4, #4]
 800976e:	60a5      	str	r5, [r4, #8]
 8009770:	2d00      	cmp	r5, #0
 8009772:	f2c0 8095 	blt.w	80098a0 <_printf_i+0x20c>
 8009776:	6821      	ldr	r1, [r4, #0]
 8009778:	f021 0104 	bic.w	r1, r1, #4
 800977c:	6021      	str	r1, [r4, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d13d      	bne.n	80097fe <_printf_i+0x16a>
 8009782:	2d00      	cmp	r5, #0
 8009784:	f040 808e 	bne.w	80098a4 <_printf_i+0x210>
 8009788:	4665      	mov	r5, ip
 800978a:	2a08      	cmp	r2, #8
 800978c:	d10b      	bne.n	80097a6 <_printf_i+0x112>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	07db      	lsls	r3, r3, #31
 8009792:	d508      	bpl.n	80097a6 <_printf_i+0x112>
 8009794:	6923      	ldr	r3, [r4, #16]
 8009796:	6862      	ldr	r2, [r4, #4]
 8009798:	429a      	cmp	r2, r3
 800979a:	bfde      	ittt	le
 800979c:	2330      	movle	r3, #48	; 0x30
 800979e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097a2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80097a6:	ebac 0305 	sub.w	r3, ip, r5
 80097aa:	6123      	str	r3, [r4, #16]
 80097ac:	f8cd 8000 	str.w	r8, [sp]
 80097b0:	463b      	mov	r3, r7
 80097b2:	aa03      	add	r2, sp, #12
 80097b4:	4621      	mov	r1, r4
 80097b6:	4630      	mov	r0, r6
 80097b8:	f7ff fef6 	bl	80095a8 <_printf_common>
 80097bc:	3001      	adds	r0, #1
 80097be:	d14d      	bne.n	800985c <_printf_i+0x1c8>
 80097c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097c4:	b005      	add	sp, #20
 80097c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ca:	4839      	ldr	r0, [pc, #228]	; (80098b0 <_printf_i+0x21c>)
 80097cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80097d0:	6813      	ldr	r3, [r2, #0]
 80097d2:	6821      	ldr	r1, [r4, #0]
 80097d4:	1d1d      	adds	r5, r3, #4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6015      	str	r5, [r2, #0]
 80097da:	060a      	lsls	r2, r1, #24
 80097dc:	d50b      	bpl.n	80097f6 <_printf_i+0x162>
 80097de:	07ca      	lsls	r2, r1, #31
 80097e0:	bf44      	itt	mi
 80097e2:	f041 0120 	orrmi.w	r1, r1, #32
 80097e6:	6021      	strmi	r1, [r4, #0]
 80097e8:	b91b      	cbnz	r3, 80097f2 <_printf_i+0x15e>
 80097ea:	6822      	ldr	r2, [r4, #0]
 80097ec:	f022 0220 	bic.w	r2, r2, #32
 80097f0:	6022      	str	r2, [r4, #0]
 80097f2:	2210      	movs	r2, #16
 80097f4:	e7b7      	b.n	8009766 <_printf_i+0xd2>
 80097f6:	064d      	lsls	r5, r1, #25
 80097f8:	bf48      	it	mi
 80097fa:	b29b      	uxthmi	r3, r3
 80097fc:	e7ef      	b.n	80097de <_printf_i+0x14a>
 80097fe:	4665      	mov	r5, ip
 8009800:	fbb3 f1f2 	udiv	r1, r3, r2
 8009804:	fb02 3311 	mls	r3, r2, r1, r3
 8009808:	5cc3      	ldrb	r3, [r0, r3]
 800980a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800980e:	460b      	mov	r3, r1
 8009810:	2900      	cmp	r1, #0
 8009812:	d1f5      	bne.n	8009800 <_printf_i+0x16c>
 8009814:	e7b9      	b.n	800978a <_printf_i+0xf6>
 8009816:	6813      	ldr	r3, [r2, #0]
 8009818:	6825      	ldr	r5, [r4, #0]
 800981a:	6961      	ldr	r1, [r4, #20]
 800981c:	1d18      	adds	r0, r3, #4
 800981e:	6010      	str	r0, [r2, #0]
 8009820:	0628      	lsls	r0, r5, #24
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	d501      	bpl.n	800982a <_printf_i+0x196>
 8009826:	6019      	str	r1, [r3, #0]
 8009828:	e002      	b.n	8009830 <_printf_i+0x19c>
 800982a:	066a      	lsls	r2, r5, #25
 800982c:	d5fb      	bpl.n	8009826 <_printf_i+0x192>
 800982e:	8019      	strh	r1, [r3, #0]
 8009830:	2300      	movs	r3, #0
 8009832:	6123      	str	r3, [r4, #16]
 8009834:	4665      	mov	r5, ip
 8009836:	e7b9      	b.n	80097ac <_printf_i+0x118>
 8009838:	6813      	ldr	r3, [r2, #0]
 800983a:	1d19      	adds	r1, r3, #4
 800983c:	6011      	str	r1, [r2, #0]
 800983e:	681d      	ldr	r5, [r3, #0]
 8009840:	6862      	ldr	r2, [r4, #4]
 8009842:	2100      	movs	r1, #0
 8009844:	4628      	mov	r0, r5
 8009846:	f7f6 fcc3 	bl	80001d0 <memchr>
 800984a:	b108      	cbz	r0, 8009850 <_printf_i+0x1bc>
 800984c:	1b40      	subs	r0, r0, r5
 800984e:	6060      	str	r0, [r4, #4]
 8009850:	6863      	ldr	r3, [r4, #4]
 8009852:	6123      	str	r3, [r4, #16]
 8009854:	2300      	movs	r3, #0
 8009856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800985a:	e7a7      	b.n	80097ac <_printf_i+0x118>
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	462a      	mov	r2, r5
 8009860:	4639      	mov	r1, r7
 8009862:	4630      	mov	r0, r6
 8009864:	47c0      	blx	r8
 8009866:	3001      	adds	r0, #1
 8009868:	d0aa      	beq.n	80097c0 <_printf_i+0x12c>
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	079b      	lsls	r3, r3, #30
 800986e:	d413      	bmi.n	8009898 <_printf_i+0x204>
 8009870:	68e0      	ldr	r0, [r4, #12]
 8009872:	9b03      	ldr	r3, [sp, #12]
 8009874:	4298      	cmp	r0, r3
 8009876:	bfb8      	it	lt
 8009878:	4618      	movlt	r0, r3
 800987a:	e7a3      	b.n	80097c4 <_printf_i+0x130>
 800987c:	2301      	movs	r3, #1
 800987e:	464a      	mov	r2, r9
 8009880:	4639      	mov	r1, r7
 8009882:	4630      	mov	r0, r6
 8009884:	47c0      	blx	r8
 8009886:	3001      	adds	r0, #1
 8009888:	d09a      	beq.n	80097c0 <_printf_i+0x12c>
 800988a:	3501      	adds	r5, #1
 800988c:	68e3      	ldr	r3, [r4, #12]
 800988e:	9a03      	ldr	r2, [sp, #12]
 8009890:	1a9b      	subs	r3, r3, r2
 8009892:	42ab      	cmp	r3, r5
 8009894:	dcf2      	bgt.n	800987c <_printf_i+0x1e8>
 8009896:	e7eb      	b.n	8009870 <_printf_i+0x1dc>
 8009898:	2500      	movs	r5, #0
 800989a:	f104 0919 	add.w	r9, r4, #25
 800989e:	e7f5      	b.n	800988c <_printf_i+0x1f8>
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1ac      	bne.n	80097fe <_printf_i+0x16a>
 80098a4:	7803      	ldrb	r3, [r0, #0]
 80098a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ae:	e76c      	b.n	800978a <_printf_i+0xf6>
 80098b0:	08009e9d 	.word	0x08009e9d
 80098b4:	08009eae 	.word	0x08009eae

080098b8 <__sread>:
 80098b8:	b510      	push	{r4, lr}
 80098ba:	460c      	mov	r4, r1
 80098bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c0:	f000 fa46 	bl	8009d50 <_read_r>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	bfab      	itete	ge
 80098c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098ca:	89a3      	ldrhlt	r3, [r4, #12]
 80098cc:	181b      	addge	r3, r3, r0
 80098ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098d2:	bfac      	ite	ge
 80098d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098d6:	81a3      	strhlt	r3, [r4, #12]
 80098d8:	bd10      	pop	{r4, pc}

080098da <__swrite>:
 80098da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098de:	461f      	mov	r7, r3
 80098e0:	898b      	ldrh	r3, [r1, #12]
 80098e2:	05db      	lsls	r3, r3, #23
 80098e4:	4605      	mov	r5, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	4616      	mov	r6, r2
 80098ea:	d505      	bpl.n	80098f8 <__swrite+0x1e>
 80098ec:	2302      	movs	r3, #2
 80098ee:	2200      	movs	r2, #0
 80098f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f4:	f000 f9b6 	bl	8009c64 <_lseek_r>
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009902:	81a3      	strh	r3, [r4, #12]
 8009904:	4632      	mov	r2, r6
 8009906:	463b      	mov	r3, r7
 8009908:	4628      	mov	r0, r5
 800990a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800990e:	f000 b869 	b.w	80099e4 <_write_r>

08009912 <__sseek>:
 8009912:	b510      	push	{r4, lr}
 8009914:	460c      	mov	r4, r1
 8009916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800991a:	f000 f9a3 	bl	8009c64 <_lseek_r>
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	bf15      	itete	ne
 8009924:	6560      	strne	r0, [r4, #84]	; 0x54
 8009926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800992a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800992e:	81a3      	strheq	r3, [r4, #12]
 8009930:	bf18      	it	ne
 8009932:	81a3      	strhne	r3, [r4, #12]
 8009934:	bd10      	pop	{r4, pc}

08009936 <__sclose>:
 8009936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993a:	f000 b8d3 	b.w	8009ae4 <_close_r>
	...

08009940 <__swbuf_r>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	460e      	mov	r6, r1
 8009944:	4614      	mov	r4, r2
 8009946:	4605      	mov	r5, r0
 8009948:	b118      	cbz	r0, 8009952 <__swbuf_r+0x12>
 800994a:	6983      	ldr	r3, [r0, #24]
 800994c:	b90b      	cbnz	r3, 8009952 <__swbuf_r+0x12>
 800994e:	f7ff fc5f 	bl	8009210 <__sinit>
 8009952:	4b21      	ldr	r3, [pc, #132]	; (80099d8 <__swbuf_r+0x98>)
 8009954:	429c      	cmp	r4, r3
 8009956:	d12a      	bne.n	80099ae <__swbuf_r+0x6e>
 8009958:	686c      	ldr	r4, [r5, #4]
 800995a:	69a3      	ldr	r3, [r4, #24]
 800995c:	60a3      	str	r3, [r4, #8]
 800995e:	89a3      	ldrh	r3, [r4, #12]
 8009960:	071a      	lsls	r2, r3, #28
 8009962:	d52e      	bpl.n	80099c2 <__swbuf_r+0x82>
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	b363      	cbz	r3, 80099c2 <__swbuf_r+0x82>
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	6820      	ldr	r0, [r4, #0]
 800996c:	1ac0      	subs	r0, r0, r3
 800996e:	6963      	ldr	r3, [r4, #20]
 8009970:	b2f6      	uxtb	r6, r6
 8009972:	4283      	cmp	r3, r0
 8009974:	4637      	mov	r7, r6
 8009976:	dc04      	bgt.n	8009982 <__swbuf_r+0x42>
 8009978:	4621      	mov	r1, r4
 800997a:	4628      	mov	r0, r5
 800997c:	f000 f948 	bl	8009c10 <_fflush_r>
 8009980:	bb28      	cbnz	r0, 80099ce <__swbuf_r+0x8e>
 8009982:	68a3      	ldr	r3, [r4, #8]
 8009984:	3b01      	subs	r3, #1
 8009986:	60a3      	str	r3, [r4, #8]
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	6022      	str	r2, [r4, #0]
 800998e:	701e      	strb	r6, [r3, #0]
 8009990:	6963      	ldr	r3, [r4, #20]
 8009992:	3001      	adds	r0, #1
 8009994:	4283      	cmp	r3, r0
 8009996:	d004      	beq.n	80099a2 <__swbuf_r+0x62>
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	07db      	lsls	r3, r3, #31
 800999c:	d519      	bpl.n	80099d2 <__swbuf_r+0x92>
 800999e:	2e0a      	cmp	r6, #10
 80099a0:	d117      	bne.n	80099d2 <__swbuf_r+0x92>
 80099a2:	4621      	mov	r1, r4
 80099a4:	4628      	mov	r0, r5
 80099a6:	f000 f933 	bl	8009c10 <_fflush_r>
 80099aa:	b190      	cbz	r0, 80099d2 <__swbuf_r+0x92>
 80099ac:	e00f      	b.n	80099ce <__swbuf_r+0x8e>
 80099ae:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <__swbuf_r+0x9c>)
 80099b0:	429c      	cmp	r4, r3
 80099b2:	d101      	bne.n	80099b8 <__swbuf_r+0x78>
 80099b4:	68ac      	ldr	r4, [r5, #8]
 80099b6:	e7d0      	b.n	800995a <__swbuf_r+0x1a>
 80099b8:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <__swbuf_r+0xa0>)
 80099ba:	429c      	cmp	r4, r3
 80099bc:	bf08      	it	eq
 80099be:	68ec      	ldreq	r4, [r5, #12]
 80099c0:	e7cb      	b.n	800995a <__swbuf_r+0x1a>
 80099c2:	4621      	mov	r1, r4
 80099c4:	4628      	mov	r0, r5
 80099c6:	f000 f81f 	bl	8009a08 <__swsetup_r>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d0cc      	beq.n	8009968 <__swbuf_r+0x28>
 80099ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80099d2:	4638      	mov	r0, r7
 80099d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d6:	bf00      	nop
 80099d8:	08009e4c 	.word	0x08009e4c
 80099dc:	08009e6c 	.word	0x08009e6c
 80099e0:	08009e2c 	.word	0x08009e2c

080099e4 <_write_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4c07      	ldr	r4, [pc, #28]	; (8009a04 <_write_r+0x20>)
 80099e8:	4605      	mov	r5, r0
 80099ea:	4608      	mov	r0, r1
 80099ec:	4611      	mov	r1, r2
 80099ee:	2200      	movs	r2, #0
 80099f0:	6022      	str	r2, [r4, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	f7f7 fee5 	bl	80017c2 <_write>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_write_r+0x1e>
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_write_r+0x1e>
 8009a00:	602b      	str	r3, [r5, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	20000874 	.word	0x20000874

08009a08 <__swsetup_r>:
 8009a08:	4b32      	ldr	r3, [pc, #200]	; (8009ad4 <__swsetup_r+0xcc>)
 8009a0a:	b570      	push	{r4, r5, r6, lr}
 8009a0c:	681d      	ldr	r5, [r3, #0]
 8009a0e:	4606      	mov	r6, r0
 8009a10:	460c      	mov	r4, r1
 8009a12:	b125      	cbz	r5, 8009a1e <__swsetup_r+0x16>
 8009a14:	69ab      	ldr	r3, [r5, #24]
 8009a16:	b913      	cbnz	r3, 8009a1e <__swsetup_r+0x16>
 8009a18:	4628      	mov	r0, r5
 8009a1a:	f7ff fbf9 	bl	8009210 <__sinit>
 8009a1e:	4b2e      	ldr	r3, [pc, #184]	; (8009ad8 <__swsetup_r+0xd0>)
 8009a20:	429c      	cmp	r4, r3
 8009a22:	d10f      	bne.n	8009a44 <__swsetup_r+0x3c>
 8009a24:	686c      	ldr	r4, [r5, #4]
 8009a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	0715      	lsls	r5, r2, #28
 8009a2e:	d42c      	bmi.n	8009a8a <__swsetup_r+0x82>
 8009a30:	06d0      	lsls	r0, r2, #27
 8009a32:	d411      	bmi.n	8009a58 <__swsetup_r+0x50>
 8009a34:	2209      	movs	r2, #9
 8009a36:	6032      	str	r2, [r6, #0]
 8009a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3c:	81a3      	strh	r3, [r4, #12]
 8009a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a42:	e03e      	b.n	8009ac2 <__swsetup_r+0xba>
 8009a44:	4b25      	ldr	r3, [pc, #148]	; (8009adc <__swsetup_r+0xd4>)
 8009a46:	429c      	cmp	r4, r3
 8009a48:	d101      	bne.n	8009a4e <__swsetup_r+0x46>
 8009a4a:	68ac      	ldr	r4, [r5, #8]
 8009a4c:	e7eb      	b.n	8009a26 <__swsetup_r+0x1e>
 8009a4e:	4b24      	ldr	r3, [pc, #144]	; (8009ae0 <__swsetup_r+0xd8>)
 8009a50:	429c      	cmp	r4, r3
 8009a52:	bf08      	it	eq
 8009a54:	68ec      	ldreq	r4, [r5, #12]
 8009a56:	e7e6      	b.n	8009a26 <__swsetup_r+0x1e>
 8009a58:	0751      	lsls	r1, r2, #29
 8009a5a:	d512      	bpl.n	8009a82 <__swsetup_r+0x7a>
 8009a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a5e:	b141      	cbz	r1, 8009a72 <__swsetup_r+0x6a>
 8009a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a64:	4299      	cmp	r1, r3
 8009a66:	d002      	beq.n	8009a6e <__swsetup_r+0x66>
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f7ff fac1 	bl	8008ff0 <_free_r>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	6363      	str	r3, [r4, #52]	; 0x34
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a78:	81a3      	strh	r3, [r4, #12]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	6063      	str	r3, [r4, #4]
 8009a7e:	6923      	ldr	r3, [r4, #16]
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	f043 0308 	orr.w	r3, r3, #8
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	b94b      	cbnz	r3, 8009aa2 <__swsetup_r+0x9a>
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a98:	d003      	beq.n	8009aa2 <__swsetup_r+0x9a>
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f000 f917 	bl	8009cd0 <__smakebuf_r>
 8009aa2:	89a2      	ldrh	r2, [r4, #12]
 8009aa4:	f012 0301 	ands.w	r3, r2, #1
 8009aa8:	d00c      	beq.n	8009ac4 <__swsetup_r+0xbc>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60a3      	str	r3, [r4, #8]
 8009aae:	6963      	ldr	r3, [r4, #20]
 8009ab0:	425b      	negs	r3, r3
 8009ab2:	61a3      	str	r3, [r4, #24]
 8009ab4:	6923      	ldr	r3, [r4, #16]
 8009ab6:	b953      	cbnz	r3, 8009ace <__swsetup_r+0xc6>
 8009ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009abc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009ac0:	d1ba      	bne.n	8009a38 <__swsetup_r+0x30>
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	0792      	lsls	r2, r2, #30
 8009ac6:	bf58      	it	pl
 8009ac8:	6963      	ldrpl	r3, [r4, #20]
 8009aca:	60a3      	str	r3, [r4, #8]
 8009acc:	e7f2      	b.n	8009ab4 <__swsetup_r+0xac>
 8009ace:	2000      	movs	r0, #0
 8009ad0:	e7f7      	b.n	8009ac2 <__swsetup_r+0xba>
 8009ad2:	bf00      	nop
 8009ad4:	20000030 	.word	0x20000030
 8009ad8:	08009e4c 	.word	0x08009e4c
 8009adc:	08009e6c 	.word	0x08009e6c
 8009ae0:	08009e2c 	.word	0x08009e2c

08009ae4 <_close_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4c06      	ldr	r4, [pc, #24]	; (8009b00 <_close_r+0x1c>)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4605      	mov	r5, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	6023      	str	r3, [r4, #0]
 8009af0:	f7f7 fe83 	bl	80017fa <_close>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	d102      	bne.n	8009afe <_close_r+0x1a>
 8009af8:	6823      	ldr	r3, [r4, #0]
 8009afa:	b103      	cbz	r3, 8009afe <_close_r+0x1a>
 8009afc:	602b      	str	r3, [r5, #0]
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	20000874 	.word	0x20000874

08009b04 <__sflush_r>:
 8009b04:	898a      	ldrh	r2, [r1, #12]
 8009b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	0710      	lsls	r0, r2, #28
 8009b0e:	460c      	mov	r4, r1
 8009b10:	d458      	bmi.n	8009bc4 <__sflush_r+0xc0>
 8009b12:	684b      	ldr	r3, [r1, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	dc05      	bgt.n	8009b24 <__sflush_r+0x20>
 8009b18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	dc02      	bgt.n	8009b24 <__sflush_r+0x20>
 8009b1e:	2000      	movs	r0, #0
 8009b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b26:	2e00      	cmp	r6, #0
 8009b28:	d0f9      	beq.n	8009b1e <__sflush_r+0x1a>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b30:	682f      	ldr	r7, [r5, #0]
 8009b32:	6a21      	ldr	r1, [r4, #32]
 8009b34:	602b      	str	r3, [r5, #0]
 8009b36:	d032      	beq.n	8009b9e <__sflush_r+0x9a>
 8009b38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	075a      	lsls	r2, r3, #29
 8009b3e:	d505      	bpl.n	8009b4c <__sflush_r+0x48>
 8009b40:	6863      	ldr	r3, [r4, #4]
 8009b42:	1ac0      	subs	r0, r0, r3
 8009b44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b46:	b10b      	cbz	r3, 8009b4c <__sflush_r+0x48>
 8009b48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b4a:	1ac0      	subs	r0, r0, r3
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	4602      	mov	r2, r0
 8009b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b52:	6a21      	ldr	r1, [r4, #32]
 8009b54:	4628      	mov	r0, r5
 8009b56:	47b0      	blx	r6
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	89a3      	ldrh	r3, [r4, #12]
 8009b5c:	d106      	bne.n	8009b6c <__sflush_r+0x68>
 8009b5e:	6829      	ldr	r1, [r5, #0]
 8009b60:	291d      	cmp	r1, #29
 8009b62:	d848      	bhi.n	8009bf6 <__sflush_r+0xf2>
 8009b64:	4a29      	ldr	r2, [pc, #164]	; (8009c0c <__sflush_r+0x108>)
 8009b66:	40ca      	lsrs	r2, r1
 8009b68:	07d6      	lsls	r6, r2, #31
 8009b6a:	d544      	bpl.n	8009bf6 <__sflush_r+0xf2>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	6062      	str	r2, [r4, #4]
 8009b70:	04d9      	lsls	r1, r3, #19
 8009b72:	6922      	ldr	r2, [r4, #16]
 8009b74:	6022      	str	r2, [r4, #0]
 8009b76:	d504      	bpl.n	8009b82 <__sflush_r+0x7e>
 8009b78:	1c42      	adds	r2, r0, #1
 8009b7a:	d101      	bne.n	8009b80 <__sflush_r+0x7c>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	b903      	cbnz	r3, 8009b82 <__sflush_r+0x7e>
 8009b80:	6560      	str	r0, [r4, #84]	; 0x54
 8009b82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b84:	602f      	str	r7, [r5, #0]
 8009b86:	2900      	cmp	r1, #0
 8009b88:	d0c9      	beq.n	8009b1e <__sflush_r+0x1a>
 8009b8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b8e:	4299      	cmp	r1, r3
 8009b90:	d002      	beq.n	8009b98 <__sflush_r+0x94>
 8009b92:	4628      	mov	r0, r5
 8009b94:	f7ff fa2c 	bl	8008ff0 <_free_r>
 8009b98:	2000      	movs	r0, #0
 8009b9a:	6360      	str	r0, [r4, #52]	; 0x34
 8009b9c:	e7c0      	b.n	8009b20 <__sflush_r+0x1c>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	47b0      	blx	r6
 8009ba4:	1c41      	adds	r1, r0, #1
 8009ba6:	d1c8      	bne.n	8009b3a <__sflush_r+0x36>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0c5      	beq.n	8009b3a <__sflush_r+0x36>
 8009bae:	2b1d      	cmp	r3, #29
 8009bb0:	d001      	beq.n	8009bb6 <__sflush_r+0xb2>
 8009bb2:	2b16      	cmp	r3, #22
 8009bb4:	d101      	bne.n	8009bba <__sflush_r+0xb6>
 8009bb6:	602f      	str	r7, [r5, #0]
 8009bb8:	e7b1      	b.n	8009b1e <__sflush_r+0x1a>
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	e7ad      	b.n	8009b20 <__sflush_r+0x1c>
 8009bc4:	690f      	ldr	r7, [r1, #16]
 8009bc6:	2f00      	cmp	r7, #0
 8009bc8:	d0a9      	beq.n	8009b1e <__sflush_r+0x1a>
 8009bca:	0793      	lsls	r3, r2, #30
 8009bcc:	680e      	ldr	r6, [r1, #0]
 8009bce:	bf08      	it	eq
 8009bd0:	694b      	ldreq	r3, [r1, #20]
 8009bd2:	600f      	str	r7, [r1, #0]
 8009bd4:	bf18      	it	ne
 8009bd6:	2300      	movne	r3, #0
 8009bd8:	eba6 0807 	sub.w	r8, r6, r7
 8009bdc:	608b      	str	r3, [r1, #8]
 8009bde:	f1b8 0f00 	cmp.w	r8, #0
 8009be2:	dd9c      	ble.n	8009b1e <__sflush_r+0x1a>
 8009be4:	4643      	mov	r3, r8
 8009be6:	463a      	mov	r2, r7
 8009be8:	6a21      	ldr	r1, [r4, #32]
 8009bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b0      	blx	r6
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	dc06      	bgt.n	8009c02 <__sflush_r+0xfe>
 8009bf4:	89a3      	ldrh	r3, [r4, #12]
 8009bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bfa:	81a3      	strh	r3, [r4, #12]
 8009bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c00:	e78e      	b.n	8009b20 <__sflush_r+0x1c>
 8009c02:	4407      	add	r7, r0
 8009c04:	eba8 0800 	sub.w	r8, r8, r0
 8009c08:	e7e9      	b.n	8009bde <__sflush_r+0xda>
 8009c0a:	bf00      	nop
 8009c0c:	20400001 	.word	0x20400001

08009c10 <_fflush_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	690b      	ldr	r3, [r1, #16]
 8009c14:	4605      	mov	r5, r0
 8009c16:	460c      	mov	r4, r1
 8009c18:	b1db      	cbz	r3, 8009c52 <_fflush_r+0x42>
 8009c1a:	b118      	cbz	r0, 8009c24 <_fflush_r+0x14>
 8009c1c:	6983      	ldr	r3, [r0, #24]
 8009c1e:	b90b      	cbnz	r3, 8009c24 <_fflush_r+0x14>
 8009c20:	f7ff faf6 	bl	8009210 <__sinit>
 8009c24:	4b0c      	ldr	r3, [pc, #48]	; (8009c58 <_fflush_r+0x48>)
 8009c26:	429c      	cmp	r4, r3
 8009c28:	d109      	bne.n	8009c3e <_fflush_r+0x2e>
 8009c2a:	686c      	ldr	r4, [r5, #4]
 8009c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c30:	b17b      	cbz	r3, 8009c52 <_fflush_r+0x42>
 8009c32:	4621      	mov	r1, r4
 8009c34:	4628      	mov	r0, r5
 8009c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c3a:	f7ff bf63 	b.w	8009b04 <__sflush_r>
 8009c3e:	4b07      	ldr	r3, [pc, #28]	; (8009c5c <_fflush_r+0x4c>)
 8009c40:	429c      	cmp	r4, r3
 8009c42:	d101      	bne.n	8009c48 <_fflush_r+0x38>
 8009c44:	68ac      	ldr	r4, [r5, #8]
 8009c46:	e7f1      	b.n	8009c2c <_fflush_r+0x1c>
 8009c48:	4b05      	ldr	r3, [pc, #20]	; (8009c60 <_fflush_r+0x50>)
 8009c4a:	429c      	cmp	r4, r3
 8009c4c:	bf08      	it	eq
 8009c4e:	68ec      	ldreq	r4, [r5, #12]
 8009c50:	e7ec      	b.n	8009c2c <_fflush_r+0x1c>
 8009c52:	2000      	movs	r0, #0
 8009c54:	bd38      	pop	{r3, r4, r5, pc}
 8009c56:	bf00      	nop
 8009c58:	08009e4c 	.word	0x08009e4c
 8009c5c:	08009e6c 	.word	0x08009e6c
 8009c60:	08009e2c 	.word	0x08009e2c

08009c64 <_lseek_r>:
 8009c64:	b538      	push	{r3, r4, r5, lr}
 8009c66:	4c07      	ldr	r4, [pc, #28]	; (8009c84 <_lseek_r+0x20>)
 8009c68:	4605      	mov	r5, r0
 8009c6a:	4608      	mov	r0, r1
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	2200      	movs	r2, #0
 8009c70:	6022      	str	r2, [r4, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	f7f7 fde8 	bl	8001848 <_lseek>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	d102      	bne.n	8009c82 <_lseek_r+0x1e>
 8009c7c:	6823      	ldr	r3, [r4, #0]
 8009c7e:	b103      	cbz	r3, 8009c82 <_lseek_r+0x1e>
 8009c80:	602b      	str	r3, [r5, #0]
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	20000874 	.word	0x20000874

08009c88 <__swhatbuf_r>:
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	460e      	mov	r6, r1
 8009c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c90:	2900      	cmp	r1, #0
 8009c92:	b096      	sub	sp, #88	; 0x58
 8009c94:	4614      	mov	r4, r2
 8009c96:	461d      	mov	r5, r3
 8009c98:	da07      	bge.n	8009caa <__swhatbuf_r+0x22>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	602b      	str	r3, [r5, #0]
 8009c9e:	89b3      	ldrh	r3, [r6, #12]
 8009ca0:	061a      	lsls	r2, r3, #24
 8009ca2:	d410      	bmi.n	8009cc6 <__swhatbuf_r+0x3e>
 8009ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ca8:	e00e      	b.n	8009cc8 <__swhatbuf_r+0x40>
 8009caa:	466a      	mov	r2, sp
 8009cac:	f000 f862 	bl	8009d74 <_fstat_r>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	dbf2      	blt.n	8009c9a <__swhatbuf_r+0x12>
 8009cb4:	9a01      	ldr	r2, [sp, #4]
 8009cb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cbe:	425a      	negs	r2, r3
 8009cc0:	415a      	adcs	r2, r3
 8009cc2:	602a      	str	r2, [r5, #0]
 8009cc4:	e7ee      	b.n	8009ca4 <__swhatbuf_r+0x1c>
 8009cc6:	2340      	movs	r3, #64	; 0x40
 8009cc8:	2000      	movs	r0, #0
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	b016      	add	sp, #88	; 0x58
 8009cce:	bd70      	pop	{r4, r5, r6, pc}

08009cd0 <__smakebuf_r>:
 8009cd0:	898b      	ldrh	r3, [r1, #12]
 8009cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cd4:	079d      	lsls	r5, r3, #30
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	460c      	mov	r4, r1
 8009cda:	d507      	bpl.n	8009cec <__smakebuf_r+0x1c>
 8009cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	6123      	str	r3, [r4, #16]
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	6163      	str	r3, [r4, #20]
 8009ce8:	b002      	add	sp, #8
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	ab01      	add	r3, sp, #4
 8009cee:	466a      	mov	r2, sp
 8009cf0:	f7ff ffca 	bl	8009c88 <__swhatbuf_r>
 8009cf4:	9900      	ldr	r1, [sp, #0]
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f7ff f9c7 	bl	800908c <_malloc_r>
 8009cfe:	b948      	cbnz	r0, 8009d14 <__smakebuf_r+0x44>
 8009d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d04:	059a      	lsls	r2, r3, #22
 8009d06:	d4ef      	bmi.n	8009ce8 <__smakebuf_r+0x18>
 8009d08:	f023 0303 	bic.w	r3, r3, #3
 8009d0c:	f043 0302 	orr.w	r3, r3, #2
 8009d10:	81a3      	strh	r3, [r4, #12]
 8009d12:	e7e3      	b.n	8009cdc <__smakebuf_r+0xc>
 8009d14:	4b0d      	ldr	r3, [pc, #52]	; (8009d4c <__smakebuf_r+0x7c>)
 8009d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	6020      	str	r0, [r4, #0]
 8009d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	9b00      	ldr	r3, [sp, #0]
 8009d24:	6163      	str	r3, [r4, #20]
 8009d26:	9b01      	ldr	r3, [sp, #4]
 8009d28:	6120      	str	r0, [r4, #16]
 8009d2a:	b15b      	cbz	r3, 8009d44 <__smakebuf_r+0x74>
 8009d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d30:	4630      	mov	r0, r6
 8009d32:	f000 f831 	bl	8009d98 <_isatty_r>
 8009d36:	b128      	cbz	r0, 8009d44 <__smakebuf_r+0x74>
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	f023 0303 	bic.w	r3, r3, #3
 8009d3e:	f043 0301 	orr.w	r3, r3, #1
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	431d      	orrs	r5, r3
 8009d48:	81a5      	strh	r5, [r4, #12]
 8009d4a:	e7cd      	b.n	8009ce8 <__smakebuf_r+0x18>
 8009d4c:	080091d9 	.word	0x080091d9

08009d50 <_read_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4c07      	ldr	r4, [pc, #28]	; (8009d70 <_read_r+0x20>)
 8009d54:	4605      	mov	r5, r0
 8009d56:	4608      	mov	r0, r1
 8009d58:	4611      	mov	r1, r2
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	6022      	str	r2, [r4, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f7f7 fd12 	bl	8001788 <_read>
 8009d64:	1c43      	adds	r3, r0, #1
 8009d66:	d102      	bne.n	8009d6e <_read_r+0x1e>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	b103      	cbz	r3, 8009d6e <_read_r+0x1e>
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	bd38      	pop	{r3, r4, r5, pc}
 8009d70:	20000874 	.word	0x20000874

08009d74 <_fstat_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4c07      	ldr	r4, [pc, #28]	; (8009d94 <_fstat_r+0x20>)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	4611      	mov	r1, r2
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	f7f7 fd46 	bl	8001812 <_fstat>
 8009d86:	1c43      	adds	r3, r0, #1
 8009d88:	d102      	bne.n	8009d90 <_fstat_r+0x1c>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	b103      	cbz	r3, 8009d90 <_fstat_r+0x1c>
 8009d8e:	602b      	str	r3, [r5, #0]
 8009d90:	bd38      	pop	{r3, r4, r5, pc}
 8009d92:	bf00      	nop
 8009d94:	20000874 	.word	0x20000874

08009d98 <_isatty_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4c06      	ldr	r4, [pc, #24]	; (8009db4 <_isatty_r+0x1c>)
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4605      	mov	r5, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	6023      	str	r3, [r4, #0]
 8009da4:	f7f7 fd45 	bl	8001832 <_isatty>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_isatty_r+0x1a>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_isatty_r+0x1a>
 8009db0:	602b      	str	r3, [r5, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	20000874 	.word	0x20000874

08009db8 <_init>:
 8009db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dba:	bf00      	nop
 8009dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dbe:	bc08      	pop	{r3}
 8009dc0:	469e      	mov	lr, r3
 8009dc2:	4770      	bx	lr

08009dc4 <_fini>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	bf00      	nop
 8009dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dca:	bc08      	pop	{r3}
 8009dcc:	469e      	mov	lr, r3
 8009dce:	4770      	bx	lr
