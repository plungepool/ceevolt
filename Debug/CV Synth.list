
CV Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a09c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800a22c  0800a22c  0001a22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2f4  0800a2f4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2f4  0800a2f4  0001a2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2fc  0800a2fc  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2fc  0800a2fc  0001a2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a300  0800a300  0001a300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800a304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  200000a0  0800a3a4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  0800a3a4  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c76c  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cfc  00000000  00000000  0003c83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001448  00000000  00000000  00040538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  00041980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000255d2  00000000  00000000  00042c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000131dc  00000000  00000000  0006820a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce1fa  00000000  00000000  0007b3e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001495e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd0  00000000  00000000  0014965c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a214 	.word	0x0800a214

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	0800a214 	.word	0x0800a214

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fd8c 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f836 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f990 	bl	80008a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000580:	f000 f96e 	bl	8000860 <MX_DMA_Init>
  MX_I2C1_Init();
 8000584:	f000 f8b0 	bl	80006e8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000588:	f000 f8dc 	bl	8000744 <MX_I2S3_Init>
  MX_SPI1_Init();
 800058c:	f000 f908 	bl	80007a0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000590:	f008 fbae 	bl	8008cf0 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f93a 	bl	800080c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	  	  HAL_UART_Receive_DMA(&huart2, RxData, 11);
 8000598:	220b      	movs	r2, #11
 800059a:	490e      	ldr	r1, [pc, #56]	; (80005d4 <main+0x64>)
 800059c:	480e      	ldr	r0, [pc, #56]	; (80005d8 <main+0x68>)
 800059e:	f004 fe2f 	bl	8005200 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005a2:	f008 fbcb 	bl	8008d3c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    		HAL_UART_Transmit(&huart2, TxData, 13, 10);
 80005a6:	230a      	movs	r3, #10
 80005a8:	220d      	movs	r2, #13
 80005aa:	490c      	ldr	r1, [pc, #48]	; (80005dc <main+0x6c>)
 80005ac:	480a      	ldr	r0, [pc, #40]	; (80005d8 <main+0x68>)
 80005ae:	f004 fd8e 	bl	80050ce <HAL_UART_Transmit>
    		printf(RxData);
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <main+0x64>)
 80005b4:	f008 ff8e 	bl	80094d4 <iprintf>
    		printf("Hello World\n");
 80005b8:	4809      	ldr	r0, [pc, #36]	; (80005e0 <main+0x70>)
 80005ba:	f008 ffff 	bl	80095bc <puts>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <main+0x74>)
 80005c4:	f001 fc4d 	bl	8001e62 <HAL_GPIO_TogglePin>
    HAL_Delay(2000);
 80005c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005cc:	f000 fdd2 	bl	8001174 <HAL_Delay>
    MX_USB_HOST_Process();
 80005d0:	e7e7      	b.n	80005a2 <main+0x32>
 80005d2:	bf00      	nop
 80005d4:	200001dc 	.word	0x200001dc
 80005d8:	200001e8 	.word	0x200001e8
 80005dc:	20000000 	.word	0x20000000
 80005e0:	0800a22c 	.word	0x0800a22c
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b098      	sub	sp, #96	; 0x60
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f008 febc 	bl	8009374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <SystemClock_Config+0xf8>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	4a2f      	ldr	r2, [pc, #188]	; (80006e0 <SystemClock_Config+0xf8>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6413      	str	r3, [r2, #64]	; 0x40
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemClock_Config+0xf8>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <SystemClock_Config+0xfc>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <SystemClock_Config+0xfc>)
 8000640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <SystemClock_Config+0xfc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000652:	2301      	movs	r3, #1
 8000654:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000666:	2304      	movs	r3, #4
 8000668:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800066a:	2360      	movs	r3, #96	; 0x60
 800066c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800066e:	2306      	movs	r3, #6
 8000670:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000672:	2304      	movs	r3, #4
 8000674:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fed6 	bl	800442c <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000686:	f000 fa09 	bl	8000a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000696:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2101      	movs	r1, #1
 80006a8:	4618      	mov	r0, r3
 80006aa:	f004 f92f 	bl	800490c <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006b4:	f000 f9f2 	bl	8000a9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006b8:	2301      	movs	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80006bc:	2332      	movs	r3, #50	; 0x32
 80006be:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 fb11 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80006d4:	f000 f9e2 	bl	8000a9c <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3760      	adds	r7, #96	; 0x60
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C1_Init+0x50>)
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_I2C1_Init+0x54>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C1_Init+0x50>)
 80006f4:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_I2C1_Init+0x58>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_I2C1_Init+0x50>)
 8000706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_I2C1_Init+0x50>)
 8000726:	f003 f8a9 	bl	800387c <HAL_I2C_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 f9b4 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000130 	.word	0x20000130
 800073c:	40005400 	.word	0x40005400
 8000740:	000186a0 	.word	0x000186a0

08000744 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_I2S3_Init+0x54>)
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <MX_I2S3_Init+0x58>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2S3_Init+0x54>)
 8000750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000754:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_I2S3_Init+0x54>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2S3_Init+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_I2S3_Init+0x54>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_I2S3_Init+0x54>)
 800076c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000770:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2S3_Init+0x54>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_I2S3_Init+0x54>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2S3_Init+0x54>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2S3_Init+0x54>)
 8000786:	f003 f9b1 	bl	8003aec <HAL_I2S_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000790:	f000 f984 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000228 	.word	0x20000228
 800079c:	40003c00 	.word	0x40003c00

080007a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_SPI1_Init+0x64>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_SPI1_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_SPI1_Init+0x64>)
 80007f2:	f004 fbbb 	bl	8004f6c <HAL_SPI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007fc:	f000 f94e 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000184 	.word	0x20000184
 8000808:	40013000 	.word	0x40013000

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f004 fbf6 	bl	8005034 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f925 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200001e8 	.word	0x200001e8
 800085c:	40004400 	.word	0x40004400

08000860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_DMA_Init+0x3c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <MX_DMA_Init+0x3c>)
 8000870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_DMA_Init+0x3c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2010      	movs	r0, #16
 8000888:	f000 fd71 	bl	800136e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800088c:	2010      	movs	r0, #16
 800088e:	f000 fd8a 	bl	80013a6 <HAL_NVIC_EnableIRQ>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	4b71      	ldr	r3, [pc, #452]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a70      	ldr	r2, [pc, #448]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b6e      	ldr	r3, [pc, #440]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	4b6a      	ldr	r3, [pc, #424]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a69      	ldr	r2, [pc, #420]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b67      	ldr	r3, [pc, #412]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b63      	ldr	r3, [pc, #396]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a62      	ldr	r2, [pc, #392]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b60      	ldr	r3, [pc, #384]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b5c      	ldr	r3, [pc, #368]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a5b      	ldr	r2, [pc, #364]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b59      	ldr	r3, [pc, #356]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b55      	ldr	r3, [pc, #340]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a54      	ldr	r2, [pc, #336]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b52      	ldr	r3, [pc, #328]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b4e      	ldr	r3, [pc, #312]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a4d      	ldr	r2, [pc, #308]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <MX_GPIO_Init+0x1e0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2108      	movs	r1, #8
 8000962:	4848      	ldr	r0, [pc, #288]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 8000964:	f001 fa64 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2101      	movs	r1, #1
 800096c:	4846      	ldr	r0, [pc, #280]	; (8000a88 <MX_GPIO_Init+0x1e8>)
 800096e:	f001 fa5f 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000972:	2200      	movs	r2, #0
 8000974:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000978:	4844      	ldr	r0, [pc, #272]	; (8000a8c <MX_GPIO_Init+0x1ec>)
 800097a:	f001 fa59 	bl	8001e30 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800097e:	2308      	movs	r3, #8
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	483b      	ldr	r0, [pc, #236]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 8000996:	f001 f8b1 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4835      	ldr	r0, [pc, #212]	; (8000a88 <MX_GPIO_Init+0x1e8>)
 80009b2:	f001 f8a3 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009b6:	2308      	movs	r3, #8
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c6:	2305      	movs	r3, #5
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	482d      	ldr	r0, [pc, #180]	; (8000a88 <MX_GPIO_Init+0x1e8>)
 80009d2:	f001 f893 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009da:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <MX_GPIO_Init+0x1f0>)
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	482a      	ldr	r0, [pc, #168]	; (8000a94 <MX_GPIO_Init+0x1f4>)
 80009ea:	f001 f887 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009ee:	2304      	movs	r3, #4
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4825      	ldr	r0, [pc, #148]	; (8000a98 <MX_GPIO_Init+0x1f8>)
 8000a02:	f001 f87b 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a18:	2305      	movs	r3, #5
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <MX_GPIO_Init+0x1f8>)
 8000a24:	f001 f86a 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a28:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a2c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4812      	ldr	r0, [pc, #72]	; (8000a8c <MX_GPIO_Init+0x1ec>)
 8000a42:	f001 f85b 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a46:	2320      	movs	r3, #32
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_GPIO_Init+0x1ec>)
 8000a5a:	f001 f84f 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_GPIO_Init+0x1f0>)
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_GPIO_Init+0x1e4>)
 8000a72:	f001 f843 	bl	8001afc <HAL_GPIO_Init>

}
 8000a76:	bf00      	nop
 8000a78:	3730      	adds	r7, #48	; 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	10120000 	.word	0x10120000
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <Error_Handler+0x6>

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f000 fc38 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12c      	bne.n	8000b70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b38:	2312      	movs	r3, #18
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b44:	2304      	movs	r3, #4
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480c      	ldr	r0, [pc, #48]	; (8000b80 <HAL_I2C_MspInit+0x8c>)
 8000b50:	f000 ffd4 	bl	8001afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <HAL_I2S_MspInit+0xc0>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d14a      	bne.n	8000c3c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_I2S_MspInit+0xc4>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <HAL_I2S_MspInit+0xc4>)
 8000bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <HAL_I2S_MspInit+0xc4>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_I2S_MspInit+0xc4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <HAL_I2S_MspInit+0xc4>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_I2S_MspInit+0xc4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_I2S_MspInit+0xc4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <HAL_I2S_MspInit+0xc4>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_I2S_MspInit+0xc4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <HAL_I2S_MspInit+0xc8>)
 8000c16:	f000 ff71 	bl	8001afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c1a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <HAL_I2S_MspInit+0xcc>)
 8000c38:	f000 ff60 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40003c00 	.word	0x40003c00
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020800 	.word	0x40020800

08000c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_SPI_MspInit+0x84>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12b      	bne.n	8000cce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cae:	23e0      	movs	r3, #224	; 0xe0
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_SPI_MspInit+0x8c>)
 8000cca:	f000 ff17 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40013000 	.word	0x40013000
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a34      	ldr	r2, [pc, #208]	; (8000dd4 <HAL_UART_MspInit+0xf0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d162      	bne.n	8000dcc <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <HAL_UART_MspInit+0xf4>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a32      	ldr	r2, [pc, #200]	; (8000dd8 <HAL_UART_MspInit+0xf4>)
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <HAL_UART_MspInit+0xf4>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <HAL_UART_MspInit+0xf4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a2b      	ldr	r2, [pc, #172]	; (8000dd8 <HAL_UART_MspInit+0xf4>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <HAL_UART_MspInit+0xf4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4820      	ldr	r0, [pc, #128]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d5a:	f000 fecf 	bl	8001afc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d60:	4a20      	ldr	r2, [pc, #128]	; (8000de4 <HAL_UART_MspInit+0x100>)
 8000d62:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d92:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000da0:	480f      	ldr	r0, [pc, #60]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000da2:	f000 fb1b 	bl	80013dc <HAL_DMA_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000dac:	f7ff fe76 	bl	8000a9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2026      	movs	r0, #38	; 0x26
 8000dc2:	f000 fad4 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dc6:	2026      	movs	r0, #38	; 0x26
 8000dc8:	f000 faed 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40004400 	.word	0x40004400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	200000d0 	.word	0x200000d0
 8000de4:	40026088 	.word	0x40026088

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f97e 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <DMA1_Stream5_IRQHandler+0x10>)
 8000e42:	f000 fbf3 	bl	800162c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000d0 	.word	0x200000d0

08000e50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <USART2_IRQHandler+0x10>)
 8000e56:	f004 fa53 	bl	8005300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200001e8 	.word	0x200001e8

08000e64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <OTG_FS_IRQHandler+0x10>)
 8000e6a:	f001 faa5 	bl	80023b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000064c 	.word	0x2000064c

08000e78 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <ITM_SendChar+0x48>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <ITM_SendChar+0x48>)
 8000e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e8c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <ITM_SendChar+0x4c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <ITM_SendChar+0x4c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000e9a:	bf00      	nop
 8000e9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f8      	beq.n	8000e9c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000eaa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	6013      	str	r3, [r2, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000edfc 	.word	0xe000edfc
 8000ec4:	e0000e00 	.word	0xe0000e00

08000ec8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e00a      	b.n	8000ef0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eda:	f3af 8000 	nop.w
 8000ede:	4601      	mov	r1, r0
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	60ba      	str	r2, [r7, #8]
 8000ee6:	b2ca      	uxtb	r2, r1
 8000ee8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf0      	blt.n	8000eda <_read+0x12>
	}

return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	e009      	b.n	8000f28 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	60ba      	str	r2, [r7, #8]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ffab 	bl	8000e78 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	dbf1      	blt.n	8000f14 <_write+0x12>
	}
	return len;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <_close>:

int _close(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
	return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f62:	605a      	str	r2, [r3, #4]
	return 0;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_isatty>:

int _isatty(int file)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
	return 1;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
	return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fac:	4a14      	ldr	r2, [pc, #80]	; (8001000 <_sbrk+0x5c>)
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <_sbrk+0x60>)
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <_sbrk+0x64>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <_sbrk+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d207      	bcs.n	8000fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd4:	f008 f994 	bl	8009300 <__errno>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	230c      	movs	r3, #12
 8000fdc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe2:	e009      	b.n	8000ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <_sbrk+0x64>)
 8000ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20020000 	.word	0x20020000
 8001004:	00000400 	.word	0x00000400
 8001008:	200000bc 	.word	0x200000bc
 800100c:	20000918 	.word	0x20000918

08001010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <SystemInit+0x28>)
 8001016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101a:	4a07      	ldr	r2, [pc, #28]	; (8001038 <SystemInit+0x28>)
 800101c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <SystemInit+0x28>)
 8001026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800102a:	609a      	str	r2, [r3, #8]
#endif
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001074 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001040:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001042:	e003      	b.n	800104c <LoopCopyDataInit>

08001044 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001046:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001048:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800104a:	3104      	adds	r1, #4

0800104c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800104c:	480b      	ldr	r0, [pc, #44]	; (800107c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001050:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001052:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001054:	d3f6      	bcc.n	8001044 <CopyDataInit>
  ldr  r2, =_sbss
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001058:	e002      	b.n	8001060 <LoopFillZerobss>

0800105a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800105a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800105c:	f842 3b04 	str.w	r3, [r2], #4

08001060 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001062:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001064:	d3f9      	bcc.n	800105a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001066:	f7ff ffd3 	bl	8001010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106a:	f008 f94f 	bl	800930c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fa7f 	bl	8000570 <main>
  bx  lr    
 8001072:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001074:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001078:	0800a304 	.word	0x0800a304
  ldr  r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001080:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8001084:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8001088:	20000914 	.word	0x20000914

0800108c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>
	...

08001090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <HAL_Init+0x40>)
 800109a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <HAL_Init+0x40>)
 80010a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_Init+0x40>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f94d 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fcee 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023c00 	.word	0x40023c00

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f965 	bl	80013c2 <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001110:	f000 f92d 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000010 	.word	0x20000010
 800112c:	20000018 	.word	0x20000018
 8001130:	20000014 	.word	0x20000014

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000018 	.word	0x20000018
 8001158:	20000270 	.word	0x20000270

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000270 	.word	0x20000270

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff ffee 	bl	800115c <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_Delay+0x40>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffde 	bl	800115c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000018 	.word	0x20000018

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ea:	4a04      	ldr	r2, [pc, #16]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	60d3      	str	r3, [r2, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db0b      	blt.n	8001246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 021f 	and.w	r2, r3, #31
 8001234:	4907      	ldr	r1, [pc, #28]	; (8001254 <__NVIC_EnableIRQ+0x38>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2001      	movs	r0, #1
 800123e:	fa00 f202 	lsl.w	r2, r0, r2
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001338:	f7ff ff8e 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff29 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff3e 	bl	8001200 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff8e 	bl	80012ac <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5d 	bl	8001258 <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff31 	bl	800121c <__NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa2 	bl	8001314 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013e8:	f7ff feb8 	bl	800115c <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e099      	b.n	800152c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2202      	movs	r2, #2
 8001404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0201 	bic.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001418:	e00f      	b.n	800143a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800141a:	f7ff fe9f 	bl	800115c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b05      	cmp	r3, #5
 8001426:	d908      	bls.n	800143a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2220      	movs	r2, #32
 800142c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2203      	movs	r2, #3
 8001432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e078      	b.n	800152c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1e8      	bne.n	800141a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_DMA_Init+0x158>)
 8001454:	4013      	ands	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001466:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4313      	orrs	r3, r2
 800148a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	2b04      	cmp	r3, #4
 8001492:	d107      	bne.n	80014a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4313      	orrs	r3, r2
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f023 0307 	bic.w	r3, r3, #7
 80014ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d117      	bne.n	80014fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00e      	beq.n	80014fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fa91 	bl	8001a08 <DMA_CheckFifoParam>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2240      	movs	r2, #64	; 0x40
 80014f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014fa:	2301      	movs	r3, #1
 80014fc:	e016      	b.n	800152c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fa48 	bl	800199c <DMA_CalcBaseAndBitshift>
 800150c:	4603      	mov	r3, r0
 800150e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001514:	223f      	movs	r2, #63	; 0x3f
 8001516:	409a      	lsls	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	f010803f 	.word	0xf010803f

08001538 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_DMA_Start_IT+0x26>
 800155a:	2302      	movs	r3, #2
 800155c:	e040      	b.n	80015e0 <HAL_DMA_Start_IT+0xa8>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d12f      	bne.n	80015d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2202      	movs	r2, #2
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f9da 	bl	8001940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001590:	223f      	movs	r2, #63	; 0x3f
 8001592:	409a      	lsls	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0216 	orr.w	r2, r2, #22
 80015a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0208 	orr.w	r2, r2, #8
 80015be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	e005      	b.n	80015de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015da:	2302      	movs	r3, #2
 80015dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015de:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d004      	beq.n	8001606 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00c      	b.n	8001620 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2205      	movs	r2, #5
 800160a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001638:	4b92      	ldr	r3, [pc, #584]	; (8001884 <HAL_DMA_IRQHandler+0x258>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a92      	ldr	r2, [pc, #584]	; (8001888 <HAL_DMA_IRQHandler+0x25c>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	0a9b      	lsrs	r3, r3, #10
 8001644:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2208      	movs	r2, #8
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d01a      	beq.n	8001698 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0204 	bic.w	r2, r2, #4
 800167e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	2208      	movs	r2, #8
 8001686:	409a      	lsls	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001690:	f043 0201 	orr.w	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169c:	2201      	movs	r2, #1
 800169e:	409a      	lsls	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d012      	beq.n	80016ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	2201      	movs	r2, #1
 80016bc:	409a      	lsls	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c6:	f043 0202 	orr.w	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d2:	2204      	movs	r2, #4
 80016d4:	409a      	lsls	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d012      	beq.n	8001704 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00b      	beq.n	8001704 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f0:	2204      	movs	r2, #4
 80016f2:	409a      	lsls	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	f043 0204 	orr.w	r2, r3, #4
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	2210      	movs	r2, #16
 800170a:	409a      	lsls	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d043      	beq.n	800179c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d03c      	beq.n	800179c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	2210      	movs	r2, #16
 8001728:	409a      	lsls	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d018      	beq.n	800176e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d108      	bne.n	800175c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	2b00      	cmp	r3, #0
 8001750:	d024      	beq.n	800179c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	4798      	blx	r3
 800175a:	e01f      	b.n	800179c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01b      	beq.n	800179c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	4798      	blx	r3
 800176c:	e016      	b.n	800179c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d107      	bne.n	800178c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0208 	bic.w	r2, r2, #8
 800178a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	2220      	movs	r2, #32
 80017a2:	409a      	lsls	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 808e 	beq.w	80018ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 8086 	beq.w	80018ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	2220      	movs	r2, #32
 80017c4:	409a      	lsls	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d136      	bne.n	8001844 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0216 	bic.w	r2, r2, #22
 80017e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d103      	bne.n	8001806 <HAL_DMA_IRQHandler+0x1da>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0208 	bic.w	r2, r2, #8
 8001814:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	223f      	movs	r2, #63	; 0x3f
 800181c:	409a      	lsls	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001836:	2b00      	cmp	r3, #0
 8001838:	d07d      	beq.n	8001936 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
        }
        return;
 8001842:	e078      	b.n	8001936 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d01c      	beq.n	800188c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d108      	bne.n	8001872 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001864:	2b00      	cmp	r3, #0
 8001866:	d030      	beq.n	80018ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	4798      	blx	r3
 8001870:	e02b      	b.n	80018ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001876:	2b00      	cmp	r3, #0
 8001878:	d027      	beq.n	80018ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	4798      	blx	r3
 8001882:	e022      	b.n	80018ca <HAL_DMA_IRQHandler+0x29e>
 8001884:	20000010 	.word	0x20000010
 8001888:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10f      	bne.n	80018ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0210 	bic.w	r2, r2, #16
 80018a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d032      	beq.n	8001938 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d022      	beq.n	8001924 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2205      	movs	r2, #5
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0201 	bic.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	3301      	adds	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d307      	bcc.n	8001912 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f2      	bne.n	80018f6 <HAL_DMA_IRQHandler+0x2ca>
 8001910:	e000      	b.n	8001914 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001912:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
 8001934:	e000      	b.n	8001938 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001936:	bf00      	nop
    }
  }
}
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop

08001940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800195c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d108      	bne.n	8001980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800197e:	e007      	b.n	8001990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	60da      	str	r2, [r3, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	3b10      	subs	r3, #16
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <DMA_CalcBaseAndBitshift+0x64>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019b6:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <DMA_CalcBaseAndBitshift+0x68>)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d909      	bls.n	80019de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019d2:	f023 0303 	bic.w	r3, r3, #3
 80019d6:	1d1a      	adds	r2, r3, #4
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	659a      	str	r2, [r3, #88]	; 0x58
 80019dc:	e007      	b.n	80019ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019e6:	f023 0303 	bic.w	r3, r3, #3
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	aaaaaaab 	.word	0xaaaaaaab
 8001a04:	0800a254 	.word	0x0800a254

08001a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d11f      	bne.n	8001a62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d855      	bhi.n	8001ad4 <DMA_CheckFifoParam+0xcc>
 8001a28:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <DMA_CheckFifoParam+0x28>)
 8001a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2e:	bf00      	nop
 8001a30:	08001a41 	.word	0x08001a41
 8001a34:	08001a53 	.word	0x08001a53
 8001a38:	08001a41 	.word	0x08001a41
 8001a3c:	08001ad5 	.word	0x08001ad5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d045      	beq.n	8001ad8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a50:	e042      	b.n	8001ad8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a5a:	d13f      	bne.n	8001adc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a60:	e03c      	b.n	8001adc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6a:	d121      	bne.n	8001ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d836      	bhi.n	8001ae0 <DMA_CheckFifoParam+0xd8>
 8001a72:	a201      	add	r2, pc, #4	; (adr r2, 8001a78 <DMA_CheckFifoParam+0x70>)
 8001a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a78:	08001a89 	.word	0x08001a89
 8001a7c:	08001a8f 	.word	0x08001a8f
 8001a80:	08001a89 	.word	0x08001a89
 8001a84:	08001aa1 	.word	0x08001aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a8c:	e02f      	b.n	8001aee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d024      	beq.n	8001ae4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a9e:	e021      	b.n	8001ae4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aa8:	d11e      	bne.n	8001ae8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001aae:	e01b      	b.n	8001ae8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d902      	bls.n	8001abc <DMA_CheckFifoParam+0xb4>
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d003      	beq.n	8001ac2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001aba:	e018      	b.n	8001aee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac0:	e015      	b.n	8001aee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00e      	beq.n	8001aec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad2:	e00b      	b.n	8001aec <DMA_CheckFifoParam+0xe4>
      break;
 8001ad4:	bf00      	nop
 8001ad6:	e00a      	b.n	8001aee <DMA_CheckFifoParam+0xe6>
      break;
 8001ad8:	bf00      	nop
 8001ada:	e008      	b.n	8001aee <DMA_CheckFifoParam+0xe6>
      break;
 8001adc:	bf00      	nop
 8001ade:	e006      	b.n	8001aee <DMA_CheckFifoParam+0xe6>
      break;
 8001ae0:	bf00      	nop
 8001ae2:	e004      	b.n	8001aee <DMA_CheckFifoParam+0xe6>
      break;
 8001ae4:	bf00      	nop
 8001ae6:	e002      	b.n	8001aee <DMA_CheckFifoParam+0xe6>
      break;   
 8001ae8:	bf00      	nop
 8001aea:	e000      	b.n	8001aee <DMA_CheckFifoParam+0xe6>
      break;
 8001aec:	bf00      	nop
    }
  } 
  
  return status; 
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e16b      	b.n	8001df0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f040 815a 	bne.w	8001dea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d00b      	beq.n	8001b56 <HAL_GPIO_Init+0x5a>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4a:	2b11      	cmp	r3, #17
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b12      	cmp	r3, #18
 8001b54:	d130      	bne.n	8001bb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 0201 	and.w	r2, r3, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0xfc>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b12      	cmp	r3, #18
 8001bf6:	d123      	bne.n	8001c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	08da      	lsrs	r2, r3, #3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3208      	adds	r2, #8
 8001c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	69b9      	ldr	r1, [r7, #24]
 8001c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0203 	and.w	r2, r3, #3
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80b4 	beq.w	8001dea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b5f      	ldr	r3, [pc, #380]	; (8001e04 <HAL_GPIO_Init+0x308>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a5e      	ldr	r2, [pc, #376]	; (8001e04 <HAL_GPIO_Init+0x308>)
 8001c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b5c      	ldr	r3, [pc, #368]	; (8001e04 <HAL_GPIO_Init+0x308>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c9e:	4a5a      	ldr	r2, [pc, #360]	; (8001e08 <HAL_GPIO_Init+0x30c>)
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a51      	ldr	r2, [pc, #324]	; (8001e0c <HAL_GPIO_Init+0x310>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d02b      	beq.n	8001d22 <HAL_GPIO_Init+0x226>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a50      	ldr	r2, [pc, #320]	; (8001e10 <HAL_GPIO_Init+0x314>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d025      	beq.n	8001d1e <HAL_GPIO_Init+0x222>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4f      	ldr	r2, [pc, #316]	; (8001e14 <HAL_GPIO_Init+0x318>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01f      	beq.n	8001d1a <HAL_GPIO_Init+0x21e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4e      	ldr	r2, [pc, #312]	; (8001e18 <HAL_GPIO_Init+0x31c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x21a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4d      	ldr	r2, [pc, #308]	; (8001e1c <HAL_GPIO_Init+0x320>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x216>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4c      	ldr	r2, [pc, #304]	; (8001e20 <HAL_GPIO_Init+0x324>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x212>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4b      	ldr	r2, [pc, #300]	; (8001e24 <HAL_GPIO_Init+0x328>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x20e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4a      	ldr	r2, [pc, #296]	; (8001e28 <HAL_GPIO_Init+0x32c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x20a>
 8001d02:	2307      	movs	r3, #7
 8001d04:	e00e      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d06:	2308      	movs	r3, #8
 8001d08:	e00c      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d0a:	2306      	movs	r3, #6
 8001d0c:	e00a      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d0e:	2305      	movs	r3, #5
 8001d10:	e008      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d12:	2304      	movs	r3, #4
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d16:	2303      	movs	r3, #3
 8001d18:	e004      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d22:	2300      	movs	r3, #0
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	f002 0203 	and.w	r2, r2, #3
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	4093      	lsls	r3, r2
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d34:	4934      	ldr	r1, [pc, #208]	; (8001e08 <HAL_GPIO_Init+0x30c>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d66:	4a31      	ldr	r2, [pc, #196]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d96:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de4:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	f67f ae90 	bls.w	8001b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3724      	adds	r7, #36	; 0x24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40021400 	.word	0x40021400
 8001e24:	40021800 	.word	0x40021800
 8001e28:	40021c00 	.word	0x40021c00
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e4c:	e003      	b.n	8001e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	041a      	lsls	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	619a      	str	r2, [r3, #24]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	401a      	ands	r2, r3
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d104      	bne.n	8001e86 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	041a      	lsls	r2, r3, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	619a      	str	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9a:	b08f      	sub	sp, #60	; 0x3c
 8001e9c:	af0a      	add	r7, sp, #40	; 0x28
 8001e9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e054      	b.n	8001f54 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d106      	bne.n	8001eca <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f006 ff71 	bl	8008dac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f004 f92d 	bl	8006148 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	687e      	ldr	r6, [r7, #4]
 8001ef6:	466d      	mov	r5, sp
 8001ef8:	f106 0410 	add.w	r4, r6, #16
 8001efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f08:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f0c:	1d33      	adds	r3, r6, #4
 8001f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f10:	6838      	ldr	r0, [r7, #0]
 8001f12:	f004 f8a7 	bl	8006064 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f004 f924 	bl	800616a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	687e      	ldr	r6, [r7, #4]
 8001f2a:	466d      	mov	r5, sp
 8001f2c:	f106 0410 	add.w	r4, r6, #16
 8001f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f40:	1d33      	adds	r3, r6, #4
 8001f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f44:	6838      	ldr	r0, [r7, #0]
 8001f46:	f004 fa37 	bl	80063b8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f5c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af04      	add	r7, sp, #16
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	4608      	mov	r0, r1
 8001f66:	4611      	mov	r1, r2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	70fb      	strb	r3, [r7, #3]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70bb      	strb	r3, [r7, #2]
 8001f72:	4613      	mov	r3, r2
 8001f74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_HCD_HC_Init+0x28>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e07f      	b.n	8002084 <HAL_HCD_HC_Init+0x128>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	440b      	add	r3, r1
 8001f9a:	333d      	adds	r3, #61	; 0x3d
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	3338      	adds	r3, #56	; 0x38
 8001fb0:	787a      	ldrb	r2, [r7, #1]
 8001fb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3340      	adds	r3, #64	; 0x40
 8001fc4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fc6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3339      	adds	r3, #57	; 0x39
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	333f      	adds	r3, #63	; 0x3f
 8001fec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ff0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	78bb      	ldrb	r3, [r7, #2]
 8001ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ffa:	b2d8      	uxtb	r0, r3
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	333a      	adds	r3, #58	; 0x3a
 800200a:	4602      	mov	r2, r0
 800200c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800200e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002012:	2b00      	cmp	r3, #0
 8002014:	da0a      	bge.n	800202c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	333b      	adds	r3, #59	; 0x3b
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	e009      	b.n	8002040 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	333b      	adds	r3, #59	; 0x3b
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	440b      	add	r3, r1
 800204e:	333c      	adds	r3, #60	; 0x3c
 8002050:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002054:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	787c      	ldrb	r4, [r7, #1]
 800205c:	78ba      	ldrb	r2, [r7, #2]
 800205e:	78f9      	ldrb	r1, [r7, #3]
 8002060:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002062:	9302      	str	r3, [sp, #8]
 8002064:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	4623      	mov	r3, r4
 8002072:	f004 fb23 	bl	80066bc <USB_HC_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bd90      	pop	{r4, r7, pc}

0800208c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_HCD_HC_Halt+0x1e>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e00f      	b.n	80020ca <HAL_HCD_HC_Halt+0x3e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 fd5f 	bl	8006b7e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	4608      	mov	r0, r1
 80020de:	4611      	mov	r1, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	70fb      	strb	r3, [r7, #3]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70bb      	strb	r3, [r7, #2]
 80020ea:	4613      	mov	r3, r2
 80020ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	333b      	adds	r3, #59	; 0x3b
 80020fe:	78ba      	ldrb	r2, [r7, #2]
 8002100:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	333f      	adds	r3, #63	; 0x3f
 8002112:	787a      	ldrb	r2, [r7, #1]
 8002114:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002116:	7c3b      	ldrb	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d114      	bne.n	8002146 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	3342      	adds	r3, #66	; 0x42
 800212c:	2203      	movs	r2, #3
 800212e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	333d      	adds	r3, #61	; 0x3d
 8002140:	7f3a      	ldrb	r2, [r7, #28]
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e009      	b.n	800215a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	3342      	adds	r3, #66	; 0x42
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800215a:	787b      	ldrb	r3, [r7, #1]
 800215c:	2b03      	cmp	r3, #3
 800215e:	f200 80d6 	bhi.w	800230e <HAL_HCD_HC_SubmitRequest+0x23a>
 8002162:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	08002179 	.word	0x08002179
 800216c:	080022f9 	.word	0x080022f9
 8002170:	080021e5 	.word	0x080021e5
 8002174:	0800226f 	.word	0x0800226f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002178:	7c3b      	ldrb	r3, [r7, #16]
 800217a:	2b01      	cmp	r3, #1
 800217c:	f040 80c9 	bne.w	8002312 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002180:	78bb      	ldrb	r3, [r7, #2]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 80c5 	bne.w	8002312 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002188:	8b3b      	ldrh	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	3351      	adds	r3, #81	; 0x51
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	3351      	adds	r3, #81	; 0x51
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10a      	bne.n	80021ce <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	3342      	adds	r3, #66	; 0x42
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021cc:	e0a1      	b.n	8002312 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	3342      	adds	r3, #66	; 0x42
 80021de:	2202      	movs	r2, #2
 80021e0:	701a      	strb	r2, [r3, #0]
      break;
 80021e2:	e096      	b.n	8002312 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80021e4:	78bb      	ldrb	r3, [r7, #2]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d120      	bne.n	800222c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	3351      	adds	r3, #81	; 0x51
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	3342      	adds	r3, #66	; 0x42
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002214:	e07e      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	3342      	adds	r3, #66	; 0x42
 8002226:	2202      	movs	r2, #2
 8002228:	701a      	strb	r2, [r3, #0]
      break;
 800222a:	e073      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	3350      	adds	r3, #80	; 0x50
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	3342      	adds	r3, #66	; 0x42
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
      break;
 8002256:	e05d      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	3342      	adds	r3, #66	; 0x42
 8002268:	2202      	movs	r2, #2
 800226a:	701a      	strb	r2, [r3, #0]
      break;
 800226c:	e052      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800226e:	78bb      	ldrb	r3, [r7, #2]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d120      	bne.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	3351      	adds	r3, #81	; 0x51
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10a      	bne.n	80022a0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3342      	adds	r3, #66	; 0x42
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800229e:	e039      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	3342      	adds	r3, #66	; 0x42
 80022b0:	2202      	movs	r2, #2
 80022b2:	701a      	strb	r2, [r3, #0]
      break;
 80022b4:	e02e      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	3350      	adds	r3, #80	; 0x50
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	3342      	adds	r3, #66	; 0x42
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
      break;
 80022e0:	e018      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	440b      	add	r3, r1
 80022f0:	3342      	adds	r3, #66	; 0x42
 80022f2:	2202      	movs	r2, #2
 80022f4:	701a      	strb	r2, [r3, #0]
      break;
 80022f6:	e00d      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	440b      	add	r3, r1
 8002306:	3342      	adds	r3, #66	; 0x42
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
      break;
 800230c:	e002      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800230e:	bf00      	nop
 8002310:	e000      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002312:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	3344      	adds	r3, #68	; 0x44
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	8b39      	ldrh	r1, [r7, #24]
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4403      	add	r3, r0
 8002338:	3348      	adds	r3, #72	; 0x48
 800233a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	335c      	adds	r3, #92	; 0x5c
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	334c      	adds	r3, #76	; 0x4c
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	3339      	adds	r3, #57	; 0x39
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	335d      	adds	r3, #93	; 0x5d
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	3338      	adds	r3, #56	; 0x38
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	18d1      	adds	r1, r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	f004 fa92 	bl	80068d0 <USB_HC_StartXfer>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop

080023b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 ffaf 	bl	8006332 <USB_GetMode>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f040 80ef 	bne.w	80025ba <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f003 ff93 	bl	800630c <USB_ReadInterrupts>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80e5 	beq.w	80025b8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 ff8a 	bl	800630c <USB_ReadInterrupts>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002402:	d104      	bne.n	800240e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800240c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f003 ff7a 	bl	800630c <USB_ReadInterrupts>
 8002418:	4603      	mov	r3, r0
 800241a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002422:	d104      	bne.n	800242e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800242c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f003 ff6a 	bl	800630c <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800243e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002442:	d104      	bne.n	800244e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800244c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f003 ff5a 	bl	800630c <USB_ReadInterrupts>
 8002458:	4603      	mov	r3, r0
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b02      	cmp	r3, #2
 8002460:	d103      	bne.n	800246a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2202      	movs	r2, #2
 8002468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f003 ff4c 	bl	800630c <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800247a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800247e:	d115      	bne.n	80024ac <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002488:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d108      	bne.n	80024ac <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f006 fd04 	bl	8008ea8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 f842 	bl	8006530 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f003 ff2b 	bl	800630c <USB_ReadInterrupts>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c0:	d102      	bne.n	80024c8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f001 f966 	bl	8003794 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 ff1d 	bl	800630c <USB_ReadInterrupts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d106      	bne.n	80024ea <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f006 fcc7 	bl	8008e70 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2208      	movs	r2, #8
 80024e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 ff0c 	bl	800630c <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024fe:	d138      	bne.n	8002572 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f004 fb29 	bl	8006b5c <USB_HC_ReadInterrupt>
 800250a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e025      	b.n	800255e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	fa22 f303 	lsr.w	r3, r2, r3
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d018      	beq.n	8002558 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253c:	d106      	bne.n	800254c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f8cf 	bl	80026e8 <HCD_HC_IN_IRQHandler>
 800254a:	e005      	b.n	8002558 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	4619      	mov	r1, r3
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fcfd 	bl	8002f52 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3301      	adds	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	429a      	cmp	r2, r3
 8002566:	d3d4      	bcc.n	8002512 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f003 fec8 	bl	800630c <USB_ReadInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b10      	cmp	r3, #16
 8002584:	d101      	bne.n	800258a <HAL_HCD_IRQHandler+0x1d2>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_HCD_IRQHandler+0x1d4>
 800258a:	2300      	movs	r3, #0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d014      	beq.n	80025ba <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0210 	bic.w	r2, r2, #16
 800259e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f001 f84b 	bl	800363c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699a      	ldr	r2, [r3, #24]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0210 	orr.w	r2, r2, #16
 80025b4:	619a      	str	r2, [r3, #24]
 80025b6:	e000      	b.n	80025ba <HAL_HCD_IRQHandler+0x202>
      return;
 80025b8:	bf00      	nop
    }
  }
}
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_HCD_Start+0x16>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e013      	b.n	80025fe <HAL_HCD_Start+0x3e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 fd9f 	bl	8006126 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2101      	movs	r1, #1
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 f802 	bl	80065f8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_HCD_Stop+0x16>
 8002618:	2302      	movs	r3, #2
 800261a:	e00d      	b.n	8002638 <HAL_HCD_Stop+0x32>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f004 fbe3 	bl	8006df4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f003 ffa9 	bl	80065a4 <USB_ResetPort>
 8002652:	4603      	mov	r3, r0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	335c      	adds	r3, #92	; 0x5c
 8002678:	781b      	ldrb	r3, [r3, #0]
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	334c      	adds	r3, #76	; 0x4c
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 ffeb 	bl	8006698 <USB_GetCurrentFrame>
 80026c2:	4603      	mov	r3, r0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 ffc6 	bl	800666a <USB_GetHostSpeed>
 80026de:	4603      	mov	r3, r0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b04      	cmp	r3, #4
 8002716:	d119      	bne.n	800274c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	2304      	movs	r3, #4
 8002728:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	0151      	lsls	r1, r2, #5
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	440a      	add	r2, r1
 8002740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	60d3      	str	r3, [r2, #12]
 800274a:	e0ce      	b.n	80028ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002762:	d12c      	bne.n	80027be <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	461a      	mov	r2, r3
 8002772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002776:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	440b      	add	r3, r1
 8002786:	335d      	adds	r3, #93	; 0x5d
 8002788:	2207      	movs	r2, #7
 800278a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	0151      	lsls	r1, r2, #5
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	440a      	add	r2, r1
 80027a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a6:	f043 0302 	orr.w	r3, r3, #2
 80027aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f004 f9e1 	bl	8006b7e <USB_HC_Halt>
 80027bc:	e095      	b.n	80028ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d109      	bne.n	80027e8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	461a      	mov	r2, r3
 80027e2:	2320      	movs	r3, #32
 80027e4:	6093      	str	r3, [r2, #8]
 80027e6:	e080      	b.n	80028ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d134      	bne.n	8002868 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	0151      	lsls	r1, r2, #5
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	440a      	add	r2, r1
 8002814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	335d      	adds	r3, #93	; 0x5d
 800282e:	2205      	movs	r2, #5
 8002830:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	461a      	mov	r2, r3
 8002840:	2310      	movs	r3, #16
 8002842:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	461a      	mov	r2, r3
 8002852:	2308      	movs	r3, #8
 8002854:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f004 f98c 	bl	8006b7e <USB_HC_Halt>
 8002866:	e040      	b.n	80028ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287e:	d134      	bne.n	80028ea <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	0151      	lsls	r1, r2, #5
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	440a      	add	r2, r1
 8002896:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800289a:	f043 0302 	orr.w	r3, r3, #2
 800289e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 f967 	bl	8006b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	2310      	movs	r3, #16
 80028c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	335d      	adds	r3, #93	; 0x5d
 80028d2:	2208      	movs	r2, #8
 80028d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	461a      	mov	r2, r3
 80028e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002900:	d122      	bne.n	8002948 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	0151      	lsls	r1, r2, #5
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	440a      	add	r2, r1
 8002918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f004 f926 	bl	8006b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293e:	461a      	mov	r2, r3
 8002940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002944:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002946:	e300      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	f040 80fd 	bne.w	8002b5a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01b      	beq.n	80029a0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	3348      	adds	r3, #72	; 0x48
 8002978:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	0159      	lsls	r1, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	440b      	add	r3, r1
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800298c:	1ad1      	subs	r1, r2, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4403      	add	r3, r0
 800299c:	334c      	adds	r3, #76	; 0x4c
 800299e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	335d      	adds	r3, #93	; 0x5d
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	3358      	adds	r3, #88	; 0x58
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	2301      	movs	r3, #1
 80029d8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	333f      	adds	r3, #63	; 0x3f
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	333f      	adds	r3, #63	; 0x3f
 8002a00:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d121      	bne.n	8002a4a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	0151      	lsls	r1, r2, #5
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	440a      	add	r2, r1
 8002a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f004 f8a4 	bl	8006b7e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a42:	461a      	mov	r2, r3
 8002a44:	2310      	movs	r3, #16
 8002a46:	6093      	str	r3, [r2, #8]
 8002a48:	e070      	b.n	8002b2c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	333f      	adds	r3, #63	; 0x3f
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d12a      	bne.n	8002ab6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	0151      	lsls	r1, r2, #5
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	440a      	add	r2, r1
 8002a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a7e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	335c      	adds	r3, #92	; 0x5c
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	b2d8      	uxtb	r0, r3
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	335c      	adds	r3, #92	; 0x5c
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4601      	mov	r1, r0
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f006 fa08 	bl	8008ec4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ab4:	e03a      	b.n	8002b2c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	333f      	adds	r3, #63	; 0x3f
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d12f      	bne.n	8002b2c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	335c      	adds	r3, #92	; 0x5c
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	3350      	adds	r3, #80	; 0x50
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	f083 0301 	eor.w	r3, r3, #1
 8002af6:	b2d8      	uxtb	r0, r3
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	3350      	adds	r3, #80	; 0x50
 8002b08:	4602      	mov	r2, r0
 8002b0a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	b2d8      	uxtb	r0, r3
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	335c      	adds	r3, #92	; 0x5c
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4601      	mov	r1, r0
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f006 f9cc 	bl	8008ec4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	3350      	adds	r3, #80	; 0x50
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	f083 0301 	eor.w	r3, r3, #1
 8002b42:	b2d8      	uxtb	r0, r3
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	3350      	adds	r3, #80	; 0x50
 8002b54:	4602      	mov	r2, r0
 8002b56:	701a      	strb	r2, [r3, #0]
}
 8002b58:	e1f7      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	f040 811a 	bne.w	8002da6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	0151      	lsls	r1, r2, #5
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	440a      	add	r2, r1
 8002b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b8c:	f023 0302 	bic.w	r3, r3, #2
 8002b90:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	335d      	adds	r3, #93	; 0x5d
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10a      	bne.n	8002bbe <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	335c      	adds	r3, #92	; 0x5c
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e0d9      	b.n	8002d72 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	440b      	add	r3, r1
 8002bcc:	335d      	adds	r3, #93	; 0x5d
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d10a      	bne.n	8002bea <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	335c      	adds	r3, #92	; 0x5c
 8002be4:	2205      	movs	r2, #5
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e0c3      	b.n	8002d72 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	335d      	adds	r3, #93	; 0x5d
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b06      	cmp	r3, #6
 8002bfe:	d00a      	beq.n	8002c16 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	335d      	adds	r3, #93	; 0x5d
 8002c10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d156      	bne.n	8002cc4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	3358      	adds	r3, #88	; 0x58
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	1c59      	adds	r1, r3, #1
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4403      	add	r3, r0
 8002c38:	3358      	adds	r3, #88	; 0x58
 8002c3a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	3358      	adds	r3, #88	; 0x58
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d914      	bls.n	8002c7c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	440b      	add	r3, r1
 8002c60:	3358      	adds	r3, #88	; 0x58
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	335c      	adds	r3, #92	; 0x5c
 8002c76:	2204      	movs	r2, #4
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	e009      	b.n	8002c90 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	335c      	adds	r3, #92	; 0x5c
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ca6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e056      	b.n	8002d72 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	335d      	adds	r3, #93	; 0x5d
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d123      	bne.n	8002d22 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	335c      	adds	r3, #92	; 0x5c
 8002cea:	2202      	movs	r2, #2
 8002cec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d04:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d0c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	e027      	b.n	8002d72 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	335d      	adds	r3, #93	; 0x5d
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b07      	cmp	r3, #7
 8002d36:	d11c      	bne.n	8002d72 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	3358      	adds	r3, #88	; 0x58
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	1c59      	adds	r1, r3, #1
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4403      	add	r3, r0
 8002d5a:	3358      	adds	r3, #88	; 0x58
 8002d5c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	335c      	adds	r3, #92	; 0x5c
 8002d6e:	2204      	movs	r2, #4
 8002d70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2302      	movs	r3, #2
 8002d82:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	b2d8      	uxtb	r0, r3
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	440b      	add	r3, r1
 8002d96:	335c      	adds	r3, #92	; 0x5c
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4601      	mov	r1, r0
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f006 f890 	bl	8008ec4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002da4:	e0d1      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b80      	cmp	r3, #128	; 0x80
 8002dba:	d13e      	bne.n	8002e3a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	0151      	lsls	r1, r2, #5
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	440a      	add	r2, r1
 8002dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dd6:	f043 0302 	orr.w	r3, r3, #2
 8002dda:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	3358      	adds	r3, #88	; 0x58
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	1c59      	adds	r1, r3, #1
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4403      	add	r3, r0
 8002dfe:	3358      	adds	r3, #88	; 0x58
 8002e00:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	335d      	adds	r3, #93	; 0x5d
 8002e12:	2206      	movs	r2, #6
 8002e14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 feac 	bl	8006b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e32:	461a      	mov	r2, r3
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	6093      	str	r3, [r2, #8]
}
 8002e38:	e087      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d17c      	bne.n	8002f4a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	333f      	adds	r3, #63	; 0x3f
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d122      	bne.n	8002eac <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	3358      	adds	r3, #88	; 0x58
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	0151      	lsls	r1, r2, #5
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	440a      	add	r2, r1
 8002e90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f003 fe6a 	bl	8006b7e <USB_HC_Halt>
 8002eaa:	e045      	b.n	8002f38 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	440b      	add	r3, r1
 8002eba:	333f      	adds	r3, #63	; 0x3f
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	440b      	add	r3, r1
 8002ed0:	333f      	adds	r3, #63	; 0x3f
 8002ed2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d12f      	bne.n	8002f38 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3358      	adds	r3, #88	; 0x58
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d121      	bne.n	8002f38 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	440b      	add	r3, r1
 8002f02:	335d      	adds	r3, #93	; 0x5d
 8002f04:	2203      	movs	r2, #3
 8002f06:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	0151      	lsls	r1, r2, #5
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	440a      	add	r2, r1
 8002f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 fe23 	bl	8006b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	461a      	mov	r2, r3
 8002f46:	2310      	movs	r3, #16
 8002f48:	6093      	str	r3, [r2, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d119      	bne.n	8002fb6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2304      	movs	r3, #4
 8002f92:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	0151      	lsls	r1, r2, #5
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	440a      	add	r2, r1
 8002faa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fae:	f043 0302 	orr.w	r3, r3, #2
 8002fb2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002fb4:	e33e      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d141      	bne.n	8003050 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2320      	movs	r3, #32
 8002fdc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	440b      	add	r3, r1
 8002fec:	333d      	adds	r3, #61	; 0x3d
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	f040 831f 	bne.w	8003634 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	333d      	adds	r3, #61	; 0x3d
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	335c      	adds	r3, #92	; 0x5c
 800301a:	2202      	movs	r2, #2
 800301c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	0151      	lsls	r1, r2, #5
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	440a      	add	r2, r1
 8003034:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f003 fd98 	bl	8006b7e <USB_HC_Halt>
}
 800304e:	e2f1      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d13f      	bne.n	80030e6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	335d      	adds	r3, #93	; 0x5d
 8003076:	2204      	movs	r2, #4
 8003078:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	333d      	adds	r3, #61	; 0x3d
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	3358      	adds	r3, #88	; 0x58
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	0151      	lsls	r1, r2, #5
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	440a      	add	r2, r1
 80030b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f003 fd56 	bl	8006b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030de:	461a      	mov	r2, r3
 80030e0:	2340      	movs	r3, #64	; 0x40
 80030e2:	6093      	str	r3, [r2, #8]
}
 80030e4:	e2a6      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030fc:	d122      	bne.n	8003144 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	0151      	lsls	r1, r2, #5
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	440a      	add	r2, r1
 8003114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f003 fd28 	bl	8006b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	461a      	mov	r2, r3
 800313c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003140:	6093      	str	r3, [r2, #8]
}
 8003142:	e277      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d135      	bne.n	80031c6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	440b      	add	r3, r1
 8003168:	3358      	adds	r3, #88	; 0x58
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4413      	add	r3, r2
 8003176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	0151      	lsls	r1, r2, #5
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	440a      	add	r2, r1
 8003184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003188:	f043 0302 	orr.w	r3, r3, #2
 800318c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f003 fcf0 	bl	8006b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	461a      	mov	r2, r3
 80031ac:	2301      	movs	r3, #1
 80031ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	335d      	adds	r3, #93	; 0x5d
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
}
 80031c4:	e236      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d12b      	bne.n	8003234 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e8:	461a      	mov	r2, r3
 80031ea:	2308      	movs	r3, #8
 80031ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	0151      	lsls	r1, r2, #5
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	440a      	add	r2, r1
 8003204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f003 fcb0 	bl	8006b7e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	440b      	add	r3, r1
 800322c:	335d      	adds	r3, #93	; 0x5d
 800322e:	2205      	movs	r2, #5
 8003230:	701a      	strb	r2, [r3, #0]
}
 8003232:	e1ff      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b10      	cmp	r3, #16
 8003248:	d155      	bne.n	80032f6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	440b      	add	r3, r1
 8003258:	3358      	adds	r3, #88	; 0x58
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	440b      	add	r3, r1
 800326c:	335d      	adds	r3, #93	; 0x5d
 800326e:	2203      	movs	r2, #3
 8003270:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	333d      	adds	r3, #61	; 0x3d
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d114      	bne.n	80032b2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	333c      	adds	r3, #60	; 0x3c
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	440b      	add	r3, r1
 80032ac:	333d      	adds	r3, #61	; 0x3d
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	0151      	lsls	r1, r2, #5
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	440a      	add	r2, r1
 80032c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f003 fc4e 	bl	8006b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ee:	461a      	mov	r2, r3
 80032f0:	2310      	movs	r3, #16
 80032f2:	6093      	str	r3, [r2, #8]
}
 80032f4:	e19e      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b80      	cmp	r3, #128	; 0x80
 800330a:	d12b      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	0151      	lsls	r1, r2, #5
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	440a      	add	r2, r1
 8003322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003326:	f043 0302 	orr.w	r3, r3, #2
 800332a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f003 fc21 	bl	8006b7e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	440b      	add	r3, r1
 800334a:	335d      	adds	r3, #93	; 0x5d
 800334c:	2206      	movs	r2, #6
 800334e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	461a      	mov	r2, r3
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	6093      	str	r3, [r2, #8]
}
 8003362:	e167      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337a:	d135      	bne.n	80033e8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	0151      	lsls	r1, r2, #5
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	440a      	add	r2, r1
 8003392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f003 fbe9 	bl	8006b7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b8:	461a      	mov	r2, r3
 80033ba:	2310      	movs	r3, #16
 80033bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ca:	461a      	mov	r2, r3
 80033cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	335d      	adds	r3, #93	; 0x5d
 80033e2:	2208      	movs	r2, #8
 80033e4:	701a      	strb	r2, [r3, #0]
}
 80033e6:	e125      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	f040 811a 	bne.w	8003634 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	0151      	lsls	r1, r2, #5
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	440a      	add	r2, r1
 8003416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800341a:	f023 0302 	bic.w	r3, r3, #2
 800341e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	335d      	adds	r3, #93	; 0x5d
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d137      	bne.n	80034a6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	335c      	adds	r3, #92	; 0x5c
 8003446:	2201      	movs	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	440b      	add	r3, r1
 8003458:	333f      	adds	r3, #63	; 0x3f
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d00b      	beq.n	8003478 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	440b      	add	r3, r1
 800346e:	333f      	adds	r3, #63	; 0x3f
 8003470:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003472:	2b03      	cmp	r3, #3
 8003474:	f040 80c5 	bne.w	8003602 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	440b      	add	r3, r1
 8003486:	3351      	adds	r3, #81	; 0x51
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	f083 0301 	eor.w	r3, r3, #1
 800348e:	b2d8      	uxtb	r0, r3
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	3351      	adds	r3, #81	; 0x51
 80034a0:	4602      	mov	r2, r0
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e0ad      	b.n	8003602 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	335d      	adds	r3, #93	; 0x5d
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d10a      	bne.n	80034d2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	440b      	add	r3, r1
 80034ca:	335c      	adds	r3, #92	; 0x5c
 80034cc:	2202      	movs	r2, #2
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	e097      	b.n	8003602 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	440b      	add	r3, r1
 80034e0:	335d      	adds	r3, #93	; 0x5d
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d10a      	bne.n	80034fe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	440b      	add	r3, r1
 80034f6:	335c      	adds	r3, #92	; 0x5c
 80034f8:	2202      	movs	r2, #2
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	e081      	b.n	8003602 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	440b      	add	r3, r1
 800350c:	335d      	adds	r3, #93	; 0x5d
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b05      	cmp	r3, #5
 8003512:	d10a      	bne.n	800352a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	335c      	adds	r3, #92	; 0x5c
 8003524:	2205      	movs	r2, #5
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e06b      	b.n	8003602 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	440b      	add	r3, r1
 8003538:	335d      	adds	r3, #93	; 0x5d
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b06      	cmp	r3, #6
 800353e:	d00a      	beq.n	8003556 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	440b      	add	r3, r1
 800354e:	335d      	adds	r3, #93	; 0x5d
 8003550:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003552:	2b08      	cmp	r3, #8
 8003554:	d155      	bne.n	8003602 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	440b      	add	r3, r1
 8003564:	3358      	adds	r3, #88	; 0x58
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c59      	adds	r1, r3, #1
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4403      	add	r3, r0
 8003578:	3358      	adds	r3, #88	; 0x58
 800357a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	440b      	add	r3, r1
 800358a:	3358      	adds	r3, #88	; 0x58
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b03      	cmp	r3, #3
 8003590:	d914      	bls.n	80035bc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	440b      	add	r3, r1
 80035a0:	3358      	adds	r3, #88	; 0x58
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	440b      	add	r3, r1
 80035b4:	335c      	adds	r3, #92	; 0x5c
 80035b6:	2204      	movs	r2, #4
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e009      	b.n	80035d0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	440b      	add	r3, r1
 80035ca:	335c      	adds	r3, #92	; 0x5c
 80035cc:	2202      	movs	r2, #2
 80035ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fc:	461a      	mov	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360e:	461a      	mov	r2, r3
 8003610:	2302      	movs	r3, #2
 8003612:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	b2d8      	uxtb	r0, r3
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	440b      	add	r3, r1
 8003626:	335c      	adds	r3, #92	; 0x5c
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	4601      	mov	r1, r0
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f005 fc48 	bl	8008ec4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003634:	bf00      	nop
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	0c5b      	lsrs	r3, r3, #17
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003670:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d003      	beq.n	8003680 <HCD_RXQLVL_IRQHandler+0x44>
 8003678:	2b05      	cmp	r3, #5
 800367a:	f000 8082 	beq.w	8003782 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800367e:	e083      	b.n	8003788 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d07f      	beq.n	8003786 <HCD_RXQLVL_IRQHandler+0x14a>
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	440b      	add	r3, r1
 8003694:	3344      	adds	r3, #68	; 0x44
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d074      	beq.n	8003786 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	440b      	add	r3, r1
 80036ae:	3344      	adds	r3, #68	; 0x44
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	b292      	uxth	r2, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	f002 fdff 	bl	80062ba <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	440b      	add	r3, r1
 80036ca:	3344      	adds	r3, #68	; 0x44
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	18d1      	adds	r1, r2, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4403      	add	r3, r0
 80036e0:	3344      	adds	r3, #68	; 0x44
 80036e2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	440b      	add	r3, r1
 80036f2:	334c      	adds	r3, #76	; 0x4c
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	18d1      	adds	r1, r2, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4403      	add	r3, r0
 8003708:	334c      	adds	r3, #76	; 0x4c
 800370a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <HCD_RXQLVL_IRQHandler+0x154>)
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d031      	beq.n	8003786 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003738:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003740:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	4413      	add	r3, r2
 800374a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	440b      	add	r3, r1
 8003762:	3350      	adds	r3, #80	; 0x50
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	f083 0301 	eor.w	r3, r3, #1
 800376a:	b2d8      	uxtb	r0, r3
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	440b      	add	r3, r1
 800377a:	3350      	adds	r3, #80	; 0x50
 800377c:	4602      	mov	r2, r0
 800377e:	701a      	strb	r2, [r3, #0]
      break;
 8003780:	e001      	b.n	8003786 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003786:	bf00      	nop
  }
}
 8003788:	bf00      	nop
 800378a:	3728      	adds	r7, #40	; 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	1ff80000 	.word	0x1ff80000

08003794 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d10b      	bne.n	80037e4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d102      	bne.n	80037dc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f005 fb58 	bl	8008e8c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d132      	bne.n	8003854 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f043 0308 	orr.w	r3, r3, #8
 80037f4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d126      	bne.n	800384e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d113      	bne.n	8003830 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800380e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003812:	d106      	bne.n	8003822 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2102      	movs	r1, #2
 800381a:	4618      	mov	r0, r3
 800381c:	f002 fe88 	bl	8006530 <USB_InitFSLSPClkSel>
 8003820:	e011      	b.n	8003846 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2101      	movs	r1, #1
 8003828:	4618      	mov	r0, r3
 800382a:	f002 fe81 	bl	8006530 <USB_InitFSLSPClkSel>
 800382e:	e00a      	b.n	8003846 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800383e:	461a      	mov	r2, r3
 8003840:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003844:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f005 fb4a 	bl	8008ee0 <HAL_HCD_PortEnabled_Callback>
 800384c:	e002      	b.n	8003854 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f005 fb54 	bl	8008efc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b20      	cmp	r3, #32
 800385c:	d103      	bne.n	8003866 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f043 0320 	orr.w	r3, r3, #32
 8003864:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800386c:	461a      	mov	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	6013      	str	r3, [r2, #0]
}
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e11f      	b.n	8003ace <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd f926 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e0:	f001 f9de 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 80038e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a7b      	ldr	r2, [pc, #492]	; (8003ad8 <HAL_I2C_Init+0x25c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d807      	bhi.n	8003900 <HAL_I2C_Init+0x84>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a7a      	ldr	r2, [pc, #488]	; (8003adc <HAL_I2C_Init+0x260>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bf94      	ite	ls
 80038f8:	2301      	movls	r3, #1
 80038fa:	2300      	movhi	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e006      	b.n	800390e <HAL_I2C_Init+0x92>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a77      	ldr	r2, [pc, #476]	; (8003ae0 <HAL_I2C_Init+0x264>)
 8003904:	4293      	cmp	r3, r2
 8003906:	bf94      	ite	ls
 8003908:	2301      	movls	r3, #1
 800390a:	2300      	movhi	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0db      	b.n	8003ace <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a72      	ldr	r2, [pc, #456]	; (8003ae4 <HAL_I2C_Init+0x268>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0c9b      	lsrs	r3, r3, #18
 8003920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4a64      	ldr	r2, [pc, #400]	; (8003ad8 <HAL_I2C_Init+0x25c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d802      	bhi.n	8003950 <HAL_I2C_Init+0xd4>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3301      	adds	r3, #1
 800394e:	e009      	b.n	8003964 <HAL_I2C_Init+0xe8>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	4a63      	ldr	r2, [pc, #396]	; (8003ae8 <HAL_I2C_Init+0x26c>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	099b      	lsrs	r3, r3, #6
 8003962:	3301      	adds	r3, #1
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4956      	ldr	r1, [pc, #344]	; (8003ad8 <HAL_I2C_Init+0x25c>)
 8003980:	428b      	cmp	r3, r1
 8003982:	d80d      	bhi.n	80039a0 <HAL_I2C_Init+0x124>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1e59      	subs	r1, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003992:	3301      	adds	r3, #1
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	2b04      	cmp	r3, #4
 800399a:	bf38      	it	cc
 800399c:	2304      	movcc	r3, #4
 800399e:	e04f      	b.n	8003a40 <HAL_I2C_Init+0x1c4>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d111      	bne.n	80039cc <HAL_I2C_Init+0x150>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1e58      	subs	r0, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	440b      	add	r3, r1
 80039b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e012      	b.n	80039f2 <HAL_I2C_Init+0x176>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1e58      	subs	r0, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	0099      	lsls	r1, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e2:	3301      	adds	r3, #1
 80039e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf0c      	ite	eq
 80039ec:	2301      	moveq	r3, #1
 80039ee:	2300      	movne	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Init+0x17e>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e022      	b.n	8003a40 <HAL_I2C_Init+0x1c4>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10e      	bne.n	8003a20 <HAL_I2C_Init+0x1a4>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1e58      	subs	r0, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	440b      	add	r3, r1
 8003a10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a14:	3301      	adds	r3, #1
 8003a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1e:	e00f      	b.n	8003a40 <HAL_I2C_Init+0x1c4>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1e58      	subs	r0, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	0099      	lsls	r1, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a36:	3301      	adds	r3, #1
 8003a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	6809      	ldr	r1, [r1, #0]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6911      	ldr	r1, [r2, #16]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68d2      	ldr	r2, [r2, #12]
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	000186a0 	.word	0x000186a0
 8003adc:	001e847f 	.word	0x001e847f
 8003ae0:	003d08ff 	.word	0x003d08ff
 8003ae4:	431bde83 	.word	0x431bde83
 8003ae8:	10624dd3 	.word	0x10624dd3

08003aec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e128      	b.n	8003d50 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a90      	ldr	r2, [pc, #576]	; (8003d58 <HAL_I2S_Init+0x26c>)
 8003b16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fd f833 	bl	8000b84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2202      	movs	r2, #2
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b34:	f023 030f 	bic.w	r3, r3, #15
 8003b38:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d060      	beq.n	8003c0c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b52:	2310      	movs	r3, #16
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e001      	b.n	8003b5c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b58:	2320      	movs	r3, #32
 8003b5a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d802      	bhi.n	8003b6a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f001 f9a2 	bl	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b70:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7a:	d125      	bne.n	8003bc8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d010      	beq.n	8003ba6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	461a      	mov	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	3305      	adds	r3, #5
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	e01f      	b.n	8003be6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	461a      	mov	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc2:	3305      	adds	r3, #5
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	e00e      	b.n	8003be6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	461a      	mov	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	3305      	adds	r3, #5
 8003be4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4a5c      	ldr	r2, [pc, #368]	; (8003d5c <HAL_I2S_Init+0x270>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	08db      	lsrs	r3, r3, #3
 8003bf0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	e003      	b.n	8003c14 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d902      	bls.n	8003c20 <HAL_I2S_Init+0x134>
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	2bff      	cmp	r3, #255	; 0xff
 8003c1e:	d907      	bls.n	8003c30 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	f043 0210 	orr.w	r2, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e08f      	b.n	8003d50 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	ea42 0103 	orr.w	r1, r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c4e:	f023 030f 	bic.w	r3, r3, #15
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6851      	ldr	r1, [r2, #4]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6892      	ldr	r2, [r2, #8]
 8003c5a:	4311      	orrs	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	68d2      	ldr	r2, [r2, #12]
 8003c60:	4311      	orrs	r1, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6992      	ldr	r2, [r2, #24]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c72:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d161      	bne.n	8003d40 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a38      	ldr	r2, [pc, #224]	; (8003d60 <HAL_I2S_Init+0x274>)
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a37      	ldr	r2, [pc, #220]	; (8003d64 <HAL_I2S_Init+0x278>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d101      	bne.n	8003c90 <HAL_I2S_Init+0x1a4>
 8003c8c:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_I2S_Init+0x27c>)
 8003c8e:	e001      	b.n	8003c94 <HAL_I2S_Init+0x1a8>
 8003c90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	4932      	ldr	r1, [pc, #200]	; (8003d64 <HAL_I2S_Init+0x278>)
 8003c9c:	428a      	cmp	r2, r1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_I2S_Init+0x1b8>
 8003ca0:	4a31      	ldr	r2, [pc, #196]	; (8003d68 <HAL_I2S_Init+0x27c>)
 8003ca2:	e001      	b.n	8003ca8 <HAL_I2S_Init+0x1bc>
 8003ca4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ca8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003cac:	f023 030f 	bic.w	r3, r3, #15
 8003cb0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2b      	ldr	r2, [pc, #172]	; (8003d64 <HAL_I2S_Init+0x278>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <HAL_I2S_Init+0x1d4>
 8003cbc:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <HAL_I2S_Init+0x27c>)
 8003cbe:	e001      	b.n	8003cc4 <HAL_I2S_Init+0x1d8>
 8003cc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a25      	ldr	r2, [pc, #148]	; (8003d64 <HAL_I2S_Init+0x278>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2S_Init+0x1ea>
 8003cd2:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <HAL_I2S_Init+0x27c>)
 8003cd4:	e001      	b.n	8003cda <HAL_I2S_Init+0x1ee>
 8003cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce6:	d003      	beq.n	8003cf0 <HAL_I2S_Init+0x204>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	e001      	b.n	8003cfc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	b299      	uxth	r1, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003d12:	4303      	orrs	r3, r0
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	430b      	orrs	r3, r1
 8003d18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	897b      	ldrh	r3, [r7, #10]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d28:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a0d      	ldr	r2, [pc, #52]	; (8003d64 <HAL_I2S_Init+0x278>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d101      	bne.n	8003d38 <HAL_I2S_Init+0x24c>
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <HAL_I2S_Init+0x27c>)
 8003d36:	e001      	b.n	8003d3c <HAL_I2S_Init+0x250>
 8003d38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d3c:	897a      	ldrh	r2, [r7, #10]
 8003d3e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3720      	adds	r7, #32
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	08003e63 	.word	0x08003e63
 8003d5c:	cccccccd 	.word	0xcccccccd
 8003d60:	08003f79 	.word	0x08003f79
 8003d64:	40003800 	.word	0x40003800
 8003d68:	40003400 	.word	0x40003400

08003d6c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	881a      	ldrh	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	1c9a      	adds	r2, r3, #2
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10e      	bne.n	8003dfc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ffb8 	bl	8003d6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	b292      	uxth	r2, r2
 8003e18:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10e      	bne.n	8003e5a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e4a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff93 	bl	8003d80 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b086      	sub	sp, #24
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d13a      	bne.n	8003ef4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d109      	bne.n	8003e9c <I2S_IRQHandler+0x3a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b40      	cmp	r3, #64	; 0x40
 8003e94:	d102      	bne.n	8003e9c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ffb4 	bl	8003e04 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d126      	bne.n	8003ef4 <I2S_IRQHandler+0x92>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d11f      	bne.n	8003ef4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ec2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	f043 0202 	orr.w	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff ff50 	bl	8003d94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d136      	bne.n	8003f6e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d109      	bne.n	8003f1e <I2S_IRQHandler+0xbc>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b80      	cmp	r3, #128	; 0x80
 8003f16:	d102      	bne.n	8003f1e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff45 	bl	8003da8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d122      	bne.n	8003f6e <I2S_IRQHandler+0x10c>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	d11b      	bne.n	8003f6e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f44:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	f043 0204 	orr.w	r2, r3, #4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ff13 	bl	8003d94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f6e:	bf00      	nop
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4aa2      	ldr	r2, [pc, #648]	; (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f92:	4ba2      	ldr	r3, [pc, #648]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f94:	e001      	b.n	8003f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a9b      	ldr	r2, [pc, #620]	; (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003fb0:	4b9a      	ldr	r3, [pc, #616]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fb2:	e001      	b.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc4:	d004      	beq.n	8003fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 8099 	bne.w	8004102 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d107      	bne.n	8003fea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f925 	bl	8004234 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d107      	bne.n	8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f9c8 	bl	8004394 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d13a      	bne.n	8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d035      	beq.n	8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a7e      	ldr	r2, [pc, #504]	; (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004022:	4b7e      	ldr	r3, [pc, #504]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004024:	e001      	b.n	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4979      	ldr	r1, [pc, #484]	; (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004032:	428b      	cmp	r3, r1
 8004034:	d101      	bne.n	800403a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004036:	4b79      	ldr	r3, [pc, #484]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004038:	e001      	b.n	800403e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800403a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800403e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004042:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004052:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	f043 0202 	orr.w	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff fe88 	bl	8003d94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b08      	cmp	r3, #8
 800408c:	f040 80be 	bne.w	800420c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80b8 	beq.w	800420c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a59      	ldr	r2, [pc, #356]	; (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d101      	bne.n	80040ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80040b6:	4b59      	ldr	r3, [pc, #356]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040b8:	e001      	b.n	80040be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80040ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4954      	ldr	r1, [pc, #336]	; (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040c6:	428b      	cmp	r3, r1
 80040c8:	d101      	bne.n	80040ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80040ca:	4b54      	ldr	r3, [pc, #336]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040cc:	e001      	b.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80040ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040d8:	2300      	movs	r3, #0
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	f043 0204 	orr.w	r2, r3, #4
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fe4a 	bl	8003d94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004100:	e084      	b.n	800420c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d107      	bne.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8be 	bl	8004298 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b01      	cmp	r3, #1
 8004124:	d107      	bne.n	8004136 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f8fd 	bl	8004330 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b40      	cmp	r3, #64	; 0x40
 800413e:	d12f      	bne.n	80041a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d02a      	beq.n	80041a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004158:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2e      	ldr	r2, [pc, #184]	; (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d101      	bne.n	8004168 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004164:	4b2d      	ldr	r3, [pc, #180]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004166:	e001      	b.n	800416c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004168:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4929      	ldr	r1, [pc, #164]	; (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004174:	428b      	cmp	r3, r1
 8004176:	d101      	bne.n	800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004178:	4b28      	ldr	r3, [pc, #160]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800417a:	e001      	b.n	8004180 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800417c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004180:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004184:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f043 0202 	orr.w	r2, r3, #2
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff fdfa 	bl	8003d94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d131      	bne.n	800420e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d02c      	beq.n	800420e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a17      	ldr	r2, [pc, #92]	; (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d101      	bne.n	80041c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80041be:	4b17      	ldr	r3, [pc, #92]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041c0:	e001      	b.n	80041c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80041c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4912      	ldr	r1, [pc, #72]	; (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041ce:	428b      	cmp	r3, r1
 80041d0:	d101      	bne.n	80041d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80041d2:	4b12      	ldr	r3, [pc, #72]	; (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041d4:	e001      	b.n	80041da <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80041d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ee:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fc:	f043 0204 	orr.w	r2, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fdc5 	bl	8003d94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800420a:	e000      	b.n	800420e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800420c:	bf00      	nop
}
 800420e:	bf00      	nop
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40003800 	.word	0x40003800
 800421c:	40003400 	.word	0x40003400

08004220 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	1c99      	adds	r1, r3, #2
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6251      	str	r1, [r2, #36]	; 0x24
 8004246:	881a      	ldrh	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d113      	bne.n	800428e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004274:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ffc9 	bl	8004220 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	1c99      	adds	r1, r3, #2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6251      	str	r1, [r2, #36]	; 0x24
 80042aa:	8819      	ldrh	r1, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <I2SEx_TxISR_I2SExt+0x90>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <I2SEx_TxISR_I2SExt+0x22>
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <I2SEx_TxISR_I2SExt+0x94>)
 80042b8:	e001      	b.n	80042be <I2SEx_TxISR_I2SExt+0x26>
 80042ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042be:	460a      	mov	r2, r1
 80042c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d121      	bne.n	800431e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <I2SEx_TxISR_I2SExt+0x90>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <I2SEx_TxISR_I2SExt+0x50>
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <I2SEx_TxISR_I2SExt+0x94>)
 80042e6:	e001      	b.n	80042ec <I2SEx_TxISR_I2SExt+0x54>
 80042e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	490d      	ldr	r1, [pc, #52]	; (8004328 <I2SEx_TxISR_I2SExt+0x90>)
 80042f4:	428b      	cmp	r3, r1
 80042f6:	d101      	bne.n	80042fc <I2SEx_TxISR_I2SExt+0x64>
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <I2SEx_TxISR_I2SExt+0x94>)
 80042fa:	e001      	b.n	8004300 <I2SEx_TxISR_I2SExt+0x68>
 80042fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004300:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004304:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ff81 	bl	8004220 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40003800 	.word	0x40003800
 800432c:	40003400 	.word	0x40003400

08004330 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68d8      	ldr	r0, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	1c99      	adds	r1, r3, #2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004348:	b282      	uxth	r2, r0
 800434a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d113      	bne.n	800438c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004372:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff ff4a 	bl	8004220 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a20      	ldr	r2, [pc, #128]	; (8004424 <I2SEx_RxISR_I2SExt+0x90>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <I2SEx_RxISR_I2SExt+0x16>
 80043a6:	4b20      	ldr	r3, [pc, #128]	; (8004428 <I2SEx_RxISR_I2SExt+0x94>)
 80043a8:	e001      	b.n	80043ae <I2SEx_RxISR_I2SExt+0x1a>
 80043aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ae:	68d8      	ldr	r0, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	1c99      	adds	r1, r3, #2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80043ba:	b282      	uxth	r2, r0
 80043bc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d121      	bne.n	800441a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a12      	ldr	r2, [pc, #72]	; (8004424 <I2SEx_RxISR_I2SExt+0x90>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d101      	bne.n	80043e4 <I2SEx_RxISR_I2SExt+0x50>
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <I2SEx_RxISR_I2SExt+0x94>)
 80043e2:	e001      	b.n	80043e8 <I2SEx_RxISR_I2SExt+0x54>
 80043e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	490d      	ldr	r1, [pc, #52]	; (8004424 <I2SEx_RxISR_I2SExt+0x90>)
 80043f0:	428b      	cmp	r3, r1
 80043f2:	d101      	bne.n	80043f8 <I2SEx_RxISR_I2SExt+0x64>
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <I2SEx_RxISR_I2SExt+0x94>)
 80043f6:	e001      	b.n	80043fc <I2SEx_RxISR_I2SExt+0x68>
 80043f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004400:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff ff03 	bl	8004220 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40003800 	.word	0x40003800
 8004428:	40003400 	.word	0x40003400

0800442c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e25b      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d075      	beq.n	8004536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444a:	4ba3      	ldr	r3, [pc, #652]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d00c      	beq.n	8004470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004456:	4ba0      	ldr	r3, [pc, #640]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800445e:	2b08      	cmp	r3, #8
 8004460:	d112      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004462:	4b9d      	ldr	r3, [pc, #628]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800446e:	d10b      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	4b99      	ldr	r3, [pc, #612]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d05b      	beq.n	8004534 <HAL_RCC_OscConfig+0x108>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d157      	bne.n	8004534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e236      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d106      	bne.n	80044a0 <HAL_RCC_OscConfig+0x74>
 8004492:	4b91      	ldr	r3, [pc, #580]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a90      	ldr	r2, [pc, #576]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x98>
 80044aa:	4b8b      	ldr	r3, [pc, #556]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a8a      	ldr	r2, [pc, #552]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b88      	ldr	r3, [pc, #544]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a87      	ldr	r2, [pc, #540]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044c4:	4b84      	ldr	r3, [pc, #528]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a83      	ldr	r2, [pc, #524]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b81      	ldr	r3, [pc, #516]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a80      	ldr	r2, [pc, #512]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fc fe3a 	bl	800115c <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fc fe36 	bl	800115c <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e1fb      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b76      	ldr	r3, [pc, #472]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xc0>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fc fe26 	bl	800115c <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004514:	f7fc fe22 	bl	800115c <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1e7      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b6c      	ldr	r3, [pc, #432]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0xe8>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d063      	beq.n	800460a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004542:	4b65      	ldr	r3, [pc, #404]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454e:	4b62      	ldr	r3, [pc, #392]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455a:	4b5f      	ldr	r3, [pc, #380]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b5c      	ldr	r3, [pc, #368]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x152>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1bb      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b56      	ldr	r3, [pc, #344]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4952      	ldr	r1, [pc, #328]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e03a      	b.n	800460a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b4f      	ldr	r3, [pc, #316]	; (80046dc <HAL_RCC_OscConfig+0x2b0>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fc fddb 	bl	800115c <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fc fdd7 	bl	800115c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e19c      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	4b46      	ldr	r3, [pc, #280]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b43      	ldr	r3, [pc, #268]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4940      	ldr	r1, [pc, #256]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	e015      	b.n	800460a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <HAL_RCC_OscConfig+0x2b0>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fc fdba 	bl	800115c <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ec:	f7fc fdb6 	bl	800115c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e17b      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d030      	beq.n	8004678 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461e:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <HAL_RCC_OscConfig+0x2b4>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fc fd9a 	bl	800115c <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800462c:	f7fc fd96 	bl	800115c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e15b      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x200>
 800464a:	e015      	b.n	8004678 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464c:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <HAL_RCC_OscConfig+0x2b4>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004652:	f7fc fd83 	bl	800115c <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465a:	f7fc fd7f 	bl	800115c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e144      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800466e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f0      	bne.n	800465a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80a0 	beq.w	80047c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10f      	bne.n	80046b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	4a0e      	ldr	r2, [pc, #56]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a4:	6413      	str	r3, [r2, #64]	; 0x40
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_RCC_OscConfig+0x2b8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d121      	bne.n	8004706 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <HAL_RCC_OscConfig+0x2b8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a07      	ldr	r2, [pc, #28]	; (80046e4 <HAL_RCC_OscConfig+0x2b8>)
 80046c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ce:	f7fc fd45 	bl	800115c <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	e011      	b.n	80046fa <HAL_RCC_OscConfig+0x2ce>
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800
 80046dc:	42470000 	.word	0x42470000
 80046e0:	42470e80 	.word	0x42470e80
 80046e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e8:	f7fc fd38 	bl	800115c <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0fd      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b81      	ldr	r3, [pc, #516]	; (8004900 <HAL_RCC_OscConfig+0x4d4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d106      	bne.n	800471c <HAL_RCC_OscConfig+0x2f0>
 800470e:	4b7d      	ldr	r3, [pc, #500]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a7c      	ldr	r2, [pc, #496]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	e01c      	b.n	8004756 <HAL_RCC_OscConfig+0x32a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b05      	cmp	r3, #5
 8004722:	d10c      	bne.n	800473e <HAL_RCC_OscConfig+0x312>
 8004724:	4b77      	ldr	r3, [pc, #476]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	4a76      	ldr	r2, [pc, #472]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	6713      	str	r3, [r2, #112]	; 0x70
 8004730:	4b74      	ldr	r3, [pc, #464]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4a73      	ldr	r2, [pc, #460]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6713      	str	r3, [r2, #112]	; 0x70
 800473c:	e00b      	b.n	8004756 <HAL_RCC_OscConfig+0x32a>
 800473e:	4b71      	ldr	r3, [pc, #452]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	4a70      	ldr	r2, [pc, #448]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	6713      	str	r3, [r2, #112]	; 0x70
 800474a:	4b6e      	ldr	r3, [pc, #440]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	4a6d      	ldr	r2, [pc, #436]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004750:	f023 0304 	bic.w	r3, r3, #4
 8004754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d015      	beq.n	800478a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475e:	f7fc fcfd 	bl	800115c <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004764:	e00a      	b.n	800477c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fc fcf9 	bl	800115c <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e0bc      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477c:	4b61      	ldr	r3, [pc, #388]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ee      	beq.n	8004766 <HAL_RCC_OscConfig+0x33a>
 8004788:	e014      	b.n	80047b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7fc fce7 	bl	800115c <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004790:	e00a      	b.n	80047a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004792:	f7fc fce3 	bl	800115c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0a6      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a8:	4b56      	ldr	r3, [pc, #344]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ee      	bne.n	8004792 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d105      	bne.n	80047c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ba:	4b52      	ldr	r3, [pc, #328]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	4a51      	ldr	r2, [pc, #324]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80047c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8092 	beq.w	80048f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047d0:	4b4c      	ldr	r3, [pc, #304]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d05c      	beq.n	8004896 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d141      	bne.n	8004868 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	4b48      	ldr	r3, [pc, #288]	; (8004908 <HAL_RCC_OscConfig+0x4dc>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ea:	f7fc fcb7 	bl	800115c <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f2:	f7fc fcb3 	bl	800115c <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e078      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004804:	4b3f      	ldr	r3, [pc, #252]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	019b      	lsls	r3, r3, #6
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	3b01      	subs	r3, #1
 800482a:	041b      	lsls	r3, r3, #16
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	061b      	lsls	r3, r3, #24
 8004834:	4933      	ldr	r1, [pc, #204]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004836:	4313      	orrs	r3, r2
 8004838:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800483a:	4b33      	ldr	r3, [pc, #204]	; (8004908 <HAL_RCC_OscConfig+0x4dc>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fc fc8c 	bl	800115c <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004848:	f7fc fc88 	bl	800115c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e04d      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485a:	4b2a      	ldr	r3, [pc, #168]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x41c>
 8004866:	e045      	b.n	80048f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004868:	4b27      	ldr	r3, [pc, #156]	; (8004908 <HAL_RCC_OscConfig+0x4dc>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fc fc75 	bl	800115c <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004876:	f7fc fc71 	bl	800115c <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e036      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004888:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x44a>
 8004894:	e02e      	b.n	80048f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e029      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d11c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d115      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048ca:	4013      	ands	r3, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d10d      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d106      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40007000 	.word	0x40007000
 8004904:	40023800 	.word	0x40023800
 8004908:	42470060 	.word	0x42470060

0800490c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0cc      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004920:	4b68      	ldr	r3, [pc, #416]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d90c      	bls.n	8004948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b65      	ldr	r3, [pc, #404]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b63      	ldr	r3, [pc, #396]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0b8      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004960:	4b59      	ldr	r3, [pc, #356]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a58      	ldr	r2, [pc, #352]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800496a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004978:	4b53      	ldr	r3, [pc, #332]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4a52      	ldr	r2, [pc, #328]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004984:	4b50      	ldr	r3, [pc, #320]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	494d      	ldr	r1, [pc, #308]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d044      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	4b47      	ldr	r3, [pc, #284]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d119      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e07f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d003      	beq.n	80049ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	4b3f      	ldr	r3, [pc, #252]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e06f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049da:	4b3b      	ldr	r3, [pc, #236]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e067      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ea:	4b37      	ldr	r3, [pc, #220]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4934      	ldr	r1, [pc, #208]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049fc:	f7fc fbae 	bl	800115c <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7fc fbaa 	bl	800115c <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e04f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 020c 	and.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1eb      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d20c      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b22      	ldr	r3, [pc, #136]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e032      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4916      	ldr	r1, [pc, #88]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	490e      	ldr	r1, [pc, #56]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a92:	f000 f821 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004a96:	4601      	mov	r1, r0
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	5cd3      	ldrb	r3, [r2, r3]
 8004aa6:	fa21 f303 	lsr.w	r3, r1, r3
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc fb0e 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023c00 	.word	0x40023c00
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	0800a23c 	.word	0x0800a23c
 8004ad0:	20000010 	.word	0x20000010
 8004ad4:	20000014 	.word	0x20000014

08004ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aee:	4b63      	ldr	r3, [pc, #396]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d007      	beq.n	8004b0a <HAL_RCC_GetSysClockFreq+0x32>
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d008      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0x38>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 80b4 	bne.w	8004c6c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b04:	4b5e      	ldr	r3, [pc, #376]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b06:	60bb      	str	r3, [r7, #8]
       break;
 8004b08:	e0b3      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b0a:	4b5e      	ldr	r3, [pc, #376]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004b0c:	60bb      	str	r3, [r7, #8]
      break;
 8004b0e:	e0b0      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b10:	4b5a      	ldr	r3, [pc, #360]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b1a:	4b58      	ldr	r3, [pc, #352]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d04a      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b26:	4b55      	ldr	r3, [pc, #340]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	099b      	lsrs	r3, r3, #6
 8004b2c:	f04f 0400 	mov.w	r4, #0
 8004b30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	ea03 0501 	and.w	r5, r3, r1
 8004b3c:	ea04 0602 	and.w	r6, r4, r2
 8004b40:	4629      	mov	r1, r5
 8004b42:	4632      	mov	r2, r6
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	f04f 0400 	mov.w	r4, #0
 8004b4c:	0154      	lsls	r4, r2, #5
 8004b4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b52:	014b      	lsls	r3, r1, #5
 8004b54:	4619      	mov	r1, r3
 8004b56:	4622      	mov	r2, r4
 8004b58:	1b49      	subs	r1, r1, r5
 8004b5a:	eb62 0206 	sbc.w	r2, r2, r6
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	f04f 0400 	mov.w	r4, #0
 8004b66:	0194      	lsls	r4, r2, #6
 8004b68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b6c:	018b      	lsls	r3, r1, #6
 8004b6e:	1a5b      	subs	r3, r3, r1
 8004b70:	eb64 0402 	sbc.w	r4, r4, r2
 8004b74:	f04f 0100 	mov.w	r1, #0
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	00e2      	lsls	r2, r4, #3
 8004b7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b82:	00d9      	lsls	r1, r3, #3
 8004b84:	460b      	mov	r3, r1
 8004b86:	4614      	mov	r4, r2
 8004b88:	195b      	adds	r3, r3, r5
 8004b8a:	eb44 0406 	adc.w	r4, r4, r6
 8004b8e:	f04f 0100 	mov.w	r1, #0
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	0262      	lsls	r2, r4, #9
 8004b98:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b9c:	0259      	lsls	r1, r3, #9
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f04f 0400 	mov.w	r4, #0
 8004bac:	461a      	mov	r2, r3
 8004bae:	4623      	mov	r3, r4
 8004bb0:	f7fb fb5e 	bl	8000270 <__aeabi_uldivmod>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	e049      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bbc:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	099b      	lsrs	r3, r3, #6
 8004bc2:	f04f 0400 	mov.w	r4, #0
 8004bc6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	ea03 0501 	and.w	r5, r3, r1
 8004bd2:	ea04 0602 	and.w	r6, r4, r2
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4632      	mov	r2, r6
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	f04f 0400 	mov.w	r4, #0
 8004be2:	0154      	lsls	r4, r2, #5
 8004be4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004be8:	014b      	lsls	r3, r1, #5
 8004bea:	4619      	mov	r1, r3
 8004bec:	4622      	mov	r2, r4
 8004bee:	1b49      	subs	r1, r1, r5
 8004bf0:	eb62 0206 	sbc.w	r2, r2, r6
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	f04f 0400 	mov.w	r4, #0
 8004bfc:	0194      	lsls	r4, r2, #6
 8004bfe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c02:	018b      	lsls	r3, r1, #6
 8004c04:	1a5b      	subs	r3, r3, r1
 8004c06:	eb64 0402 	sbc.w	r4, r4, r2
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	00e2      	lsls	r2, r4, #3
 8004c14:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c18:	00d9      	lsls	r1, r3, #3
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4614      	mov	r4, r2
 8004c1e:	195b      	adds	r3, r3, r5
 8004c20:	eb44 0406 	adc.w	r4, r4, r6
 8004c24:	f04f 0100 	mov.w	r1, #0
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	02a2      	lsls	r2, r4, #10
 8004c2e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c32:	0299      	lsls	r1, r3, #10
 8004c34:	460b      	mov	r3, r1
 8004c36:	4614      	mov	r4, r2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f04f 0400 	mov.w	r4, #0
 8004c42:	461a      	mov	r2, r3
 8004c44:	4623      	mov	r3, r4
 8004c46:	f7fb fb13 	bl	8000270 <__aeabi_uldivmod>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	0c1b      	lsrs	r3, r3, #16
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	60bb      	str	r3, [r7, #8]
      break;
 8004c6a:	e002      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c6c:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c6e:	60bb      	str	r3, [r7, #8]
      break;
 8004c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c72:	68bb      	ldr	r3, [r7, #8]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	00f42400 	.word	0x00f42400
 8004c84:	007a1200 	.word	0x007a1200

08004c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000010 	.word	0x20000010

08004ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ca4:	f7ff fff0 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004ca8:	4601      	mov	r1, r0
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	0a9b      	lsrs	r3, r3, #10
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	4a03      	ldr	r2, [pc, #12]	; (8004cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb6:	5cd3      	ldrb	r3, [r2, r3]
 8004cb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	0800a24c 	.word	0x0800a24c

08004cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ccc:	f7ff ffdc 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004cd0:	4601      	mov	r1, r0
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	0b5b      	lsrs	r3, r3, #13
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	4a03      	ldr	r2, [pc, #12]	; (8004cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cde:	5cd3      	ldrb	r3, [r2, r3]
 8004ce0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	0800a24c 	.word	0x0800a24c

08004cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d035      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d18:	4b62      	ldr	r3, [pc, #392]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d1e:	f7fc fa1d 	bl	800115c <HAL_GetTick>
 8004d22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d24:	e008      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d26:	f7fc fa19 	bl	800115c <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e0b0      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d38:	4b5b      	ldr	r3, [pc, #364]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1f0      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	019a      	lsls	r2, r3, #6
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	071b      	lsls	r3, r3, #28
 8004d50:	4955      	ldr	r1, [pc, #340]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d58:	4b52      	ldr	r3, [pc, #328]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d5e:	f7fc f9fd 	bl	800115c <HAL_GetTick>
 8004d62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d66:	f7fc f9f9 	bl	800115c <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e090      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d78:	4b4b      	ldr	r3, [pc, #300]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8083 	beq.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	4b44      	ldr	r3, [pc, #272]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	4a43      	ldr	r2, [pc, #268]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da0:	6413      	str	r3, [r2, #64]	; 0x40
 8004da2:	4b41      	ldr	r3, [pc, #260]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dae:	4b3f      	ldr	r3, [pc, #252]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a3e      	ldr	r2, [pc, #248]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dba:	f7fc f9cf 	bl	800115c <HAL_GetTick>
 8004dbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dc2:	f7fc f9cb 	bl	800115c <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e062      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dd4:	4b35      	ldr	r3, [pc, #212]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004de0:	4b31      	ldr	r3, [pc, #196]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02f      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d028      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dfe:	4b2a      	ldr	r3, [pc, #168]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e08:	4b29      	ldr	r3, [pc, #164]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e0e:	4b28      	ldr	r3, [pc, #160]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e14:	4a24      	ldr	r2, [pc, #144]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e1a:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d114      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e26:	f7fc f999 	bl	800115c <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7fc f995 	bl	800115c <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e02a      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e44:	4b18      	ldr	r3, [pc, #96]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0ee      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5c:	d10d      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e5e:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e72:	490d      	ldr	r1, [pc, #52]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	608b      	str	r3, [r1, #8]
 8004e78:	e005      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e80:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e84:	6093      	str	r3, [r2, #8]
 8004e86:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e92:	4905      	ldr	r1, [pc, #20]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	42470068 	.word	0x42470068
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	40007000 	.word	0x40007000
 8004eb0:	42470e40 	.word	0x42470e40

08004eb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d13d      	bne.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ed2:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eda:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d12f      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ee8:	617b      	str	r3, [r7, #20]
          break;
 8004eea:	e02f      	b.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef8:	d108      	bne.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004efa:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f02:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	e007      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f0c:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f14:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f22:	099b      	lsrs	r3, r3, #6
 8004f24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f36:	0f1b      	lsrs	r3, r3, #28
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f42:	617b      	str	r3, [r7, #20]
          break;
 8004f44:	e002      	b.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
          break;
 8004f4a:	bf00      	nop
        }
      }
      break;
 8004f4c:	bf00      	nop
    }
  }
  return frequency;
 8004f4e:	697b      	ldr	r3, [r7, #20]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	00bb8000 	.word	0x00bb8000
 8004f64:	007a1200 	.word	0x007a1200
 8004f68:	00f42400 	.word	0x00f42400

08004f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e056      	b.n	800502c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7fb fe5b 	bl	8000c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	ea42 0103 	orr.w	r1, r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	0c1b      	lsrs	r3, r3, #16
 8004ffc:	f003 0104 	and.w	r1, r3, #4
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800501a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e03f      	b.n	80050c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fb fe42 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2224      	movs	r2, #36	; 0x24
 8005064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fc77 	bl	800596c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800508c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800509c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b088      	sub	sp, #32
 80050d2:	af02      	add	r7, sp, #8
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	603b      	str	r3, [r7, #0]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	f040 8083 	bne.w	80051f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_UART_Transmit+0x2e>
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e07b      	b.n	80051f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_UART_Transmit+0x40>
 800510a:	2302      	movs	r3, #2
 800510c:	e074      	b.n	80051f8 <HAL_UART_Transmit+0x12a>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2221      	movs	r2, #33	; 0x21
 8005120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005124:	f7fc f81a 	bl	800115c <HAL_GetTick>
 8005128:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800513e:	e042      	b.n	80051c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005156:	d122      	bne.n	800519e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2200      	movs	r2, #0
 8005160:	2180      	movs	r1, #128	; 0x80
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fa80 	bl	8005668 <UART_WaitOnFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e042      	b.n	80051f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005184:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d103      	bne.n	8005196 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	3302      	adds	r3, #2
 8005192:	60bb      	str	r3, [r7, #8]
 8005194:	e017      	b.n	80051c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	3301      	adds	r3, #1
 800519a:	60bb      	str	r3, [r7, #8]
 800519c:	e013      	b.n	80051c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2180      	movs	r1, #128	; 0x80
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fa5d 	bl	8005668 <UART_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e01f      	b.n	80051f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	60ba      	str	r2, [r7, #8]
 80051be:	781a      	ldrb	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1b7      	bne.n	8005140 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2200      	movs	r2, #0
 80051d8:	2140      	movs	r1, #64	; 0x40
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 fa44 	bl	8005668 <UART_WaitOnFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e006      	b.n	80051f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e000      	b.n	80051f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80051f6:	2302      	movs	r3, #2
  }
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	4613      	mov	r3, r2
 800520c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b20      	cmp	r3, #32
 8005218:	d166      	bne.n	80052e8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <HAL_UART_Receive_DMA+0x26>
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e05f      	b.n	80052ea <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_UART_Receive_DMA+0x38>
 8005234:	2302      	movs	r3, #2
 8005236:	e058      	b.n	80052ea <HAL_UART_Receive_DMA+0xea>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	88fa      	ldrh	r2, [r7, #6]
 800524a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2222      	movs	r2, #34	; 0x22
 8005256:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525e:	4a25      	ldr	r2, [pc, #148]	; (80052f4 <HAL_UART_Receive_DMA+0xf4>)
 8005260:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005266:	4a24      	ldr	r2, [pc, #144]	; (80052f8 <HAL_UART_Receive_DMA+0xf8>)
 8005268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	4a23      	ldr	r2, [pc, #140]	; (80052fc <HAL_UART_Receive_DMA+0xfc>)
 8005270:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	2200      	movs	r2, #0
 8005278:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800527a:	f107 0308 	add.w	r3, r7, #8
 800527e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3304      	adds	r3, #4
 800528a:	4619      	mov	r1, r3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	f7fc f951 	bl	8001538 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695a      	ldr	r2, [r3, #20]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	e000      	b.n	80052ea <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80052e8:	2302      	movs	r3, #2
  }
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	08005551 	.word	0x08005551
 80052f8:	080055b9 	.word	0x080055b9
 80052fc:	080055d5 	.word	0x080055d5

08005300 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10d      	bne.n	8005352 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <HAL_UART_IRQHandler+0x52>
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fa8c 	bl	8005868 <UART_Receive_IT>
      return;
 8005350:	e0d1      	b.n	80054f6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 80b0 	beq.w	80054ba <HAL_UART_IRQHandler+0x1ba>
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <HAL_UART_IRQHandler+0x70>
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80a5 	beq.w	80054ba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <HAL_UART_IRQHandler+0x90>
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005388:	f043 0201 	orr.w	r2, r3, #1
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <HAL_UART_IRQHandler+0xb0>
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a8:	f043 0202 	orr.w	r2, r3, #2
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_UART_IRQHandler+0xd0>
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c8:	f043 0204 	orr.w	r2, r3, #4
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00f      	beq.n	80053fa <HAL_UART_IRQHandler+0xfa>
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <HAL_UART_IRQHandler+0xee>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	f043 0208 	orr.w	r2, r3, #8
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d078      	beq.n	80054f4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <HAL_UART_IRQHandler+0x11c>
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa26 	bl	8005868 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005426:	2b40      	cmp	r3, #64	; 0x40
 8005428:	bf0c      	ite	eq
 800542a:	2301      	moveq	r3, #1
 800542c:	2300      	movne	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d102      	bne.n	8005444 <HAL_UART_IRQHandler+0x144>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d031      	beq.n	80054a8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f96f 	bl	8005728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d123      	bne.n	80054a0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005466:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	2b00      	cmp	r3, #0
 800546e:	d013      	beq.n	8005498 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005474:	4a21      	ldr	r2, [pc, #132]	; (80054fc <HAL_UART_IRQHandler+0x1fc>)
 8005476:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	4618      	mov	r0, r3
 800547e:	f7fc f8b3 	bl	80015e8 <HAL_DMA_Abort_IT>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d016      	beq.n	80054b6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005492:	4610      	mov	r0, r2
 8005494:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005496:	e00e      	b.n	80054b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f84f 	bl	800553c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549e:	e00a      	b.n	80054b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f84b 	bl	800553c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a6:	e006      	b.n	80054b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f847 	bl	800553c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80054b4:	e01e      	b.n	80054f4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b6:	bf00      	nop
    return;
 80054b8:	e01c      	b.n	80054f4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <HAL_UART_IRQHandler+0x1d6>
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f95c 	bl	800578c <UART_Transmit_IT>
    return;
 80054d4:	e00f      	b.n	80054f6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <HAL_UART_IRQHandler+0x1f6>
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f9a4 	bl	8005838 <UART_EndTransmit_IT>
    return;
 80054f0:	bf00      	nop
 80054f2:	e000      	b.n	80054f6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80054f4:	bf00      	nop
  }
}
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	08005765 	.word	0x08005765

08005500 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d11e      	bne.n	80055aa <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005580:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff ffb2 	bl	8005514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7ff ffae 	bl	8005528 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	bf0c      	ite	eq
 80055f4:	2301      	moveq	r3, #1
 80055f6:	2300      	movne	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b21      	cmp	r3, #33	; 0x21
 8005606:	d108      	bne.n	800561a <UART_DMAError+0x46>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2200      	movs	r2, #0
 8005612:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005614:	68b8      	ldr	r0, [r7, #8]
 8005616:	f000 f871 	bl	80056fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	bf0c      	ite	eq
 8005628:	2301      	moveq	r3, #1
 800562a:	2300      	movne	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b22      	cmp	r3, #34	; 0x22
 800563a:	d108      	bne.n	800564e <UART_DMAError+0x7a>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2200      	movs	r2, #0
 8005646:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005648:	68b8      	ldr	r0, [r7, #8]
 800564a:	f000 f86d 	bl	8005728 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	f043 0210 	orr.w	r2, r3, #16
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800565a:	68b8      	ldr	r0, [r7, #8]
 800565c:	f7ff ff6e 	bl	800553c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005660:	bf00      	nop
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005678:	e02c      	b.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005680:	d028      	beq.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <UART_WaitOnFlagUntilTimeout+0x30>
 8005688:	f7fb fd68 	bl	800115c <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	429a      	cmp	r2, r3
 8005696:	d21d      	bcs.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0201 	bic.w	r2, r2, #1
 80056b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e00f      	b.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4013      	ands	r3, r2
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	bf0c      	ite	eq
 80056e4:	2301      	moveq	r3, #1
 80056e6:	2300      	movne	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d0c3      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005712:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800573e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695a      	ldr	r2, [r3, #20]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff fedc 	bl	800553c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005784:	bf00      	nop
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b21      	cmp	r3, #33	; 0x21
 800579e:	d144      	bne.n	800582a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a8:	d11a      	bne.n	80057e0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057be:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d105      	bne.n	80057d4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	1c9a      	adds	r2, r3, #2
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]
 80057d2:	e00e      	b.n	80057f2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	621a      	str	r2, [r3, #32]
 80057de:	e008      	b.n	80057f2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	1c59      	adds	r1, r3, #1
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6211      	str	r1, [r2, #32]
 80057ea:	781a      	ldrb	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	4619      	mov	r1, r3
 8005800:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10f      	bne.n	8005826 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005814:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005824:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e000      	b.n	800582c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800582a:	2302      	movs	r3, #2
  }
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff fe51 	bl	8005500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b22      	cmp	r3, #34	; 0x22
 800587a:	d171      	bne.n	8005960 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005884:	d123      	bne.n	80058ce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10e      	bne.n	80058b2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	1c9a      	adds	r2, r3, #2
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	629a      	str	r2, [r3, #40]	; 0x28
 80058b0:	e029      	b.n	8005906 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28
 80058cc:	e01b      	b.n	8005906 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6858      	ldr	r0, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	1c59      	adds	r1, r3, #1
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6291      	str	r1, [r2, #40]	; 0x28
 80058e6:	b2c2      	uxtb	r2, r0
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	e00c      	b.n	8005906 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	1c58      	adds	r0, r3, #1
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	6288      	str	r0, [r1, #40]	; 0x28
 80058fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29b      	uxth	r3, r3
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	4619      	mov	r1, r3
 8005914:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005916:	2b00      	cmp	r3, #0
 8005918:	d120      	bne.n	800595c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0220 	bic.w	r2, r2, #32
 8005928:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005938:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695a      	ldr	r2, [r3, #20]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0201 	bic.w	r2, r2, #1
 8005948:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff fdde 	bl	8005514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	e002      	b.n	8005962 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800596c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80059ae:	f023 030c 	bic.w	r3, r3, #12
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	430b      	orrs	r3, r1
 80059ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059da:	f040 818b 	bne.w	8005cf4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4ac1      	ldr	r2, [pc, #772]	; (8005ce8 <UART_SetConfig+0x37c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d005      	beq.n	80059f4 <UART_SetConfig+0x88>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4abf      	ldr	r2, [pc, #764]	; (8005cec <UART_SetConfig+0x380>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	f040 80bd 	bne.w	8005b6e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059f4:	f7ff f968 	bl	8004cc8 <HAL_RCC_GetPCLK2Freq>
 80059f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	461d      	mov	r5, r3
 80059fe:	f04f 0600 	mov.w	r6, #0
 8005a02:	46a8      	mov	r8, r5
 8005a04:	46b1      	mov	r9, r6
 8005a06:	eb18 0308 	adds.w	r3, r8, r8
 8005a0a:	eb49 0409 	adc.w	r4, r9, r9
 8005a0e:	4698      	mov	r8, r3
 8005a10:	46a1      	mov	r9, r4
 8005a12:	eb18 0805 	adds.w	r8, r8, r5
 8005a16:	eb49 0906 	adc.w	r9, r9, r6
 8005a1a:	f04f 0100 	mov.w	r1, #0
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a2e:	4688      	mov	r8, r1
 8005a30:	4691      	mov	r9, r2
 8005a32:	eb18 0005 	adds.w	r0, r8, r5
 8005a36:	eb49 0106 	adc.w	r1, r9, r6
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	461d      	mov	r5, r3
 8005a40:	f04f 0600 	mov.w	r6, #0
 8005a44:	196b      	adds	r3, r5, r5
 8005a46:	eb46 0406 	adc.w	r4, r6, r6
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	4623      	mov	r3, r4
 8005a4e:	f7fa fc0f 	bl	8000270 <__aeabi_uldivmod>
 8005a52:	4603      	mov	r3, r0
 8005a54:	460c      	mov	r4, r1
 8005a56:	461a      	mov	r2, r3
 8005a58:	4ba5      	ldr	r3, [pc, #660]	; (8005cf0 <UART_SetConfig+0x384>)
 8005a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	461d      	mov	r5, r3
 8005a68:	f04f 0600 	mov.w	r6, #0
 8005a6c:	46a9      	mov	r9, r5
 8005a6e:	46b2      	mov	sl, r6
 8005a70:	eb19 0309 	adds.w	r3, r9, r9
 8005a74:	eb4a 040a 	adc.w	r4, sl, sl
 8005a78:	4699      	mov	r9, r3
 8005a7a:	46a2      	mov	sl, r4
 8005a7c:	eb19 0905 	adds.w	r9, r9, r5
 8005a80:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a84:	f04f 0100 	mov.w	r1, #0
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a98:	4689      	mov	r9, r1
 8005a9a:	4692      	mov	sl, r2
 8005a9c:	eb19 0005 	adds.w	r0, r9, r5
 8005aa0:	eb4a 0106 	adc.w	r1, sl, r6
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	461d      	mov	r5, r3
 8005aaa:	f04f 0600 	mov.w	r6, #0
 8005aae:	196b      	adds	r3, r5, r5
 8005ab0:	eb46 0406 	adc.w	r4, r6, r6
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	f7fa fbda 	bl	8000270 <__aeabi_uldivmod>
 8005abc:	4603      	mov	r3, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4b8b      	ldr	r3, [pc, #556]	; (8005cf0 <UART_SetConfig+0x384>)
 8005ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	2164      	movs	r1, #100	; 0x64
 8005acc:	fb01 f303 	mul.w	r3, r1, r3
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	3332      	adds	r3, #50	; 0x32
 8005ad6:	4a86      	ldr	r2, [pc, #536]	; (8005cf0 <UART_SetConfig+0x384>)
 8005ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ae4:	4498      	add	r8, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	461d      	mov	r5, r3
 8005aea:	f04f 0600 	mov.w	r6, #0
 8005aee:	46a9      	mov	r9, r5
 8005af0:	46b2      	mov	sl, r6
 8005af2:	eb19 0309 	adds.w	r3, r9, r9
 8005af6:	eb4a 040a 	adc.w	r4, sl, sl
 8005afa:	4699      	mov	r9, r3
 8005afc:	46a2      	mov	sl, r4
 8005afe:	eb19 0905 	adds.w	r9, r9, r5
 8005b02:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b06:	f04f 0100 	mov.w	r1, #0
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b1a:	4689      	mov	r9, r1
 8005b1c:	4692      	mov	sl, r2
 8005b1e:	eb19 0005 	adds.w	r0, r9, r5
 8005b22:	eb4a 0106 	adc.w	r1, sl, r6
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	461d      	mov	r5, r3
 8005b2c:	f04f 0600 	mov.w	r6, #0
 8005b30:	196b      	adds	r3, r5, r5
 8005b32:	eb46 0406 	adc.w	r4, r6, r6
 8005b36:	461a      	mov	r2, r3
 8005b38:	4623      	mov	r3, r4
 8005b3a:	f7fa fb99 	bl	8000270 <__aeabi_uldivmod>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	460c      	mov	r4, r1
 8005b42:	461a      	mov	r2, r3
 8005b44:	4b6a      	ldr	r3, [pc, #424]	; (8005cf0 <UART_SetConfig+0x384>)
 8005b46:	fba3 1302 	umull	r1, r3, r3, r2
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	2164      	movs	r1, #100	; 0x64
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	3332      	adds	r3, #50	; 0x32
 8005b58:	4a65      	ldr	r2, [pc, #404]	; (8005cf0 <UART_SetConfig+0x384>)
 8005b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	f003 0207 	and.w	r2, r3, #7
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4442      	add	r2, r8
 8005b6a:	609a      	str	r2, [r3, #8]
 8005b6c:	e26f      	b.n	800604e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b6e:	f7ff f897 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8005b72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	461d      	mov	r5, r3
 8005b78:	f04f 0600 	mov.w	r6, #0
 8005b7c:	46a8      	mov	r8, r5
 8005b7e:	46b1      	mov	r9, r6
 8005b80:	eb18 0308 	adds.w	r3, r8, r8
 8005b84:	eb49 0409 	adc.w	r4, r9, r9
 8005b88:	4698      	mov	r8, r3
 8005b8a:	46a1      	mov	r9, r4
 8005b8c:	eb18 0805 	adds.w	r8, r8, r5
 8005b90:	eb49 0906 	adc.w	r9, r9, r6
 8005b94:	f04f 0100 	mov.w	r1, #0
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ba0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ba4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ba8:	4688      	mov	r8, r1
 8005baa:	4691      	mov	r9, r2
 8005bac:	eb18 0005 	adds.w	r0, r8, r5
 8005bb0:	eb49 0106 	adc.w	r1, r9, r6
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	461d      	mov	r5, r3
 8005bba:	f04f 0600 	mov.w	r6, #0
 8005bbe:	196b      	adds	r3, r5, r5
 8005bc0:	eb46 0406 	adc.w	r4, r6, r6
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4623      	mov	r3, r4
 8005bc8:	f7fa fb52 	bl	8000270 <__aeabi_uldivmod>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4b47      	ldr	r3, [pc, #284]	; (8005cf0 <UART_SetConfig+0x384>)
 8005bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	461d      	mov	r5, r3
 8005be2:	f04f 0600 	mov.w	r6, #0
 8005be6:	46a9      	mov	r9, r5
 8005be8:	46b2      	mov	sl, r6
 8005bea:	eb19 0309 	adds.w	r3, r9, r9
 8005bee:	eb4a 040a 	adc.w	r4, sl, sl
 8005bf2:	4699      	mov	r9, r3
 8005bf4:	46a2      	mov	sl, r4
 8005bf6:	eb19 0905 	adds.w	r9, r9, r5
 8005bfa:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bfe:	f04f 0100 	mov.w	r1, #0
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c12:	4689      	mov	r9, r1
 8005c14:	4692      	mov	sl, r2
 8005c16:	eb19 0005 	adds.w	r0, r9, r5
 8005c1a:	eb4a 0106 	adc.w	r1, sl, r6
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	461d      	mov	r5, r3
 8005c24:	f04f 0600 	mov.w	r6, #0
 8005c28:	196b      	adds	r3, r5, r5
 8005c2a:	eb46 0406 	adc.w	r4, r6, r6
 8005c2e:	461a      	mov	r2, r3
 8005c30:	4623      	mov	r3, r4
 8005c32:	f7fa fb1d 	bl	8000270 <__aeabi_uldivmod>
 8005c36:	4603      	mov	r3, r0
 8005c38:	460c      	mov	r4, r1
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	4b2c      	ldr	r3, [pc, #176]	; (8005cf0 <UART_SetConfig+0x384>)
 8005c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	2164      	movs	r1, #100	; 0x64
 8005c46:	fb01 f303 	mul.w	r3, r1, r3
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	3332      	adds	r3, #50	; 0x32
 8005c50:	4a27      	ldr	r2, [pc, #156]	; (8005cf0 <UART_SetConfig+0x384>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c5e:	4498      	add	r8, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	461d      	mov	r5, r3
 8005c64:	f04f 0600 	mov.w	r6, #0
 8005c68:	46a9      	mov	r9, r5
 8005c6a:	46b2      	mov	sl, r6
 8005c6c:	eb19 0309 	adds.w	r3, r9, r9
 8005c70:	eb4a 040a 	adc.w	r4, sl, sl
 8005c74:	4699      	mov	r9, r3
 8005c76:	46a2      	mov	sl, r4
 8005c78:	eb19 0905 	adds.w	r9, r9, r5
 8005c7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c80:	f04f 0100 	mov.w	r1, #0
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c94:	4689      	mov	r9, r1
 8005c96:	4692      	mov	sl, r2
 8005c98:	eb19 0005 	adds.w	r0, r9, r5
 8005c9c:	eb4a 0106 	adc.w	r1, sl, r6
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	461d      	mov	r5, r3
 8005ca6:	f04f 0600 	mov.w	r6, #0
 8005caa:	196b      	adds	r3, r5, r5
 8005cac:	eb46 0406 	adc.w	r4, r6, r6
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	f7fa fadc 	bl	8000270 <__aeabi_uldivmod>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <UART_SetConfig+0x384>)
 8005cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	2164      	movs	r1, #100	; 0x64
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	3332      	adds	r3, #50	; 0x32
 8005cd2:	4a07      	ldr	r2, [pc, #28]	; (8005cf0 <UART_SetConfig+0x384>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f003 0207 	and.w	r2, r3, #7
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4442      	add	r2, r8
 8005ce4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ce6:	e1b2      	b.n	800604e <UART_SetConfig+0x6e2>
 8005ce8:	40011000 	.word	0x40011000
 8005cec:	40011400 	.word	0x40011400
 8005cf0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4ad7      	ldr	r2, [pc, #860]	; (8006058 <UART_SetConfig+0x6ec>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d005      	beq.n	8005d0a <UART_SetConfig+0x39e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4ad6      	ldr	r2, [pc, #856]	; (800605c <UART_SetConfig+0x6f0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	f040 80d1 	bne.w	8005eac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d0a:	f7fe ffdd 	bl	8004cc8 <HAL_RCC_GetPCLK2Freq>
 8005d0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	469a      	mov	sl, r3
 8005d14:	f04f 0b00 	mov.w	fp, #0
 8005d18:	46d0      	mov	r8, sl
 8005d1a:	46d9      	mov	r9, fp
 8005d1c:	eb18 0308 	adds.w	r3, r8, r8
 8005d20:	eb49 0409 	adc.w	r4, r9, r9
 8005d24:	4698      	mov	r8, r3
 8005d26:	46a1      	mov	r9, r4
 8005d28:	eb18 080a 	adds.w	r8, r8, sl
 8005d2c:	eb49 090b 	adc.w	r9, r9, fp
 8005d30:	f04f 0100 	mov.w	r1, #0
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d44:	4688      	mov	r8, r1
 8005d46:	4691      	mov	r9, r2
 8005d48:	eb1a 0508 	adds.w	r5, sl, r8
 8005d4c:	eb4b 0609 	adc.w	r6, fp, r9
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4619      	mov	r1, r3
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	f04f 0400 	mov.w	r4, #0
 8005d62:	0094      	lsls	r4, r2, #2
 8005d64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d68:	008b      	lsls	r3, r1, #2
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	4623      	mov	r3, r4
 8005d6e:	4628      	mov	r0, r5
 8005d70:	4631      	mov	r1, r6
 8005d72:	f7fa fa7d 	bl	8000270 <__aeabi_uldivmod>
 8005d76:	4603      	mov	r3, r0
 8005d78:	460c      	mov	r4, r1
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	4bb8      	ldr	r3, [pc, #736]	; (8006060 <UART_SetConfig+0x6f4>)
 8005d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d82:	095b      	lsrs	r3, r3, #5
 8005d84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	469b      	mov	fp, r3
 8005d8c:	f04f 0c00 	mov.w	ip, #0
 8005d90:	46d9      	mov	r9, fp
 8005d92:	46e2      	mov	sl, ip
 8005d94:	eb19 0309 	adds.w	r3, r9, r9
 8005d98:	eb4a 040a 	adc.w	r4, sl, sl
 8005d9c:	4699      	mov	r9, r3
 8005d9e:	46a2      	mov	sl, r4
 8005da0:	eb19 090b 	adds.w	r9, r9, fp
 8005da4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005da8:	f04f 0100 	mov.w	r1, #0
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005db4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dbc:	4689      	mov	r9, r1
 8005dbe:	4692      	mov	sl, r2
 8005dc0:	eb1b 0509 	adds.w	r5, fp, r9
 8005dc4:	eb4c 060a 	adc.w	r6, ip, sl
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	f04f 0400 	mov.w	r4, #0
 8005dda:	0094      	lsls	r4, r2, #2
 8005ddc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005de0:	008b      	lsls	r3, r1, #2
 8005de2:	461a      	mov	r2, r3
 8005de4:	4623      	mov	r3, r4
 8005de6:	4628      	mov	r0, r5
 8005de8:	4631      	mov	r1, r6
 8005dea:	f7fa fa41 	bl	8000270 <__aeabi_uldivmod>
 8005dee:	4603      	mov	r3, r0
 8005df0:	460c      	mov	r4, r1
 8005df2:	461a      	mov	r2, r3
 8005df4:	4b9a      	ldr	r3, [pc, #616]	; (8006060 <UART_SetConfig+0x6f4>)
 8005df6:	fba3 1302 	umull	r1, r3, r3, r2
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	2164      	movs	r1, #100	; 0x64
 8005dfe:	fb01 f303 	mul.w	r3, r1, r3
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	3332      	adds	r3, #50	; 0x32
 8005e08:	4a95      	ldr	r2, [pc, #596]	; (8006060 <UART_SetConfig+0x6f4>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e14:	4498      	add	r8, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	469b      	mov	fp, r3
 8005e1a:	f04f 0c00 	mov.w	ip, #0
 8005e1e:	46d9      	mov	r9, fp
 8005e20:	46e2      	mov	sl, ip
 8005e22:	eb19 0309 	adds.w	r3, r9, r9
 8005e26:	eb4a 040a 	adc.w	r4, sl, sl
 8005e2a:	4699      	mov	r9, r3
 8005e2c:	46a2      	mov	sl, r4
 8005e2e:	eb19 090b 	adds.w	r9, r9, fp
 8005e32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e36:	f04f 0100 	mov.w	r1, #0
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e4a:	4689      	mov	r9, r1
 8005e4c:	4692      	mov	sl, r2
 8005e4e:	eb1b 0509 	adds.w	r5, fp, r9
 8005e52:	eb4c 060a 	adc.w	r6, ip, sl
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	f04f 0200 	mov.w	r2, #0
 8005e60:	f04f 0300 	mov.w	r3, #0
 8005e64:	f04f 0400 	mov.w	r4, #0
 8005e68:	0094      	lsls	r4, r2, #2
 8005e6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e6e:	008b      	lsls	r3, r1, #2
 8005e70:	461a      	mov	r2, r3
 8005e72:	4623      	mov	r3, r4
 8005e74:	4628      	mov	r0, r5
 8005e76:	4631      	mov	r1, r6
 8005e78:	f7fa f9fa 	bl	8000270 <__aeabi_uldivmod>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	461a      	mov	r2, r3
 8005e82:	4b77      	ldr	r3, [pc, #476]	; (8006060 <UART_SetConfig+0x6f4>)
 8005e84:	fba3 1302 	umull	r1, r3, r3, r2
 8005e88:	095b      	lsrs	r3, r3, #5
 8005e8a:	2164      	movs	r1, #100	; 0x64
 8005e8c:	fb01 f303 	mul.w	r3, r1, r3
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	3332      	adds	r3, #50	; 0x32
 8005e96:	4a72      	ldr	r2, [pc, #456]	; (8006060 <UART_SetConfig+0x6f4>)
 8005e98:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	f003 020f 	and.w	r2, r3, #15
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4442      	add	r2, r8
 8005ea8:	609a      	str	r2, [r3, #8]
 8005eaa:	e0d0      	b.n	800604e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eac:	f7fe fef8 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8005eb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	469a      	mov	sl, r3
 8005eb6:	f04f 0b00 	mov.w	fp, #0
 8005eba:	46d0      	mov	r8, sl
 8005ebc:	46d9      	mov	r9, fp
 8005ebe:	eb18 0308 	adds.w	r3, r8, r8
 8005ec2:	eb49 0409 	adc.w	r4, r9, r9
 8005ec6:	4698      	mov	r8, r3
 8005ec8:	46a1      	mov	r9, r4
 8005eca:	eb18 080a 	adds.w	r8, r8, sl
 8005ece:	eb49 090b 	adc.w	r9, r9, fp
 8005ed2:	f04f 0100 	mov.w	r1, #0
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ede:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ee2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ee6:	4688      	mov	r8, r1
 8005ee8:	4691      	mov	r9, r2
 8005eea:	eb1a 0508 	adds.w	r5, sl, r8
 8005eee:	eb4b 0609 	adc.w	r6, fp, r9
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	f04f 0300 	mov.w	r3, #0
 8005f00:	f04f 0400 	mov.w	r4, #0
 8005f04:	0094      	lsls	r4, r2, #2
 8005f06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f0a:	008b      	lsls	r3, r1, #2
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4623      	mov	r3, r4
 8005f10:	4628      	mov	r0, r5
 8005f12:	4631      	mov	r1, r6
 8005f14:	f7fa f9ac 	bl	8000270 <__aeabi_uldivmod>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4b50      	ldr	r3, [pc, #320]	; (8006060 <UART_SetConfig+0x6f4>)
 8005f20:	fba3 2302 	umull	r2, r3, r3, r2
 8005f24:	095b      	lsrs	r3, r3, #5
 8005f26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	469b      	mov	fp, r3
 8005f2e:	f04f 0c00 	mov.w	ip, #0
 8005f32:	46d9      	mov	r9, fp
 8005f34:	46e2      	mov	sl, ip
 8005f36:	eb19 0309 	adds.w	r3, r9, r9
 8005f3a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f3e:	4699      	mov	r9, r3
 8005f40:	46a2      	mov	sl, r4
 8005f42:	eb19 090b 	adds.w	r9, r9, fp
 8005f46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f4a:	f04f 0100 	mov.w	r1, #0
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f5e:	4689      	mov	r9, r1
 8005f60:	4692      	mov	sl, r2
 8005f62:	eb1b 0509 	adds.w	r5, fp, r9
 8005f66:	eb4c 060a 	adc.w	r6, ip, sl
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	f04f 0400 	mov.w	r4, #0
 8005f7c:	0094      	lsls	r4, r2, #2
 8005f7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f82:	008b      	lsls	r3, r1, #2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4623      	mov	r3, r4
 8005f88:	4628      	mov	r0, r5
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	f7fa f970 	bl	8000270 <__aeabi_uldivmod>
 8005f90:	4603      	mov	r3, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	461a      	mov	r2, r3
 8005f96:	4b32      	ldr	r3, [pc, #200]	; (8006060 <UART_SetConfig+0x6f4>)
 8005f98:	fba3 1302 	umull	r1, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	2164      	movs	r1, #100	; 0x64
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	3332      	adds	r3, #50	; 0x32
 8005faa:	4a2d      	ldr	r2, [pc, #180]	; (8006060 <UART_SetConfig+0x6f4>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb6:	4498      	add	r8, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	469b      	mov	fp, r3
 8005fbc:	f04f 0c00 	mov.w	ip, #0
 8005fc0:	46d9      	mov	r9, fp
 8005fc2:	46e2      	mov	sl, ip
 8005fc4:	eb19 0309 	adds.w	r3, r9, r9
 8005fc8:	eb4a 040a 	adc.w	r4, sl, sl
 8005fcc:	4699      	mov	r9, r3
 8005fce:	46a2      	mov	sl, r4
 8005fd0:	eb19 090b 	adds.w	r9, r9, fp
 8005fd4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fd8:	f04f 0100 	mov.w	r1, #0
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fe4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fe8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fec:	4689      	mov	r9, r1
 8005fee:	4692      	mov	sl, r2
 8005ff0:	eb1b 0509 	adds.w	r5, fp, r9
 8005ff4:	eb4c 060a 	adc.w	r6, ip, sl
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	f04f 0200 	mov.w	r2, #0
 8006002:	f04f 0300 	mov.w	r3, #0
 8006006:	f04f 0400 	mov.w	r4, #0
 800600a:	0094      	lsls	r4, r2, #2
 800600c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006010:	008b      	lsls	r3, r1, #2
 8006012:	461a      	mov	r2, r3
 8006014:	4623      	mov	r3, r4
 8006016:	4628      	mov	r0, r5
 8006018:	4631      	mov	r1, r6
 800601a:	f7fa f929 	bl	8000270 <__aeabi_uldivmod>
 800601e:	4603      	mov	r3, r0
 8006020:	460c      	mov	r4, r1
 8006022:	461a      	mov	r2, r3
 8006024:	4b0e      	ldr	r3, [pc, #56]	; (8006060 <UART_SetConfig+0x6f4>)
 8006026:	fba3 1302 	umull	r1, r3, r3, r2
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	2164      	movs	r1, #100	; 0x64
 800602e:	fb01 f303 	mul.w	r3, r1, r3
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	3332      	adds	r3, #50	; 0x32
 8006038:	4a09      	ldr	r2, [pc, #36]	; (8006060 <UART_SetConfig+0x6f4>)
 800603a:	fba2 2303 	umull	r2, r3, r2, r3
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	f003 020f 	and.w	r2, r3, #15
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4442      	add	r2, r8
 800604a:	609a      	str	r2, [r3, #8]
}
 800604c:	e7ff      	b.n	800604e <UART_SetConfig+0x6e2>
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006058:	40011000 	.word	0x40011000
 800605c:	40011400 	.word	0x40011400
 8006060:	51eb851f 	.word	0x51eb851f

08006064 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006064:	b084      	sub	sp, #16
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	f107 001c 	add.w	r0, r7, #28
 8006072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	2b01      	cmp	r3, #1
 800607a:	d122      	bne.n	80060c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d105      	bne.n	80060b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f94a 	bl	8006350 <USB_CoreReset>
 80060bc:	4603      	mov	r3, r0
 80060be:	73fb      	strb	r3, [r7, #15]
 80060c0:	e01a      	b.n	80060f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f93e 	bl	8006350 <USB_CoreReset>
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
 80060ea:	e005      	b.n	80060f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d10b      	bne.n	8006116 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f043 0206 	orr.w	r2, r3, #6
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f043 0220 	orr.w	r2, r3, #32
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006122:	b004      	add	sp, #16
 8006124:	4770      	bx	lr

08006126 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f043 0201 	orr.w	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f023 0201 	bic.w	r2, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d106      	bne.n	8006196 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	60da      	str	r2, [r3, #12]
 8006194:	e00b      	b.n	80061ae <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d106      	bne.n	80061aa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	60da      	str	r2, [r3, #12]
 80061a8:	e001      	b.n	80061ae <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e003      	b.n	80061b6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80061ae:	2032      	movs	r0, #50	; 0x32
 80061b0:	f7fa ffe0 	bl	8001174 <HAL_Delay>

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	019b      	lsls	r3, r3, #6
 80061d2:	f043 0220 	orr.w	r2, r3, #32
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3301      	adds	r3, #1
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4a09      	ldr	r2, [pc, #36]	; (8006208 <USB_FlushTxFifo+0x48>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d901      	bls.n	80061ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e006      	b.n	80061fa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	d0f0      	beq.n	80061da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	00030d40 	.word	0x00030d40

0800620c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2210      	movs	r2, #16
 800621c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3301      	adds	r3, #1
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4a09      	ldr	r2, [pc, #36]	; (800624c <USB_FlushRxFifo+0x40>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d901      	bls.n	8006230 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e006      	b.n	800623e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b10      	cmp	r3, #16
 800623a:	d0f0      	beq.n	800621e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	00030d40 	.word	0x00030d40

08006250 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006250:	b480      	push	{r7}
 8006252:	b089      	sub	sp, #36	; 0x24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	4611      	mov	r1, r2
 800625c:	461a      	mov	r2, r3
 800625e:	460b      	mov	r3, r1
 8006260:	71fb      	strb	r3, [r7, #7]
 8006262:	4613      	mov	r3, r2
 8006264:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800626e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d11a      	bne.n	80062ac <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006276:	88bb      	ldrh	r3, [r7, #4]
 8006278:	3303      	adds	r3, #3
 800627a:	089b      	lsrs	r3, r3, #2
 800627c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800627e:	2300      	movs	r3, #0
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	e00f      	b.n	80062a4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	031a      	lsls	r2, r3, #12
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	4413      	add	r3, r2
 800628c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006290:	461a      	mov	r2, r3
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	3304      	adds	r3, #4
 800629c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	3301      	adds	r3, #1
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d3eb      	bcc.n	8006284 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3724      	adds	r7, #36	; 0x24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b089      	sub	sp, #36	; 0x24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	4613      	mov	r3, r2
 80062c6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80062d0:	88fb      	ldrh	r3, [r7, #6]
 80062d2:	3303      	adds	r3, #3
 80062d4:	089b      	lsrs	r3, r3, #2
 80062d6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80062d8:	2300      	movs	r3, #0
 80062da:	61bb      	str	r3, [r7, #24]
 80062dc:	e00b      	b.n	80062f6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	601a      	str	r2, [r3, #0]
    pDest++;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3304      	adds	r3, #4
 80062ee:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	3301      	adds	r3, #1
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d3ef      	bcc.n	80062de <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80062fe:	69fb      	ldr	r3, [r7, #28]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3724      	adds	r7, #36	; 0x24
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4013      	ands	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006324:	68fb      	ldr	r3, [r7, #12]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f003 0301 	and.w	r3, r3, #1
}
 8006342:	4618      	mov	r0, r3
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3301      	adds	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4a13      	ldr	r2, [pc, #76]	; (80063b4 <USB_CoreReset+0x64>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d901      	bls.n	800636e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e01b      	b.n	80063a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	daf2      	bge.n	800635c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f043 0201 	orr.w	r2, r3, #1
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3301      	adds	r3, #1
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4a09      	ldr	r2, [pc, #36]	; (80063b4 <USB_CoreReset+0x64>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d901      	bls.n	8006398 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e006      	b.n	80063a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d0f0      	beq.n	8006386 <USB_CoreReset+0x36>

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	00030d40 	.word	0x00030d40

080063b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063b8:	b084      	sub	sp, #16
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	f107 001c 	add.w	r0, r7, #28
 80063c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063d4:	461a      	mov	r2, r3
 80063d6:	2300      	movs	r3, #0
 80063d8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	2b00      	cmp	r3, #0
 8006408:	d018      	beq.n	800643c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	2b01      	cmp	r3, #1
 800640e:	d10a      	bne.n	8006426 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800641e:	f043 0304 	orr.w	r3, r3, #4
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	e014      	b.n	8006450 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006434:	f023 0304 	bic.w	r3, r3, #4
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	e009      	b.n	8006450 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800644a:	f023 0304 	bic.w	r3, r3, #4
 800644e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006450:	2110      	movs	r1, #16
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff feb4 	bl	80061c0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff fed7 	bl	800620c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	e015      	b.n	8006490 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006470:	461a      	mov	r2, r3
 8006472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006476:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4413      	add	r3, r2
 8006480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006484:	461a      	mov	r2, r3
 8006486:	2300      	movs	r3, #0
 8006488:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	429a      	cmp	r2, r3
 8006496:	d3e5      	bcc.n	8006464 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006498:	2101      	movs	r1, #1
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f8ac 	bl	80065f8 <USB_DriveVbus>

  HAL_Delay(200U);
 80064a0:	20c8      	movs	r0, #200	; 0xc8
 80064a2:	f7fa fe67 	bl	8001174 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064b2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00b      	beq.n	80064d8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a14      	ldr	r2, [pc, #80]	; (800651c <USB_HostInit+0x164>)
 80064cc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a13      	ldr	r2, [pc, #76]	; (8006520 <USB_HostInit+0x168>)
 80064d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80064d6:	e009      	b.n	80064ec <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2280      	movs	r2, #128	; 0x80
 80064dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a10      	ldr	r2, [pc, #64]	; (8006524 <USB_HostInit+0x16c>)
 80064e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a10      	ldr	r2, [pc, #64]	; (8006528 <USB_HostInit+0x170>)
 80064e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d105      	bne.n	80064fe <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f043 0210 	orr.w	r2, r3, #16
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699a      	ldr	r2, [r3, #24]
 8006502:	4b0a      	ldr	r3, [pc, #40]	; (800652c <USB_HostInit+0x174>)
 8006504:	4313      	orrs	r3, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006516:	b004      	add	sp, #16
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	01000200 	.word	0x01000200
 8006520:	00e00300 	.word	0x00e00300
 8006524:	00600080 	.word	0x00600080
 8006528:	004000e0 	.word	0x004000e0
 800652c:	a3200008 	.word	0xa3200008

08006530 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	68f9      	ldr	r1, [r7, #12]
 8006564:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006568:	4313      	orrs	r3, r2
 800656a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d107      	bne.n	8006582 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006578:	461a      	mov	r2, r3
 800657a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800657e:	6053      	str	r3, [r2, #4]
 8006580:	e009      	b.n	8006596 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d106      	bne.n	8006596 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800658e:	461a      	mov	r2, r3
 8006590:	f241 7370 	movw	r3, #6000	; 0x1770
 8006594:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80065c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80065d4:	2064      	movs	r0, #100	; 0x64
 80065d6:	f7fa fdcd 	bl	8001174 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80065e8:	200a      	movs	r0, #10
 80065ea:	f7fa fdc3 	bl	8001174 <HAL_Delay>

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800661c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d109      	bne.n	800663c <USB_DriveVbus+0x44>
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d106      	bne.n	800663c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006636:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800663a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006646:	d109      	bne.n	800665c <USB_DriveVbus+0x64>
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800665a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800666a:	b480      	push	{r7}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	0c5b      	lsrs	r3, r3, #17
 8006688:	f003 0303 	and.w	r3, r3, #3
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	b29b      	uxth	r3, r3
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	4608      	mov	r0, r1
 80066c6:	4611      	mov	r1, r2
 80066c8:	461a      	mov	r2, r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	70fb      	strb	r3, [r7, #3]
 80066ce:	460b      	mov	r3, r1
 80066d0:	70bb      	strb	r3, [r7, #2]
 80066d2:	4613      	mov	r3, r2
 80066d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ea:	461a      	mov	r2, r3
 80066ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066f0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80066f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d87e      	bhi.n	80067f8 <USB_HC_Init+0x13c>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <USB_HC_Init+0x44>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006711 	.word	0x08006711
 8006704:	080067bb 	.word	0x080067bb
 8006708:	08006711 	.word	0x08006711
 800670c:	0800677d 	.word	0x0800677d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4413      	add	r3, r2
 8006718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671c:	461a      	mov	r2, r3
 800671e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006722:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006724:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006728:	2b00      	cmp	r3, #0
 800672a:	da10      	bge.n	800674e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	78fa      	ldrb	r2, [r7, #3]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	440a      	add	r2, r1
 8006742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800674a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800674c:	e057      	b.n	80067fe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006756:	2b00      	cmp	r3, #0
 8006758:	d051      	beq.n	80067fe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	4413      	add	r3, r2
 8006762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	78fa      	ldrb	r2, [r7, #3]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	440a      	add	r2, r1
 8006770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006774:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006778:	60d3      	str	r3, [r2, #12]
      break;
 800677a:	e040      	b.n	80067fe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4413      	add	r3, r2
 8006784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006788:	461a      	mov	r2, r3
 800678a:	f240 639d 	movw	r3, #1693	; 0x69d
 800678e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006790:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006794:	2b00      	cmp	r3, #0
 8006796:	da34      	bge.n	8006802 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	78fa      	ldrb	r2, [r7, #3]
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80067b8:	e023      	b.n	8006802 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c6:	461a      	mov	r2, r3
 80067c8:	f240 2325 	movw	r3, #549	; 0x225
 80067cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da17      	bge.n	8006806 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	78fa      	ldrb	r2, [r7, #3]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80067f4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80067f6:	e006      	b.n	8006806 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	75fb      	strb	r3, [r7, #23]
      break;
 80067fc:	e004      	b.n	8006808 <USB_HC_Init+0x14c>
      break;
 80067fe:	bf00      	nop
 8006800:	e002      	b.n	8006808 <USB_HC_Init+0x14c>
      break;
 8006802:	bf00      	nop
 8006804:	e000      	b.n	8006808 <USB_HC_Init+0x14c>
      break;
 8006806:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	2101      	movs	r1, #1
 8006818:	fa01 f303 	lsl.w	r3, r1, r3
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006822:	4313      	orrs	r3, r2
 8006824:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006832:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006836:	2b00      	cmp	r3, #0
 8006838:	da03      	bge.n	8006842 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800683a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	e001      	b.n	8006846 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006846:	f897 3020 	ldrb.w	r3, [r7, #32]
 800684a:	2b02      	cmp	r3, #2
 800684c:	d103      	bne.n	8006856 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800684e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e001      	b.n	800685a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800685a:	787b      	ldrb	r3, [r7, #1]
 800685c:	059b      	lsls	r3, r3, #22
 800685e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006862:	78bb      	ldrb	r3, [r7, #2]
 8006864:	02db      	lsls	r3, r3, #11
 8006866:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800686a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800686c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006870:	049b      	lsls	r3, r3, #18
 8006872:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006876:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006878:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800687a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800687e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	0159      	lsls	r1, r3, #5
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	440b      	add	r3, r1
 800688c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006890:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006896:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800689c:	2b03      	cmp	r3, #3
 800689e:	d10f      	bne.n	80068c0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	78fa      	ldrb	r2, [r7, #3]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068be:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop

080068d0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08c      	sub	sp, #48	; 0x30
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	4613      	mov	r3, r2
 80068dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80068e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068ec:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d028      	beq.n	800694c <USB_HC_StartXfer+0x7c>
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	791b      	ldrb	r3, [r3, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d124      	bne.n	800694c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10b      	bne.n	8006920 <USB_HC_StartXfer+0x50>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	795b      	ldrb	r3, [r3, #5]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d107      	bne.n	8006920 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	785b      	ldrb	r3, [r3, #1]
 8006914:	4619      	mov	r1, r3
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 fa30 	bl	8006d7c <USB_DoPing>
      return HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	e114      	b.n	8006b4a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d112      	bne.n	800694c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	4413      	add	r3, r2
 800692e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	0151      	lsls	r1, r2, #5
 8006938:	6a3a      	ldr	r2, [r7, #32]
 800693a:	440a      	add	r2, r1
 800693c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006940:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006944:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2200      	movs	r2, #0
 800694a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d018      	beq.n	8006986 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	8912      	ldrh	r2, [r2, #8]
 800695c:	4413      	add	r3, r2
 800695e:	3b01      	subs	r3, #1
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	8912      	ldrh	r2, [r2, #8]
 8006964:	fbb3 f3f2 	udiv	r3, r3, r2
 8006968:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800696a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800696c:	8b7b      	ldrh	r3, [r7, #26]
 800696e:	429a      	cmp	r2, r3
 8006970:	d90b      	bls.n	800698a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006972:	8b7b      	ldrh	r3, [r7, #26]
 8006974:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006976:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	8912      	ldrh	r2, [r2, #8]
 800697c:	fb02 f203 	mul.w	r2, r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	611a      	str	r2, [r3, #16]
 8006984:	e001      	b.n	800698a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006986:	2301      	movs	r3, #1
 8006988:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	78db      	ldrb	r3, [r3, #3]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d006      	beq.n	80069a0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006992:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	8912      	ldrh	r2, [r2, #8]
 8006998:	fb02 f203 	mul.w	r2, r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80069a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069aa:	04d9      	lsls	r1, r3, #19
 80069ac:	4b69      	ldr	r3, [pc, #420]	; (8006b54 <USB_HC_StartXfer+0x284>)
 80069ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80069b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	7a9b      	ldrb	r3, [r3, #10]
 80069b6:	075b      	lsls	r3, r3, #29
 80069b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80069bc:	69f9      	ldr	r1, [r7, #28]
 80069be:	0148      	lsls	r0, r1, #5
 80069c0:	6a39      	ldr	r1, [r7, #32]
 80069c2:	4401      	add	r1, r0
 80069c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80069c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80069ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	68d9      	ldr	r1, [r3, #12]
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e2:	460a      	mov	r2, r1
 80069e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	bf0c      	ite	eq
 80069f6:	2301      	moveq	r3, #1
 80069f8:	2300      	movne	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	0151      	lsls	r1, r2, #5
 8006a10:	6a3a      	ldr	r2, [r7, #32]
 8006a12:	440a      	add	r2, r1
 8006a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a1c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	7e7b      	ldrb	r3, [r7, #25]
 8006a2e:	075b      	lsls	r3, r3, #29
 8006a30:	69f9      	ldr	r1, [r7, #28]
 8006a32:	0148      	lsls	r0, r1, #5
 8006a34:	6a39      	ldr	r1, [r7, #32]
 8006a36:	4401      	add	r1, r0
 8006a38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a42      	ldr	r2, [pc, #264]	; (8006b58 <USB_HC_StartXfer+0x288>)
 8006a50:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a52:	4b41      	ldr	r3, [pc, #260]	; (8006b58 <USB_HC_StartXfer+0x288>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a5a:	4a3f      	ldr	r2, [pc, #252]	; (8006b58 <USB_HC_StartXfer+0x288>)
 8006a5c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	78db      	ldrb	r3, [r3, #3]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d006      	beq.n	8006a74 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006a66:	4b3c      	ldr	r3, [pc, #240]	; (8006b58 <USB_HC_StartXfer+0x288>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a6e:	4a3a      	ldr	r2, [pc, #232]	; (8006b58 <USB_HC_StartXfer+0x288>)
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	e005      	b.n	8006a80 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006a74:	4b38      	ldr	r3, [pc, #224]	; (8006b58 <USB_HC_StartXfer+0x288>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a7c:	4a36      	ldr	r2, [pc, #216]	; (8006b58 <USB_HC_StartXfer+0x288>)
 8006a7e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a80:	4b35      	ldr	r3, [pc, #212]	; (8006b58 <USB_HC_StartXfer+0x288>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a88:	4a33      	ldr	r2, [pc, #204]	; (8006b58 <USB_HC_StartXfer+0x288>)
 8006a8a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a98:	461a      	mov	r2, r3
 8006a9a:	4b2f      	ldr	r3, [pc, #188]	; (8006b58 <USB_HC_StartXfer+0x288>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e04f      	b.n	8006b4a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	78db      	ldrb	r3, [r3, #3]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d14a      	bne.n	8006b48 <USB_HC_StartXfer+0x278>
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d046      	beq.n	8006b48 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	79db      	ldrb	r3, [r3, #7]
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d830      	bhi.n	8006b24 <USB_HC_StartXfer+0x254>
 8006ac2:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <USB_HC_StartXfer+0x1f8>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006ad9 	.word	0x08006ad9
 8006acc:	08006afd 	.word	0x08006afd
 8006ad0:	08006ad9 	.word	0x08006ad9
 8006ad4:	08006afd 	.word	0x08006afd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	3303      	adds	r3, #3
 8006ade:	089b      	lsrs	r3, r3, #2
 8006ae0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006ae2:	8afa      	ldrh	r2, [r7, #22]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d91c      	bls.n	8006b28 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	f043 0220 	orr.w	r2, r3, #32
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006afa:	e015      	b.n	8006b28 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	3303      	adds	r3, #3
 8006b02:	089b      	lsrs	r3, r3, #2
 8006b04:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006b06:	8afa      	ldrh	r2, [r7, #22]
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d90a      	bls.n	8006b2c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b22:	e003      	b.n	8006b2c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006b24:	bf00      	nop
 8006b26:	e002      	b.n	8006b2e <USB_HC_StartXfer+0x25e>
        break;
 8006b28:	bf00      	nop
 8006b2a:	e000      	b.n	8006b2e <USB_HC_StartXfer+0x25e>
        break;
 8006b2c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	68d9      	ldr	r1, [r3, #12]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	785a      	ldrb	r2, [r3, #1]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	b298      	uxth	r0, r3
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	4603      	mov	r3, r0
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7ff fb84 	bl	8006250 <USB_WritePacket>
  }

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3728      	adds	r7, #40	; 0x28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	1ff80000 	.word	0x1ff80000
 8006b58:	200000c0 	.word	0x200000c0

08006b5c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	b29b      	uxth	r3, r3
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b087      	sub	sp, #28
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006b8e:	78fb      	ldrb	r3, [r7, #3]
 8006b90:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	0c9b      	lsrs	r3, r3, #18
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <USB_HC_Halt+0x3a>
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d16c      	bne.n	8006c92 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	0151      	lsls	r1, r2, #5
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	440a      	add	r2, r1
 8006bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bd6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d143      	bne.n	8006c6c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	0151      	lsls	r1, r2, #5
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	440a      	add	r2, r1
 8006c1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	0151      	lsls	r1, r2, #5
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	440a      	add	r2, r1
 8006c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c42:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	3301      	adds	r3, #1
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c50:	d81d      	bhi.n	8006c8e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c68:	d0ec      	beq.n	8006c44 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c6a:	e080      	b.n	8006d6e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c8a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c8c:	e06f      	b.n	8006d6e <USB_HC_Halt+0x1f0>
          break;
 8006c8e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c90:	e06d      	b.n	8006d6e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	0151      	lsls	r1, r2, #5
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	440a      	add	r2, r1
 8006ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cb0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d143      	bne.n	8006d4a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	0151      	lsls	r1, r2, #5
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	440a      	add	r2, r1
 8006cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ce0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	0151      	lsls	r1, r2, #5
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	440a      	add	r2, r1
 8006cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d00:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	0151      	lsls	r1, r2, #5
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	440a      	add	r2, r1
 8006d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d20:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	3301      	adds	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d2e:	d81d      	bhi.n	8006d6c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d46:	d0ec      	beq.n	8006d22 <USB_HC_Halt+0x1a4>
 8006d48:	e011      	b.n	8006d6e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	e000      	b.n	8006d6e <USB_HC_Halt+0x1f0>
          break;
 8006d6c:	bf00      	nop
    }
  }

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006d90:	2301      	movs	r3, #1
 8006d92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	04da      	lsls	r2, r3, #19
 8006d98:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <USB_DoPing+0x74>)
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dc4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dcc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dda:	461a      	mov	r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	1ff80000 	.word	0x1ff80000

08006df4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff f99f 	bl	8006148 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006e0a:	2110      	movs	r1, #16
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff f9d7 	bl	80061c0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff f9fa 	bl	800620c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006e18:	2300      	movs	r3, #0
 8006e1a:	613b      	str	r3, [r7, #16]
 8006e1c:	e01f      	b.n	8006e5e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e34:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e3c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e44:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e52:	461a      	mov	r2, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2b0f      	cmp	r3, #15
 8006e62:	d9dc      	bls.n	8006e1e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006e64:	2300      	movs	r3, #0
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	e034      	b.n	8006ed4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e80:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e88:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e90:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eb0:	d80c      	bhi.n	8006ecc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ec8:	d0ec      	beq.n	8006ea4 <USB_StopHost+0xb0>
 8006eca:	e000      	b.n	8006ece <USB_StopHost+0xda>
        break;
 8006ecc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	613b      	str	r3, [r7, #16]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	2b0f      	cmp	r3, #15
 8006ed8:	d9c7      	bls.n	8006e6a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ee6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff f918 	bl	8006126 <USB_EnableGlobalInt>

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006f00:	b590      	push	{r4, r7, lr}
 8006f02:	b089      	sub	sp, #36	; 0x24
 8006f04:	af04      	add	r7, sp, #16
 8006f06:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006f08:	2301      	movs	r3, #1
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	2102      	movs	r1, #2
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fc68 	bl	80077e4 <USBH_FindInterface>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	2bff      	cmp	r3, #255	; 0xff
 8006f1c:	d002      	beq.n	8006f24 <USBH_CDC_InterfaceInit+0x24>
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d901      	bls.n	8006f28 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f24:	2302      	movs	r3, #2
 8006f26:	e13d      	b.n	80071a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fc3d 	bl	80077ac <USBH_SelectInterface>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e131      	b.n	80071a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006f46:	2050      	movs	r0, #80	; 0x50
 8006f48:	f002 fa04 	bl	8009354 <malloc>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006f60:	2302      	movs	r3, #2
 8006f62:	e11f      	b.n	80071a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006f64:	2250      	movs	r2, #80	; 0x50
 8006f66:	2100      	movs	r1, #0
 8006f68:	68b8      	ldr	r0, [r7, #8]
 8006f6a:	f002 fa03 	bl	8009374 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	211a      	movs	r1, #26
 8006f74:	fb01 f303 	mul.w	r3, r1, r3
 8006f78:	4413      	add	r3, r2
 8006f7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	b25b      	sxtb	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	da15      	bge.n	8006fb2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	211a      	movs	r1, #26
 8006f8c:	fb01 f303 	mul.w	r3, r1, r3
 8006f90:	4413      	add	r3, r2
 8006f92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f96:	781a      	ldrb	r2, [r3, #0]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	211a      	movs	r1, #26
 8006fa2:	fb01 f303 	mul.w	r3, r1, r3
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006fac:	881a      	ldrh	r2, [r3, #0]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 fe36 	bl	8008c2a <USBH_AllocPipe>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	7819      	ldrb	r1, [r3, #0]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	7858      	ldrb	r0, [r3, #1]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	8952      	ldrh	r2, [r2, #10]
 8006fde:	9202      	str	r2, [sp, #8]
 8006fe0:	2203      	movs	r2, #3
 8006fe2:	9201      	str	r2, [sp, #4]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	4602      	mov	r2, r0
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 fdee 	bl	8008bcc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f002 f8fb 	bl	80091f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006ffe:	2300      	movs	r3, #0
 8007000:	2200      	movs	r2, #0
 8007002:	210a      	movs	r1, #10
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fbed 	bl	80077e4 <USBH_FindInterface>
 800700a:	4603      	mov	r3, r0
 800700c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800700e:	7bfb      	ldrb	r3, [r7, #15]
 8007010:	2bff      	cmp	r3, #255	; 0xff
 8007012:	d002      	beq.n	800701a <USBH_CDC_InterfaceInit+0x11a>
 8007014:	7bfb      	ldrb	r3, [r7, #15]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d901      	bls.n	800701e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800701a:	2302      	movs	r3, #2
 800701c:	e0c2      	b.n	80071a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	211a      	movs	r1, #26
 8007024:	fb01 f303 	mul.w	r3, r1, r3
 8007028:	4413      	add	r3, r2
 800702a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	b25b      	sxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	da16      	bge.n	8007064 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	211a      	movs	r1, #26
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	4413      	add	r3, r2
 8007042:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007046:	781a      	ldrb	r2, [r3, #0]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	211a      	movs	r1, #26
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	4413      	add	r3, r2
 8007058:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800705c:	881a      	ldrh	r2, [r3, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	835a      	strh	r2, [r3, #26]
 8007062:	e015      	b.n	8007090 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	211a      	movs	r1, #26
 800706a:	fb01 f303 	mul.w	r3, r1, r3
 800706e:	4413      	add	r3, r2
 8007070:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007074:	781a      	ldrb	r2, [r3, #0]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	211a      	movs	r1, #26
 8007080:	fb01 f303 	mul.w	r3, r1, r3
 8007084:	4413      	add	r3, r2
 8007086:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800708a:	881a      	ldrh	r2, [r3, #0]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	211a      	movs	r1, #26
 8007096:	fb01 f303 	mul.w	r3, r1, r3
 800709a:	4413      	add	r3, r2
 800709c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	b25b      	sxtb	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	da16      	bge.n	80070d6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	211a      	movs	r1, #26
 80070ae:	fb01 f303 	mul.w	r3, r1, r3
 80070b2:	4413      	add	r3, r2
 80070b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070b8:	781a      	ldrb	r2, [r3, #0]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	211a      	movs	r1, #26
 80070c4:	fb01 f303 	mul.w	r3, r1, r3
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80070ce:	881a      	ldrh	r2, [r3, #0]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	835a      	strh	r2, [r3, #26]
 80070d4:	e015      	b.n	8007102 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	211a      	movs	r1, #26
 80070dc:	fb01 f303 	mul.w	r3, r1, r3
 80070e0:	4413      	add	r3, r2
 80070e2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070e6:	781a      	ldrb	r2, [r3, #0]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	211a      	movs	r1, #26
 80070f2:	fb01 f303 	mul.w	r3, r1, r3
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80070fc:	881a      	ldrh	r2, [r3, #0]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	7b9b      	ldrb	r3, [r3, #14]
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 fd8e 	bl	8008c2a <USBH_AllocPipe>
 800710e:	4603      	mov	r3, r0
 8007110:	461a      	mov	r2, r3
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	7bdb      	ldrb	r3, [r3, #15]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 fd84 	bl	8008c2a <USBH_AllocPipe>
 8007122:	4603      	mov	r3, r0
 8007124:	461a      	mov	r2, r3
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	7b59      	ldrb	r1, [r3, #13]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	7b98      	ldrb	r0, [r3, #14]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	8b12      	ldrh	r2, [r2, #24]
 8007142:	9202      	str	r2, [sp, #8]
 8007144:	2202      	movs	r2, #2
 8007146:	9201      	str	r2, [sp, #4]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	4623      	mov	r3, r4
 800714c:	4602      	mov	r2, r0
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 fd3c 	bl	8008bcc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	7b19      	ldrb	r1, [r3, #12]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	7bd8      	ldrb	r0, [r3, #15]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	8b52      	ldrh	r2, [r2, #26]
 800716c:	9202      	str	r2, [sp, #8]
 800716e:	2202      	movs	r2, #2
 8007170:	9201      	str	r2, [sp, #4]
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	4623      	mov	r3, r4
 8007176:	4602      	mov	r2, r0
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fd27 	bl	8008bcc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	7b5b      	ldrb	r3, [r3, #13]
 800718a:	2200      	movs	r2, #0
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f002 f830 	bl	80091f4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	7b1b      	ldrb	r3, [r3, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f002 f829 	bl	80091f4 <USBH_LL_SetToggle>

  return USBH_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd90      	pop	{r4, r7, pc}

080071ac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00e      	beq.n	80071e4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 fd1c 	bl	8008c0a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 fd47 	bl	8008c6c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	7b1b      	ldrb	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00e      	beq.n	800720a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	7b1b      	ldrb	r3, [r3, #12]
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 fd09 	bl	8008c0a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	7b1b      	ldrb	r3, [r3, #12]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 fd34 	bl	8008c6c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	7b5b      	ldrb	r3, [r3, #13]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00e      	beq.n	8007230 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	7b5b      	ldrb	r3, [r3, #13]
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 fcf6 	bl	8008c0a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	7b5b      	ldrb	r3, [r3, #13]
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f001 fd21 	bl	8008c6c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	4618      	mov	r0, r3
 8007246:	f002 f88d 	bl	8009364 <free>
    phost->pActiveClass->pData = 0U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007250:	2200      	movs	r2, #0
 8007252:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3340      	adds	r3, #64	; 0x40
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8b1 	bl	80073de <GetLineCoding>
 800727c:	4603      	mov	r3, r0
 800727e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007280:	7afb      	ldrb	r3, [r7, #11]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d105      	bne.n	8007292 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800728c:	2102      	movs	r1, #2
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007292:	7afb      	ldrb	r3, [r7, #11]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80072a4:	2301      	movs	r3, #1
 80072a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d877      	bhi.n	80073b0 <USBH_CDC_Process+0x114>
 80072c0:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <USBH_CDC_Process+0x2c>)
 80072c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c6:	bf00      	nop
 80072c8:	080072dd 	.word	0x080072dd
 80072cc:	080072e3 	.word	0x080072e3
 80072d0:	08007313 	.word	0x08007313
 80072d4:	08007387 	.word	0x08007387
 80072d8:	08007395 	.word	0x08007395
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]
      break;
 80072e0:	e06d      	b.n	80073be <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f897 	bl	800741c <SetLineCoding>
 80072ee:	4603      	mov	r3, r0
 80072f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007300:	e058      	b.n	80073b4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d055      	beq.n	80073b4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2204      	movs	r2, #4
 800730c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007310:	e050      	b.n	80073b4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	3340      	adds	r3, #64	; 0x40
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f860 	bl	80073de <GetLineCoding>
 800731e:	4603      	mov	r3, r0
 8007320:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d126      	bne.n	8007376 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733a:	791b      	ldrb	r3, [r3, #4]
 800733c:	429a      	cmp	r2, r3
 800733e:	d13b      	bne.n	80073b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800734c:	429a      	cmp	r2, r3
 800734e:	d133      	bne.n	80073b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800735c:	429a      	cmp	r2, r3
 800735e:	d12b      	bne.n	80073b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007368:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800736a:	429a      	cmp	r2, r3
 800736c:	d124      	bne.n	80073b8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f95a 	bl	8007628 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007374:	e020      	b.n	80073b8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d01d      	beq.n	80073b8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2204      	movs	r2, #4
 8007380:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007384:	e018      	b.n	80073b8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f867 	bl	800745a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f8dc 	bl	800754a <CDC_ProcessReception>
      break;
 8007392:	e014      	b.n	80073be <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007394:	2100      	movs	r1, #0
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 ffe5 	bl	8008366 <USBH_ClrFeature>
 800739c:	4603      	mov	r3, r0
 800739e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10a      	bne.n	80073bc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80073ae:	e005      	b.n	80073bc <USBH_CDC_Process+0x120>

    default:
      break;
 80073b0:	bf00      	nop
 80073b2:	e004      	b.n	80073be <USBH_CDC_Process+0x122>
      break;
 80073b4:	bf00      	nop
 80073b6:	e002      	b.n	80073be <USBH_CDC_Process+0x122>
      break;
 80073b8:	bf00      	nop
 80073ba:	e000      	b.n	80073be <USBH_CDC_Process+0x122>
      break;
 80073bc:	bf00      	nop

  }

  return status;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	22a1      	movs	r2, #161	; 0xa1
 80073ec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2221      	movs	r2, #33	; 0x21
 80073f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2207      	movs	r2, #7
 8007404:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2207      	movs	r2, #7
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 f98a 	bl	8008726 <USBH_CtlReq>
 8007412:	4603      	mov	r3, r0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2221      	movs	r2, #33	; 0x21
 800742a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2207      	movs	r2, #7
 8007442:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2207      	movs	r2, #7
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 f96b 	bl	8008726 <USBH_CtlReq>
 8007450:	4603      	mov	r3, r0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b086      	sub	sp, #24
 800745e:	af02      	add	r7, sp, #8
 8007460:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800746c:	2300      	movs	r3, #0
 800746e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007476:	2b01      	cmp	r3, #1
 8007478:	d002      	beq.n	8007480 <CDC_ProcessTransmission+0x26>
 800747a:	2b02      	cmp	r3, #2
 800747c:	d025      	beq.n	80074ca <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800747e:	e060      	b.n	8007542 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	8b12      	ldrh	r2, [r2, #24]
 8007488:	4293      	cmp	r3, r2
 800748a:	d90c      	bls.n	80074a6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	69d9      	ldr	r1, [r3, #28]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8b1a      	ldrh	r2, [r3, #24]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	7b58      	ldrb	r0, [r3, #13]
 8007498:	2301      	movs	r3, #1
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	4603      	mov	r3, r0
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 fb51 	bl	8008b46 <USBH_BulkSendData>
 80074a4:	e00c      	b.n	80074c0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	7b58      	ldrb	r0, [r3, #13]
 80074b4:	2301      	movs	r3, #1
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	4603      	mov	r3, r0
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 fb43 	bl	8008b46 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80074c8:	e03b      	b.n	8007542 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	7b5b      	ldrb	r3, [r3, #13]
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f001 fe65 	bl	80091a0 <USBH_LL_GetURBState>
 80074d6:	4603      	mov	r3, r0
 80074d8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80074da:	7afb      	ldrb	r3, [r7, #11]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d128      	bne.n	8007532 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	8b12      	ldrh	r2, [r2, #24]
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d90e      	bls.n	800750a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	8b12      	ldrh	r2, [r2, #24]
 80074f4:	1a9a      	subs	r2, r3, r2
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	8b12      	ldrh	r2, [r2, #24]
 8007502:	441a      	add	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	61da      	str	r2, [r3, #28]
 8007508:	e002      	b.n	8007510 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d004      	beq.n	8007522 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007520:	e00e      	b.n	8007540 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f868 	bl	8007600 <USBH_CDC_TransmitCallback>
      break;
 8007530:	e006      	b.n	8007540 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007532:	7afb      	ldrb	r3, [r7, #11]
 8007534:	2b02      	cmp	r3, #2
 8007536:	d103      	bne.n	8007540 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007540:	bf00      	nop
  }
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b086      	sub	sp, #24
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800755c:	2300      	movs	r3, #0
 800755e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007566:	2b03      	cmp	r3, #3
 8007568:	d002      	beq.n	8007570 <CDC_ProcessReception+0x26>
 800756a:	2b04      	cmp	r3, #4
 800756c:	d00e      	beq.n	800758c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800756e:	e043      	b.n	80075f8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	6a19      	ldr	r1, [r3, #32]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	8b5a      	ldrh	r2, [r3, #26]
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	7b1b      	ldrb	r3, [r3, #12]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 fb07 	bl	8008b90 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2204      	movs	r2, #4
 8007586:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800758a:	e035      	b.n	80075f8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	7b1b      	ldrb	r3, [r3, #12]
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 fe04 	bl	80091a0 <USBH_LL_GetURBState>
 8007598:	4603      	mov	r3, r0
 800759a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800759c:	7cfb      	ldrb	r3, [r7, #19]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d129      	bne.n	80075f6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	7b1b      	ldrb	r3, [r3, #12]
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 fd67 	bl	800907c <USBH_LL_GetLastXferSize>
 80075ae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d016      	beq.n	80075e8 <CDC_ProcessReception+0x9e>
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	8b5b      	ldrh	r3, [r3, #26]
 80075be:	461a      	mov	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d910      	bls.n	80075e8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	1ad2      	subs	r2, r2, r3
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	6a1a      	ldr	r2, [r3, #32]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	441a      	add	r2, r3
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2203      	movs	r2, #3
 80075e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80075e6:	e006      	b.n	80075f6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f80f 	bl	8007614 <USBH_CDC_ReceiveCallback>
      break;
 80075f6:	bf00      	nop
  }
}
 80075f8:	bf00      	nop
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	4613      	mov	r3, r2
 8007648:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007650:	2302      	movs	r3, #2
 8007652:	e029      	b.n	80076a8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	79fa      	ldrb	r2, [r7, #7]
 8007658:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f81f 	bl	80076b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f001 fc39 	bl	8008f18 <USBH_LL_Init>

  return USBH_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80076bc:	2300      	movs	r3, #0
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	e009      	b.n	80076d6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	33e0      	adds	r3, #224	; 0xe0
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	2200      	movs	r2, #0
 80076ce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3301      	adds	r3, #1
 80076d4:	60fb      	str	r3, [r7, #12]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b0e      	cmp	r3, #14
 80076da:	d9f2      	bls.n	80076c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	e009      	b.n	80076f6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3301      	adds	r3, #1
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076fc:	d3f1      	bcc.n	80076e2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2240      	movs	r2, #64	; 0x40
 8007722:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d016      	beq.n	800779a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10e      	bne.n	8007794 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800777c:	1c59      	adds	r1, r3, #1
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	33de      	adds	r3, #222	; 0xde
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73fb      	strb	r3, [r7, #15]
 8007792:	e004      	b.n	800779e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007794:	2302      	movs	r3, #2
 8007796:	73fb      	strb	r3, [r7, #15]
 8007798:	e001      	b.n	800779e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800779a:	2302      	movs	r3, #2
 800779c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80077c2:	78fa      	ldrb	r2, [r7, #3]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d204      	bcs.n	80077d2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	78fa      	ldrb	r2, [r7, #3]
 80077cc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80077d0:	e001      	b.n	80077d6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80077d2:	2302      	movs	r3, #2
 80077d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	4608      	mov	r0, r1
 80077ee:	4611      	mov	r1, r2
 80077f0:	461a      	mov	r2, r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	70fb      	strb	r3, [r7, #3]
 80077f6:	460b      	mov	r3, r1
 80077f8:	70bb      	strb	r3, [r7, #2]
 80077fa:	4613      	mov	r3, r2
 80077fc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007802:	2300      	movs	r3, #0
 8007804:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800780c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800780e:	e025      	b.n	800785c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	221a      	movs	r2, #26
 8007814:	fb02 f303 	mul.w	r3, r2, r3
 8007818:	3308      	adds	r3, #8
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	3302      	adds	r3, #2
 8007820:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	795b      	ldrb	r3, [r3, #5]
 8007826:	78fa      	ldrb	r2, [r7, #3]
 8007828:	429a      	cmp	r2, r3
 800782a:	d002      	beq.n	8007832 <USBH_FindInterface+0x4e>
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	2bff      	cmp	r3, #255	; 0xff
 8007830:	d111      	bne.n	8007856 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007836:	78ba      	ldrb	r2, [r7, #2]
 8007838:	429a      	cmp	r2, r3
 800783a:	d002      	beq.n	8007842 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800783c:	78bb      	ldrb	r3, [r7, #2]
 800783e:	2bff      	cmp	r3, #255	; 0xff
 8007840:	d109      	bne.n	8007856 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007846:	787a      	ldrb	r2, [r7, #1]
 8007848:	429a      	cmp	r2, r3
 800784a:	d002      	beq.n	8007852 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800784c:	787b      	ldrb	r3, [r7, #1]
 800784e:	2bff      	cmp	r3, #255	; 0xff
 8007850:	d101      	bne.n	8007856 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	e006      	b.n	8007864 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	3301      	adds	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d9d6      	bls.n	8007810 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007862:	23ff      	movs	r3, #255	; 0xff
}
 8007864:	4618      	mov	r0, r3
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 fb89 	bl	8008f90 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800787e:	2101      	movs	r1, #1
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f001 fca0 	bl	80091c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af04      	add	r7, sp, #16
 8007896:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007898:	2302      	movs	r3, #2
 800789a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d102      	bne.n	80078b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2203      	movs	r2, #3
 80078b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b0b      	cmp	r3, #11
 80078ba:	f200 81b3 	bhi.w	8007c24 <USBH_Process+0x394>
 80078be:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <USBH_Process+0x34>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	080078f5 	.word	0x080078f5
 80078c8:	08007927 	.word	0x08007927
 80078cc:	0800798f 	.word	0x0800798f
 80078d0:	08007bbf 	.word	0x08007bbf
 80078d4:	08007c25 	.word	0x08007c25
 80078d8:	08007a33 	.word	0x08007a33
 80078dc:	08007b65 	.word	0x08007b65
 80078e0:	08007a69 	.word	0x08007a69
 80078e4:	08007a89 	.word	0x08007a89
 80078e8:	08007aa9 	.word	0x08007aa9
 80078ec:	08007ad7 	.word	0x08007ad7
 80078f0:	08007ba7 	.word	0x08007ba7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 8193 	beq.w	8007c28 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007908:	20c8      	movs	r0, #200	; 0xc8
 800790a:	f001 fca6 	bl	800925a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f001 fb99 	bl	8009046 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007924:	e180      	b.n	8007c28 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800792c:	2b01      	cmp	r3, #1
 800792e:	d107      	bne.n	8007940 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800793e:	e182      	b.n	8007c46 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800794a:	d914      	bls.n	8007976 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007952:	3301      	adds	r3, #1
 8007954:	b2da      	uxtb	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007962:	2b03      	cmp	r3, #3
 8007964:	d903      	bls.n	800796e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	220d      	movs	r2, #13
 800796a:	701a      	strb	r2, [r3, #0]
      break;
 800796c:	e16b      	b.n	8007c46 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]
      break;
 8007974:	e167      	b.n	8007c46 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800797c:	f103 020a 	add.w	r2, r3, #10
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007986:	200a      	movs	r0, #10
 8007988:	f001 fc67 	bl	800925a <USBH_Delay>
      break;
 800798c:	e15b      	b.n	8007c46 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d005      	beq.n	80079a4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800799e:	2104      	movs	r1, #4
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80079a4:	2064      	movs	r0, #100	; 0x64
 80079a6:	f001 fc58 	bl	800925a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 fb26 	bl	8008ffc <USBH_LL_GetSpeed>
 80079b0:	4603      	mov	r3, r0
 80079b2:	461a      	mov	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2205      	movs	r2, #5
 80079be:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80079c0:	2100      	movs	r1, #0
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 f931 	bl	8008c2a <USBH_AllocPipe>
 80079c8:	4603      	mov	r3, r0
 80079ca:	461a      	mov	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80079d0:	2180      	movs	r1, #128	; 0x80
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 f929 	bl	8008c2a <USBH_AllocPipe>
 80079d8:	4603      	mov	r3, r0
 80079da:	461a      	mov	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	7919      	ldrb	r1, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80079f4:	b292      	uxth	r2, r2
 80079f6:	9202      	str	r2, [sp, #8]
 80079f8:	2200      	movs	r2, #0
 80079fa:	9201      	str	r2, [sp, #4]
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	4603      	mov	r3, r0
 8007a00:	2280      	movs	r2, #128	; 0x80
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 f8e2 	bl	8008bcc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	7959      	ldrb	r1, [r3, #5]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007a1c:	b292      	uxth	r2, r2
 8007a1e:	9202      	str	r2, [sp, #8]
 8007a20:	2200      	movs	r2, #0
 8007a22:	9201      	str	r2, [sp, #4]
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	4603      	mov	r3, r0
 8007a28:	2200      	movs	r2, #0
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 f8ce 	bl	8008bcc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a30:	e109      	b.n	8007c46 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f90c 	bl	8007c50 <USBH_HandleEnum>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f040 80f3 	bne.w	8007c2c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d103      	bne.n	8007a60 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2208      	movs	r2, #8
 8007a5c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a5e:	e0e5      	b.n	8007c2c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2207      	movs	r2, #7
 8007a64:	701a      	strb	r2, [r3, #0]
      break;
 8007a66:	e0e1      	b.n	8007c2c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 80de 	beq.w	8007c30 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2208      	movs	r2, #8
 8007a84:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a86:	e0d3      	b.n	8007c30 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fc20 	bl	80082d8 <USBH_SetCfg>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f040 80ca 	bne.w	8007c34 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2209      	movs	r2, #9
 8007aa4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007aa6:	e0c5      	b.n	8007c34 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00b      	beq.n	8007ace <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fc30 	bl	800831e <USBH_SetFeature>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f040 80b9 	bne.w	8007c38 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	220a      	movs	r2, #10
 8007aca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007acc:	e0b4      	b.n	8007c38 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	220a      	movs	r2, #10
 8007ad2:	701a      	strb	r2, [r3, #0]
      break;
 8007ad4:	e0b0      	b.n	8007c38 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 80ad 	beq.w	8007c3c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]
 8007aee:	e016      	b.n	8007b1e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007af0:	7bfa      	ldrb	r2, [r7, #15]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	32de      	adds	r2, #222	; 0xde
 8007af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afa:	791a      	ldrb	r2, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d108      	bne.n	8007b18 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007b06:	7bfa      	ldrb	r2, [r7, #15]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	32de      	adds	r2, #222	; 0xde
 8007b0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007b16:	e005      	b.n	8007b24 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	73fb      	strb	r3, [r7, #15]
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0e5      	beq.n	8007af0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d016      	beq.n	8007b5c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d109      	bne.n	8007b54 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2206      	movs	r2, #6
 8007b44:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b4c:	2103      	movs	r1, #3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b52:	e073      	b.n	8007c3c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	220d      	movs	r2, #13
 8007b58:	701a      	strb	r2, [r3, #0]
      break;
 8007b5a:	e06f      	b.n	8007c3c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	220d      	movs	r2, #13
 8007b60:	701a      	strb	r2, [r3, #0]
      break;
 8007b62:	e06b      	b.n	8007c3c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d017      	beq.n	8007b9e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d103      	bne.n	8007b8e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	220b      	movs	r2, #11
 8007b8a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b8c:	e058      	b.n	8007c40 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d154      	bne.n	8007c40 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	220d      	movs	r2, #13
 8007b9a:	701a      	strb	r2, [r3, #0]
      break;
 8007b9c:	e050      	b.n	8007c40 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	220d      	movs	r2, #13
 8007ba2:	701a      	strb	r2, [r3, #0]
      break;
 8007ba4:	e04c      	b.n	8007c40 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d049      	beq.n	8007c44 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
      }
      break;
 8007bbc:	e042      	b.n	8007c44 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff fd72 	bl	80076b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d009      	beq.n	8007bea <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bfa:	2105      	movs	r1, #5
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d107      	bne.n	8007c1c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff fe2b 	bl	8007870 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c1a:	e014      	b.n	8007c46 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 f9b7 	bl	8008f90 <USBH_LL_Start>
      break;
 8007c22:	e010      	b.n	8007c46 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007c24:	bf00      	nop
 8007c26:	e00e      	b.n	8007c46 <USBH_Process+0x3b6>
      break;
 8007c28:	bf00      	nop
 8007c2a:	e00c      	b.n	8007c46 <USBH_Process+0x3b6>
      break;
 8007c2c:	bf00      	nop
 8007c2e:	e00a      	b.n	8007c46 <USBH_Process+0x3b6>
    break;
 8007c30:	bf00      	nop
 8007c32:	e008      	b.n	8007c46 <USBH_Process+0x3b6>
      break;
 8007c34:	bf00      	nop
 8007c36:	e006      	b.n	8007c46 <USBH_Process+0x3b6>
      break;
 8007c38:	bf00      	nop
 8007c3a:	e004      	b.n	8007c46 <USBH_Process+0x3b6>
      break;
 8007c3c:	bf00      	nop
 8007c3e:	e002      	b.n	8007c46 <USBH_Process+0x3b6>
      break;
 8007c40:	bf00      	nop
 8007c42:	e000      	b.n	8007c46 <USBH_Process+0x3b6>
      break;
 8007c44:	bf00      	nop
  }
  return USBH_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af04      	add	r7, sp, #16
 8007c56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	785b      	ldrb	r3, [r3, #1]
 8007c64:	2b07      	cmp	r3, #7
 8007c66:	f200 81c1 	bhi.w	8007fec <USBH_HandleEnum+0x39c>
 8007c6a:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <USBH_HandleEnum+0x20>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007c91 	.word	0x08007c91
 8007c74:	08007d4f 	.word	0x08007d4f
 8007c78:	08007db9 	.word	0x08007db9
 8007c7c:	08007e47 	.word	0x08007e47
 8007c80:	08007eb1 	.word	0x08007eb1
 8007c84:	08007f21 	.word	0x08007f21
 8007c88:	08007f67 	.word	0x08007f67
 8007c8c:	08007fad 	.word	0x08007fad
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007c90:	2108      	movs	r1, #8
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa50 	bl	8008138 <USBH_Get_DevDesc>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d130      	bne.n	8007d04 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	7919      	ldrb	r1, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007cc6:	b292      	uxth	r2, r2
 8007cc8:	9202      	str	r2, [sp, #8]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	9201      	str	r2, [sp, #4]
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2280      	movs	r2, #128	; 0x80
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 ff79 	bl	8008bcc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7959      	ldrb	r1, [r3, #5]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007cee:	b292      	uxth	r2, r2
 8007cf0:	9202      	str	r2, [sp, #8]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	9201      	str	r2, [sp, #4]
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 ff65 	bl	8008bcc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007d02:	e175      	b.n	8007ff0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	f040 8172 	bne.w	8007ff0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d12:	3301      	adds	r3, #1
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d903      	bls.n	8007d2e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	220d      	movs	r2, #13
 8007d2a:	701a      	strb	r2, [r3, #0]
      break;
 8007d2c:	e160      	b.n	8007ff0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	795b      	ldrb	r3, [r3, #5]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 ff99 	bl	8008c6c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	791b      	ldrb	r3, [r3, #4]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 ff93 	bl	8008c6c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
      break;
 8007d4c:	e150      	b.n	8007ff0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007d4e:	2112      	movs	r1, #18
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f9f1 	bl	8008138 <USBH_Get_DevDesc>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d66:	e145      	b.n	8007ff4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	f040 8142 	bne.w	8007ff4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d76:	3301      	adds	r3, #1
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d903      	bls.n	8007d92 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	220d      	movs	r2, #13
 8007d8e:	701a      	strb	r2, [r3, #0]
      break;
 8007d90:	e130      	b.n	8007ff4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	795b      	ldrb	r3, [r3, #5]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 ff67 	bl	8008c6c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	791b      	ldrb	r3, [r3, #4]
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 ff61 	bl	8008c6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
      break;
 8007db6:	e11d      	b.n	8007ff4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007db8:	2101      	movs	r1, #1
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa68 	bl	8008290 <USBH_SetAddress>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d132      	bne.n	8007e30 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007dca:	2002      	movs	r0, #2
 8007dcc:	f001 fa45 	bl	800925a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2203      	movs	r2, #3
 8007ddc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	7919      	ldrb	r1, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007df2:	b292      	uxth	r2, r2
 8007df4:	9202      	str	r2, [sp, #8]
 8007df6:	2200      	movs	r2, #0
 8007df8:	9201      	str	r2, [sp, #4]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2280      	movs	r2, #128	; 0x80
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fee3 	bl	8008bcc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	7959      	ldrb	r1, [r3, #5]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e1a:	b292      	uxth	r2, r2
 8007e1c:	9202      	str	r2, [sp, #8]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	9201      	str	r2, [sp, #4]
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	4603      	mov	r3, r0
 8007e26:	2200      	movs	r2, #0
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fecf 	bl	8008bcc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007e2e:	e0e3      	b.n	8007ff8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	f040 80e0 	bne.w	8007ff8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	220d      	movs	r2, #13
 8007e3c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	705a      	strb	r2, [r3, #1]
      break;
 8007e44:	e0d8      	b.n	8007ff8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007e46:	2109      	movs	r1, #9
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f99d 	bl	8008188 <USBH_Get_CfgDesc>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d103      	bne.n	8007e60 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e5e:	e0cd      	b.n	8007ffc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	f040 80ca 	bne.w	8007ffc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e6e:	3301      	adds	r3, #1
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d903      	bls.n	8007e8a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	220d      	movs	r2, #13
 8007e86:	701a      	strb	r2, [r3, #0]
      break;
 8007e88:	e0b8      	b.n	8007ffc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	795b      	ldrb	r3, [r3, #5]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 feeb 	bl	8008c6c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	791b      	ldrb	r3, [r3, #4]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fee5 	bl	8008c6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	701a      	strb	r2, [r3, #0]
      break;
 8007eae:	e0a5      	b.n	8007ffc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f965 	bl	8008188 <USBH_Get_CfgDesc>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d103      	bne.n	8007ed0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2205      	movs	r2, #5
 8007ecc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ece:	e097      	b.n	8008000 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	f040 8094 	bne.w	8008000 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ede:	3301      	adds	r3, #1
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d903      	bls.n	8007efa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	220d      	movs	r2, #13
 8007ef6:	701a      	strb	r2, [r3, #0]
      break;
 8007ef8:	e082      	b.n	8008000 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	795b      	ldrb	r3, [r3, #5]
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 feb3 	bl	8008c6c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	791b      	ldrb	r3, [r3, #4]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fead 	bl	8008c6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
      break;
 8007f1e:	e06f      	b.n	8008000 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d019      	beq.n	8007f5e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007f36:	23ff      	movs	r3, #255	; 0xff
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f949 	bl	80081d0 <USBH_Get_StringDesc>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d103      	bne.n	8007f50 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2206      	movs	r2, #6
 8007f4c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f4e:	e059      	b.n	8008004 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d156      	bne.n	8008004 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2206      	movs	r2, #6
 8007f5a:	705a      	strb	r2, [r3, #1]
      break;
 8007f5c:	e052      	b.n	8008004 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2206      	movs	r2, #6
 8007f62:	705a      	strb	r2, [r3, #1]
      break;
 8007f64:	e04e      	b.n	8008004 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d019      	beq.n	8007fa4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f7c:	23ff      	movs	r3, #255	; 0xff
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f926 	bl	80081d0 <USBH_Get_StringDesc>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d103      	bne.n	8007f96 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2207      	movs	r2, #7
 8007f92:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f94:	e038      	b.n	8008008 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d135      	bne.n	8008008 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2207      	movs	r2, #7
 8007fa0:	705a      	strb	r2, [r3, #1]
      break;
 8007fa2:	e031      	b.n	8008008 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2207      	movs	r2, #7
 8007fa8:	705a      	strb	r2, [r3, #1]
      break;
 8007faa:	e02d      	b.n	8008008 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d017      	beq.n	8007fe6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007fc2:	23ff      	movs	r3, #255	; 0xff
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f903 	bl	80081d0 <USBH_Get_StringDesc>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007fd8:	e018      	b.n	800800c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d115      	bne.n	800800c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe4:	e012      	b.n	800800c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8007fea:	e00f      	b.n	800800c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007fec:	bf00      	nop
 8007fee:	e00e      	b.n	800800e <USBH_HandleEnum+0x3be>
      break;
 8007ff0:	bf00      	nop
 8007ff2:	e00c      	b.n	800800e <USBH_HandleEnum+0x3be>
      break;
 8007ff4:	bf00      	nop
 8007ff6:	e00a      	b.n	800800e <USBH_HandleEnum+0x3be>
      break;
 8007ff8:	bf00      	nop
 8007ffa:	e008      	b.n	800800e <USBH_HandleEnum+0x3be>
      break;
 8007ffc:	bf00      	nop
 8007ffe:	e006      	b.n	800800e <USBH_HandleEnum+0x3be>
      break;
 8008000:	bf00      	nop
 8008002:	e004      	b.n	800800e <USBH_HandleEnum+0x3be>
      break;
 8008004:	bf00      	nop
 8008006:	e002      	b.n	800800e <USBH_HandleEnum+0x3be>
      break;
 8008008:	bf00      	nop
 800800a:	e000      	b.n	800800e <USBH_HandleEnum+0x3be>
      break;
 800800c:	bf00      	nop
  }
  return Status;
 800800e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008044:	1c5a      	adds	r2, r3, #1
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f804 	bl	800805a <USBH_HandleSof>
}
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b0b      	cmp	r3, #11
 800806a:	d10a      	bne.n	8008082 <USBH_HandleSof+0x28>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
  }
}
 8008082:	bf00      	nop
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800809a:	bf00      	nop
}
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80080b6:	bf00      	nop
}
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 ff58 	bl	8008fc6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	791b      	ldrb	r3, [r3, #4]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fda5 	bl	8008c6c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	795b      	ldrb	r3, [r3, #5]
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fd9f 	bl	8008c6c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af02      	add	r7, sp, #8
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800814a:	78fb      	ldrb	r3, [r7, #3]
 800814c:	b29b      	uxth	r3, r3
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	4613      	mov	r3, r2
 8008152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008156:	2100      	movs	r1, #0
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f864 	bl	8008226 <USBH_GetDescriptor>
 800815e:	4603      	mov	r3, r0
 8008160:	73fb      	strb	r3, [r7, #15]
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10a      	bne.n	800817e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008174:	78fa      	ldrb	r2, [r7, #3]
 8008176:	b292      	uxth	r2, r2
 8008178:	4619      	mov	r1, r3
 800817a:	f000 f918 	bl	80083ae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af02      	add	r7, sp, #8
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	331c      	adds	r3, #28
 8008198:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800819a:	887b      	ldrh	r3, [r7, #2]
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081a4:	2100      	movs	r1, #0
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f83d 	bl	8008226 <USBH_GetDescriptor>
 80081ac:	4603      	mov	r3, r0
 80081ae:	72fb      	strb	r3, [r7, #11]
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d107      	bne.n	80081c6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80081bc:	887a      	ldrh	r2, [r7, #2]
 80081be:	68f9      	ldr	r1, [r7, #12]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 f964 	bl	800848e <USBH_ParseCfgDesc>
  }

  return status;
 80081c6:	7afb      	ldrb	r3, [r7, #11]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	607a      	str	r2, [r7, #4]
 80081da:	461a      	mov	r2, r3
 80081dc:	460b      	mov	r3, r1
 80081de:	72fb      	strb	r3, [r7, #11]
 80081e0:	4613      	mov	r3, r2
 80081e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80081ec:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80081f4:	893b      	ldrh	r3, [r7, #8]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	460b      	mov	r3, r1
 80081fa:	2100      	movs	r1, #0
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f812 	bl	8008226 <USBH_GetDescriptor>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d107      	bne.n	800821c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008212:	893a      	ldrh	r2, [r7, #8]
 8008214:	6879      	ldr	r1, [r7, #4]
 8008216:	4618      	mov	r0, r3
 8008218:	f000 fa37 	bl	800868a <USBH_ParseStringDesc>
  }

  return status;
 800821c:	7dfb      	ldrb	r3, [r7, #23]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	607b      	str	r3, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	72fb      	strb	r3, [r7, #11]
 8008234:	4613      	mov	r3, r2
 8008236:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	789b      	ldrb	r3, [r3, #2]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d11c      	bne.n	800827a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008246:	b2da      	uxtb	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2206      	movs	r2, #6
 8008250:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	893a      	ldrh	r2, [r7, #8]
 8008256:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008258:	893b      	ldrh	r3, [r7, #8]
 800825a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800825e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008262:	d104      	bne.n	800826e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f240 4209 	movw	r2, #1033	; 0x409
 800826a:	829a      	strh	r2, [r3, #20]
 800826c:	e002      	b.n	8008274 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8b3a      	ldrh	r2, [r7, #24]
 8008278:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800827a:	8b3b      	ldrh	r3, [r7, #24]
 800827c:	461a      	mov	r2, r3
 800827e:	6879      	ldr	r1, [r7, #4]
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 fa50 	bl	8008726 <USBH_CtlReq>
 8008286:	4603      	mov	r3, r0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	789b      	ldrb	r3, [r3, #2]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d10f      	bne.n	80082c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2205      	movs	r2, #5
 80082ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80082b0:	78fb      	ldrb	r3, [r7, #3]
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80082c4:	2200      	movs	r2, #0
 80082c6:	2100      	movs	r1, #0
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fa2c 	bl	8008726 <USBH_CtlReq>
 80082ce:	4603      	mov	r3, r0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	789b      	ldrb	r3, [r3, #2]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d10e      	bne.n	800830a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2209      	movs	r2, #9
 80082f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	887a      	ldrh	r2, [r7, #2]
 80082fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800830a:	2200      	movs	r2, #0
 800830c:	2100      	movs	r1, #0
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa09 	bl	8008726 <USBH_CtlReq>
 8008314:	4603      	mov	r3, r0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	460b      	mov	r3, r1
 8008328:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	789b      	ldrb	r3, [r3, #2]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d10f      	bne.n	8008352 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2203      	movs	r2, #3
 800833c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	b29a      	uxth	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008352:	2200      	movs	r2, #0
 8008354:	2100      	movs	r1, #0
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f9e5 	bl	8008726 <USBH_CtlReq>
 800835c:	4603      	mov	r3, r0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	789b      	ldrb	r3, [r3, #2]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d10f      	bne.n	800839a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2202      	movs	r2, #2
 800837e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800838c:	78fb      	ldrb	r3, [r7, #3]
 800838e:	b29a      	uxth	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800839a:	2200      	movs	r2, #0
 800839c:	2100      	movs	r1, #0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f9c1 	bl	8008726 <USBH_CtlReq>
 80083a4:	4603      	mov	r3, r0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b085      	sub	sp, #20
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	4613      	mov	r3, r2
 80083ba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	781a      	ldrb	r2, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	785a      	ldrb	r2, [r3, #1]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	3302      	adds	r3, #2
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	3303      	adds	r3, #3
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	021b      	lsls	r3, r3, #8
 80083de:	b29b      	uxth	r3, r3
 80083e0:	4313      	orrs	r3, r2
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	791a      	ldrb	r2, [r3, #4]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	795a      	ldrb	r2, [r3, #5]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	799a      	ldrb	r2, [r3, #6]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	79da      	ldrb	r2, [r3, #7]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008408:	88fb      	ldrh	r3, [r7, #6]
 800840a:	2b08      	cmp	r3, #8
 800840c:	d939      	bls.n	8008482 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	3308      	adds	r3, #8
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	b29a      	uxth	r2, r3
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	3309      	adds	r3, #9
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	b29b      	uxth	r3, r3
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	b29b      	uxth	r3, r3
 8008422:	4313      	orrs	r3, r2
 8008424:	b29a      	uxth	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	330a      	adds	r3, #10
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	b29a      	uxth	r2, r3
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	330b      	adds	r3, #11
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	021b      	lsls	r3, r3, #8
 800843c:	b29b      	uxth	r3, r3
 800843e:	4313      	orrs	r3, r2
 8008440:	b29a      	uxth	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	330c      	adds	r3, #12
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	b29a      	uxth	r2, r3
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	330d      	adds	r3, #13
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	b29b      	uxth	r3, r3
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	b29b      	uxth	r3, r3
 800845a:	4313      	orrs	r3, r2
 800845c:	b29a      	uxth	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	7b9a      	ldrb	r2, [r3, #14]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	7bda      	ldrb	r2, [r3, #15]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	7c1a      	ldrb	r2, [r3, #16]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	7c5a      	ldrb	r2, [r3, #17]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	745a      	strb	r2, [r3, #17]
  }
}
 8008482:	bf00      	nop
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b08a      	sub	sp, #40	; 0x28
 8008492:	af00      	add	r7, sp, #0
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	4613      	mov	r3, r2
 800849a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	781a      	ldrb	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	785a      	ldrb	r2, [r3, #1]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	3302      	adds	r3, #2
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	3303      	adds	r3, #3
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	021b      	lsls	r3, r3, #8
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	4313      	orrs	r3, r2
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	791a      	ldrb	r2, [r3, #4]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	795a      	ldrb	r2, [r3, #5]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	799a      	ldrb	r2, [r3, #6]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	79da      	ldrb	r2, [r3, #7]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	7a1a      	ldrb	r2, [r3, #8]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008504:	88fb      	ldrh	r3, [r7, #6]
 8008506:	2b09      	cmp	r3, #9
 8008508:	d95f      	bls.n	80085ca <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800850a:	2309      	movs	r3, #9
 800850c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800850e:	2300      	movs	r3, #0
 8008510:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008512:	e051      	b.n	80085b8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008514:	f107 0316 	add.w	r3, r7, #22
 8008518:	4619      	mov	r1, r3
 800851a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800851c:	f000 f8e8 	bl	80086f0 <USBH_GetNextDesc>
 8008520:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	2b04      	cmp	r3, #4
 8008528:	d146      	bne.n	80085b8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800852a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800852e:	221a      	movs	r2, #26
 8008530:	fb02 f303 	mul.w	r3, r2, r3
 8008534:	3308      	adds	r3, #8
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	4413      	add	r3, r2
 800853a:	3302      	adds	r3, #2
 800853c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800853e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008540:	69f8      	ldr	r0, [r7, #28]
 8008542:	f000 f846 	bl	80085d2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800854c:	2300      	movs	r3, #0
 800854e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008550:	e022      	b.n	8008598 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008552:	f107 0316 	add.w	r3, r7, #22
 8008556:	4619      	mov	r1, r3
 8008558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800855a:	f000 f8c9 	bl	80086f0 <USBH_GetNextDesc>
 800855e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	2b05      	cmp	r3, #5
 8008566:	d117      	bne.n	8008598 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008568:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800856c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008570:	3201      	adds	r2, #1
 8008572:	00d2      	lsls	r2, r2, #3
 8008574:	211a      	movs	r1, #26
 8008576:	fb01 f303 	mul.w	r3, r1, r3
 800857a:	4413      	add	r3, r2
 800857c:	3308      	adds	r3, #8
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	3304      	adds	r3, #4
 8008584:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008588:	69b8      	ldr	r0, [r7, #24]
 800858a:	f000 f851 	bl	8008630 <USBH_ParseEPDesc>
            ep_ix++;
 800858e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008592:	3301      	adds	r3, #1
 8008594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	791b      	ldrb	r3, [r3, #4]
 800859c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d204      	bcs.n	80085ae <USBH_ParseCfgDesc+0x120>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	885a      	ldrh	r2, [r3, #2]
 80085a8:	8afb      	ldrh	r3, [r7, #22]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d8d1      	bhi.n	8008552 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80085ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085b2:	3301      	adds	r3, #1
 80085b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d804      	bhi.n	80085ca <USBH_ParseCfgDesc+0x13c>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	885a      	ldrh	r2, [r3, #2]
 80085c4:	8afb      	ldrh	r3, [r7, #22]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d8a4      	bhi.n	8008514 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80085ca:	bf00      	nop
 80085cc:	3728      	adds	r7, #40	; 0x28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781a      	ldrb	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	785a      	ldrb	r2, [r3, #1]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	789a      	ldrb	r2, [r3, #2]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	78da      	ldrb	r2, [r3, #3]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	791a      	ldrb	r2, [r3, #4]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	795a      	ldrb	r2, [r3, #5]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	799a      	ldrb	r2, [r3, #6]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	79da      	ldrb	r2, [r3, #7]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	7a1a      	ldrb	r2, [r3, #8]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	721a      	strb	r2, [r3, #8]
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781a      	ldrb	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	785a      	ldrb	r2, [r3, #1]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	789a      	ldrb	r2, [r3, #2]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	78da      	ldrb	r2, [r3, #3]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	3304      	adds	r3, #4
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	b29a      	uxth	r2, r3
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	3305      	adds	r3, #5
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	b29b      	uxth	r3, r3
 800866a:	021b      	lsls	r3, r3, #8
 800866c:	b29b      	uxth	r3, r3
 800866e:	4313      	orrs	r3, r2
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	799a      	ldrb	r2, [r3, #6]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	719a      	strb	r2, [r3, #6]
}
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800868a:	b480      	push	{r7}
 800868c:	b087      	sub	sp, #28
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	4613      	mov	r3, r2
 8008696:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3301      	adds	r3, #1
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d120      	bne.n	80086e4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	1e9a      	subs	r2, r3, #2
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	4293      	cmp	r3, r2
 80086ac:	bf28      	it	cs
 80086ae:	4613      	movcs	r3, r2
 80086b0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3302      	adds	r3, #2
 80086b6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80086b8:	2300      	movs	r3, #0
 80086ba:	82fb      	strh	r3, [r7, #22]
 80086bc:	e00b      	b.n	80086d6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80086be:	8afb      	ldrh	r3, [r7, #22]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4413      	add	r3, r2
 80086c4:	781a      	ldrb	r2, [r3, #0]
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	3301      	adds	r3, #1
 80086ce:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80086d0:	8afb      	ldrh	r3, [r7, #22]
 80086d2:	3302      	adds	r3, #2
 80086d4:	82fb      	strh	r3, [r7, #22]
 80086d6:	8afa      	ldrh	r2, [r7, #22]
 80086d8:	8abb      	ldrh	r3, [r7, #20]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d3ef      	bcc.n	80086be <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2200      	movs	r2, #0
 80086e2:	701a      	strb	r2, [r3, #0]
  }
}
 80086e4:	bf00      	nop
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	881a      	ldrh	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	b29b      	uxth	r3, r3
 8008704:	4413      	add	r3, r2
 8008706:	b29a      	uxth	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4413      	add	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008718:	68fb      	ldr	r3, [r7, #12]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b086      	sub	sp, #24
 800872a:	af00      	add	r7, sp, #0
 800872c:	60f8      	str	r0, [r7, #12]
 800872e:	60b9      	str	r1, [r7, #8]
 8008730:	4613      	mov	r3, r2
 8008732:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008734:	2301      	movs	r3, #1
 8008736:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	789b      	ldrb	r3, [r3, #2]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d002      	beq.n	8008746 <USBH_CtlReq+0x20>
 8008740:	2b02      	cmp	r3, #2
 8008742:	d00f      	beq.n	8008764 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008744:	e027      	b.n	8008796 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	88fa      	ldrh	r2, [r7, #6]
 8008750:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2201      	movs	r2, #1
 8008756:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2202      	movs	r2, #2
 800875c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800875e:	2301      	movs	r3, #1
 8008760:	75fb      	strb	r3, [r7, #23]
      break;
 8008762:	e018      	b.n	8008796 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 f81b 	bl	80087a0 <USBH_HandleControl>
 800876a:	4603      	mov	r3, r0
 800876c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <USBH_CtlReq+0x54>
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	2b03      	cmp	r3, #3
 8008778:	d106      	bne.n	8008788 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2201      	movs	r2, #1
 800877e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	761a      	strb	r2, [r3, #24]
      break;
 8008786:	e005      	b.n	8008794 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d102      	bne.n	8008794 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	709a      	strb	r2, [r3, #2]
      break;
 8008794:	bf00      	nop
  }
  return status;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80087a8:	2301      	movs	r3, #1
 80087aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	7e1b      	ldrb	r3, [r3, #24]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	2b0a      	cmp	r3, #10
 80087b8:	f200 8158 	bhi.w	8008a6c <USBH_HandleControl+0x2cc>
 80087bc:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <USBH_HandleControl+0x24>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	080087f1 	.word	0x080087f1
 80087c8:	0800880b 	.word	0x0800880b
 80087cc:	08008875 	.word	0x08008875
 80087d0:	0800889b 	.word	0x0800889b
 80087d4:	080088d3 	.word	0x080088d3
 80087d8:	080088ff 	.word	0x080088ff
 80087dc:	08008951 	.word	0x08008951
 80087e0:	08008973 	.word	0x08008973
 80087e4:	080089af 	.word	0x080089af
 80087e8:	080089d7 	.word	0x080089d7
 80087ec:	08008a15 	.word	0x08008a15
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f103 0110 	add.w	r1, r3, #16
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	795b      	ldrb	r3, [r3, #5]
 80087fa:	461a      	mov	r2, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f945 	bl	8008a8c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2202      	movs	r2, #2
 8008806:	761a      	strb	r2, [r3, #24]
      break;
 8008808:	e13b      	b.n	8008a82 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	795b      	ldrb	r3, [r3, #5]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fcc5 	bl	80091a0 <USBH_LL_GetURBState>
 8008816:	4603      	mov	r3, r0
 8008818:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d11e      	bne.n	800885e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	7c1b      	ldrb	r3, [r3, #16]
 8008824:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008828:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8adb      	ldrh	r3, [r3, #22]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008832:	7b7b      	ldrb	r3, [r7, #13]
 8008834:	2b80      	cmp	r3, #128	; 0x80
 8008836:	d103      	bne.n	8008840 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2203      	movs	r2, #3
 800883c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800883e:	e117      	b.n	8008a70 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2205      	movs	r2, #5
 8008844:	761a      	strb	r2, [r3, #24]
      break;
 8008846:	e113      	b.n	8008a70 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008848:	7b7b      	ldrb	r3, [r7, #13]
 800884a:	2b80      	cmp	r3, #128	; 0x80
 800884c:	d103      	bne.n	8008856 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2209      	movs	r2, #9
 8008852:	761a      	strb	r2, [r3, #24]
      break;
 8008854:	e10c      	b.n	8008a70 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2207      	movs	r2, #7
 800885a:	761a      	strb	r2, [r3, #24]
      break;
 800885c:	e108      	b.n	8008a70 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	2b04      	cmp	r3, #4
 8008862:	d003      	beq.n	800886c <USBH_HandleControl+0xcc>
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	2b02      	cmp	r3, #2
 8008868:	f040 8102 	bne.w	8008a70 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	220b      	movs	r2, #11
 8008870:	761a      	strb	r2, [r3, #24]
      break;
 8008872:	e0fd      	b.n	8008a70 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800887a:	b29a      	uxth	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6899      	ldr	r1, [r3, #8]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	899a      	ldrh	r2, [r3, #12]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	791b      	ldrb	r3, [r3, #4]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f93c 	bl	8008b0a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2204      	movs	r2, #4
 8008896:	761a      	strb	r2, [r3, #24]
      break;
 8008898:	e0f3      	b.n	8008a82 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	791b      	ldrb	r3, [r3, #4]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fc7d 	bl	80091a0 <USBH_LL_GetURBState>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d102      	bne.n	80088b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2209      	movs	r2, #9
 80088b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
 80088b8:	2b05      	cmp	r3, #5
 80088ba:	d102      	bne.n	80088c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80088bc:	2303      	movs	r3, #3
 80088be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80088c0:	e0d8      	b.n	8008a74 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	f040 80d5 	bne.w	8008a74 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	220b      	movs	r2, #11
 80088ce:	761a      	strb	r2, [r3, #24]
      break;
 80088d0:	e0d0      	b.n	8008a74 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6899      	ldr	r1, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	899a      	ldrh	r2, [r3, #12]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	7958      	ldrb	r0, [r3, #5]
 80088de:	2301      	movs	r3, #1
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	4603      	mov	r3, r0
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f8eb 	bl	8008ac0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2206      	movs	r2, #6
 80088fa:	761a      	strb	r2, [r3, #24]
      break;
 80088fc:	e0c1      	b.n	8008a82 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	795b      	ldrb	r3, [r3, #5]
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fc4b 	bl	80091a0 <USBH_LL_GetURBState>
 800890a:	4603      	mov	r3, r0
 800890c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800890e:	7bbb      	ldrb	r3, [r7, #14]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d103      	bne.n	800891c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2207      	movs	r2, #7
 8008918:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800891a:	e0ad      	b.n	8008a78 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b05      	cmp	r3, #5
 8008920:	d105      	bne.n	800892e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	220c      	movs	r2, #12
 8008926:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008928:	2303      	movs	r3, #3
 800892a:	73fb      	strb	r3, [r7, #15]
      break;
 800892c:	e0a4      	b.n	8008a78 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800892e:	7bbb      	ldrb	r3, [r7, #14]
 8008930:	2b02      	cmp	r3, #2
 8008932:	d103      	bne.n	800893c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2205      	movs	r2, #5
 8008938:	761a      	strb	r2, [r3, #24]
      break;
 800893a:	e09d      	b.n	8008a78 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	2b04      	cmp	r3, #4
 8008940:	f040 809a 	bne.w	8008a78 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	220b      	movs	r2, #11
 8008948:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800894a:	2302      	movs	r3, #2
 800894c:	73fb      	strb	r3, [r7, #15]
      break;
 800894e:	e093      	b.n	8008a78 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	791b      	ldrb	r3, [r3, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	2100      	movs	r1, #0
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f8d6 	bl	8008b0a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008964:	b29a      	uxth	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2208      	movs	r2, #8
 800896e:	761a      	strb	r2, [r3, #24]

      break;
 8008970:	e087      	b.n	8008a82 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	791b      	ldrb	r3, [r3, #4]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fc11 	bl	80091a0 <USBH_LL_GetURBState>
 800897e:	4603      	mov	r3, r0
 8008980:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d105      	bne.n	8008994 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	220d      	movs	r2, #13
 800898c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008992:	e073      	b.n	8008a7c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	2b04      	cmp	r3, #4
 8008998:	d103      	bne.n	80089a2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	220b      	movs	r2, #11
 800899e:	761a      	strb	r2, [r3, #24]
      break;
 80089a0:	e06c      	b.n	8008a7c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	2b05      	cmp	r3, #5
 80089a6:	d169      	bne.n	8008a7c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80089a8:	2303      	movs	r3, #3
 80089aa:	73fb      	strb	r3, [r7, #15]
      break;
 80089ac:	e066      	b.n	8008a7c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	795a      	ldrb	r2, [r3, #5]
 80089b2:	2301      	movs	r3, #1
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	4613      	mov	r3, r2
 80089b8:	2200      	movs	r2, #0
 80089ba:	2100      	movs	r1, #0
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f87f 	bl	8008ac0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	220a      	movs	r2, #10
 80089d2:	761a      	strb	r2, [r3, #24]
      break;
 80089d4:	e055      	b.n	8008a82 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	795b      	ldrb	r3, [r3, #5]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fbdf 	bl	80091a0 <USBH_LL_GetURBState>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d105      	bne.n	80089f8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	220d      	movs	r2, #13
 80089f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089f6:	e043      	b.n	8008a80 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d103      	bne.n	8008a06 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2209      	movs	r2, #9
 8008a02:	761a      	strb	r2, [r3, #24]
      break;
 8008a04:	e03c      	b.n	8008a80 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d139      	bne.n	8008a80 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	220b      	movs	r2, #11
 8008a10:	761a      	strb	r2, [r3, #24]
      break;
 8008a12:	e035      	b.n	8008a80 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	7e5b      	ldrb	r3, [r3, #25]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	765a      	strb	r2, [r3, #25]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	7e5b      	ldrb	r3, [r3, #25]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d806      	bhi.n	8008a36 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008a34:	e025      	b.n	8008a82 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a3c:	2106      	movs	r1, #6
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	795b      	ldrb	r3, [r3, #5]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f90c 	bl	8008c6c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	791b      	ldrb	r3, [r3, #4]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f906 	bl	8008c6c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a66:	2302      	movs	r3, #2
 8008a68:	73fb      	strb	r3, [r7, #15]
      break;
 8008a6a:	e00a      	b.n	8008a82 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008a6c:	bf00      	nop
 8008a6e:	e008      	b.n	8008a82 <USBH_HandleControl+0x2e2>
      break;
 8008a70:	bf00      	nop
 8008a72:	e006      	b.n	8008a82 <USBH_HandleControl+0x2e2>
      break;
 8008a74:	bf00      	nop
 8008a76:	e004      	b.n	8008a82 <USBH_HandleControl+0x2e2>
      break;
 8008a78:	bf00      	nop
 8008a7a:	e002      	b.n	8008a82 <USBH_HandleControl+0x2e2>
      break;
 8008a7c:	bf00      	nop
 8008a7e:	e000      	b.n	8008a82 <USBH_HandleControl+0x2e2>
      break;
 8008a80:	bf00      	nop
  }

  return status;
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af04      	add	r7, sp, #16
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a9a:	79f9      	ldrb	r1, [r7, #7]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	9303      	str	r3, [sp, #12]
 8008aa0:	2308      	movs	r3, #8
 8008aa2:	9302      	str	r3, [sp, #8]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	2300      	movs	r3, #0
 8008aae:	2200      	movs	r2, #0
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f000 fb44 	bl	800913e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b088      	sub	sp, #32
 8008ac4:	af04      	add	r7, sp, #16
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	4611      	mov	r1, r2
 8008acc:	461a      	mov	r2, r3
 8008ace:	460b      	mov	r3, r1
 8008ad0:	80fb      	strh	r3, [r7, #6]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ae4:	7979      	ldrb	r1, [r7, #5]
 8008ae6:	7e3b      	ldrb	r3, [r7, #24]
 8008ae8:	9303      	str	r3, [sp, #12]
 8008aea:	88fb      	ldrh	r3, [r7, #6]
 8008aec:	9302      	str	r3, [sp, #8]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	2301      	movs	r3, #1
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	2300      	movs	r3, #0
 8008af8:	2200      	movs	r2, #0
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 fb1f 	bl	800913e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b088      	sub	sp, #32
 8008b0e:	af04      	add	r7, sp, #16
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	60b9      	str	r1, [r7, #8]
 8008b14:	4611      	mov	r1, r2
 8008b16:	461a      	mov	r2, r3
 8008b18:	460b      	mov	r3, r1
 8008b1a:	80fb      	strh	r3, [r7, #6]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b20:	7979      	ldrb	r1, [r7, #5]
 8008b22:	2300      	movs	r3, #0
 8008b24:	9303      	str	r3, [sp, #12]
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	9302      	str	r3, [sp, #8]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	2301      	movs	r3, #1
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	2300      	movs	r3, #0
 8008b34:	2201      	movs	r2, #1
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 fb01 	bl	800913e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008b3c:	2300      	movs	r3, #0

}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b088      	sub	sp, #32
 8008b4a:	af04      	add	r7, sp, #16
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	4611      	mov	r1, r2
 8008b52:	461a      	mov	r2, r3
 8008b54:	460b      	mov	r3, r1
 8008b56:	80fb      	strh	r3, [r7, #6]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b6a:	7979      	ldrb	r1, [r7, #5]
 8008b6c:	7e3b      	ldrb	r3, [r7, #24]
 8008b6e:	9303      	str	r3, [sp, #12]
 8008b70:	88fb      	ldrh	r3, [r7, #6]
 8008b72:	9302      	str	r3, [sp, #8]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	2301      	movs	r3, #1
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 fadc 	bl	800913e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b088      	sub	sp, #32
 8008b94:	af04      	add	r7, sp, #16
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	80fb      	strh	r3, [r7, #6]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ba6:	7979      	ldrb	r1, [r7, #5]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9303      	str	r3, [sp, #12]
 8008bac:	88fb      	ldrh	r3, [r7, #6]
 8008bae:	9302      	str	r3, [sp, #8]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	2302      	movs	r3, #2
 8008bba:	2201      	movs	r2, #1
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 fabe 	bl	800913e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af04      	add	r7, sp, #16
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4603      	mov	r3, r0
 8008bdc:	70fb      	strb	r3, [r7, #3]
 8008bde:	460b      	mov	r3, r1
 8008be0:	70bb      	strb	r3, [r7, #2]
 8008be2:	4613      	mov	r3, r2
 8008be4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008be6:	7878      	ldrb	r0, [r7, #1]
 8008be8:	78ba      	ldrb	r2, [r7, #2]
 8008bea:	78f9      	ldrb	r1, [r7, #3]
 8008bec:	8b3b      	ldrh	r3, [r7, #24]
 8008bee:	9302      	str	r3, [sp, #8]
 8008bf0:	7d3b      	ldrb	r3, [r7, #20]
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	7c3b      	ldrb	r3, [r7, #16]
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fa51 	bl	80090a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b082      	sub	sp, #8
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	460b      	mov	r3, r1
 8008c14:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008c16:	78fb      	ldrb	r3, [r7, #3]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa70 	bl	8009100 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	460b      	mov	r3, r1
 8008c34:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f836 	bl	8008ca8 <USBH_GetFreePipe>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008c40:	89fb      	ldrh	r3, [r7, #14]
 8008c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d00a      	beq.n	8008c60 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	89fb      	ldrh	r3, [r7, #14]
 8008c4e:	f003 030f 	and.w	r3, r3, #15
 8008c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	33e0      	adds	r3, #224	; 0xe0
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	440b      	add	r3, r1
 8008c5e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c60:	89fb      	ldrh	r3, [r7, #14]
 8008c62:	b2db      	uxtb	r3, r3
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008c78:	78fb      	ldrb	r3, [r7, #3]
 8008c7a:	2b0a      	cmp	r3, #10
 8008c7c:	d80d      	bhi.n	8008c9a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c7e:	78fb      	ldrb	r3, [r7, #3]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	33e0      	adds	r3, #224	; 0xe0
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	78fb      	ldrb	r3, [r7, #3]
 8008c8c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c90:	6879      	ldr	r1, [r7, #4]
 8008c92:	33e0      	adds	r3, #224	; 0xe0
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	440b      	add	r3, r1
 8008c98:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73fb      	strb	r3, [r7, #15]
 8008cb8:	e00f      	b.n	8008cda <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	33e0      	adds	r3, #224	; 0xe0
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d102      	bne.n	8008cd4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	e007      	b.n	8008ce4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	73fb      	strb	r3, [r7, #15]
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	2b0a      	cmp	r3, #10
 8008cde:	d9ec      	bls.n	8008cba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	490e      	ldr	r1, [pc, #56]	; (8008d30 <MX_USB_HOST_Init+0x40>)
 8008cf8:	480e      	ldr	r0, [pc, #56]	; (8008d34 <MX_USB_HOST_Init+0x44>)
 8008cfa:	f7fe fc9f 	bl	800763c <USBH_Init>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008d04:	f7f7 feca 	bl	8000a9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008d08:	490b      	ldr	r1, [pc, #44]	; (8008d38 <MX_USB_HOST_Init+0x48>)
 8008d0a:	480a      	ldr	r0, [pc, #40]	; (8008d34 <MX_USB_HOST_Init+0x44>)
 8008d0c:	f7fe fd24 	bl	8007758 <USBH_RegisterClass>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008d16:	f7f7 fec1 	bl	8000a9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008d1a:	4806      	ldr	r0, [pc, #24]	; (8008d34 <MX_USB_HOST_Init+0x44>)
 8008d1c:	f7fe fda8 	bl	8007870 <USBH_Start>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008d26:	f7f7 feb9 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008d2a:	bf00      	nop
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	08008d51 	.word	0x08008d51
 8008d34:	20000274 	.word	0x20000274
 8008d38:	2000001c 	.word	0x2000001c

08008d3c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d40:	4802      	ldr	r0, [pc, #8]	; (8008d4c <MX_USB_HOST_Process+0x10>)
 8008d42:	f7fe fda5 	bl	8007890 <USBH_Process>
}
 8008d46:	bf00      	nop
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000274 	.word	0x20000274

08008d50 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d5c:	78fb      	ldrb	r3, [r7, #3]
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d819      	bhi.n	8008d98 <USBH_UserProcess+0x48>
 8008d64:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <USBH_UserProcess+0x1c>)
 8008d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6a:	bf00      	nop
 8008d6c:	08008d99 	.word	0x08008d99
 8008d70:	08008d89 	.word	0x08008d89
 8008d74:	08008d99 	.word	0x08008d99
 8008d78:	08008d91 	.word	0x08008d91
 8008d7c:	08008d81 	.word	0x08008d81
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d80:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <USBH_UserProcess+0x58>)
 8008d82:	2203      	movs	r2, #3
 8008d84:	701a      	strb	r2, [r3, #0]
  break;
 8008d86:	e008      	b.n	8008d9a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d88:	4b07      	ldr	r3, [pc, #28]	; (8008da8 <USBH_UserProcess+0x58>)
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	701a      	strb	r2, [r3, #0]
  break;
 8008d8e:	e004      	b.n	8008d9a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d90:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <USBH_UserProcess+0x58>)
 8008d92:	2201      	movs	r2, #1
 8008d94:	701a      	strb	r2, [r3, #0]
  break;
 8008d96:	e000      	b.n	8008d9a <USBH_UserProcess+0x4a>

  default:
  break;
 8008d98:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	200000c4 	.word	0x200000c4

08008dac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08a      	sub	sp, #40	; 0x28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008db4:	f107 0314 	add.w	r3, r7, #20
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	605a      	str	r2, [r3, #4]
 8008dbe:	609a      	str	r2, [r3, #8]
 8008dc0:	60da      	str	r2, [r3, #12]
 8008dc2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dcc:	d147      	bne.n	8008e5e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dce:	2300      	movs	r3, #0
 8008dd0:	613b      	str	r3, [r7, #16]
 8008dd2:	4b25      	ldr	r3, [pc, #148]	; (8008e68 <HAL_HCD_MspInit+0xbc>)
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	4a24      	ldr	r2, [pc, #144]	; (8008e68 <HAL_HCD_MspInit+0xbc>)
 8008dd8:	f043 0301 	orr.w	r3, r3, #1
 8008ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8008dde:	4b22      	ldr	r3, [pc, #136]	; (8008e68 <HAL_HCD_MspInit+0xbc>)
 8008de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	613b      	str	r3, [r7, #16]
 8008de8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008df8:	f107 0314 	add.w	r3, r7, #20
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	481b      	ldr	r0, [pc, #108]	; (8008e6c <HAL_HCD_MspInit+0xc0>)
 8008e00:	f7f8 fe7c 	bl	8001afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008e04:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e12:	2300      	movs	r3, #0
 8008e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e16:	230a      	movs	r3, #10
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e1a:	f107 0314 	add.w	r3, r7, #20
 8008e1e:	4619      	mov	r1, r3
 8008e20:	4812      	ldr	r0, [pc, #72]	; (8008e6c <HAL_HCD_MspInit+0xc0>)
 8008e22:	f7f8 fe6b 	bl	8001afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e26:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <HAL_HCD_MspInit+0xbc>)
 8008e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e2a:	4a0f      	ldr	r2, [pc, #60]	; (8008e68 <HAL_HCD_MspInit+0xbc>)
 8008e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e30:	6353      	str	r3, [r2, #52]	; 0x34
 8008e32:	2300      	movs	r3, #0
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <HAL_HCD_MspInit+0xbc>)
 8008e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e3a:	4a0b      	ldr	r2, [pc, #44]	; (8008e68 <HAL_HCD_MspInit+0xbc>)
 8008e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e40:	6453      	str	r3, [r2, #68]	; 0x44
 8008e42:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <HAL_HCD_MspInit+0xbc>)
 8008e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e4e:	2200      	movs	r2, #0
 8008e50:	2100      	movs	r1, #0
 8008e52:	2043      	movs	r0, #67	; 0x43
 8008e54:	f7f8 fa8b 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e58:	2043      	movs	r0, #67	; 0x43
 8008e5a:	f7f8 faa4 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e5e:	bf00      	nop
 8008e60:	3728      	adds	r7, #40	; 0x28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	40023800 	.word	0x40023800
 8008e6c:	40020000 	.word	0x40020000

08008e70 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff f8d9 	bl	8008036 <USBH_LL_IncTimer>
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff f911 	bl	80080c2 <USBH_LL_Connect>
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff f91a 	bl	80080f0 <USBH_LL_Disconnect>
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff f8cb 	bl	800808a <USBH_LL_PortEnabled>
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff f8cb 	bl	80080a6 <USBH_LL_PortDisabled>
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d12a      	bne.n	8008f80 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008f2a:	4a18      	ldr	r2, [pc, #96]	; (8008f8c <USBH_LL_Init+0x74>)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a15      	ldr	r2, [pc, #84]	; (8008f8c <USBH_LL_Init+0x74>)
 8008f36:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f3a:	4b14      	ldr	r3, [pc, #80]	; (8008f8c <USBH_LL_Init+0x74>)
 8008f3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f40:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008f42:	4b12      	ldr	r3, [pc, #72]	; (8008f8c <USBH_LL_Init+0x74>)
 8008f44:	2208      	movs	r2, #8
 8008f46:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008f48:	4b10      	ldr	r3, [pc, #64]	; (8008f8c <USBH_LL_Init+0x74>)
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f4e:	4b0f      	ldr	r3, [pc, #60]	; (8008f8c <USBH_LL_Init+0x74>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f54:	4b0d      	ldr	r3, [pc, #52]	; (8008f8c <USBH_LL_Init+0x74>)
 8008f56:	2202      	movs	r2, #2
 8008f58:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <USBH_LL_Init+0x74>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f60:	480a      	ldr	r0, [pc, #40]	; (8008f8c <USBH_LL_Init+0x74>)
 8008f62:	f7f8 ff99 	bl	8001e98 <HAL_HCD_Init>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f6c:	f7f7 fd96 	bl	8000a9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f70:	4806      	ldr	r0, [pc, #24]	; (8008f8c <USBH_LL_Init+0x74>)
 8008f72:	f7f9 fb9d 	bl	80026b0 <HAL_HCD_GetCurrentFrame>
 8008f76:	4603      	mov	r3, r0
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff f84c 	bl	8008018 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	2000064c 	.word	0x2000064c

08008f90 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7f9 fb0a 	bl	80025c0 <HAL_HCD_Start>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 f95c 	bl	8009270 <USBH_Get_USB_Status>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7f9 fb12 	bl	8002606 <HAL_HCD_Stop>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 f941 	bl	8009270 <USBH_Get_USB_Status>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009004:	2301      	movs	r3, #1
 8009006:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800900e:	4618      	mov	r0, r3
 8009010:	f7f9 fb5c 	bl	80026cc <HAL_HCD_GetCurrentSpeed>
 8009014:	4603      	mov	r3, r0
 8009016:	2b01      	cmp	r3, #1
 8009018:	d007      	beq.n	800902a <USBH_LL_GetSpeed+0x2e>
 800901a:	2b01      	cmp	r3, #1
 800901c:	d302      	bcc.n	8009024 <USBH_LL_GetSpeed+0x28>
 800901e:	2b02      	cmp	r3, #2
 8009020:	d006      	beq.n	8009030 <USBH_LL_GetSpeed+0x34>
 8009022:	e008      	b.n	8009036 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009024:	2300      	movs	r3, #0
 8009026:	73fb      	strb	r3, [r7, #15]
    break;
 8009028:	e008      	b.n	800903c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800902a:	2301      	movs	r3, #1
 800902c:	73fb      	strb	r3, [r7, #15]
    break;
 800902e:	e005      	b.n	800903c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009030:	2302      	movs	r3, #2
 8009032:	73fb      	strb	r3, [r7, #15]
    break;
 8009034:	e002      	b.n	800903c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009036:	2301      	movs	r3, #1
 8009038:	73fb      	strb	r3, [r7, #15]
    break;
 800903a:	bf00      	nop
  }
  return  speed;
 800903c:	7bfb      	ldrb	r3, [r7, #15]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800905c:	4618      	mov	r0, r3
 800905e:	f7f9 faef 	bl	8002640 <HAL_HCD_ResetPort>
 8009062:	4603      	mov	r3, r0
 8009064:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	4618      	mov	r0, r3
 800906a:	f000 f901 	bl	8009270 <USBH_Get_USB_Status>
 800906e:	4603      	mov	r3, r0
 8009070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009072:	7bbb      	ldrb	r3, [r7, #14]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	4611      	mov	r1, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f7f9 faf7 	bl	8002686 <HAL_HCD_HC_GetXferCount>
 8009098:	4603      	mov	r3, r0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80090a2:	b590      	push	{r4, r7, lr}
 80090a4:	b089      	sub	sp, #36	; 0x24
 80090a6:	af04      	add	r7, sp, #16
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	4608      	mov	r0, r1
 80090ac:	4611      	mov	r1, r2
 80090ae:	461a      	mov	r2, r3
 80090b0:	4603      	mov	r3, r0
 80090b2:	70fb      	strb	r3, [r7, #3]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70bb      	strb	r3, [r7, #2]
 80090b8:	4613      	mov	r3, r2
 80090ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80090ca:	787c      	ldrb	r4, [r7, #1]
 80090cc:	78ba      	ldrb	r2, [r7, #2]
 80090ce:	78f9      	ldrb	r1, [r7, #3]
 80090d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80090d2:	9302      	str	r3, [sp, #8]
 80090d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	4623      	mov	r3, r4
 80090e2:	f7f8 ff3b 	bl	8001f5c <HAL_HCD_HC_Init>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f8bf 	bl	8009270 <USBH_Get_USB_Status>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd90      	pop	{r4, r7, pc}

08009100 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800911a:	78fa      	ldrb	r2, [r7, #3]
 800911c:	4611      	mov	r1, r2
 800911e:	4618      	mov	r0, r3
 8009120:	f7f8 ffb4 	bl	800208c <HAL_HCD_HC_Halt>
 8009124:	4603      	mov	r3, r0
 8009126:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	4618      	mov	r0, r3
 800912c:	f000 f8a0 	bl	8009270 <USBH_Get_USB_Status>
 8009130:	4603      	mov	r3, r0
 8009132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009134:	7bbb      	ldrb	r3, [r7, #14]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800913e:	b590      	push	{r4, r7, lr}
 8009140:	b089      	sub	sp, #36	; 0x24
 8009142:	af04      	add	r7, sp, #16
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	4608      	mov	r0, r1
 8009148:	4611      	mov	r1, r2
 800914a:	461a      	mov	r2, r3
 800914c:	4603      	mov	r3, r0
 800914e:	70fb      	strb	r3, [r7, #3]
 8009150:	460b      	mov	r3, r1
 8009152:	70bb      	strb	r3, [r7, #2]
 8009154:	4613      	mov	r3, r2
 8009156:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009166:	787c      	ldrb	r4, [r7, #1]
 8009168:	78ba      	ldrb	r2, [r7, #2]
 800916a:	78f9      	ldrb	r1, [r7, #3]
 800916c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009170:	9303      	str	r3, [sp, #12]
 8009172:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009174:	9302      	str	r3, [sp, #8]
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	9301      	str	r3, [sp, #4]
 800917a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	4623      	mov	r3, r4
 8009182:	f7f8 ffa7 	bl	80020d4 <HAL_HCD_HC_SubmitRequest>
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f86f 	bl	8009270 <USBH_Get_USB_Status>
 8009192:	4603      	mov	r3, r0
 8009194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009196:	7bbb      	ldrb	r3, [r7, #14]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	bd90      	pop	{r4, r7, pc}

080091a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091b2:	78fa      	ldrb	r2, [r7, #3]
 80091b4:	4611      	mov	r1, r2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7f9 fa50 	bl	800265c <HAL_HCD_HC_GetURBState>
 80091bc:	4603      	mov	r3, r0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d103      	bne.n	80091e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f872 	bl	80092c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80091e4:	20c8      	movs	r0, #200	; 0xc8
 80091e6:	f7f7 ffc5 	bl	8001174 <HAL_Delay>
  return USBH_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
 8009200:	4613      	mov	r3, r2
 8009202:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800920a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800920c:	78fa      	ldrb	r2, [r7, #3]
 800920e:	68f9      	ldr	r1, [r7, #12]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	440b      	add	r3, r1
 800921a:	333b      	adds	r3, #59	; 0x3b
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00a      	beq.n	8009238 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009222:	78fa      	ldrb	r2, [r7, #3]
 8009224:	68f9      	ldr	r1, [r7, #12]
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	00db      	lsls	r3, r3, #3
 800922e:	440b      	add	r3, r1
 8009230:	3350      	adds	r3, #80	; 0x50
 8009232:	78ba      	ldrb	r2, [r7, #2]
 8009234:	701a      	strb	r2, [r3, #0]
 8009236:	e009      	b.n	800924c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009238:	78fa      	ldrb	r2, [r7, #3]
 800923a:	68f9      	ldr	r1, [r7, #12]
 800923c:	4613      	mov	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4413      	add	r3, r2
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	440b      	add	r3, r1
 8009246:	3351      	adds	r3, #81	; 0x51
 8009248:	78ba      	ldrb	r2, [r7, #2]
 800924a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7f7 ff86 	bl	8001174 <HAL_Delay>
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	2b03      	cmp	r3, #3
 8009282:	d817      	bhi.n	80092b4 <USBH_Get_USB_Status+0x44>
 8009284:	a201      	add	r2, pc, #4	; (adr r2, 800928c <USBH_Get_USB_Status+0x1c>)
 8009286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928a:	bf00      	nop
 800928c:	0800929d 	.word	0x0800929d
 8009290:	080092a3 	.word	0x080092a3
 8009294:	080092a9 	.word	0x080092a9
 8009298:	080092af 	.word	0x080092af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	73fb      	strb	r3, [r7, #15]
    break;
 80092a0:	e00b      	b.n	80092ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80092a2:	2302      	movs	r3, #2
 80092a4:	73fb      	strb	r3, [r7, #15]
    break;
 80092a6:	e008      	b.n	80092ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80092a8:	2301      	movs	r3, #1
 80092aa:	73fb      	strb	r3, [r7, #15]
    break;
 80092ac:	e005      	b.n	80092ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80092ae:	2302      	movs	r3, #2
 80092b0:	73fb      	strb	r3, [r7, #15]
    break;
 80092b2:	e002      	b.n	80092ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80092b4:	2302      	movs	r3, #2
 80092b6:	73fb      	strb	r3, [r7, #15]
    break;
 80092b8:	bf00      	nop
  }
  return usb_status;
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d102      	bne.n	80092e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80092dc:	2301      	movs	r3, #1
 80092de:	73fb      	strb	r3, [r7, #15]
 80092e0:	e001      	b.n	80092e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	461a      	mov	r2, r3
 80092ea:	2101      	movs	r1, #1
 80092ec:	4803      	ldr	r0, [pc, #12]	; (80092fc <MX_DriverVbusFS+0x34>)
 80092ee:	f7f8 fd9f 	bl	8001e30 <HAL_GPIO_WritePin>
}
 80092f2:	bf00      	nop
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	40020800 	.word	0x40020800

08009300 <__errno>:
 8009300:	4b01      	ldr	r3, [pc, #4]	; (8009308 <__errno+0x8>)
 8009302:	6818      	ldr	r0, [r3, #0]
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	2000003c 	.word	0x2000003c

0800930c <__libc_init_array>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	4e0d      	ldr	r6, [pc, #52]	; (8009344 <__libc_init_array+0x38>)
 8009310:	4c0d      	ldr	r4, [pc, #52]	; (8009348 <__libc_init_array+0x3c>)
 8009312:	1ba4      	subs	r4, r4, r6
 8009314:	10a4      	asrs	r4, r4, #2
 8009316:	2500      	movs	r5, #0
 8009318:	42a5      	cmp	r5, r4
 800931a:	d109      	bne.n	8009330 <__libc_init_array+0x24>
 800931c:	4e0b      	ldr	r6, [pc, #44]	; (800934c <__libc_init_array+0x40>)
 800931e:	4c0c      	ldr	r4, [pc, #48]	; (8009350 <__libc_init_array+0x44>)
 8009320:	f000 ff78 	bl	800a214 <_init>
 8009324:	1ba4      	subs	r4, r4, r6
 8009326:	10a4      	asrs	r4, r4, #2
 8009328:	2500      	movs	r5, #0
 800932a:	42a5      	cmp	r5, r4
 800932c:	d105      	bne.n	800933a <__libc_init_array+0x2e>
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009334:	4798      	blx	r3
 8009336:	3501      	adds	r5, #1
 8009338:	e7ee      	b.n	8009318 <__libc_init_array+0xc>
 800933a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800933e:	4798      	blx	r3
 8009340:	3501      	adds	r5, #1
 8009342:	e7f2      	b.n	800932a <__libc_init_array+0x1e>
 8009344:	0800a2fc 	.word	0x0800a2fc
 8009348:	0800a2fc 	.word	0x0800a2fc
 800934c:	0800a2fc 	.word	0x0800a2fc
 8009350:	0800a300 	.word	0x0800a300

08009354 <malloc>:
 8009354:	4b02      	ldr	r3, [pc, #8]	; (8009360 <malloc+0xc>)
 8009356:	4601      	mov	r1, r0
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	f000 b861 	b.w	8009420 <_malloc_r>
 800935e:	bf00      	nop
 8009360:	2000003c 	.word	0x2000003c

08009364 <free>:
 8009364:	4b02      	ldr	r3, [pc, #8]	; (8009370 <free+0xc>)
 8009366:	4601      	mov	r1, r0
 8009368:	6818      	ldr	r0, [r3, #0]
 800936a:	f000 b80b 	b.w	8009384 <_free_r>
 800936e:	bf00      	nop
 8009370:	2000003c 	.word	0x2000003c

08009374 <memset>:
 8009374:	4402      	add	r2, r0
 8009376:	4603      	mov	r3, r0
 8009378:	4293      	cmp	r3, r2
 800937a:	d100      	bne.n	800937e <memset+0xa>
 800937c:	4770      	bx	lr
 800937e:	f803 1b01 	strb.w	r1, [r3], #1
 8009382:	e7f9      	b.n	8009378 <memset+0x4>

08009384 <_free_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4605      	mov	r5, r0
 8009388:	2900      	cmp	r1, #0
 800938a:	d045      	beq.n	8009418 <_free_r+0x94>
 800938c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009390:	1f0c      	subs	r4, r1, #4
 8009392:	2b00      	cmp	r3, #0
 8009394:	bfb8      	it	lt
 8009396:	18e4      	addlt	r4, r4, r3
 8009398:	f000 fbc6 	bl	8009b28 <__malloc_lock>
 800939c:	4a1f      	ldr	r2, [pc, #124]	; (800941c <_free_r+0x98>)
 800939e:	6813      	ldr	r3, [r2, #0]
 80093a0:	4610      	mov	r0, r2
 80093a2:	b933      	cbnz	r3, 80093b2 <_free_r+0x2e>
 80093a4:	6063      	str	r3, [r4, #4]
 80093a6:	6014      	str	r4, [r2, #0]
 80093a8:	4628      	mov	r0, r5
 80093aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ae:	f000 bbbc 	b.w	8009b2a <__malloc_unlock>
 80093b2:	42a3      	cmp	r3, r4
 80093b4:	d90c      	bls.n	80093d0 <_free_r+0x4c>
 80093b6:	6821      	ldr	r1, [r4, #0]
 80093b8:	1862      	adds	r2, r4, r1
 80093ba:	4293      	cmp	r3, r2
 80093bc:	bf04      	itt	eq
 80093be:	681a      	ldreq	r2, [r3, #0]
 80093c0:	685b      	ldreq	r3, [r3, #4]
 80093c2:	6063      	str	r3, [r4, #4]
 80093c4:	bf04      	itt	eq
 80093c6:	1852      	addeq	r2, r2, r1
 80093c8:	6022      	streq	r2, [r4, #0]
 80093ca:	6004      	str	r4, [r0, #0]
 80093cc:	e7ec      	b.n	80093a8 <_free_r+0x24>
 80093ce:	4613      	mov	r3, r2
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	b10a      	cbz	r2, 80093d8 <_free_r+0x54>
 80093d4:	42a2      	cmp	r2, r4
 80093d6:	d9fa      	bls.n	80093ce <_free_r+0x4a>
 80093d8:	6819      	ldr	r1, [r3, #0]
 80093da:	1858      	adds	r0, r3, r1
 80093dc:	42a0      	cmp	r0, r4
 80093de:	d10b      	bne.n	80093f8 <_free_r+0x74>
 80093e0:	6820      	ldr	r0, [r4, #0]
 80093e2:	4401      	add	r1, r0
 80093e4:	1858      	adds	r0, r3, r1
 80093e6:	4282      	cmp	r2, r0
 80093e8:	6019      	str	r1, [r3, #0]
 80093ea:	d1dd      	bne.n	80093a8 <_free_r+0x24>
 80093ec:	6810      	ldr	r0, [r2, #0]
 80093ee:	6852      	ldr	r2, [r2, #4]
 80093f0:	605a      	str	r2, [r3, #4]
 80093f2:	4401      	add	r1, r0
 80093f4:	6019      	str	r1, [r3, #0]
 80093f6:	e7d7      	b.n	80093a8 <_free_r+0x24>
 80093f8:	d902      	bls.n	8009400 <_free_r+0x7c>
 80093fa:	230c      	movs	r3, #12
 80093fc:	602b      	str	r3, [r5, #0]
 80093fe:	e7d3      	b.n	80093a8 <_free_r+0x24>
 8009400:	6820      	ldr	r0, [r4, #0]
 8009402:	1821      	adds	r1, r4, r0
 8009404:	428a      	cmp	r2, r1
 8009406:	bf04      	itt	eq
 8009408:	6811      	ldreq	r1, [r2, #0]
 800940a:	6852      	ldreq	r2, [r2, #4]
 800940c:	6062      	str	r2, [r4, #4]
 800940e:	bf04      	itt	eq
 8009410:	1809      	addeq	r1, r1, r0
 8009412:	6021      	streq	r1, [r4, #0]
 8009414:	605c      	str	r4, [r3, #4]
 8009416:	e7c7      	b.n	80093a8 <_free_r+0x24>
 8009418:	bd38      	pop	{r3, r4, r5, pc}
 800941a:	bf00      	nop
 800941c:	200000c8 	.word	0x200000c8

08009420 <_malloc_r>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	1ccd      	adds	r5, r1, #3
 8009424:	f025 0503 	bic.w	r5, r5, #3
 8009428:	3508      	adds	r5, #8
 800942a:	2d0c      	cmp	r5, #12
 800942c:	bf38      	it	cc
 800942e:	250c      	movcc	r5, #12
 8009430:	2d00      	cmp	r5, #0
 8009432:	4606      	mov	r6, r0
 8009434:	db01      	blt.n	800943a <_malloc_r+0x1a>
 8009436:	42a9      	cmp	r1, r5
 8009438:	d903      	bls.n	8009442 <_malloc_r+0x22>
 800943a:	230c      	movs	r3, #12
 800943c:	6033      	str	r3, [r6, #0]
 800943e:	2000      	movs	r0, #0
 8009440:	bd70      	pop	{r4, r5, r6, pc}
 8009442:	f000 fb71 	bl	8009b28 <__malloc_lock>
 8009446:	4a21      	ldr	r2, [pc, #132]	; (80094cc <_malloc_r+0xac>)
 8009448:	6814      	ldr	r4, [r2, #0]
 800944a:	4621      	mov	r1, r4
 800944c:	b991      	cbnz	r1, 8009474 <_malloc_r+0x54>
 800944e:	4c20      	ldr	r4, [pc, #128]	; (80094d0 <_malloc_r+0xb0>)
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	b91b      	cbnz	r3, 800945c <_malloc_r+0x3c>
 8009454:	4630      	mov	r0, r6
 8009456:	f000 f8b9 	bl	80095cc <_sbrk_r>
 800945a:	6020      	str	r0, [r4, #0]
 800945c:	4629      	mov	r1, r5
 800945e:	4630      	mov	r0, r6
 8009460:	f000 f8b4 	bl	80095cc <_sbrk_r>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d124      	bne.n	80094b2 <_malloc_r+0x92>
 8009468:	230c      	movs	r3, #12
 800946a:	6033      	str	r3, [r6, #0]
 800946c:	4630      	mov	r0, r6
 800946e:	f000 fb5c 	bl	8009b2a <__malloc_unlock>
 8009472:	e7e4      	b.n	800943e <_malloc_r+0x1e>
 8009474:	680b      	ldr	r3, [r1, #0]
 8009476:	1b5b      	subs	r3, r3, r5
 8009478:	d418      	bmi.n	80094ac <_malloc_r+0x8c>
 800947a:	2b0b      	cmp	r3, #11
 800947c:	d90f      	bls.n	800949e <_malloc_r+0x7e>
 800947e:	600b      	str	r3, [r1, #0]
 8009480:	50cd      	str	r5, [r1, r3]
 8009482:	18cc      	adds	r4, r1, r3
 8009484:	4630      	mov	r0, r6
 8009486:	f000 fb50 	bl	8009b2a <__malloc_unlock>
 800948a:	f104 000b 	add.w	r0, r4, #11
 800948e:	1d23      	adds	r3, r4, #4
 8009490:	f020 0007 	bic.w	r0, r0, #7
 8009494:	1ac3      	subs	r3, r0, r3
 8009496:	d0d3      	beq.n	8009440 <_malloc_r+0x20>
 8009498:	425a      	negs	r2, r3
 800949a:	50e2      	str	r2, [r4, r3]
 800949c:	e7d0      	b.n	8009440 <_malloc_r+0x20>
 800949e:	428c      	cmp	r4, r1
 80094a0:	684b      	ldr	r3, [r1, #4]
 80094a2:	bf16      	itet	ne
 80094a4:	6063      	strne	r3, [r4, #4]
 80094a6:	6013      	streq	r3, [r2, #0]
 80094a8:	460c      	movne	r4, r1
 80094aa:	e7eb      	b.n	8009484 <_malloc_r+0x64>
 80094ac:	460c      	mov	r4, r1
 80094ae:	6849      	ldr	r1, [r1, #4]
 80094b0:	e7cc      	b.n	800944c <_malloc_r+0x2c>
 80094b2:	1cc4      	adds	r4, r0, #3
 80094b4:	f024 0403 	bic.w	r4, r4, #3
 80094b8:	42a0      	cmp	r0, r4
 80094ba:	d005      	beq.n	80094c8 <_malloc_r+0xa8>
 80094bc:	1a21      	subs	r1, r4, r0
 80094be:	4630      	mov	r0, r6
 80094c0:	f000 f884 	bl	80095cc <_sbrk_r>
 80094c4:	3001      	adds	r0, #1
 80094c6:	d0cf      	beq.n	8009468 <_malloc_r+0x48>
 80094c8:	6025      	str	r5, [r4, #0]
 80094ca:	e7db      	b.n	8009484 <_malloc_r+0x64>
 80094cc:	200000c8 	.word	0x200000c8
 80094d0:	200000cc 	.word	0x200000cc

080094d4 <iprintf>:
 80094d4:	b40f      	push	{r0, r1, r2, r3}
 80094d6:	4b0a      	ldr	r3, [pc, #40]	; (8009500 <iprintf+0x2c>)
 80094d8:	b513      	push	{r0, r1, r4, lr}
 80094da:	681c      	ldr	r4, [r3, #0]
 80094dc:	b124      	cbz	r4, 80094e8 <iprintf+0x14>
 80094de:	69a3      	ldr	r3, [r4, #24]
 80094e0:	b913      	cbnz	r3, 80094e8 <iprintf+0x14>
 80094e2:	4620      	mov	r0, r4
 80094e4:	f000 fa32 	bl	800994c <__sinit>
 80094e8:	ab05      	add	r3, sp, #20
 80094ea:	9a04      	ldr	r2, [sp, #16]
 80094ec:	68a1      	ldr	r1, [r4, #8]
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	4620      	mov	r0, r4
 80094f2:	f000 fb45 	bl	8009b80 <_vfiprintf_r>
 80094f6:	b002      	add	sp, #8
 80094f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094fc:	b004      	add	sp, #16
 80094fe:	4770      	bx	lr
 8009500:	2000003c 	.word	0x2000003c

08009504 <_puts_r>:
 8009504:	b570      	push	{r4, r5, r6, lr}
 8009506:	460e      	mov	r6, r1
 8009508:	4605      	mov	r5, r0
 800950a:	b118      	cbz	r0, 8009514 <_puts_r+0x10>
 800950c:	6983      	ldr	r3, [r0, #24]
 800950e:	b90b      	cbnz	r3, 8009514 <_puts_r+0x10>
 8009510:	f000 fa1c 	bl	800994c <__sinit>
 8009514:	69ab      	ldr	r3, [r5, #24]
 8009516:	68ac      	ldr	r4, [r5, #8]
 8009518:	b913      	cbnz	r3, 8009520 <_puts_r+0x1c>
 800951a:	4628      	mov	r0, r5
 800951c:	f000 fa16 	bl	800994c <__sinit>
 8009520:	4b23      	ldr	r3, [pc, #140]	; (80095b0 <_puts_r+0xac>)
 8009522:	429c      	cmp	r4, r3
 8009524:	d117      	bne.n	8009556 <_puts_r+0x52>
 8009526:	686c      	ldr	r4, [r5, #4]
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	071b      	lsls	r3, r3, #28
 800952c:	d51d      	bpl.n	800956a <_puts_r+0x66>
 800952e:	6923      	ldr	r3, [r4, #16]
 8009530:	b1db      	cbz	r3, 800956a <_puts_r+0x66>
 8009532:	3e01      	subs	r6, #1
 8009534:	68a3      	ldr	r3, [r4, #8]
 8009536:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800953a:	3b01      	subs	r3, #1
 800953c:	60a3      	str	r3, [r4, #8]
 800953e:	b9e9      	cbnz	r1, 800957c <_puts_r+0x78>
 8009540:	2b00      	cmp	r3, #0
 8009542:	da2e      	bge.n	80095a2 <_puts_r+0x9e>
 8009544:	4622      	mov	r2, r4
 8009546:	210a      	movs	r1, #10
 8009548:	4628      	mov	r0, r5
 800954a:	f000 f84f 	bl	80095ec <__swbuf_r>
 800954e:	3001      	adds	r0, #1
 8009550:	d011      	beq.n	8009576 <_puts_r+0x72>
 8009552:	200a      	movs	r0, #10
 8009554:	e011      	b.n	800957a <_puts_r+0x76>
 8009556:	4b17      	ldr	r3, [pc, #92]	; (80095b4 <_puts_r+0xb0>)
 8009558:	429c      	cmp	r4, r3
 800955a:	d101      	bne.n	8009560 <_puts_r+0x5c>
 800955c:	68ac      	ldr	r4, [r5, #8]
 800955e:	e7e3      	b.n	8009528 <_puts_r+0x24>
 8009560:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <_puts_r+0xb4>)
 8009562:	429c      	cmp	r4, r3
 8009564:	bf08      	it	eq
 8009566:	68ec      	ldreq	r4, [r5, #12]
 8009568:	e7de      	b.n	8009528 <_puts_r+0x24>
 800956a:	4621      	mov	r1, r4
 800956c:	4628      	mov	r0, r5
 800956e:	f000 f88f 	bl	8009690 <__swsetup_r>
 8009572:	2800      	cmp	r0, #0
 8009574:	d0dd      	beq.n	8009532 <_puts_r+0x2e>
 8009576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	2b00      	cmp	r3, #0
 800957e:	da04      	bge.n	800958a <_puts_r+0x86>
 8009580:	69a2      	ldr	r2, [r4, #24]
 8009582:	429a      	cmp	r2, r3
 8009584:	dc06      	bgt.n	8009594 <_puts_r+0x90>
 8009586:	290a      	cmp	r1, #10
 8009588:	d004      	beq.n	8009594 <_puts_r+0x90>
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	1c5a      	adds	r2, r3, #1
 800958e:	6022      	str	r2, [r4, #0]
 8009590:	7019      	strb	r1, [r3, #0]
 8009592:	e7cf      	b.n	8009534 <_puts_r+0x30>
 8009594:	4622      	mov	r2, r4
 8009596:	4628      	mov	r0, r5
 8009598:	f000 f828 	bl	80095ec <__swbuf_r>
 800959c:	3001      	adds	r0, #1
 800959e:	d1c9      	bne.n	8009534 <_puts_r+0x30>
 80095a0:	e7e9      	b.n	8009576 <_puts_r+0x72>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	200a      	movs	r0, #10
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	6022      	str	r2, [r4, #0]
 80095aa:	7018      	strb	r0, [r3, #0]
 80095ac:	e7e5      	b.n	800957a <_puts_r+0x76>
 80095ae:	bf00      	nop
 80095b0:	0800a280 	.word	0x0800a280
 80095b4:	0800a2a0 	.word	0x0800a2a0
 80095b8:	0800a260 	.word	0x0800a260

080095bc <puts>:
 80095bc:	4b02      	ldr	r3, [pc, #8]	; (80095c8 <puts+0xc>)
 80095be:	4601      	mov	r1, r0
 80095c0:	6818      	ldr	r0, [r3, #0]
 80095c2:	f7ff bf9f 	b.w	8009504 <_puts_r>
 80095c6:	bf00      	nop
 80095c8:	2000003c 	.word	0x2000003c

080095cc <_sbrk_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4c06      	ldr	r4, [pc, #24]	; (80095e8 <_sbrk_r+0x1c>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4605      	mov	r5, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	f7f7 fce4 	bl	8000fa4 <_sbrk>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_sbrk_r+0x1a>
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_sbrk_r+0x1a>
 80095e4:	602b      	str	r3, [r5, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	20000910 	.word	0x20000910

080095ec <__swbuf_r>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	460e      	mov	r6, r1
 80095f0:	4614      	mov	r4, r2
 80095f2:	4605      	mov	r5, r0
 80095f4:	b118      	cbz	r0, 80095fe <__swbuf_r+0x12>
 80095f6:	6983      	ldr	r3, [r0, #24]
 80095f8:	b90b      	cbnz	r3, 80095fe <__swbuf_r+0x12>
 80095fa:	f000 f9a7 	bl	800994c <__sinit>
 80095fe:	4b21      	ldr	r3, [pc, #132]	; (8009684 <__swbuf_r+0x98>)
 8009600:	429c      	cmp	r4, r3
 8009602:	d12a      	bne.n	800965a <__swbuf_r+0x6e>
 8009604:	686c      	ldr	r4, [r5, #4]
 8009606:	69a3      	ldr	r3, [r4, #24]
 8009608:	60a3      	str	r3, [r4, #8]
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	071a      	lsls	r2, r3, #28
 800960e:	d52e      	bpl.n	800966e <__swbuf_r+0x82>
 8009610:	6923      	ldr	r3, [r4, #16]
 8009612:	b363      	cbz	r3, 800966e <__swbuf_r+0x82>
 8009614:	6923      	ldr	r3, [r4, #16]
 8009616:	6820      	ldr	r0, [r4, #0]
 8009618:	1ac0      	subs	r0, r0, r3
 800961a:	6963      	ldr	r3, [r4, #20]
 800961c:	b2f6      	uxtb	r6, r6
 800961e:	4283      	cmp	r3, r0
 8009620:	4637      	mov	r7, r6
 8009622:	dc04      	bgt.n	800962e <__swbuf_r+0x42>
 8009624:	4621      	mov	r1, r4
 8009626:	4628      	mov	r0, r5
 8009628:	f000 f926 	bl	8009878 <_fflush_r>
 800962c:	bb28      	cbnz	r0, 800967a <__swbuf_r+0x8e>
 800962e:	68a3      	ldr	r3, [r4, #8]
 8009630:	3b01      	subs	r3, #1
 8009632:	60a3      	str	r3, [r4, #8]
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	6022      	str	r2, [r4, #0]
 800963a:	701e      	strb	r6, [r3, #0]
 800963c:	6963      	ldr	r3, [r4, #20]
 800963e:	3001      	adds	r0, #1
 8009640:	4283      	cmp	r3, r0
 8009642:	d004      	beq.n	800964e <__swbuf_r+0x62>
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	07db      	lsls	r3, r3, #31
 8009648:	d519      	bpl.n	800967e <__swbuf_r+0x92>
 800964a:	2e0a      	cmp	r6, #10
 800964c:	d117      	bne.n	800967e <__swbuf_r+0x92>
 800964e:	4621      	mov	r1, r4
 8009650:	4628      	mov	r0, r5
 8009652:	f000 f911 	bl	8009878 <_fflush_r>
 8009656:	b190      	cbz	r0, 800967e <__swbuf_r+0x92>
 8009658:	e00f      	b.n	800967a <__swbuf_r+0x8e>
 800965a:	4b0b      	ldr	r3, [pc, #44]	; (8009688 <__swbuf_r+0x9c>)
 800965c:	429c      	cmp	r4, r3
 800965e:	d101      	bne.n	8009664 <__swbuf_r+0x78>
 8009660:	68ac      	ldr	r4, [r5, #8]
 8009662:	e7d0      	b.n	8009606 <__swbuf_r+0x1a>
 8009664:	4b09      	ldr	r3, [pc, #36]	; (800968c <__swbuf_r+0xa0>)
 8009666:	429c      	cmp	r4, r3
 8009668:	bf08      	it	eq
 800966a:	68ec      	ldreq	r4, [r5, #12]
 800966c:	e7cb      	b.n	8009606 <__swbuf_r+0x1a>
 800966e:	4621      	mov	r1, r4
 8009670:	4628      	mov	r0, r5
 8009672:	f000 f80d 	bl	8009690 <__swsetup_r>
 8009676:	2800      	cmp	r0, #0
 8009678:	d0cc      	beq.n	8009614 <__swbuf_r+0x28>
 800967a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800967e:	4638      	mov	r0, r7
 8009680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009682:	bf00      	nop
 8009684:	0800a280 	.word	0x0800a280
 8009688:	0800a2a0 	.word	0x0800a2a0
 800968c:	0800a260 	.word	0x0800a260

08009690 <__swsetup_r>:
 8009690:	4b32      	ldr	r3, [pc, #200]	; (800975c <__swsetup_r+0xcc>)
 8009692:	b570      	push	{r4, r5, r6, lr}
 8009694:	681d      	ldr	r5, [r3, #0]
 8009696:	4606      	mov	r6, r0
 8009698:	460c      	mov	r4, r1
 800969a:	b125      	cbz	r5, 80096a6 <__swsetup_r+0x16>
 800969c:	69ab      	ldr	r3, [r5, #24]
 800969e:	b913      	cbnz	r3, 80096a6 <__swsetup_r+0x16>
 80096a0:	4628      	mov	r0, r5
 80096a2:	f000 f953 	bl	800994c <__sinit>
 80096a6:	4b2e      	ldr	r3, [pc, #184]	; (8009760 <__swsetup_r+0xd0>)
 80096a8:	429c      	cmp	r4, r3
 80096aa:	d10f      	bne.n	80096cc <__swsetup_r+0x3c>
 80096ac:	686c      	ldr	r4, [r5, #4]
 80096ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	0715      	lsls	r5, r2, #28
 80096b6:	d42c      	bmi.n	8009712 <__swsetup_r+0x82>
 80096b8:	06d0      	lsls	r0, r2, #27
 80096ba:	d411      	bmi.n	80096e0 <__swsetup_r+0x50>
 80096bc:	2209      	movs	r2, #9
 80096be:	6032      	str	r2, [r6, #0]
 80096c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096ca:	e03e      	b.n	800974a <__swsetup_r+0xba>
 80096cc:	4b25      	ldr	r3, [pc, #148]	; (8009764 <__swsetup_r+0xd4>)
 80096ce:	429c      	cmp	r4, r3
 80096d0:	d101      	bne.n	80096d6 <__swsetup_r+0x46>
 80096d2:	68ac      	ldr	r4, [r5, #8]
 80096d4:	e7eb      	b.n	80096ae <__swsetup_r+0x1e>
 80096d6:	4b24      	ldr	r3, [pc, #144]	; (8009768 <__swsetup_r+0xd8>)
 80096d8:	429c      	cmp	r4, r3
 80096da:	bf08      	it	eq
 80096dc:	68ec      	ldreq	r4, [r5, #12]
 80096de:	e7e6      	b.n	80096ae <__swsetup_r+0x1e>
 80096e0:	0751      	lsls	r1, r2, #29
 80096e2:	d512      	bpl.n	800970a <__swsetup_r+0x7a>
 80096e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096e6:	b141      	cbz	r1, 80096fa <__swsetup_r+0x6a>
 80096e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096ec:	4299      	cmp	r1, r3
 80096ee:	d002      	beq.n	80096f6 <__swsetup_r+0x66>
 80096f0:	4630      	mov	r0, r6
 80096f2:	f7ff fe47 	bl	8009384 <_free_r>
 80096f6:	2300      	movs	r3, #0
 80096f8:	6363      	str	r3, [r4, #52]	; 0x34
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009700:	81a3      	strh	r3, [r4, #12]
 8009702:	2300      	movs	r3, #0
 8009704:	6063      	str	r3, [r4, #4]
 8009706:	6923      	ldr	r3, [r4, #16]
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	f043 0308 	orr.w	r3, r3, #8
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	b94b      	cbnz	r3, 800972a <__swsetup_r+0x9a>
 8009716:	89a3      	ldrh	r3, [r4, #12]
 8009718:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800971c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009720:	d003      	beq.n	800972a <__swsetup_r+0x9a>
 8009722:	4621      	mov	r1, r4
 8009724:	4630      	mov	r0, r6
 8009726:	f000 f9bf 	bl	8009aa8 <__smakebuf_r>
 800972a:	89a2      	ldrh	r2, [r4, #12]
 800972c:	f012 0301 	ands.w	r3, r2, #1
 8009730:	d00c      	beq.n	800974c <__swsetup_r+0xbc>
 8009732:	2300      	movs	r3, #0
 8009734:	60a3      	str	r3, [r4, #8]
 8009736:	6963      	ldr	r3, [r4, #20]
 8009738:	425b      	negs	r3, r3
 800973a:	61a3      	str	r3, [r4, #24]
 800973c:	6923      	ldr	r3, [r4, #16]
 800973e:	b953      	cbnz	r3, 8009756 <__swsetup_r+0xc6>
 8009740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009744:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009748:	d1ba      	bne.n	80096c0 <__swsetup_r+0x30>
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	0792      	lsls	r2, r2, #30
 800974e:	bf58      	it	pl
 8009750:	6963      	ldrpl	r3, [r4, #20]
 8009752:	60a3      	str	r3, [r4, #8]
 8009754:	e7f2      	b.n	800973c <__swsetup_r+0xac>
 8009756:	2000      	movs	r0, #0
 8009758:	e7f7      	b.n	800974a <__swsetup_r+0xba>
 800975a:	bf00      	nop
 800975c:	2000003c 	.word	0x2000003c
 8009760:	0800a280 	.word	0x0800a280
 8009764:	0800a2a0 	.word	0x0800a2a0
 8009768:	0800a260 	.word	0x0800a260

0800976c <__sflush_r>:
 800976c:	898a      	ldrh	r2, [r1, #12]
 800976e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009772:	4605      	mov	r5, r0
 8009774:	0710      	lsls	r0, r2, #28
 8009776:	460c      	mov	r4, r1
 8009778:	d458      	bmi.n	800982c <__sflush_r+0xc0>
 800977a:	684b      	ldr	r3, [r1, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	dc05      	bgt.n	800978c <__sflush_r+0x20>
 8009780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009782:	2b00      	cmp	r3, #0
 8009784:	dc02      	bgt.n	800978c <__sflush_r+0x20>
 8009786:	2000      	movs	r0, #0
 8009788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800978c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800978e:	2e00      	cmp	r6, #0
 8009790:	d0f9      	beq.n	8009786 <__sflush_r+0x1a>
 8009792:	2300      	movs	r3, #0
 8009794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009798:	682f      	ldr	r7, [r5, #0]
 800979a:	6a21      	ldr	r1, [r4, #32]
 800979c:	602b      	str	r3, [r5, #0]
 800979e:	d032      	beq.n	8009806 <__sflush_r+0x9a>
 80097a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	075a      	lsls	r2, r3, #29
 80097a6:	d505      	bpl.n	80097b4 <__sflush_r+0x48>
 80097a8:	6863      	ldr	r3, [r4, #4]
 80097aa:	1ac0      	subs	r0, r0, r3
 80097ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097ae:	b10b      	cbz	r3, 80097b4 <__sflush_r+0x48>
 80097b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097b2:	1ac0      	subs	r0, r0, r3
 80097b4:	2300      	movs	r3, #0
 80097b6:	4602      	mov	r2, r0
 80097b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ba:	6a21      	ldr	r1, [r4, #32]
 80097bc:	4628      	mov	r0, r5
 80097be:	47b0      	blx	r6
 80097c0:	1c43      	adds	r3, r0, #1
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	d106      	bne.n	80097d4 <__sflush_r+0x68>
 80097c6:	6829      	ldr	r1, [r5, #0]
 80097c8:	291d      	cmp	r1, #29
 80097ca:	d848      	bhi.n	800985e <__sflush_r+0xf2>
 80097cc:	4a29      	ldr	r2, [pc, #164]	; (8009874 <__sflush_r+0x108>)
 80097ce:	40ca      	lsrs	r2, r1
 80097d0:	07d6      	lsls	r6, r2, #31
 80097d2:	d544      	bpl.n	800985e <__sflush_r+0xf2>
 80097d4:	2200      	movs	r2, #0
 80097d6:	6062      	str	r2, [r4, #4]
 80097d8:	04d9      	lsls	r1, r3, #19
 80097da:	6922      	ldr	r2, [r4, #16]
 80097dc:	6022      	str	r2, [r4, #0]
 80097de:	d504      	bpl.n	80097ea <__sflush_r+0x7e>
 80097e0:	1c42      	adds	r2, r0, #1
 80097e2:	d101      	bne.n	80097e8 <__sflush_r+0x7c>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b903      	cbnz	r3, 80097ea <__sflush_r+0x7e>
 80097e8:	6560      	str	r0, [r4, #84]	; 0x54
 80097ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097ec:	602f      	str	r7, [r5, #0]
 80097ee:	2900      	cmp	r1, #0
 80097f0:	d0c9      	beq.n	8009786 <__sflush_r+0x1a>
 80097f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097f6:	4299      	cmp	r1, r3
 80097f8:	d002      	beq.n	8009800 <__sflush_r+0x94>
 80097fa:	4628      	mov	r0, r5
 80097fc:	f7ff fdc2 	bl	8009384 <_free_r>
 8009800:	2000      	movs	r0, #0
 8009802:	6360      	str	r0, [r4, #52]	; 0x34
 8009804:	e7c0      	b.n	8009788 <__sflush_r+0x1c>
 8009806:	2301      	movs	r3, #1
 8009808:	4628      	mov	r0, r5
 800980a:	47b0      	blx	r6
 800980c:	1c41      	adds	r1, r0, #1
 800980e:	d1c8      	bne.n	80097a2 <__sflush_r+0x36>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d0c5      	beq.n	80097a2 <__sflush_r+0x36>
 8009816:	2b1d      	cmp	r3, #29
 8009818:	d001      	beq.n	800981e <__sflush_r+0xb2>
 800981a:	2b16      	cmp	r3, #22
 800981c:	d101      	bne.n	8009822 <__sflush_r+0xb6>
 800981e:	602f      	str	r7, [r5, #0]
 8009820:	e7b1      	b.n	8009786 <__sflush_r+0x1a>
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009828:	81a3      	strh	r3, [r4, #12]
 800982a:	e7ad      	b.n	8009788 <__sflush_r+0x1c>
 800982c:	690f      	ldr	r7, [r1, #16]
 800982e:	2f00      	cmp	r7, #0
 8009830:	d0a9      	beq.n	8009786 <__sflush_r+0x1a>
 8009832:	0793      	lsls	r3, r2, #30
 8009834:	680e      	ldr	r6, [r1, #0]
 8009836:	bf08      	it	eq
 8009838:	694b      	ldreq	r3, [r1, #20]
 800983a:	600f      	str	r7, [r1, #0]
 800983c:	bf18      	it	ne
 800983e:	2300      	movne	r3, #0
 8009840:	eba6 0807 	sub.w	r8, r6, r7
 8009844:	608b      	str	r3, [r1, #8]
 8009846:	f1b8 0f00 	cmp.w	r8, #0
 800984a:	dd9c      	ble.n	8009786 <__sflush_r+0x1a>
 800984c:	4643      	mov	r3, r8
 800984e:	463a      	mov	r2, r7
 8009850:	6a21      	ldr	r1, [r4, #32]
 8009852:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009854:	4628      	mov	r0, r5
 8009856:	47b0      	blx	r6
 8009858:	2800      	cmp	r0, #0
 800985a:	dc06      	bgt.n	800986a <__sflush_r+0xfe>
 800985c:	89a3      	ldrh	r3, [r4, #12]
 800985e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009862:	81a3      	strh	r3, [r4, #12]
 8009864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009868:	e78e      	b.n	8009788 <__sflush_r+0x1c>
 800986a:	4407      	add	r7, r0
 800986c:	eba8 0800 	sub.w	r8, r8, r0
 8009870:	e7e9      	b.n	8009846 <__sflush_r+0xda>
 8009872:	bf00      	nop
 8009874:	20400001 	.word	0x20400001

08009878 <_fflush_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	690b      	ldr	r3, [r1, #16]
 800987c:	4605      	mov	r5, r0
 800987e:	460c      	mov	r4, r1
 8009880:	b1db      	cbz	r3, 80098ba <_fflush_r+0x42>
 8009882:	b118      	cbz	r0, 800988c <_fflush_r+0x14>
 8009884:	6983      	ldr	r3, [r0, #24]
 8009886:	b90b      	cbnz	r3, 800988c <_fflush_r+0x14>
 8009888:	f000 f860 	bl	800994c <__sinit>
 800988c:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <_fflush_r+0x48>)
 800988e:	429c      	cmp	r4, r3
 8009890:	d109      	bne.n	80098a6 <_fflush_r+0x2e>
 8009892:	686c      	ldr	r4, [r5, #4]
 8009894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009898:	b17b      	cbz	r3, 80098ba <_fflush_r+0x42>
 800989a:	4621      	mov	r1, r4
 800989c:	4628      	mov	r0, r5
 800989e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098a2:	f7ff bf63 	b.w	800976c <__sflush_r>
 80098a6:	4b07      	ldr	r3, [pc, #28]	; (80098c4 <_fflush_r+0x4c>)
 80098a8:	429c      	cmp	r4, r3
 80098aa:	d101      	bne.n	80098b0 <_fflush_r+0x38>
 80098ac:	68ac      	ldr	r4, [r5, #8]
 80098ae:	e7f1      	b.n	8009894 <_fflush_r+0x1c>
 80098b0:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <_fflush_r+0x50>)
 80098b2:	429c      	cmp	r4, r3
 80098b4:	bf08      	it	eq
 80098b6:	68ec      	ldreq	r4, [r5, #12]
 80098b8:	e7ec      	b.n	8009894 <_fflush_r+0x1c>
 80098ba:	2000      	movs	r0, #0
 80098bc:	bd38      	pop	{r3, r4, r5, pc}
 80098be:	bf00      	nop
 80098c0:	0800a280 	.word	0x0800a280
 80098c4:	0800a2a0 	.word	0x0800a2a0
 80098c8:	0800a260 	.word	0x0800a260

080098cc <std>:
 80098cc:	2300      	movs	r3, #0
 80098ce:	b510      	push	{r4, lr}
 80098d0:	4604      	mov	r4, r0
 80098d2:	e9c0 3300 	strd	r3, r3, [r0]
 80098d6:	6083      	str	r3, [r0, #8]
 80098d8:	8181      	strh	r1, [r0, #12]
 80098da:	6643      	str	r3, [r0, #100]	; 0x64
 80098dc:	81c2      	strh	r2, [r0, #14]
 80098de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098e2:	6183      	str	r3, [r0, #24]
 80098e4:	4619      	mov	r1, r3
 80098e6:	2208      	movs	r2, #8
 80098e8:	305c      	adds	r0, #92	; 0x5c
 80098ea:	f7ff fd43 	bl	8009374 <memset>
 80098ee:	4b05      	ldr	r3, [pc, #20]	; (8009904 <std+0x38>)
 80098f0:	6263      	str	r3, [r4, #36]	; 0x24
 80098f2:	4b05      	ldr	r3, [pc, #20]	; (8009908 <std+0x3c>)
 80098f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80098f6:	4b05      	ldr	r3, [pc, #20]	; (800990c <std+0x40>)
 80098f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098fa:	4b05      	ldr	r3, [pc, #20]	; (8009910 <std+0x44>)
 80098fc:	6224      	str	r4, [r4, #32]
 80098fe:	6323      	str	r3, [r4, #48]	; 0x30
 8009900:	bd10      	pop	{r4, pc}
 8009902:	bf00      	nop
 8009904:	0800a0bd 	.word	0x0800a0bd
 8009908:	0800a0df 	.word	0x0800a0df
 800990c:	0800a117 	.word	0x0800a117
 8009910:	0800a13b 	.word	0x0800a13b

08009914 <_cleanup_r>:
 8009914:	4901      	ldr	r1, [pc, #4]	; (800991c <_cleanup_r+0x8>)
 8009916:	f000 b885 	b.w	8009a24 <_fwalk_reent>
 800991a:	bf00      	nop
 800991c:	08009879 	.word	0x08009879

08009920 <__sfmoreglue>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	1e4a      	subs	r2, r1, #1
 8009924:	2568      	movs	r5, #104	; 0x68
 8009926:	4355      	muls	r5, r2
 8009928:	460e      	mov	r6, r1
 800992a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800992e:	f7ff fd77 	bl	8009420 <_malloc_r>
 8009932:	4604      	mov	r4, r0
 8009934:	b140      	cbz	r0, 8009948 <__sfmoreglue+0x28>
 8009936:	2100      	movs	r1, #0
 8009938:	e9c0 1600 	strd	r1, r6, [r0]
 800993c:	300c      	adds	r0, #12
 800993e:	60a0      	str	r0, [r4, #8]
 8009940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009944:	f7ff fd16 	bl	8009374 <memset>
 8009948:	4620      	mov	r0, r4
 800994a:	bd70      	pop	{r4, r5, r6, pc}

0800994c <__sinit>:
 800994c:	6983      	ldr	r3, [r0, #24]
 800994e:	b510      	push	{r4, lr}
 8009950:	4604      	mov	r4, r0
 8009952:	bb33      	cbnz	r3, 80099a2 <__sinit+0x56>
 8009954:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009958:	6503      	str	r3, [r0, #80]	; 0x50
 800995a:	4b12      	ldr	r3, [pc, #72]	; (80099a4 <__sinit+0x58>)
 800995c:	4a12      	ldr	r2, [pc, #72]	; (80099a8 <__sinit+0x5c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6282      	str	r2, [r0, #40]	; 0x28
 8009962:	4298      	cmp	r0, r3
 8009964:	bf04      	itt	eq
 8009966:	2301      	moveq	r3, #1
 8009968:	6183      	streq	r3, [r0, #24]
 800996a:	f000 f81f 	bl	80099ac <__sfp>
 800996e:	6060      	str	r0, [r4, #4]
 8009970:	4620      	mov	r0, r4
 8009972:	f000 f81b 	bl	80099ac <__sfp>
 8009976:	60a0      	str	r0, [r4, #8]
 8009978:	4620      	mov	r0, r4
 800997a:	f000 f817 	bl	80099ac <__sfp>
 800997e:	2200      	movs	r2, #0
 8009980:	60e0      	str	r0, [r4, #12]
 8009982:	2104      	movs	r1, #4
 8009984:	6860      	ldr	r0, [r4, #4]
 8009986:	f7ff ffa1 	bl	80098cc <std>
 800998a:	2201      	movs	r2, #1
 800998c:	2109      	movs	r1, #9
 800998e:	68a0      	ldr	r0, [r4, #8]
 8009990:	f7ff ff9c 	bl	80098cc <std>
 8009994:	2202      	movs	r2, #2
 8009996:	2112      	movs	r1, #18
 8009998:	68e0      	ldr	r0, [r4, #12]
 800999a:	f7ff ff97 	bl	80098cc <std>
 800999e:	2301      	movs	r3, #1
 80099a0:	61a3      	str	r3, [r4, #24]
 80099a2:	bd10      	pop	{r4, pc}
 80099a4:	0800a25c 	.word	0x0800a25c
 80099a8:	08009915 	.word	0x08009915

080099ac <__sfp>:
 80099ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ae:	4b1b      	ldr	r3, [pc, #108]	; (8009a1c <__sfp+0x70>)
 80099b0:	681e      	ldr	r6, [r3, #0]
 80099b2:	69b3      	ldr	r3, [r6, #24]
 80099b4:	4607      	mov	r7, r0
 80099b6:	b913      	cbnz	r3, 80099be <__sfp+0x12>
 80099b8:	4630      	mov	r0, r6
 80099ba:	f7ff ffc7 	bl	800994c <__sinit>
 80099be:	3648      	adds	r6, #72	; 0x48
 80099c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	d503      	bpl.n	80099d0 <__sfp+0x24>
 80099c8:	6833      	ldr	r3, [r6, #0]
 80099ca:	b133      	cbz	r3, 80099da <__sfp+0x2e>
 80099cc:	6836      	ldr	r6, [r6, #0]
 80099ce:	e7f7      	b.n	80099c0 <__sfp+0x14>
 80099d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099d4:	b16d      	cbz	r5, 80099f2 <__sfp+0x46>
 80099d6:	3468      	adds	r4, #104	; 0x68
 80099d8:	e7f4      	b.n	80099c4 <__sfp+0x18>
 80099da:	2104      	movs	r1, #4
 80099dc:	4638      	mov	r0, r7
 80099de:	f7ff ff9f 	bl	8009920 <__sfmoreglue>
 80099e2:	6030      	str	r0, [r6, #0]
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d1f1      	bne.n	80099cc <__sfp+0x20>
 80099e8:	230c      	movs	r3, #12
 80099ea:	603b      	str	r3, [r7, #0]
 80099ec:	4604      	mov	r4, r0
 80099ee:	4620      	mov	r0, r4
 80099f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099f2:	4b0b      	ldr	r3, [pc, #44]	; (8009a20 <__sfp+0x74>)
 80099f4:	6665      	str	r5, [r4, #100]	; 0x64
 80099f6:	e9c4 5500 	strd	r5, r5, [r4]
 80099fa:	60a5      	str	r5, [r4, #8]
 80099fc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009a00:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009a04:	2208      	movs	r2, #8
 8009a06:	4629      	mov	r1, r5
 8009a08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a0c:	f7ff fcb2 	bl	8009374 <memset>
 8009a10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a18:	e7e9      	b.n	80099ee <__sfp+0x42>
 8009a1a:	bf00      	nop
 8009a1c:	0800a25c 	.word	0x0800a25c
 8009a20:	ffff0001 	.word	0xffff0001

08009a24 <_fwalk_reent>:
 8009a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a28:	4680      	mov	r8, r0
 8009a2a:	4689      	mov	r9, r1
 8009a2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a30:	2600      	movs	r6, #0
 8009a32:	b914      	cbnz	r4, 8009a3a <_fwalk_reent+0x16>
 8009a34:	4630      	mov	r0, r6
 8009a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a3a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009a3e:	3f01      	subs	r7, #1
 8009a40:	d501      	bpl.n	8009a46 <_fwalk_reent+0x22>
 8009a42:	6824      	ldr	r4, [r4, #0]
 8009a44:	e7f5      	b.n	8009a32 <_fwalk_reent+0xe>
 8009a46:	89ab      	ldrh	r3, [r5, #12]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d907      	bls.n	8009a5c <_fwalk_reent+0x38>
 8009a4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a50:	3301      	adds	r3, #1
 8009a52:	d003      	beq.n	8009a5c <_fwalk_reent+0x38>
 8009a54:	4629      	mov	r1, r5
 8009a56:	4640      	mov	r0, r8
 8009a58:	47c8      	blx	r9
 8009a5a:	4306      	orrs	r6, r0
 8009a5c:	3568      	adds	r5, #104	; 0x68
 8009a5e:	e7ee      	b.n	8009a3e <_fwalk_reent+0x1a>

08009a60 <__swhatbuf_r>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	460e      	mov	r6, r1
 8009a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a68:	2900      	cmp	r1, #0
 8009a6a:	b096      	sub	sp, #88	; 0x58
 8009a6c:	4614      	mov	r4, r2
 8009a6e:	461d      	mov	r5, r3
 8009a70:	da07      	bge.n	8009a82 <__swhatbuf_r+0x22>
 8009a72:	2300      	movs	r3, #0
 8009a74:	602b      	str	r3, [r5, #0]
 8009a76:	89b3      	ldrh	r3, [r6, #12]
 8009a78:	061a      	lsls	r2, r3, #24
 8009a7a:	d410      	bmi.n	8009a9e <__swhatbuf_r+0x3e>
 8009a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a80:	e00e      	b.n	8009aa0 <__swhatbuf_r+0x40>
 8009a82:	466a      	mov	r2, sp
 8009a84:	f000 fb80 	bl	800a188 <_fstat_r>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	dbf2      	blt.n	8009a72 <__swhatbuf_r+0x12>
 8009a8c:	9a01      	ldr	r2, [sp, #4]
 8009a8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a96:	425a      	negs	r2, r3
 8009a98:	415a      	adcs	r2, r3
 8009a9a:	602a      	str	r2, [r5, #0]
 8009a9c:	e7ee      	b.n	8009a7c <__swhatbuf_r+0x1c>
 8009a9e:	2340      	movs	r3, #64	; 0x40
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	6023      	str	r3, [r4, #0]
 8009aa4:	b016      	add	sp, #88	; 0x58
 8009aa6:	bd70      	pop	{r4, r5, r6, pc}

08009aa8 <__smakebuf_r>:
 8009aa8:	898b      	ldrh	r3, [r1, #12]
 8009aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009aac:	079d      	lsls	r5, r3, #30
 8009aae:	4606      	mov	r6, r0
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	d507      	bpl.n	8009ac4 <__smakebuf_r+0x1c>
 8009ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	6123      	str	r3, [r4, #16]
 8009abc:	2301      	movs	r3, #1
 8009abe:	6163      	str	r3, [r4, #20]
 8009ac0:	b002      	add	sp, #8
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	ab01      	add	r3, sp, #4
 8009ac6:	466a      	mov	r2, sp
 8009ac8:	f7ff ffca 	bl	8009a60 <__swhatbuf_r>
 8009acc:	9900      	ldr	r1, [sp, #0]
 8009ace:	4605      	mov	r5, r0
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f7ff fca5 	bl	8009420 <_malloc_r>
 8009ad6:	b948      	cbnz	r0, 8009aec <__smakebuf_r+0x44>
 8009ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009adc:	059a      	lsls	r2, r3, #22
 8009ade:	d4ef      	bmi.n	8009ac0 <__smakebuf_r+0x18>
 8009ae0:	f023 0303 	bic.w	r3, r3, #3
 8009ae4:	f043 0302 	orr.w	r3, r3, #2
 8009ae8:	81a3      	strh	r3, [r4, #12]
 8009aea:	e7e3      	b.n	8009ab4 <__smakebuf_r+0xc>
 8009aec:	4b0d      	ldr	r3, [pc, #52]	; (8009b24 <__smakebuf_r+0x7c>)
 8009aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	6020      	str	r0, [r4, #0]
 8009af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af8:	81a3      	strh	r3, [r4, #12]
 8009afa:	9b00      	ldr	r3, [sp, #0]
 8009afc:	6163      	str	r3, [r4, #20]
 8009afe:	9b01      	ldr	r3, [sp, #4]
 8009b00:	6120      	str	r0, [r4, #16]
 8009b02:	b15b      	cbz	r3, 8009b1c <__smakebuf_r+0x74>
 8009b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f000 fb4f 	bl	800a1ac <_isatty_r>
 8009b0e:	b128      	cbz	r0, 8009b1c <__smakebuf_r+0x74>
 8009b10:	89a3      	ldrh	r3, [r4, #12]
 8009b12:	f023 0303 	bic.w	r3, r3, #3
 8009b16:	f043 0301 	orr.w	r3, r3, #1
 8009b1a:	81a3      	strh	r3, [r4, #12]
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	431d      	orrs	r5, r3
 8009b20:	81a5      	strh	r5, [r4, #12]
 8009b22:	e7cd      	b.n	8009ac0 <__smakebuf_r+0x18>
 8009b24:	08009915 	.word	0x08009915

08009b28 <__malloc_lock>:
 8009b28:	4770      	bx	lr

08009b2a <__malloc_unlock>:
 8009b2a:	4770      	bx	lr

08009b2c <__sfputc_r>:
 8009b2c:	6893      	ldr	r3, [r2, #8]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	b410      	push	{r4}
 8009b34:	6093      	str	r3, [r2, #8]
 8009b36:	da08      	bge.n	8009b4a <__sfputc_r+0x1e>
 8009b38:	6994      	ldr	r4, [r2, #24]
 8009b3a:	42a3      	cmp	r3, r4
 8009b3c:	db01      	blt.n	8009b42 <__sfputc_r+0x16>
 8009b3e:	290a      	cmp	r1, #10
 8009b40:	d103      	bne.n	8009b4a <__sfputc_r+0x1e>
 8009b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b46:	f7ff bd51 	b.w	80095ec <__swbuf_r>
 8009b4a:	6813      	ldr	r3, [r2, #0]
 8009b4c:	1c58      	adds	r0, r3, #1
 8009b4e:	6010      	str	r0, [r2, #0]
 8009b50:	7019      	strb	r1, [r3, #0]
 8009b52:	4608      	mov	r0, r1
 8009b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <__sfputs_r>:
 8009b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	460f      	mov	r7, r1
 8009b60:	4614      	mov	r4, r2
 8009b62:	18d5      	adds	r5, r2, r3
 8009b64:	42ac      	cmp	r4, r5
 8009b66:	d101      	bne.n	8009b6c <__sfputs_r+0x12>
 8009b68:	2000      	movs	r0, #0
 8009b6a:	e007      	b.n	8009b7c <__sfputs_r+0x22>
 8009b6c:	463a      	mov	r2, r7
 8009b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7ff ffda 	bl	8009b2c <__sfputc_r>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d1f3      	bne.n	8009b64 <__sfputs_r+0xa>
 8009b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b80 <_vfiprintf_r>:
 8009b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	460c      	mov	r4, r1
 8009b86:	b09d      	sub	sp, #116	; 0x74
 8009b88:	4617      	mov	r7, r2
 8009b8a:	461d      	mov	r5, r3
 8009b8c:	4606      	mov	r6, r0
 8009b8e:	b118      	cbz	r0, 8009b98 <_vfiprintf_r+0x18>
 8009b90:	6983      	ldr	r3, [r0, #24]
 8009b92:	b90b      	cbnz	r3, 8009b98 <_vfiprintf_r+0x18>
 8009b94:	f7ff feda 	bl	800994c <__sinit>
 8009b98:	4b7c      	ldr	r3, [pc, #496]	; (8009d8c <_vfiprintf_r+0x20c>)
 8009b9a:	429c      	cmp	r4, r3
 8009b9c:	d158      	bne.n	8009c50 <_vfiprintf_r+0xd0>
 8009b9e:	6874      	ldr	r4, [r6, #4]
 8009ba0:	89a3      	ldrh	r3, [r4, #12]
 8009ba2:	0718      	lsls	r0, r3, #28
 8009ba4:	d55e      	bpl.n	8009c64 <_vfiprintf_r+0xe4>
 8009ba6:	6923      	ldr	r3, [r4, #16]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d05b      	beq.n	8009c64 <_vfiprintf_r+0xe4>
 8009bac:	2300      	movs	r3, #0
 8009bae:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb0:	2320      	movs	r3, #32
 8009bb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bb6:	2330      	movs	r3, #48	; 0x30
 8009bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bbc:	9503      	str	r5, [sp, #12]
 8009bbe:	f04f 0b01 	mov.w	fp, #1
 8009bc2:	46b8      	mov	r8, r7
 8009bc4:	4645      	mov	r5, r8
 8009bc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009bca:	b10b      	cbz	r3, 8009bd0 <_vfiprintf_r+0x50>
 8009bcc:	2b25      	cmp	r3, #37	; 0x25
 8009bce:	d154      	bne.n	8009c7a <_vfiprintf_r+0xfa>
 8009bd0:	ebb8 0a07 	subs.w	sl, r8, r7
 8009bd4:	d00b      	beq.n	8009bee <_vfiprintf_r+0x6e>
 8009bd6:	4653      	mov	r3, sl
 8009bd8:	463a      	mov	r2, r7
 8009bda:	4621      	mov	r1, r4
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7ff ffbc 	bl	8009b5a <__sfputs_r>
 8009be2:	3001      	adds	r0, #1
 8009be4:	f000 80c2 	beq.w	8009d6c <_vfiprintf_r+0x1ec>
 8009be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bea:	4453      	add	r3, sl
 8009bec:	9309      	str	r3, [sp, #36]	; 0x24
 8009bee:	f898 3000 	ldrb.w	r3, [r8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 80ba 	beq.w	8009d6c <_vfiprintf_r+0x1ec>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c02:	9304      	str	r3, [sp, #16]
 8009c04:	9307      	str	r3, [sp, #28]
 8009c06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8009c0c:	46a8      	mov	r8, r5
 8009c0e:	2205      	movs	r2, #5
 8009c10:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009c14:	485e      	ldr	r0, [pc, #376]	; (8009d90 <_vfiprintf_r+0x210>)
 8009c16:	f7f6 fadb 	bl	80001d0 <memchr>
 8009c1a:	9b04      	ldr	r3, [sp, #16]
 8009c1c:	bb78      	cbnz	r0, 8009c7e <_vfiprintf_r+0xfe>
 8009c1e:	06d9      	lsls	r1, r3, #27
 8009c20:	bf44      	itt	mi
 8009c22:	2220      	movmi	r2, #32
 8009c24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c28:	071a      	lsls	r2, r3, #28
 8009c2a:	bf44      	itt	mi
 8009c2c:	222b      	movmi	r2, #43	; 0x2b
 8009c2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c32:	782a      	ldrb	r2, [r5, #0]
 8009c34:	2a2a      	cmp	r2, #42	; 0x2a
 8009c36:	d02a      	beq.n	8009c8e <_vfiprintf_r+0x10e>
 8009c38:	9a07      	ldr	r2, [sp, #28]
 8009c3a:	46a8      	mov	r8, r5
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	250a      	movs	r5, #10
 8009c40:	4641      	mov	r1, r8
 8009c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c46:	3b30      	subs	r3, #48	; 0x30
 8009c48:	2b09      	cmp	r3, #9
 8009c4a:	d969      	bls.n	8009d20 <_vfiprintf_r+0x1a0>
 8009c4c:	b360      	cbz	r0, 8009ca8 <_vfiprintf_r+0x128>
 8009c4e:	e024      	b.n	8009c9a <_vfiprintf_r+0x11a>
 8009c50:	4b50      	ldr	r3, [pc, #320]	; (8009d94 <_vfiprintf_r+0x214>)
 8009c52:	429c      	cmp	r4, r3
 8009c54:	d101      	bne.n	8009c5a <_vfiprintf_r+0xda>
 8009c56:	68b4      	ldr	r4, [r6, #8]
 8009c58:	e7a2      	b.n	8009ba0 <_vfiprintf_r+0x20>
 8009c5a:	4b4f      	ldr	r3, [pc, #316]	; (8009d98 <_vfiprintf_r+0x218>)
 8009c5c:	429c      	cmp	r4, r3
 8009c5e:	bf08      	it	eq
 8009c60:	68f4      	ldreq	r4, [r6, #12]
 8009c62:	e79d      	b.n	8009ba0 <_vfiprintf_r+0x20>
 8009c64:	4621      	mov	r1, r4
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7ff fd12 	bl	8009690 <__swsetup_r>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d09d      	beq.n	8009bac <_vfiprintf_r+0x2c>
 8009c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c74:	b01d      	add	sp, #116	; 0x74
 8009c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7a:	46a8      	mov	r8, r5
 8009c7c:	e7a2      	b.n	8009bc4 <_vfiprintf_r+0x44>
 8009c7e:	4a44      	ldr	r2, [pc, #272]	; (8009d90 <_vfiprintf_r+0x210>)
 8009c80:	1a80      	subs	r0, r0, r2
 8009c82:	fa0b f000 	lsl.w	r0, fp, r0
 8009c86:	4318      	orrs	r0, r3
 8009c88:	9004      	str	r0, [sp, #16]
 8009c8a:	4645      	mov	r5, r8
 8009c8c:	e7be      	b.n	8009c0c <_vfiprintf_r+0x8c>
 8009c8e:	9a03      	ldr	r2, [sp, #12]
 8009c90:	1d11      	adds	r1, r2, #4
 8009c92:	6812      	ldr	r2, [r2, #0]
 8009c94:	9103      	str	r1, [sp, #12]
 8009c96:	2a00      	cmp	r2, #0
 8009c98:	db01      	blt.n	8009c9e <_vfiprintf_r+0x11e>
 8009c9a:	9207      	str	r2, [sp, #28]
 8009c9c:	e004      	b.n	8009ca8 <_vfiprintf_r+0x128>
 8009c9e:	4252      	negs	r2, r2
 8009ca0:	f043 0302 	orr.w	r3, r3, #2
 8009ca4:	9207      	str	r2, [sp, #28]
 8009ca6:	9304      	str	r3, [sp, #16]
 8009ca8:	f898 3000 	ldrb.w	r3, [r8]
 8009cac:	2b2e      	cmp	r3, #46	; 0x2e
 8009cae:	d10e      	bne.n	8009cce <_vfiprintf_r+0x14e>
 8009cb0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8009cb6:	d138      	bne.n	8009d2a <_vfiprintf_r+0x1aa>
 8009cb8:	9b03      	ldr	r3, [sp, #12]
 8009cba:	1d1a      	adds	r2, r3, #4
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	9203      	str	r2, [sp, #12]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	bfb8      	it	lt
 8009cc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009cc8:	f108 0802 	add.w	r8, r8, #2
 8009ccc:	9305      	str	r3, [sp, #20]
 8009cce:	4d33      	ldr	r5, [pc, #204]	; (8009d9c <_vfiprintf_r+0x21c>)
 8009cd0:	f898 1000 	ldrb.w	r1, [r8]
 8009cd4:	2203      	movs	r2, #3
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f7f6 fa7a 	bl	80001d0 <memchr>
 8009cdc:	b140      	cbz	r0, 8009cf0 <_vfiprintf_r+0x170>
 8009cde:	2340      	movs	r3, #64	; 0x40
 8009ce0:	1b40      	subs	r0, r0, r5
 8009ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ce6:	9b04      	ldr	r3, [sp, #16]
 8009ce8:	4303      	orrs	r3, r0
 8009cea:	f108 0801 	add.w	r8, r8, #1
 8009cee:	9304      	str	r3, [sp, #16]
 8009cf0:	f898 1000 	ldrb.w	r1, [r8]
 8009cf4:	482a      	ldr	r0, [pc, #168]	; (8009da0 <_vfiprintf_r+0x220>)
 8009cf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cfa:	2206      	movs	r2, #6
 8009cfc:	f108 0701 	add.w	r7, r8, #1
 8009d00:	f7f6 fa66 	bl	80001d0 <memchr>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d037      	beq.n	8009d78 <_vfiprintf_r+0x1f8>
 8009d08:	4b26      	ldr	r3, [pc, #152]	; (8009da4 <_vfiprintf_r+0x224>)
 8009d0a:	bb1b      	cbnz	r3, 8009d54 <_vfiprintf_r+0x1d4>
 8009d0c:	9b03      	ldr	r3, [sp, #12]
 8009d0e:	3307      	adds	r3, #7
 8009d10:	f023 0307 	bic.w	r3, r3, #7
 8009d14:	3308      	adds	r3, #8
 8009d16:	9303      	str	r3, [sp, #12]
 8009d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d1a:	444b      	add	r3, r9
 8009d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d1e:	e750      	b.n	8009bc2 <_vfiprintf_r+0x42>
 8009d20:	fb05 3202 	mla	r2, r5, r2, r3
 8009d24:	2001      	movs	r0, #1
 8009d26:	4688      	mov	r8, r1
 8009d28:	e78a      	b.n	8009c40 <_vfiprintf_r+0xc0>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f108 0801 	add.w	r8, r8, #1
 8009d30:	9305      	str	r3, [sp, #20]
 8009d32:	4619      	mov	r1, r3
 8009d34:	250a      	movs	r5, #10
 8009d36:	4640      	mov	r0, r8
 8009d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d3c:	3a30      	subs	r2, #48	; 0x30
 8009d3e:	2a09      	cmp	r2, #9
 8009d40:	d903      	bls.n	8009d4a <_vfiprintf_r+0x1ca>
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d0c3      	beq.n	8009cce <_vfiprintf_r+0x14e>
 8009d46:	9105      	str	r1, [sp, #20]
 8009d48:	e7c1      	b.n	8009cce <_vfiprintf_r+0x14e>
 8009d4a:	fb05 2101 	mla	r1, r5, r1, r2
 8009d4e:	2301      	movs	r3, #1
 8009d50:	4680      	mov	r8, r0
 8009d52:	e7f0      	b.n	8009d36 <_vfiprintf_r+0x1b6>
 8009d54:	ab03      	add	r3, sp, #12
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	4622      	mov	r2, r4
 8009d5a:	4b13      	ldr	r3, [pc, #76]	; (8009da8 <_vfiprintf_r+0x228>)
 8009d5c:	a904      	add	r1, sp, #16
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f3af 8000 	nop.w
 8009d64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009d68:	4681      	mov	r9, r0
 8009d6a:	d1d5      	bne.n	8009d18 <_vfiprintf_r+0x198>
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	065b      	lsls	r3, r3, #25
 8009d70:	f53f af7e 	bmi.w	8009c70 <_vfiprintf_r+0xf0>
 8009d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d76:	e77d      	b.n	8009c74 <_vfiprintf_r+0xf4>
 8009d78:	ab03      	add	r3, sp, #12
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	4622      	mov	r2, r4
 8009d7e:	4b0a      	ldr	r3, [pc, #40]	; (8009da8 <_vfiprintf_r+0x228>)
 8009d80:	a904      	add	r1, sp, #16
 8009d82:	4630      	mov	r0, r6
 8009d84:	f000 f888 	bl	8009e98 <_printf_i>
 8009d88:	e7ec      	b.n	8009d64 <_vfiprintf_r+0x1e4>
 8009d8a:	bf00      	nop
 8009d8c:	0800a280 	.word	0x0800a280
 8009d90:	0800a2c0 	.word	0x0800a2c0
 8009d94:	0800a2a0 	.word	0x0800a2a0
 8009d98:	0800a260 	.word	0x0800a260
 8009d9c:	0800a2c6 	.word	0x0800a2c6
 8009da0:	0800a2ca 	.word	0x0800a2ca
 8009da4:	00000000 	.word	0x00000000
 8009da8:	08009b5b 	.word	0x08009b5b

08009dac <_printf_common>:
 8009dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db0:	4691      	mov	r9, r2
 8009db2:	461f      	mov	r7, r3
 8009db4:	688a      	ldr	r2, [r1, #8]
 8009db6:	690b      	ldr	r3, [r1, #16]
 8009db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	bfb8      	it	lt
 8009dc0:	4613      	movlt	r3, r2
 8009dc2:	f8c9 3000 	str.w	r3, [r9]
 8009dc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dca:	4606      	mov	r6, r0
 8009dcc:	460c      	mov	r4, r1
 8009dce:	b112      	cbz	r2, 8009dd6 <_printf_common+0x2a>
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f8c9 3000 	str.w	r3, [r9]
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	0699      	lsls	r1, r3, #26
 8009dda:	bf42      	ittt	mi
 8009ddc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009de0:	3302      	addmi	r3, #2
 8009de2:	f8c9 3000 	strmi.w	r3, [r9]
 8009de6:	6825      	ldr	r5, [r4, #0]
 8009de8:	f015 0506 	ands.w	r5, r5, #6
 8009dec:	d107      	bne.n	8009dfe <_printf_common+0x52>
 8009dee:	f104 0a19 	add.w	sl, r4, #25
 8009df2:	68e3      	ldr	r3, [r4, #12]
 8009df4:	f8d9 2000 	ldr.w	r2, [r9]
 8009df8:	1a9b      	subs	r3, r3, r2
 8009dfa:	42ab      	cmp	r3, r5
 8009dfc:	dc28      	bgt.n	8009e50 <_printf_common+0xa4>
 8009dfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009e02:	6822      	ldr	r2, [r4, #0]
 8009e04:	3300      	adds	r3, #0
 8009e06:	bf18      	it	ne
 8009e08:	2301      	movne	r3, #1
 8009e0a:	0692      	lsls	r2, r2, #26
 8009e0c:	d42d      	bmi.n	8009e6a <_printf_common+0xbe>
 8009e0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e12:	4639      	mov	r1, r7
 8009e14:	4630      	mov	r0, r6
 8009e16:	47c0      	blx	r8
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d020      	beq.n	8009e5e <_printf_common+0xb2>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	68e5      	ldr	r5, [r4, #12]
 8009e20:	f8d9 2000 	ldr.w	r2, [r9]
 8009e24:	f003 0306 	and.w	r3, r3, #6
 8009e28:	2b04      	cmp	r3, #4
 8009e2a:	bf08      	it	eq
 8009e2c:	1aad      	subeq	r5, r5, r2
 8009e2e:	68a3      	ldr	r3, [r4, #8]
 8009e30:	6922      	ldr	r2, [r4, #16]
 8009e32:	bf0c      	ite	eq
 8009e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e38:	2500      	movne	r5, #0
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	bfc4      	itt	gt
 8009e3e:	1a9b      	subgt	r3, r3, r2
 8009e40:	18ed      	addgt	r5, r5, r3
 8009e42:	f04f 0900 	mov.w	r9, #0
 8009e46:	341a      	adds	r4, #26
 8009e48:	454d      	cmp	r5, r9
 8009e4a:	d11a      	bne.n	8009e82 <_printf_common+0xd6>
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	e008      	b.n	8009e62 <_printf_common+0xb6>
 8009e50:	2301      	movs	r3, #1
 8009e52:	4652      	mov	r2, sl
 8009e54:	4639      	mov	r1, r7
 8009e56:	4630      	mov	r0, r6
 8009e58:	47c0      	blx	r8
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	d103      	bne.n	8009e66 <_printf_common+0xba>
 8009e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e66:	3501      	adds	r5, #1
 8009e68:	e7c3      	b.n	8009df2 <_printf_common+0x46>
 8009e6a:	18e1      	adds	r1, r4, r3
 8009e6c:	1c5a      	adds	r2, r3, #1
 8009e6e:	2030      	movs	r0, #48	; 0x30
 8009e70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e74:	4422      	add	r2, r4
 8009e76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e7e:	3302      	adds	r3, #2
 8009e80:	e7c5      	b.n	8009e0e <_printf_common+0x62>
 8009e82:	2301      	movs	r3, #1
 8009e84:	4622      	mov	r2, r4
 8009e86:	4639      	mov	r1, r7
 8009e88:	4630      	mov	r0, r6
 8009e8a:	47c0      	blx	r8
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	d0e6      	beq.n	8009e5e <_printf_common+0xb2>
 8009e90:	f109 0901 	add.w	r9, r9, #1
 8009e94:	e7d8      	b.n	8009e48 <_printf_common+0x9c>
	...

08009e98 <_printf_i>:
 8009e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	7e09      	ldrb	r1, [r1, #24]
 8009ea4:	b085      	sub	sp, #20
 8009ea6:	296e      	cmp	r1, #110	; 0x6e
 8009ea8:	4617      	mov	r7, r2
 8009eaa:	4606      	mov	r6, r0
 8009eac:	4698      	mov	r8, r3
 8009eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009eb0:	f000 80b3 	beq.w	800a01a <_printf_i+0x182>
 8009eb4:	d822      	bhi.n	8009efc <_printf_i+0x64>
 8009eb6:	2963      	cmp	r1, #99	; 0x63
 8009eb8:	d036      	beq.n	8009f28 <_printf_i+0x90>
 8009eba:	d80a      	bhi.n	8009ed2 <_printf_i+0x3a>
 8009ebc:	2900      	cmp	r1, #0
 8009ebe:	f000 80b9 	beq.w	800a034 <_printf_i+0x19c>
 8009ec2:	2958      	cmp	r1, #88	; 0x58
 8009ec4:	f000 8083 	beq.w	8009fce <_printf_i+0x136>
 8009ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ecc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009ed0:	e032      	b.n	8009f38 <_printf_i+0xa0>
 8009ed2:	2964      	cmp	r1, #100	; 0x64
 8009ed4:	d001      	beq.n	8009eda <_printf_i+0x42>
 8009ed6:	2969      	cmp	r1, #105	; 0x69
 8009ed8:	d1f6      	bne.n	8009ec8 <_printf_i+0x30>
 8009eda:	6820      	ldr	r0, [r4, #0]
 8009edc:	6813      	ldr	r3, [r2, #0]
 8009ede:	0605      	lsls	r5, r0, #24
 8009ee0:	f103 0104 	add.w	r1, r3, #4
 8009ee4:	d52a      	bpl.n	8009f3c <_printf_i+0xa4>
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6011      	str	r1, [r2, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	da03      	bge.n	8009ef6 <_printf_i+0x5e>
 8009eee:	222d      	movs	r2, #45	; 0x2d
 8009ef0:	425b      	negs	r3, r3
 8009ef2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009ef6:	486f      	ldr	r0, [pc, #444]	; (800a0b4 <_printf_i+0x21c>)
 8009ef8:	220a      	movs	r2, #10
 8009efa:	e039      	b.n	8009f70 <_printf_i+0xd8>
 8009efc:	2973      	cmp	r1, #115	; 0x73
 8009efe:	f000 809d 	beq.w	800a03c <_printf_i+0x1a4>
 8009f02:	d808      	bhi.n	8009f16 <_printf_i+0x7e>
 8009f04:	296f      	cmp	r1, #111	; 0x6f
 8009f06:	d020      	beq.n	8009f4a <_printf_i+0xb2>
 8009f08:	2970      	cmp	r1, #112	; 0x70
 8009f0a:	d1dd      	bne.n	8009ec8 <_printf_i+0x30>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	f043 0320 	orr.w	r3, r3, #32
 8009f12:	6023      	str	r3, [r4, #0]
 8009f14:	e003      	b.n	8009f1e <_printf_i+0x86>
 8009f16:	2975      	cmp	r1, #117	; 0x75
 8009f18:	d017      	beq.n	8009f4a <_printf_i+0xb2>
 8009f1a:	2978      	cmp	r1, #120	; 0x78
 8009f1c:	d1d4      	bne.n	8009ec8 <_printf_i+0x30>
 8009f1e:	2378      	movs	r3, #120	; 0x78
 8009f20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f24:	4864      	ldr	r0, [pc, #400]	; (800a0b8 <_printf_i+0x220>)
 8009f26:	e055      	b.n	8009fd4 <_printf_i+0x13c>
 8009f28:	6813      	ldr	r3, [r2, #0]
 8009f2a:	1d19      	adds	r1, r3, #4
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6011      	str	r1, [r2, #0]
 8009f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e08c      	b.n	800a056 <_printf_i+0x1be>
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	6011      	str	r1, [r2, #0]
 8009f40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f44:	bf18      	it	ne
 8009f46:	b21b      	sxthne	r3, r3
 8009f48:	e7cf      	b.n	8009eea <_printf_i+0x52>
 8009f4a:	6813      	ldr	r3, [r2, #0]
 8009f4c:	6825      	ldr	r5, [r4, #0]
 8009f4e:	1d18      	adds	r0, r3, #4
 8009f50:	6010      	str	r0, [r2, #0]
 8009f52:	0628      	lsls	r0, r5, #24
 8009f54:	d501      	bpl.n	8009f5a <_printf_i+0xc2>
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	e002      	b.n	8009f60 <_printf_i+0xc8>
 8009f5a:	0668      	lsls	r0, r5, #25
 8009f5c:	d5fb      	bpl.n	8009f56 <_printf_i+0xbe>
 8009f5e:	881b      	ldrh	r3, [r3, #0]
 8009f60:	4854      	ldr	r0, [pc, #336]	; (800a0b4 <_printf_i+0x21c>)
 8009f62:	296f      	cmp	r1, #111	; 0x6f
 8009f64:	bf14      	ite	ne
 8009f66:	220a      	movne	r2, #10
 8009f68:	2208      	moveq	r2, #8
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f70:	6865      	ldr	r5, [r4, #4]
 8009f72:	60a5      	str	r5, [r4, #8]
 8009f74:	2d00      	cmp	r5, #0
 8009f76:	f2c0 8095 	blt.w	800a0a4 <_printf_i+0x20c>
 8009f7a:	6821      	ldr	r1, [r4, #0]
 8009f7c:	f021 0104 	bic.w	r1, r1, #4
 8009f80:	6021      	str	r1, [r4, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d13d      	bne.n	800a002 <_printf_i+0x16a>
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	f040 808e 	bne.w	800a0a8 <_printf_i+0x210>
 8009f8c:	4665      	mov	r5, ip
 8009f8e:	2a08      	cmp	r2, #8
 8009f90:	d10b      	bne.n	8009faa <_printf_i+0x112>
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	07db      	lsls	r3, r3, #31
 8009f96:	d508      	bpl.n	8009faa <_printf_i+0x112>
 8009f98:	6923      	ldr	r3, [r4, #16]
 8009f9a:	6862      	ldr	r2, [r4, #4]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	bfde      	ittt	le
 8009fa0:	2330      	movle	r3, #48	; 0x30
 8009fa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fa6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009faa:	ebac 0305 	sub.w	r3, ip, r5
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	f8cd 8000 	str.w	r8, [sp]
 8009fb4:	463b      	mov	r3, r7
 8009fb6:	aa03      	add	r2, sp, #12
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7ff fef6 	bl	8009dac <_printf_common>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d14d      	bne.n	800a060 <_printf_i+0x1c8>
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fc8:	b005      	add	sp, #20
 8009fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fce:	4839      	ldr	r0, [pc, #228]	; (800a0b4 <_printf_i+0x21c>)
 8009fd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009fd4:	6813      	ldr	r3, [r2, #0]
 8009fd6:	6821      	ldr	r1, [r4, #0]
 8009fd8:	1d1d      	adds	r5, r3, #4
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6015      	str	r5, [r2, #0]
 8009fde:	060a      	lsls	r2, r1, #24
 8009fe0:	d50b      	bpl.n	8009ffa <_printf_i+0x162>
 8009fe2:	07ca      	lsls	r2, r1, #31
 8009fe4:	bf44      	itt	mi
 8009fe6:	f041 0120 	orrmi.w	r1, r1, #32
 8009fea:	6021      	strmi	r1, [r4, #0]
 8009fec:	b91b      	cbnz	r3, 8009ff6 <_printf_i+0x15e>
 8009fee:	6822      	ldr	r2, [r4, #0]
 8009ff0:	f022 0220 	bic.w	r2, r2, #32
 8009ff4:	6022      	str	r2, [r4, #0]
 8009ff6:	2210      	movs	r2, #16
 8009ff8:	e7b7      	b.n	8009f6a <_printf_i+0xd2>
 8009ffa:	064d      	lsls	r5, r1, #25
 8009ffc:	bf48      	it	mi
 8009ffe:	b29b      	uxthmi	r3, r3
 800a000:	e7ef      	b.n	8009fe2 <_printf_i+0x14a>
 800a002:	4665      	mov	r5, ip
 800a004:	fbb3 f1f2 	udiv	r1, r3, r2
 800a008:	fb02 3311 	mls	r3, r2, r1, r3
 800a00c:	5cc3      	ldrb	r3, [r0, r3]
 800a00e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a012:	460b      	mov	r3, r1
 800a014:	2900      	cmp	r1, #0
 800a016:	d1f5      	bne.n	800a004 <_printf_i+0x16c>
 800a018:	e7b9      	b.n	8009f8e <_printf_i+0xf6>
 800a01a:	6813      	ldr	r3, [r2, #0]
 800a01c:	6825      	ldr	r5, [r4, #0]
 800a01e:	6961      	ldr	r1, [r4, #20]
 800a020:	1d18      	adds	r0, r3, #4
 800a022:	6010      	str	r0, [r2, #0]
 800a024:	0628      	lsls	r0, r5, #24
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	d501      	bpl.n	800a02e <_printf_i+0x196>
 800a02a:	6019      	str	r1, [r3, #0]
 800a02c:	e002      	b.n	800a034 <_printf_i+0x19c>
 800a02e:	066a      	lsls	r2, r5, #25
 800a030:	d5fb      	bpl.n	800a02a <_printf_i+0x192>
 800a032:	8019      	strh	r1, [r3, #0]
 800a034:	2300      	movs	r3, #0
 800a036:	6123      	str	r3, [r4, #16]
 800a038:	4665      	mov	r5, ip
 800a03a:	e7b9      	b.n	8009fb0 <_printf_i+0x118>
 800a03c:	6813      	ldr	r3, [r2, #0]
 800a03e:	1d19      	adds	r1, r3, #4
 800a040:	6011      	str	r1, [r2, #0]
 800a042:	681d      	ldr	r5, [r3, #0]
 800a044:	6862      	ldr	r2, [r4, #4]
 800a046:	2100      	movs	r1, #0
 800a048:	4628      	mov	r0, r5
 800a04a:	f7f6 f8c1 	bl	80001d0 <memchr>
 800a04e:	b108      	cbz	r0, 800a054 <_printf_i+0x1bc>
 800a050:	1b40      	subs	r0, r0, r5
 800a052:	6060      	str	r0, [r4, #4]
 800a054:	6863      	ldr	r3, [r4, #4]
 800a056:	6123      	str	r3, [r4, #16]
 800a058:	2300      	movs	r3, #0
 800a05a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a05e:	e7a7      	b.n	8009fb0 <_printf_i+0x118>
 800a060:	6923      	ldr	r3, [r4, #16]
 800a062:	462a      	mov	r2, r5
 800a064:	4639      	mov	r1, r7
 800a066:	4630      	mov	r0, r6
 800a068:	47c0      	blx	r8
 800a06a:	3001      	adds	r0, #1
 800a06c:	d0aa      	beq.n	8009fc4 <_printf_i+0x12c>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	079b      	lsls	r3, r3, #30
 800a072:	d413      	bmi.n	800a09c <_printf_i+0x204>
 800a074:	68e0      	ldr	r0, [r4, #12]
 800a076:	9b03      	ldr	r3, [sp, #12]
 800a078:	4298      	cmp	r0, r3
 800a07a:	bfb8      	it	lt
 800a07c:	4618      	movlt	r0, r3
 800a07e:	e7a3      	b.n	8009fc8 <_printf_i+0x130>
 800a080:	2301      	movs	r3, #1
 800a082:	464a      	mov	r2, r9
 800a084:	4639      	mov	r1, r7
 800a086:	4630      	mov	r0, r6
 800a088:	47c0      	blx	r8
 800a08a:	3001      	adds	r0, #1
 800a08c:	d09a      	beq.n	8009fc4 <_printf_i+0x12c>
 800a08e:	3501      	adds	r5, #1
 800a090:	68e3      	ldr	r3, [r4, #12]
 800a092:	9a03      	ldr	r2, [sp, #12]
 800a094:	1a9b      	subs	r3, r3, r2
 800a096:	42ab      	cmp	r3, r5
 800a098:	dcf2      	bgt.n	800a080 <_printf_i+0x1e8>
 800a09a:	e7eb      	b.n	800a074 <_printf_i+0x1dc>
 800a09c:	2500      	movs	r5, #0
 800a09e:	f104 0919 	add.w	r9, r4, #25
 800a0a2:	e7f5      	b.n	800a090 <_printf_i+0x1f8>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1ac      	bne.n	800a002 <_printf_i+0x16a>
 800a0a8:	7803      	ldrb	r3, [r0, #0]
 800a0aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0b2:	e76c      	b.n	8009f8e <_printf_i+0xf6>
 800a0b4:	0800a2d1 	.word	0x0800a2d1
 800a0b8:	0800a2e2 	.word	0x0800a2e2

0800a0bc <__sread>:
 800a0bc:	b510      	push	{r4, lr}
 800a0be:	460c      	mov	r4, r1
 800a0c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c4:	f000 f894 	bl	800a1f0 <_read_r>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	bfab      	itete	ge
 800a0cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a0d0:	181b      	addge	r3, r3, r0
 800a0d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0d6:	bfac      	ite	ge
 800a0d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0da:	81a3      	strhlt	r3, [r4, #12]
 800a0dc:	bd10      	pop	{r4, pc}

0800a0de <__swrite>:
 800a0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e2:	461f      	mov	r7, r3
 800a0e4:	898b      	ldrh	r3, [r1, #12]
 800a0e6:	05db      	lsls	r3, r3, #23
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	4616      	mov	r6, r2
 800a0ee:	d505      	bpl.n	800a0fc <__swrite+0x1e>
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f8:	f000 f868 	bl	800a1cc <_lseek_r>
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	4632      	mov	r2, r6
 800a10a:	463b      	mov	r3, r7
 800a10c:	4628      	mov	r0, r5
 800a10e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a112:	f000 b817 	b.w	800a144 <_write_r>

0800a116 <__sseek>:
 800a116:	b510      	push	{r4, lr}
 800a118:	460c      	mov	r4, r1
 800a11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a11e:	f000 f855 	bl	800a1cc <_lseek_r>
 800a122:	1c43      	adds	r3, r0, #1
 800a124:	89a3      	ldrh	r3, [r4, #12]
 800a126:	bf15      	itete	ne
 800a128:	6560      	strne	r0, [r4, #84]	; 0x54
 800a12a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a12e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a132:	81a3      	strheq	r3, [r4, #12]
 800a134:	bf18      	it	ne
 800a136:	81a3      	strhne	r3, [r4, #12]
 800a138:	bd10      	pop	{r4, pc}

0800a13a <__sclose>:
 800a13a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a13e:	f000 b813 	b.w	800a168 <_close_r>
	...

0800a144 <_write_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4c07      	ldr	r4, [pc, #28]	; (800a164 <_write_r+0x20>)
 800a148:	4605      	mov	r5, r0
 800a14a:	4608      	mov	r0, r1
 800a14c:	4611      	mov	r1, r2
 800a14e:	2200      	movs	r2, #0
 800a150:	6022      	str	r2, [r4, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	f7f6 fed5 	bl	8000f02 <_write>
 800a158:	1c43      	adds	r3, r0, #1
 800a15a:	d102      	bne.n	800a162 <_write_r+0x1e>
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	b103      	cbz	r3, 800a162 <_write_r+0x1e>
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	bd38      	pop	{r3, r4, r5, pc}
 800a164:	20000910 	.word	0x20000910

0800a168 <_close_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	4c06      	ldr	r4, [pc, #24]	; (800a184 <_close_r+0x1c>)
 800a16c:	2300      	movs	r3, #0
 800a16e:	4605      	mov	r5, r0
 800a170:	4608      	mov	r0, r1
 800a172:	6023      	str	r3, [r4, #0]
 800a174:	f7f6 fee1 	bl	8000f3a <_close>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d102      	bne.n	800a182 <_close_r+0x1a>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	b103      	cbz	r3, 800a182 <_close_r+0x1a>
 800a180:	602b      	str	r3, [r5, #0]
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	20000910 	.word	0x20000910

0800a188 <_fstat_r>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	4c07      	ldr	r4, [pc, #28]	; (800a1a8 <_fstat_r+0x20>)
 800a18c:	2300      	movs	r3, #0
 800a18e:	4605      	mov	r5, r0
 800a190:	4608      	mov	r0, r1
 800a192:	4611      	mov	r1, r2
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	f7f6 fedc 	bl	8000f52 <_fstat>
 800a19a:	1c43      	adds	r3, r0, #1
 800a19c:	d102      	bne.n	800a1a4 <_fstat_r+0x1c>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	b103      	cbz	r3, 800a1a4 <_fstat_r+0x1c>
 800a1a2:	602b      	str	r3, [r5, #0]
 800a1a4:	bd38      	pop	{r3, r4, r5, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000910 	.word	0x20000910

0800a1ac <_isatty_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	4c06      	ldr	r4, [pc, #24]	; (800a1c8 <_isatty_r+0x1c>)
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	f7f6 fedb 	bl	8000f72 <_isatty>
 800a1bc:	1c43      	adds	r3, r0, #1
 800a1be:	d102      	bne.n	800a1c6 <_isatty_r+0x1a>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	b103      	cbz	r3, 800a1c6 <_isatty_r+0x1a>
 800a1c4:	602b      	str	r3, [r5, #0]
 800a1c6:	bd38      	pop	{r3, r4, r5, pc}
 800a1c8:	20000910 	.word	0x20000910

0800a1cc <_lseek_r>:
 800a1cc:	b538      	push	{r3, r4, r5, lr}
 800a1ce:	4c07      	ldr	r4, [pc, #28]	; (800a1ec <_lseek_r+0x20>)
 800a1d0:	4605      	mov	r5, r0
 800a1d2:	4608      	mov	r0, r1
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	6022      	str	r2, [r4, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	f7f6 fed4 	bl	8000f88 <_lseek>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d102      	bne.n	800a1ea <_lseek_r+0x1e>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	b103      	cbz	r3, 800a1ea <_lseek_r+0x1e>
 800a1e8:	602b      	str	r3, [r5, #0]
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	20000910 	.word	0x20000910

0800a1f0 <_read_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4c07      	ldr	r4, [pc, #28]	; (800a210 <_read_r+0x20>)
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	4608      	mov	r0, r1
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	6022      	str	r2, [r4, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	f7f6 fe62 	bl	8000ec8 <_read>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_read_r+0x1e>
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_read_r+0x1e>
 800a20c:	602b      	str	r3, [r5, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	20000910 	.word	0x20000910

0800a214 <_init>:
 800a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a216:	bf00      	nop
 800a218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a21a:	bc08      	pop	{r3}
 800a21c:	469e      	mov	lr, r3
 800a21e:	4770      	bx	lr

0800a220 <_fini>:
 800a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a222:	bf00      	nop
 800a224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a226:	bc08      	pop	{r3}
 800a228:	469e      	mov	lr, r3
 800a22a:	4770      	bx	lr
