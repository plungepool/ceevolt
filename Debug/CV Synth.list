
CV Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08008fb8  08008fb8  00018fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fdc  08008fdc  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008fdc  08008fdc  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe4  08008fe4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe8  08008fe8  00018fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  200000a0  0800908c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  0800908c  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b04f  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a21  00000000  00000000  0003b11f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001398  00000000  00000000  0003eb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  0003fed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002406f  00000000  00000000  000410f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000128d7  00000000  00000000  0006515f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd505  00000000  00000000  00077a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144f3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005314  00000000  00000000  00144fb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008fa0 	.word	0x08008fa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	08008fa0 	.word	0x08008fa0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fce6 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f826 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f980 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 f95e 	bl	8000798 <MX_DMA_Init>
  MX_I2C1_Init();
 80004dc:	f000 f8a0 	bl	8000620 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8cc 	bl	800067c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8f8 	bl	80006d8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f008 f956 	bl	8008798 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f92a 	bl	8000744 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f0:	f008 f978 	bl	80087e4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    		HAL_UART_Transmit(&huart2, TxData, 13, 10);
 80004f4:	230a      	movs	r3, #10
 80004f6:	220d      	movs	r2, #13
 80004f8:	4906      	ldr	r1, [pc, #24]	; (8000514 <main+0x4c>)
 80004fa:	4807      	ldr	r0, [pc, #28]	; (8000518 <main+0x50>)
 80004fc:	f004 fc67 	bl	8004dce <HAL_UART_Transmit>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <main+0x54>)
 8000506:	f001 fb2c 	bl	8001b62 <HAL_GPIO_TogglePin>
    HAL_Delay(5000);
 800050a:	f241 3088 	movw	r0, #5000	; 0x1388
 800050e:	f000 fd37 	bl	8000f80 <HAL_Delay>
    MX_USB_HOST_Process();
 8000512:	e7ed      	b.n	80004f0 <main+0x28>
 8000514:	20000000 	.word	0x20000000
 8000518:	200001e8 	.word	0x200001e8
 800051c:	40020c00 	.word	0x40020c00

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b098      	sub	sp, #96	; 0x60
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f008 fc74 	bl	8008e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 031c 	add.w	r3, r7, #28
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b30      	ldr	r3, [pc, #192]	; (8000618 <SystemClock_Config+0xf8>)
 8000558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055a:	4a2f      	ldr	r2, [pc, #188]	; (8000618 <SystemClock_Config+0xf8>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	6413      	str	r3, [r2, #64]	; 0x40
 8000562:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <SystemClock_Config+0xf8>)
 8000564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <SystemClock_Config+0xfc>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a29      	ldr	r2, [pc, #164]	; (800061c <SystemClock_Config+0xfc>)
 8000578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	4b27      	ldr	r3, [pc, #156]	; (800061c <SystemClock_Config+0xfc>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058a:	2301      	movs	r3, #1
 800058c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000592:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000598:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800059e:	2304      	movs	r3, #4
 80005a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005a2:	2360      	movs	r3, #96	; 0x60
 80005a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80005a6:	2306      	movs	r3, #6
 80005a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005aa:	2304      	movs	r3, #4
 80005ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fdba 	bl	800412c <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005be:	f000 fa09 	bl	80009d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2101      	movs	r1, #1
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 f813 	bl	800460c <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005ec:	f000 f9f2 	bl	80009d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005f0:	2301      	movs	r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80005f4:	2332      	movs	r3, #50	; 0x32
 80005f6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4618      	mov	r0, r3
 8000602:	f004 f9f5 	bl	80049f0 <HAL_RCCEx_PeriphCLKConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800060c:	f000 f9e2 	bl	80009d4 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3760      	adds	r7, #96	; 0x60
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f002 ff8d 	bl	800357c <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f9b4 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000130 	.word	0x20000130
 8000674:	40005400 	.word	0x40005400
 8000678:	000186a0 	.word	0x000186a0

0800067c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_I2S3_Init+0x54>)
 8000682:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <MX_I2S3_Init+0x58>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2S3_Init+0x54>)
 8000688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_I2S3_Init+0x54>)
 800069c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006a8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006be:	f003 f895 	bl	80037ec <HAL_I2S_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80006c8:	f000 f984 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000228 	.word	0x20000228
 80006d4:	40003c00 	.word	0x40003c00

080006d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_SPI1_Init+0x64>)
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <MX_SPI1_Init+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_SPI1_Init+0x64>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_SPI1_Init+0x64>)
 8000724:	220a      	movs	r2, #10
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_SPI1_Init+0x64>)
 800072a:	f004 fa9f 	bl	8004c6c <HAL_SPI_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000734:	f000 f94e 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000184 	.word	0x20000184
 8000740:	40013000 	.word	0x40013000

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_USART2_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000750:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800077c:	f004 fada 	bl	8004d34 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f000 f925 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001e8 	.word	0x200001e8
 8000794:	40004400 	.word	0x40004400

08000798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_DMA_Init+0x3c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <MX_DMA_Init+0x3c>)
 80007a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_DMA_Init+0x3c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2010      	movs	r0, #16
 80007c0:	f000 fcdb 	bl	800117a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007c4:	2010      	movs	r0, #16
 80007c6:	f000 fcf4 	bl	80011b2 <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	; 0x30
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	4b71      	ldr	r3, [pc, #452]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a70      	ldr	r2, [pc, #448]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b6e      	ldr	r3, [pc, #440]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	61bb      	str	r3, [r7, #24]
 8000808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	4b6a      	ldr	r3, [pc, #424]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a69      	ldr	r2, [pc, #420]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b67      	ldr	r3, [pc, #412]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b63      	ldr	r3, [pc, #396]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a62      	ldr	r2, [pc, #392]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b60      	ldr	r3, [pc, #384]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b5c      	ldr	r3, [pc, #368]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a5b      	ldr	r2, [pc, #364]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b59      	ldr	r3, [pc, #356]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b55      	ldr	r3, [pc, #340]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a54      	ldr	r2, [pc, #336]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b52      	ldr	r3, [pc, #328]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b4e      	ldr	r3, [pc, #312]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a4d      	ldr	r2, [pc, #308]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b4b      	ldr	r3, [pc, #300]	; (80009b8 <MX_GPIO_Init+0x1e0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2108      	movs	r1, #8
 800089a:	4848      	ldr	r0, [pc, #288]	; (80009bc <MX_GPIO_Init+0x1e4>)
 800089c:	f001 f948 	bl	8001b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2101      	movs	r1, #1
 80008a4:	4846      	ldr	r0, [pc, #280]	; (80009c0 <MX_GPIO_Init+0x1e8>)
 80008a6:	f001 f943 	bl	8001b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008aa:	2200      	movs	r2, #0
 80008ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008b0:	4844      	ldr	r0, [pc, #272]	; (80009c4 <MX_GPIO_Init+0x1ec>)
 80008b2:	f001 f93d 	bl	8001b30 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008b6:	2308      	movs	r3, #8
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	483b      	ldr	r0, [pc, #236]	; (80009bc <MX_GPIO_Init+0x1e4>)
 80008ce:	f000 ff95 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4835      	ldr	r0, [pc, #212]	; (80009c0 <MX_GPIO_Init+0x1e8>)
 80008ea:	f000 ff87 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ee:	2308      	movs	r3, #8
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fe:	2305      	movs	r3, #5
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	482d      	ldr	r0, [pc, #180]	; (80009c0 <MX_GPIO_Init+0x1e8>)
 800090a:	f000 ff77 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800090e:	2301      	movs	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_GPIO_Init+0x1f0>)
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	482a      	ldr	r0, [pc, #168]	; (80009cc <MX_GPIO_Init+0x1f4>)
 8000922:	f000 ff6b 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000926:	2304      	movs	r3, #4
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4825      	ldr	r0, [pc, #148]	; (80009d0 <MX_GPIO_Init+0x1f8>)
 800093a:	f000 ff5f 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800093e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000950:	2305      	movs	r3, #5
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	481d      	ldr	r0, [pc, #116]	; (80009d0 <MX_GPIO_Init+0x1f8>)
 800095c:	f000 ff4e 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000960:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000964:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <MX_GPIO_Init+0x1ec>)
 800097a:	f000 ff3f 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800097e:	2320      	movs	r3, #32
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_GPIO_Init+0x1ec>)
 8000992:	f000 ff33 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000996:	2302      	movs	r3, #2
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_GPIO_Init+0x1f0>)
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_GPIO_Init+0x1e4>)
 80009aa:	f000 ff27 	bl	80017fc <HAL_GPIO_Init>

}
 80009ae:	bf00      	nop
 80009b0:	3730      	adds	r7, #48	; 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020c00 	.word	0x40020c00
 80009c8:	10120000 	.word	0x10120000
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009da:	e7fe      	b.n	80009da <Error_Handler+0x6>

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_MspInit+0x4c>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a1a:	2007      	movs	r0, #7
 8000a1c:	f000 fba2 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <HAL_I2C_MspInit+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12c      	bne.n	8000aa8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_I2C_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_I2C_MspInit+0x88>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_I2C_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a70:	2312      	movs	r3, #18
 8000a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <HAL_I2C_MspInit+0x8c>)
 8000a88:	f000 feb8 	bl	80017fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_I2C_MspInit+0x88>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_I2C_MspInit+0x88>)
 8000a96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_I2C_MspInit+0x88>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020400 	.word	0x40020400

08000abc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <HAL_I2S_MspInit+0xc0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d14a      	bne.n	8000b74 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <HAL_I2S_MspInit+0xc4>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a26      	ldr	r2, [pc, #152]	; (8000b80 <HAL_I2S_MspInit+0xc4>)
 8000ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <HAL_I2S_MspInit+0xc4>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <HAL_I2S_MspInit+0xc4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <HAL_I2S_MspInit+0xc4>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <HAL_I2S_MspInit+0xc4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <HAL_I2S_MspInit+0xc4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <HAL_I2S_MspInit+0xc4>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_I2S_MspInit+0xc4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b32:	2310      	movs	r3, #16
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b42:	2306      	movs	r3, #6
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <HAL_I2S_MspInit+0xc8>)
 8000b4e:	f000 fe55 	bl	80017fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b52:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b64:	2306      	movs	r3, #6
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <HAL_I2S_MspInit+0xcc>)
 8000b70:	f000 fe44 	bl	80017fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40003c00 	.word	0x40003c00
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020800 	.word	0x40020800

08000b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <HAL_SPI_MspInit+0x84>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12b      	bne.n	8000c06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_SPI_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000be6:	23e0      	movs	r3, #224	; 0xe0
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_SPI_MspInit+0x8c>)
 8000c02:	f000 fdfb 	bl	80017fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40013000 	.word	0x40013000
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020000 	.word	0x40020000

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a34      	ldr	r2, [pc, #208]	; (8000d0c <HAL_UART_MspInit+0xf0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d162      	bne.n	8000d04 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <HAL_UART_MspInit+0xf4>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a32      	ldr	r2, [pc, #200]	; (8000d10 <HAL_UART_MspInit+0xf4>)
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <HAL_UART_MspInit+0xf4>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <HAL_UART_MspInit+0xf4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a2b      	ldr	r2, [pc, #172]	; (8000d10 <HAL_UART_MspInit+0xf4>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <HAL_UART_MspInit+0xf4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c76:	230c      	movs	r3, #12
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c86:	2307      	movs	r3, #7
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4820      	ldr	r0, [pc, #128]	; (8000d14 <HAL_UART_MspInit+0xf8>)
 8000c92:	f000 fdb3 	bl	80017fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c96:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000c98:	4a20      	ldr	r2, [pc, #128]	; (8000d1c <HAL_UART_MspInit+0x100>)
 8000c9a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cd8:	480f      	ldr	r0, [pc, #60]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000cda:	f000 fa85 	bl	80011e8 <HAL_DMA_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000ce4:	f7ff fe76 	bl	80009d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_UART_MspInit+0xfc>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2026      	movs	r0, #38	; 0x26
 8000cfa:	f000 fa3e 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cfe:	2026      	movs	r0, #38	; 0x26
 8000d00:	f000 fa57 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000
 8000d18:	200000d0 	.word	0x200000d0
 8000d1c:	40026088 	.word	0x40026088

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f8e8 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <DMA1_Stream5_IRQHandler+0x10>)
 8000d7a:	f000 fb05 	bl	8001388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000d0 	.word	0x200000d0

08000d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <USART2_IRQHandler+0x10>)
 8000d8e:	f004 f8b7 	bl	8004f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200001e8 	.word	0x200001e8

08000d9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <OTG_FS_IRQHandler+0x10>)
 8000da2:	f001 f989 	bl	80020b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000064c 	.word	0x2000064c

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f007 ffe2 	bl	8008da8 <__errno>
 8000de4:	4602      	mov	r2, r0
 8000de6:	230c      	movs	r3, #12
 8000de8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20020000 	.word	0x20020000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	200000bc 	.word	0x200000bc
 8000e18:	20000918 	.word	0x20000918

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <SystemInit+0x28>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <SystemInit+0x28>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SystemInit+0x28>)
 8000e32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e36:	609a      	str	r2, [r3, #8]
#endif
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e4e:	e003      	b.n	8000e58 <LoopCopyDataInit>

08000e50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e56:	3104      	adds	r1, #4

08000e58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e60:	d3f6      	bcc.n	8000e50 <CopyDataInit>
  ldr  r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e64:	e002      	b.n	8000e6c <LoopFillZerobss>

08000e66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e68:	f842 3b04 	str.w	r3, [r2], #4

08000e6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e70:	d3f9      	bcc.n	8000e66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e72:	f7ff ffd3 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f007 ff9d 	bl	8008db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fb25 	bl	80004c8 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e84:	08008fec 	.word	0x08008fec
  ldr  r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e8c:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8000e90:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8000e94:	20000914 	.word	0x20000914

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_Init+0x40>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_Init+0x40>)
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_Init+0x40>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f94d 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fd84 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f965 	bl	80011ce <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f1c:	f000 f92d 	bl	800117a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000010 	.word	0x20000010
 8000f38:	20000018 	.word	0x20000018
 8000f3c:	20000014 	.word	0x20000014

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000018 	.word	0x20000018
 8000f64:	20000270 	.word	0x20000270

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000270 	.word	0x20000270

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_Delay+0x40>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000018 	.word	0x20000018

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <__NVIC_EnableIRQ+0x38>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001144:	f7ff ff8e 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff29 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff3e 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff8e 	bl	80010b8 <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5d 	bl	8001064 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff31 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffa2 	bl	8001120 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff feb8 	bl	8000f68 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e099      	b.n	8001338 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2202      	movs	r2, #2
 8001210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0201 	bic.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001224:	e00f      	b.n	8001246 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001226:	f7ff fe9f 	bl	8000f68 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b05      	cmp	r3, #5
 8001232:	d908      	bls.n	8001246 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2220      	movs	r2, #32
 8001238:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2203      	movs	r2, #3
 800123e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e078      	b.n	8001338 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1e8      	bne.n	8001226 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	4b38      	ldr	r3, [pc, #224]	; (8001340 <HAL_DMA_Init+0x158>)
 8001260:	4013      	ands	r3, r2
 8001262:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001272:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800128a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4313      	orrs	r3, r2
 8001296:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	2b04      	cmp	r3, #4
 800129e:	d107      	bne.n	80012b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4313      	orrs	r3, r2
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f023 0307 	bic.w	r3, r3, #7
 80012c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d117      	bne.n	800130a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00e      	beq.n	800130a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fa0b 	bl	8001708 <DMA_CheckFifoParam>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2240      	movs	r2, #64	; 0x40
 80012fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001306:	2301      	movs	r3, #1
 8001308:	e016      	b.n	8001338 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f9c2 	bl	800169c <DMA_CalcBaseAndBitshift>
 8001318:	4603      	mov	r3, r0
 800131a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001320:	223f      	movs	r2, #63	; 0x3f
 8001322:	409a      	lsls	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	f010803f 	.word	0xf010803f

08001344 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d004      	beq.n	8001362 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00c      	b.n	800137c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2205      	movs	r2, #5
 8001366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0201 	bic.w	r2, r2, #1
 8001378:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001394:	4b92      	ldr	r3, [pc, #584]	; (80015e0 <HAL_DMA_IRQHandler+0x258>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a92      	ldr	r2, [pc, #584]	; (80015e4 <HAL_DMA_IRQHandler+0x25c>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	0a9b      	lsrs	r3, r3, #10
 80013a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b2:	2208      	movs	r2, #8
 80013b4:	409a      	lsls	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d01a      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d013      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0204 	bic.w	r2, r2, #4
 80013da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e0:	2208      	movs	r2, #8
 80013e2:	409a      	lsls	r2, r3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ec:	f043 0201 	orr.w	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f8:	2201      	movs	r2, #1
 80013fa:	409a      	lsls	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d012      	beq.n	800142a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00b      	beq.n	800142a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001416:	2201      	movs	r2, #1
 8001418:	409a      	lsls	r2, r3
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001422:	f043 0202 	orr.w	r2, r3, #2
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142e:	2204      	movs	r2, #4
 8001430:	409a      	lsls	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d012      	beq.n	8001460 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00b      	beq.n	8001460 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	2204      	movs	r2, #4
 800144e:	409a      	lsls	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001458:	f043 0204 	orr.w	r2, r3, #4
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001464:	2210      	movs	r2, #16
 8001466:	409a      	lsls	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d043      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d03c      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	2210      	movs	r2, #16
 8001484:	409a      	lsls	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d018      	beq.n	80014ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d108      	bne.n	80014b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d024      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	4798      	blx	r3
 80014b6:	e01f      	b.n	80014f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01b      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
 80014c8:	e016      	b.n	80014f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d107      	bne.n	80014e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0208 	bic.w	r2, r2, #8
 80014e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	2220      	movs	r2, #32
 80014fe:	409a      	lsls	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 808e 	beq.w	8001626 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0310 	and.w	r3, r3, #16
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 8086 	beq.w	8001626 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151e:	2220      	movs	r2, #32
 8001520:	409a      	lsls	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b05      	cmp	r3, #5
 8001530:	d136      	bne.n	80015a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0216 	bic.w	r2, r2, #22
 8001540:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001550:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	2b00      	cmp	r3, #0
 8001558:	d103      	bne.n	8001562 <HAL_DMA_IRQHandler+0x1da>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0208 	bic.w	r2, r2, #8
 8001570:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001576:	223f      	movs	r2, #63	; 0x3f
 8001578:	409a      	lsls	r2, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001592:	2b00      	cmp	r3, #0
 8001594:	d07d      	beq.n	8001692 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
        }
        return;
 800159e:	e078      	b.n	8001692 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d01c      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d108      	bne.n	80015ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d030      	beq.n	8001626 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
 80015cc:	e02b      	b.n	8001626 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d027      	beq.n	8001626 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	4798      	blx	r3
 80015de:	e022      	b.n	8001626 <HAL_DMA_IRQHandler+0x29e>
 80015e0:	20000010 	.word	0x20000010
 80015e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0210 	bic.w	r2, r2, #16
 8001604:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	2b00      	cmp	r3, #0
 800162c:	d032      	beq.n	8001694 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d022      	beq.n	8001680 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2205      	movs	r2, #5
 800163e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0201 	bic.w	r2, r2, #1
 8001650:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	3301      	adds	r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	429a      	cmp	r2, r3
 800165c:	d307      	bcc.n	800166e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f2      	bne.n	8001652 <HAL_DMA_IRQHandler+0x2ca>
 800166c:	e000      	b.n	8001670 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800166e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
 8001690:	e000      	b.n	8001694 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001692:	bf00      	nop
    }
  }
}
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop

0800169c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	3b10      	subs	r3, #16
 80016ac:	4a14      	ldr	r2, [pc, #80]	; (8001700 <DMA_CalcBaseAndBitshift+0x64>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <DMA_CalcBaseAndBitshift+0x68>)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d909      	bls.n	80016de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016d2:	f023 0303 	bic.w	r3, r3, #3
 80016d6:	1d1a      	adds	r2, r3, #4
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	659a      	str	r2, [r3, #88]	; 0x58
 80016dc:	e007      	b.n	80016ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016e6:	f023 0303 	bic.w	r3, r3, #3
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	aaaaaaab 	.word	0xaaaaaaab
 8001704:	08008fd4 	.word	0x08008fd4

08001708 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d11f      	bne.n	8001762 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2b03      	cmp	r3, #3
 8001726:	d855      	bhi.n	80017d4 <DMA_CheckFifoParam+0xcc>
 8001728:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <DMA_CheckFifoParam+0x28>)
 800172a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172e:	bf00      	nop
 8001730:	08001741 	.word	0x08001741
 8001734:	08001753 	.word	0x08001753
 8001738:	08001741 	.word	0x08001741
 800173c:	080017d5 	.word	0x080017d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d045      	beq.n	80017d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001750:	e042      	b.n	80017d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800175a:	d13f      	bne.n	80017dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001760:	e03c      	b.n	80017dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800176a:	d121      	bne.n	80017b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d836      	bhi.n	80017e0 <DMA_CheckFifoParam+0xd8>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <DMA_CheckFifoParam+0x70>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	08001789 	.word	0x08001789
 800177c:	0800178f 	.word	0x0800178f
 8001780:	08001789 	.word	0x08001789
 8001784:	080017a1 	.word	0x080017a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
      break;
 800178c:	e02f      	b.n	80017ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d024      	beq.n	80017e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800179e:	e021      	b.n	80017e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017a8:	d11e      	bne.n	80017e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017ae:	e01b      	b.n	80017e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d902      	bls.n	80017bc <DMA_CheckFifoParam+0xb4>
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d003      	beq.n	80017c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017ba:	e018      	b.n	80017ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
      break;
 80017c0:	e015      	b.n	80017ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00e      	beq.n	80017ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
      break;
 80017d2:	e00b      	b.n	80017ec <DMA_CheckFifoParam+0xe4>
      break;
 80017d4:	bf00      	nop
 80017d6:	e00a      	b.n	80017ee <DMA_CheckFifoParam+0xe6>
      break;
 80017d8:	bf00      	nop
 80017da:	e008      	b.n	80017ee <DMA_CheckFifoParam+0xe6>
      break;
 80017dc:	bf00      	nop
 80017de:	e006      	b.n	80017ee <DMA_CheckFifoParam+0xe6>
      break;
 80017e0:	bf00      	nop
 80017e2:	e004      	b.n	80017ee <DMA_CheckFifoParam+0xe6>
      break;
 80017e4:	bf00      	nop
 80017e6:	e002      	b.n	80017ee <DMA_CheckFifoParam+0xe6>
      break;   
 80017e8:	bf00      	nop
 80017ea:	e000      	b.n	80017ee <DMA_CheckFifoParam+0xe6>
      break;
 80017ec:	bf00      	nop
    }
  } 
  
  return status; 
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	e16b      	b.n	8001af0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001818:	2201      	movs	r2, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 815a 	bne.w	8001aea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d00b      	beq.n	8001856 <HAL_GPIO_Init+0x5a>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d007      	beq.n	8001856 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184a:	2b11      	cmp	r3, #17
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b12      	cmp	r3, #18
 8001854:	d130      	bne.n	80018b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 0201 	and.w	r2, r3, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0xfc>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b12      	cmp	r3, #18
 80018f6:	d123      	bne.n	8001940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	69b9      	ldr	r1, [r7, #24]
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80b4 	beq.w	8001aea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b5f      	ldr	r3, [pc, #380]	; (8001b04 <HAL_GPIO_Init+0x308>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a5e      	ldr	r2, [pc, #376]	; (8001b04 <HAL_GPIO_Init+0x308>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b5c      	ldr	r3, [pc, #368]	; (8001b04 <HAL_GPIO_Init+0x308>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800199e:	4a5a      	ldr	r2, [pc, #360]	; (8001b08 <HAL_GPIO_Init+0x30c>)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a51      	ldr	r2, [pc, #324]	; (8001b0c <HAL_GPIO_Init+0x310>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d02b      	beq.n	8001a22 <HAL_GPIO_Init+0x226>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a50      	ldr	r2, [pc, #320]	; (8001b10 <HAL_GPIO_Init+0x314>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d025      	beq.n	8001a1e <HAL_GPIO_Init+0x222>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4f      	ldr	r2, [pc, #316]	; (8001b14 <HAL_GPIO_Init+0x318>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d01f      	beq.n	8001a1a <HAL_GPIO_Init+0x21e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4e      	ldr	r2, [pc, #312]	; (8001b18 <HAL_GPIO_Init+0x31c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d019      	beq.n	8001a16 <HAL_GPIO_Init+0x21a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4d      	ldr	r2, [pc, #308]	; (8001b1c <HAL_GPIO_Init+0x320>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0x216>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4c      	ldr	r2, [pc, #304]	; (8001b20 <HAL_GPIO_Init+0x324>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00d      	beq.n	8001a0e <HAL_GPIO_Init+0x212>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_GPIO_Init+0x328>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_Init+0x20e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4a      	ldr	r2, [pc, #296]	; (8001b28 <HAL_GPIO_Init+0x32c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_GPIO_Init+0x20a>
 8001a02:	2307      	movs	r3, #7
 8001a04:	e00e      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a06:	2308      	movs	r3, #8
 8001a08:	e00c      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a0a:	2306      	movs	r3, #6
 8001a0c:	e00a      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a0e:	2305      	movs	r3, #5
 8001a10:	e008      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a12:	2304      	movs	r3, #4
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a16:	2303      	movs	r3, #3
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x228>
 8001a22:	2300      	movs	r3, #0
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a34:	4934      	ldr	r1, [pc, #208]	; (8001b08 <HAL_GPIO_Init+0x30c>)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <HAL_GPIO_Init+0x330>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a66:	4a31      	ldr	r2, [pc, #196]	; (8001b2c <HAL_GPIO_Init+0x330>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <HAL_GPIO_Init+0x330>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a90:	4a26      	ldr	r2, [pc, #152]	; (8001b2c <HAL_GPIO_Init+0x330>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_GPIO_Init+0x330>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aba:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <HAL_GPIO_Init+0x330>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_GPIO_Init+0x330>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae4:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_GPIO_Init+0x330>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3301      	adds	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	f67f ae90 	bls.w	8001818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af8:	bf00      	nop
 8001afa:	3724      	adds	r7, #36	; 0x24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40013800 	.word	0x40013800
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40020400 	.word	0x40020400
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020c00 	.word	0x40020c00
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40021400 	.word	0x40021400
 8001b24:	40021800 	.word	0x40021800
 8001b28:	40021c00 	.word	0x40021c00
 8001b2c:	40013c00 	.word	0x40013c00

08001b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b4c:	e003      	b.n	8001b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	041a      	lsls	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	401a      	ands	r2, r3
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d104      	bne.n	8001b86 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	041a      	lsls	r2, r3, #16
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	619a      	str	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9a:	b08f      	sub	sp, #60	; 0x3c
 8001b9c:	af0a      	add	r7, sp, #40	; 0x28
 8001b9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e054      	b.n	8001c54 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d106      	bne.n	8001bca <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f006 fe45 	bl	8008854 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2203      	movs	r2, #3
 8001bce:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f004 f801 	bl	8005bf0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	687e      	ldr	r6, [r7, #4]
 8001bf6:	466d      	mov	r5, sp
 8001bf8:	f106 0410 	add.w	r4, r6, #16
 8001bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c08:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c0c:	1d33      	adds	r3, r6, #4
 8001c0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c10:	6838      	ldr	r0, [r7, #0]
 8001c12:	f003 ff7b 	bl	8005b0c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 fff8 	bl	8005c12 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	687e      	ldr	r6, [r7, #4]
 8001c2a:	466d      	mov	r5, sp
 8001c2c:	f106 0410 	add.w	r4, r6, #16
 8001c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c40:	1d33      	adds	r3, r6, #4
 8001c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c44:	6838      	ldr	r0, [r7, #0]
 8001c46:	f004 f90b 	bl	8005e60 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c5c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af04      	add	r7, sp, #16
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	70fb      	strb	r3, [r7, #3]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	70bb      	strb	r3, [r7, #2]
 8001c72:	4613      	mov	r3, r2
 8001c74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_HCD_HC_Init+0x28>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e07f      	b.n	8001d84 <HAL_HCD_HC_Init+0x128>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001c8c:	78fa      	ldrb	r2, [r7, #3]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	333d      	adds	r3, #61	; 0x3d
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3338      	adds	r3, #56	; 0x38
 8001cb0:	787a      	ldrb	r2, [r7, #1]
 8001cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3340      	adds	r3, #64	; 0x40
 8001cc4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001cc6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cc8:	78fa      	ldrb	r2, [r7, #3]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3339      	adds	r3, #57	; 0x39
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	333f      	adds	r3, #63	; 0x3f
 8001cec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001cf0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001cf2:	78fa      	ldrb	r2, [r7, #3]
 8001cf4:	78bb      	ldrb	r3, [r7, #2]
 8001cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cfa:	b2d8      	uxtb	r0, r3
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	333a      	adds	r3, #58	; 0x3a
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001d0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da0a      	bge.n	8001d2c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	333b      	adds	r3, #59	; 0x3b
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e009      	b.n	8001d40 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001d2c:	78fa      	ldrb	r2, [r7, #3]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	440b      	add	r3, r1
 8001d3a:	333b      	adds	r3, #59	; 0x3b
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	333c      	adds	r3, #60	; 0x3c
 8001d50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d54:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	787c      	ldrb	r4, [r7, #1]
 8001d5c:	78ba      	ldrb	r2, [r7, #2]
 8001d5e:	78f9      	ldrb	r1, [r7, #3]
 8001d60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	4623      	mov	r3, r4
 8001d72:	f004 f9f7 	bl	8006164 <USB_HC_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd90      	pop	{r4, r7, pc}

08001d8c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_HCD_HC_Halt+0x1e>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e00f      	b.n	8001dca <HAL_HCD_HC_Halt+0x3e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fc33 	bl	8006626 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	4608      	mov	r0, r1
 8001dde:	4611      	mov	r1, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	70fb      	strb	r3, [r7, #3]
 8001de6:	460b      	mov	r3, r1
 8001de8:	70bb      	strb	r3, [r7, #2]
 8001dea:	4613      	mov	r3, r2
 8001dec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	333b      	adds	r3, #59	; 0x3b
 8001dfe:	78ba      	ldrb	r2, [r7, #2]
 8001e00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e02:	78fa      	ldrb	r2, [r7, #3]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	333f      	adds	r3, #63	; 0x3f
 8001e12:	787a      	ldrb	r2, [r7, #1]
 8001e14:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e16:	7c3b      	ldrb	r3, [r7, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d114      	bne.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	3342      	adds	r3, #66	; 0x42
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	333d      	adds	r3, #61	; 0x3d
 8001e40:	7f3a      	ldrb	r2, [r7, #28]
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e009      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	3342      	adds	r3, #66	; 0x42
 8001e56:	2202      	movs	r2, #2
 8001e58:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001e5a:	787b      	ldrb	r3, [r7, #1]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	f200 80d6 	bhi.w	800200e <HAL_HCD_HC_SubmitRequest+0x23a>
 8001e62:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e68:	08001e79 	.word	0x08001e79
 8001e6c:	08001ff9 	.word	0x08001ff9
 8001e70:	08001ee5 	.word	0x08001ee5
 8001e74:	08001f6f 	.word	0x08001f6f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001e78:	7c3b      	ldrb	r3, [r7, #16]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	f040 80c9 	bne.w	8002012 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001e80:	78bb      	ldrb	r3, [r7, #2]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 80c5 	bne.w	8002012 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001e88:	8b3b      	ldrh	r3, [r7, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d109      	bne.n	8001ea2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3351      	adds	r3, #81	; 0x51
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	3351      	adds	r3, #81	; 0x51
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10a      	bne.n	8001ece <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	3342      	adds	r3, #66	; 0x42
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ecc:	e0a1      	b.n	8002012 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	3342      	adds	r3, #66	; 0x42
 8001ede:	2202      	movs	r2, #2
 8001ee0:	701a      	strb	r2, [r3, #0]
      break;
 8001ee2:	e096      	b.n	8002012 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ee4:	78bb      	ldrb	r3, [r7, #2]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d120      	bne.n	8001f2c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3351      	adds	r3, #81	; 0x51
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10a      	bne.n	8001f16 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3342      	adds	r3, #66	; 0x42
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f14:	e07e      	b.n	8002014 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	3342      	adds	r3, #66	; 0x42
 8001f26:	2202      	movs	r2, #2
 8001f28:	701a      	strb	r2, [r3, #0]
      break;
 8001f2a:	e073      	b.n	8002014 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	3350      	adds	r3, #80	; 0x50
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	3342      	adds	r3, #66	; 0x42
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
      break;
 8001f56:	e05d      	b.n	8002014 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	3342      	adds	r3, #66	; 0x42
 8001f68:	2202      	movs	r2, #2
 8001f6a:	701a      	strb	r2, [r3, #0]
      break;
 8001f6c:	e052      	b.n	8002014 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f6e:	78bb      	ldrb	r3, [r7, #2]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d120      	bne.n	8001fb6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	3351      	adds	r3, #81	; 0x51
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10a      	bne.n	8001fa0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	3342      	adds	r3, #66	; 0x42
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f9e:	e039      	b.n	8002014 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	3342      	adds	r3, #66	; 0x42
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	701a      	strb	r2, [r3, #0]
      break;
 8001fb4:	e02e      	b.n	8002014 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3350      	adds	r3, #80	; 0x50
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10a      	bne.n	8001fe2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3342      	adds	r3, #66	; 0x42
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
      break;
 8001fe0:	e018      	b.n	8002014 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	3342      	adds	r3, #66	; 0x42
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	701a      	strb	r2, [r3, #0]
      break;
 8001ff6:	e00d      	b.n	8002014 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	3342      	adds	r3, #66	; 0x42
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
      break;
 800200c:	e002      	b.n	8002014 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800200e:	bf00      	nop
 8002010:	e000      	b.n	8002014 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002012:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	3344      	adds	r3, #68	; 0x44
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	8b39      	ldrh	r1, [r7, #24]
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4403      	add	r3, r0
 8002038:	3348      	adds	r3, #72	; 0x48
 800203a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	335c      	adds	r3, #92	; 0x5c
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	334c      	adds	r3, #76	; 0x4c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	3339      	adds	r3, #57	; 0x39
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	335d      	adds	r3, #93	; 0x5d
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	3338      	adds	r3, #56	; 0x38
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	18d1      	adds	r1, r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	f004 f966 	bl	8006378 <USB_HC_StartXfer>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop

080020b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 fe83 	bl	8005dda <USB_GetMode>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	f040 80ef 	bne.w	80022ba <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 fe67 	bl	8005db4 <USB_ReadInterrupts>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80e5 	beq.w	80022b8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 fe5e 	bl	8005db4 <USB_ReadInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002102:	d104      	bne.n	800210e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800210c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fe4e 	bl	8005db4 <USB_ReadInterrupts>
 8002118:	4603      	mov	r3, r0
 800211a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002122:	d104      	bne.n	800212e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800212c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f003 fe3e 	bl	8005db4 <USB_ReadInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800213e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002142:	d104      	bne.n	800214e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800214c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f003 fe2e 	bl	8005db4 <USB_ReadInterrupts>
 8002158:	4603      	mov	r3, r0
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b02      	cmp	r3, #2
 8002160:	d103      	bne.n	800216a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2202      	movs	r2, #2
 8002168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f003 fe20 	bl	8005db4 <USB_ReadInterrupts>
 8002174:	4603      	mov	r3, r0
 8002176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800217a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800217e:	d115      	bne.n	80021ac <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002188:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d108      	bne.n	80021ac <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f006 fbd8 	bl	8008950 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 ff16 	bl	8005fd8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 fdff 	bl	8005db4 <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c0:	d102      	bne.n	80021c8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f001 f966 	bl	8003494 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f003 fdf1 	bl	8005db4 <USB_ReadInterrupts>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d106      	bne.n	80021ea <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f006 fb9b 	bl	8008918 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2208      	movs	r2, #8
 80021e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fde0 	bl	8005db4 <USB_ReadInterrupts>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021fe:	d138      	bne.n	8002272 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f004 f9fd 	bl	8006604 <USB_HC_ReadInterrupt>
 800220a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	e025      	b.n	800225e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 030f 	and.w	r3, r3, #15
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d018      	beq.n	8002258 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800223c:	d106      	bne.n	800224c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4619      	mov	r1, r3
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f8cf 	bl	80023e8 <HCD_HC_IN_IRQHandler>
 800224a:	e005      	b.n	8002258 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4619      	mov	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fcfd 	bl	8002c52 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	3301      	adds	r3, #1
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	d3d4      	bcc.n	8002212 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002270:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f003 fd9c 	bl	8005db4 <USB_ReadInterrupts>
 800227c:	4603      	mov	r3, r0
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b10      	cmp	r3, #16
 8002284:	d101      	bne.n	800228a <HAL_HCD_IRQHandler+0x1d2>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_HCD_IRQHandler+0x1d4>
 800228a:	2300      	movs	r3, #0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d014      	beq.n	80022ba <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0210 	bic.w	r2, r2, #16
 800229e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f001 f84b 	bl	800333c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699a      	ldr	r2, [r3, #24]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0210 	orr.w	r2, r2, #16
 80022b4:	619a      	str	r2, [r3, #24]
 80022b6:	e000      	b.n	80022ba <HAL_HCD_IRQHandler+0x202>
      return;
 80022b8:	bf00      	nop
    }
  }
}
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_HCD_Start+0x16>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e013      	b.n	80022fe <HAL_HCD_Start+0x3e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 fc73 	bl	8005bce <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 fed6 	bl	80060a0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_HCD_Stop+0x16>
 8002318:	2302      	movs	r3, #2
 800231a:	e00d      	b.n	8002338 <HAL_HCD_Stop+0x32>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f004 fab7 	bl	800689c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f003 fe7d 	bl	800604c <USB_ResetPort>
 8002352:	4603      	mov	r3, r0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	335c      	adds	r3, #92	; 0x5c
 8002378:	781b      	ldrb	r3, [r3, #0]
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	440b      	add	r3, r1
 80023a0:	334c      	adds	r3, #76	; 0x4c
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f003 febf 	bl	8006140 <USB_GetCurrentFrame>
 80023c2:	4603      	mov	r3, r0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 fe9a 	bl	8006112 <USB_GetHostSpeed>
 80023de:	4603      	mov	r3, r0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4413      	add	r3, r2
 800240a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b04      	cmp	r3, #4
 8002416:	d119      	bne.n	800244c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	461a      	mov	r2, r3
 8002426:	2304      	movs	r3, #4
 8002428:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	0151      	lsls	r1, r2, #5
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	440a      	add	r2, r1
 8002440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	60d3      	str	r3, [r2, #12]
 800244a:	e0ce      	b.n	80025ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002462:	d12c      	bne.n	80024be <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002470:	461a      	mov	r2, r3
 8002472:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002476:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	335d      	adds	r3, #93	; 0x5d
 8002488:	2207      	movs	r2, #7
 800248a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	0151      	lsls	r1, r2, #5
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	440a      	add	r2, r1
 80024a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 f8b5 	bl	8006626 <USB_HC_Halt>
 80024bc:	e095      	b.n	80025ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d109      	bne.n	80024e8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	461a      	mov	r2, r3
 80024e2:	2320      	movs	r3, #32
 80024e4:	6093      	str	r3, [r2, #8]
 80024e6:	e080      	b.n	80025ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d134      	bne.n	8002568 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	0151      	lsls	r1, r2, #5
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	440a      	add	r2, r1
 8002514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	440b      	add	r3, r1
 800252c:	335d      	adds	r3, #93	; 0x5d
 800252e:	2205      	movs	r2, #5
 8002530:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	461a      	mov	r2, r3
 8002540:	2310      	movs	r3, #16
 8002542:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	461a      	mov	r2, r3
 8002552:	2308      	movs	r3, #8
 8002554:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f004 f860 	bl	8006626 <USB_HC_Halt>
 8002566:	e040      	b.n	80025ea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257e:	d134      	bne.n	80025ea <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	0151      	lsls	r1, r2, #5
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	440a      	add	r2, r1
 8002596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800259a:	f043 0302 	orr.w	r3, r3, #2
 800259e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f004 f83b 	bl	8006626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	461a      	mov	r2, r3
 80025be:	2310      	movs	r3, #16
 80025c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	335d      	adds	r3, #93	; 0x5d
 80025d2:	2208      	movs	r2, #8
 80025d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	461a      	mov	r2, r3
 80025e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002600:	d122      	bne.n	8002648 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	0151      	lsls	r1, r2, #5
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	440a      	add	r2, r1
 8002618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f003 fffa 	bl	8006626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	461a      	mov	r2, r3
 8002640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002644:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002646:	e300      	b.n	8002c4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	f040 80fd 	bne.w	800285a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01b      	beq.n	80026a0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	3348      	adds	r3, #72	; 0x48
 8002678:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	0159      	lsls	r1, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	440b      	add	r3, r1
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800268c:	1ad1      	subs	r1, r2, r3
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4403      	add	r3, r0
 800269c:	334c      	adds	r3, #76	; 0x4c
 800269e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	335d      	adds	r3, #93	; 0x5d
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	3358      	adds	r3, #88	; 0x58
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	461a      	mov	r2, r3
 80026d6:	2301      	movs	r3, #1
 80026d8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	440b      	add	r3, r1
 80026e8:	333f      	adds	r3, #63	; 0x3f
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	333f      	adds	r3, #63	; 0x3f
 8002700:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002702:	2b02      	cmp	r3, #2
 8002704:	d121      	bne.n	800274a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	0151      	lsls	r1, r2, #5
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	440a      	add	r2, r1
 800271c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f003 ff78 	bl	8006626 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	461a      	mov	r2, r3
 8002744:	2310      	movs	r3, #16
 8002746:	6093      	str	r3, [r2, #8]
 8002748:	e070      	b.n	800282c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	440b      	add	r3, r1
 8002758:	333f      	adds	r3, #63	; 0x3f
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d12a      	bne.n	80027b6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	0151      	lsls	r1, r2, #5
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	440a      	add	r2, r1
 8002776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800277e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	335c      	adds	r3, #92	; 0x5c
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	b2d8      	uxtb	r0, r3
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	440b      	add	r3, r1
 80027a6:	335c      	adds	r3, #92	; 0x5c
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	4601      	mov	r1, r0
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f006 f8dc 	bl	800896c <HAL_HCD_HC_NotifyURBChange_Callback>
 80027b4:	e03a      	b.n	800282c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	333f      	adds	r3, #63	; 0x3f
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d12f      	bne.n	800282c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	335c      	adds	r3, #92	; 0x5c
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	3350      	adds	r3, #80	; 0x50
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	f083 0301 	eor.w	r3, r3, #1
 80027f6:	b2d8      	uxtb	r0, r3
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	3350      	adds	r3, #80	; 0x50
 8002808:	4602      	mov	r2, r0
 800280a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	b2d8      	uxtb	r0, r3
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	335c      	adds	r3, #92	; 0x5c
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	4601      	mov	r1, r0
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f006 f8a0 	bl	800896c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	3350      	adds	r3, #80	; 0x50
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	f083 0301 	eor.w	r3, r3, #1
 8002842:	b2d8      	uxtb	r0, r3
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	3350      	adds	r3, #80	; 0x50
 8002854:	4602      	mov	r2, r0
 8002856:	701a      	strb	r2, [r3, #0]
}
 8002858:	e1f7      	b.n	8002c4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b02      	cmp	r3, #2
 800286e:	f040 811a 	bne.w	8002aa6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	0151      	lsls	r1, r2, #5
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	440a      	add	r2, r1
 8002888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800288c:	f023 0302 	bic.w	r3, r3, #2
 8002890:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	335d      	adds	r3, #93	; 0x5d
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d10a      	bne.n	80028be <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	335c      	adds	r3, #92	; 0x5c
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e0d9      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	335d      	adds	r3, #93	; 0x5d
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d10a      	bne.n	80028ea <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	440b      	add	r3, r1
 80028e2:	335c      	adds	r3, #92	; 0x5c
 80028e4:	2205      	movs	r2, #5
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e0c3      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	335d      	adds	r3, #93	; 0x5d
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b06      	cmp	r3, #6
 80028fe:	d00a      	beq.n	8002916 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	335d      	adds	r3, #93	; 0x5d
 8002910:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002912:	2b08      	cmp	r3, #8
 8002914:	d156      	bne.n	80029c4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	3358      	adds	r3, #88	; 0x58
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	1c59      	adds	r1, r3, #1
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4403      	add	r3, r0
 8002938:	3358      	adds	r3, #88	; 0x58
 800293a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	3358      	adds	r3, #88	; 0x58
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d914      	bls.n	800297c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	3358      	adds	r3, #88	; 0x58
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	335c      	adds	r3, #92	; 0x5c
 8002976:	2204      	movs	r2, #4
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e009      	b.n	8002990 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	335c      	adds	r3, #92	; 0x5c
 800298c:	2202      	movs	r2, #2
 800298e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029a6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029ae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e056      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	335d      	adds	r3, #93	; 0x5d
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d123      	bne.n	8002a22 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	335c      	adds	r3, #92	; 0x5c
 80029ea:	2202      	movs	r2, #2
 80029ec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a04:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a0c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e027      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	440b      	add	r3, r1
 8002a30:	335d      	adds	r3, #93	; 0x5d
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b07      	cmp	r3, #7
 8002a36:	d11c      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	3358      	adds	r3, #88	; 0x58
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	1c59      	adds	r1, r3, #1
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4403      	add	r3, r0
 8002a5a:	3358      	adds	r3, #88	; 0x58
 8002a5c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	335c      	adds	r3, #92	; 0x5c
 8002a6e:	2204      	movs	r2, #4
 8002a70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2302      	movs	r3, #2
 8002a82:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	b2d8      	uxtb	r0, r3
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	335c      	adds	r3, #92	; 0x5c
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4601      	mov	r1, r0
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f005 ff64 	bl	800896c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002aa4:	e0d1      	b.n	8002c4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab8:	2b80      	cmp	r3, #128	; 0x80
 8002aba:	d13e      	bne.n	8002b3a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	0151      	lsls	r1, r2, #5
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	440a      	add	r2, r1
 8002ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	440b      	add	r3, r1
 8002aea:	3358      	adds	r3, #88	; 0x58
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	1c59      	adds	r1, r3, #1
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4403      	add	r3, r0
 8002afe:	3358      	adds	r3, #88	; 0x58
 8002b00:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	440b      	add	r3, r1
 8002b10:	335d      	adds	r3, #93	; 0x5d
 8002b12:	2206      	movs	r2, #6
 8002b14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 fd80 	bl	8006626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	461a      	mov	r2, r3
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	6093      	str	r3, [r2, #8]
}
 8002b38:	e087      	b.n	8002c4a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d17c      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	333f      	adds	r3, #63	; 0x3f
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d122      	bne.n	8002bac <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	440b      	add	r3, r1
 8002b74:	3358      	adds	r3, #88	; 0x58
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	0151      	lsls	r1, r2, #5
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	440a      	add	r2, r1
 8002b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fd3e 	bl	8006626 <USB_HC_Halt>
 8002baa:	e045      	b.n	8002c38 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	333f      	adds	r3, #63	; 0x3f
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	333f      	adds	r3, #63	; 0x3f
 8002bd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d12f      	bne.n	8002c38 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	3358      	adds	r3, #88	; 0x58
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d121      	bne.n	8002c38 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	335d      	adds	r3, #93	; 0x5d
 8002c04:	2203      	movs	r2, #3
 8002c06:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	0151      	lsls	r1, r2, #5
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	440a      	add	r2, r1
 8002c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c22:	f043 0302 	orr.w	r3, r3, #2
 8002c26:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 fcf7 	bl	8006626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	461a      	mov	r2, r3
 8002c46:	2310      	movs	r3, #16
 8002c48:	6093      	str	r3, [r2, #8]
}
 8002c4a:	bf00      	nop
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d119      	bne.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2304      	movs	r3, #4
 8002c92:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	0151      	lsls	r1, r2, #5
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	440a      	add	r2, r1
 8002caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002cb4:	e33e      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d141      	bne.n	8002d50 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2320      	movs	r3, #32
 8002cdc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	333d      	adds	r3, #61	; 0x3d
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	f040 831f 	bne.w	8003334 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	333d      	adds	r3, #61	; 0x3d
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	335c      	adds	r3, #92	; 0x5c
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	0151      	lsls	r1, r2, #5
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	440a      	add	r2, r1
 8002d34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f003 fc6c 	bl	8006626 <USB_HC_Halt>
}
 8002d4e:	e2f1      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d13f      	bne.n	8002de6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	440b      	add	r3, r1
 8002d74:	335d      	adds	r3, #93	; 0x5d
 8002d76:	2204      	movs	r2, #4
 8002d78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	333d      	adds	r3, #61	; 0x3d
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	3358      	adds	r3, #88	; 0x58
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	0151      	lsls	r1, r2, #5
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	440a      	add	r2, r1
 8002db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 fc2a 	bl	8006626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dde:	461a      	mov	r2, r3
 8002de0:	2340      	movs	r3, #64	; 0x40
 8002de2:	6093      	str	r3, [r2, #8]
}
 8002de4:	e2a6      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dfc:	d122      	bne.n	8002e44 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	0151      	lsls	r1, r2, #5
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	440a      	add	r2, r1
 8002e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f003 fbfc 	bl	8006626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e40:	6093      	str	r3, [r2, #8]
}
 8002e42:	e277      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d135      	bne.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	3358      	adds	r3, #88	; 0x58
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	0151      	lsls	r1, r2, #5
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	440a      	add	r2, r1
 8002e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e88:	f043 0302 	orr.w	r3, r3, #2
 8002e8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 fbc4 	bl	8006626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2301      	movs	r3, #1
 8002eae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	335d      	adds	r3, #93	; 0x5d
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
}
 8002ec4:	e236      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d12b      	bne.n	8002f34 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2308      	movs	r3, #8
 8002eec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	0151      	lsls	r1, r2, #5
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	440a      	add	r2, r1
 8002f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 fb84 	bl	8006626 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	335d      	adds	r3, #93	; 0x5d
 8002f2e:	2205      	movs	r2, #5
 8002f30:	701a      	strb	r2, [r3, #0]
}
 8002f32:	e1ff      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d155      	bne.n	8002ff6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	3358      	adds	r3, #88	; 0x58
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	440b      	add	r3, r1
 8002f6c:	335d      	adds	r3, #93	; 0x5d
 8002f6e:	2203      	movs	r2, #3
 8002f70:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	440b      	add	r3, r1
 8002f80:	333d      	adds	r3, #61	; 0x3d
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d114      	bne.n	8002fb2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	440b      	add	r3, r1
 8002f96:	333c      	adds	r3, #60	; 0x3c
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	333d      	adds	r3, #61	; 0x3d
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	0151      	lsls	r1, r2, #5
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	440a      	add	r2, r1
 8002fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fcc:	f043 0302 	orr.w	r3, r3, #2
 8002fd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 fb22 	bl	8006626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	6093      	str	r3, [r2, #8]
}
 8002ff4:	e19e      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003008:	2b80      	cmp	r3, #128	; 0x80
 800300a:	d12b      	bne.n	8003064 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	0151      	lsls	r1, r2, #5
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	440a      	add	r2, r1
 8003022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003026:	f043 0302 	orr.w	r3, r3, #2
 800302a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f003 faf5 	bl	8006626 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	440b      	add	r3, r1
 800304a:	335d      	adds	r3, #93	; 0x5d
 800304c:	2206      	movs	r2, #6
 800304e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	461a      	mov	r2, r3
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	6093      	str	r3, [r2, #8]
}
 8003062:	e167      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307a:	d135      	bne.n	80030e8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	0151      	lsls	r1, r2, #5
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	440a      	add	r2, r1
 8003092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f003 fabd 	bl	8006626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	2310      	movs	r3, #16
 80030bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ca:	461a      	mov	r2, r3
 80030cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	335d      	adds	r3, #93	; 0x5d
 80030e2:	2208      	movs	r2, #8
 80030e4:	701a      	strb	r2, [r3, #0]
}
 80030e6:	e125      	b.n	8003334 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	f040 811a 	bne.w	8003334 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	0151      	lsls	r1, r2, #5
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	440a      	add	r2, r1
 8003116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800311a:	f023 0302 	bic.w	r3, r3, #2
 800311e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	335d      	adds	r3, #93	; 0x5d
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d137      	bne.n	80031a6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	335c      	adds	r3, #92	; 0x5c
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	333f      	adds	r3, #63	; 0x3f
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d00b      	beq.n	8003178 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	333f      	adds	r3, #63	; 0x3f
 8003170:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003172:	2b03      	cmp	r3, #3
 8003174:	f040 80c5 	bne.w	8003302 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	3351      	adds	r3, #81	; 0x51
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	f083 0301 	eor.w	r3, r3, #1
 800318e:	b2d8      	uxtb	r0, r3
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	3351      	adds	r3, #81	; 0x51
 80031a0:	4602      	mov	r2, r0
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	e0ad      	b.n	8003302 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	335d      	adds	r3, #93	; 0x5d
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d10a      	bne.n	80031d2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	440b      	add	r3, r1
 80031ca:	335c      	adds	r3, #92	; 0x5c
 80031cc:	2202      	movs	r2, #2
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e097      	b.n	8003302 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	335d      	adds	r3, #93	; 0x5d
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d10a      	bne.n	80031fe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	335c      	adds	r3, #92	; 0x5c
 80031f8:	2202      	movs	r2, #2
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e081      	b.n	8003302 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	335d      	adds	r3, #93	; 0x5d
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b05      	cmp	r3, #5
 8003212:	d10a      	bne.n	800322a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	440b      	add	r3, r1
 8003222:	335c      	adds	r3, #92	; 0x5c
 8003224:	2205      	movs	r2, #5
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e06b      	b.n	8003302 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	335d      	adds	r3, #93	; 0x5d
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d00a      	beq.n	8003256 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	335d      	adds	r3, #93	; 0x5d
 8003250:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003252:	2b08      	cmp	r3, #8
 8003254:	d155      	bne.n	8003302 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	3358      	adds	r3, #88	; 0x58
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	1c59      	adds	r1, r3, #1
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4403      	add	r3, r0
 8003278:	3358      	adds	r3, #88	; 0x58
 800327a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	440b      	add	r3, r1
 800328a:	3358      	adds	r3, #88	; 0x58
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b03      	cmp	r3, #3
 8003290:	d914      	bls.n	80032bc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	440b      	add	r3, r1
 80032a0:	3358      	adds	r3, #88	; 0x58
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	335c      	adds	r3, #92	; 0x5c
 80032b6:	2204      	movs	r2, #4
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e009      	b.n	80032d0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	335c      	adds	r3, #92	; 0x5c
 80032cc:	2202      	movs	r2, #2
 80032ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fc:	461a      	mov	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	461a      	mov	r2, r3
 8003310:	2302      	movs	r3, #2
 8003312:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	b2d8      	uxtb	r0, r3
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	335c      	adds	r3, #92	; 0x5c
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	4601      	mov	r1, r0
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f005 fb1c 	bl	800896c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003334:	bf00      	nop
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08a      	sub	sp, #40	; 0x28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	0c5b      	lsrs	r3, r3, #17
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003370:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d003      	beq.n	8003380 <HCD_RXQLVL_IRQHandler+0x44>
 8003378:	2b05      	cmp	r3, #5
 800337a:	f000 8082 	beq.w	8003482 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800337e:	e083      	b.n	8003488 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d07f      	beq.n	8003486 <HCD_RXQLVL_IRQHandler+0x14a>
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	440b      	add	r3, r1
 8003394:	3344      	adds	r3, #68	; 0x44
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d074      	beq.n	8003486 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	440b      	add	r3, r1
 80033ae:	3344      	adds	r3, #68	; 0x44
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	b292      	uxth	r2, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	f002 fcd3 	bl	8005d62 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	440b      	add	r3, r1
 80033ca:	3344      	adds	r3, #68	; 0x44
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	18d1      	adds	r1, r2, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4403      	add	r3, r0
 80033e0:	3344      	adds	r3, #68	; 0x44
 80033e2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	334c      	adds	r3, #76	; 0x4c
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	18d1      	adds	r1, r2, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4403      	add	r3, r0
 8003408:	334c      	adds	r3, #76	; 0x4c
 800340a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HCD_RXQLVL_IRQHandler+0x154>)
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d031      	beq.n	8003486 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003438:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003440:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	4413      	add	r3, r2
 800344a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344e:	461a      	mov	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	440b      	add	r3, r1
 8003462:	3350      	adds	r3, #80	; 0x50
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	f083 0301 	eor.w	r3, r3, #1
 800346a:	b2d8      	uxtb	r0, r3
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	3350      	adds	r3, #80	; 0x50
 800347c:	4602      	mov	r2, r0
 800347e:	701a      	strb	r2, [r3, #0]
      break;
 8003480:	e001      	b.n	8003486 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003486:	bf00      	nop
  }
}
 8003488:	bf00      	nop
 800348a:	3728      	adds	r7, #40	; 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	1ff80000 	.word	0x1ff80000

08003494 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80034c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d10b      	bne.n	80034e4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d102      	bne.n	80034dc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f005 fa2c 	bl	8008934 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f043 0302 	orr.w	r3, r3, #2
 80034e2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d132      	bne.n	8003554 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f043 0308 	orr.w	r3, r3, #8
 80034f4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d126      	bne.n	800354e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d113      	bne.n	8003530 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800350e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003512:	d106      	bne.n	8003522 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2102      	movs	r1, #2
 800351a:	4618      	mov	r0, r3
 800351c:	f002 fd5c 	bl	8005fd8 <USB_InitFSLSPClkSel>
 8003520:	e011      	b.n	8003546 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2101      	movs	r1, #1
 8003528:	4618      	mov	r0, r3
 800352a:	f002 fd55 	bl	8005fd8 <USB_InitFSLSPClkSel>
 800352e:	e00a      	b.n	8003546 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d106      	bne.n	8003546 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800353e:	461a      	mov	r2, r3
 8003540:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003544:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f005 fa1e 	bl	8008988 <HAL_HCD_PortEnabled_Callback>
 800354c:	e002      	b.n	8003554 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f005 fa28 	bl	80089a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b20      	cmp	r3, #32
 800355c:	d103      	bne.n	8003566 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f043 0320 	orr.w	r3, r3, #32
 8003564:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800356c:	461a      	mov	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6013      	str	r3, [r2, #0]
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e11f      	b.n	80037ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fa42 	bl	8000a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035e0:	f001 f9de 	bl	80049a0 <HAL_RCC_GetPCLK1Freq>
 80035e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4a7b      	ldr	r2, [pc, #492]	; (80037d8 <HAL_I2C_Init+0x25c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d807      	bhi.n	8003600 <HAL_I2C_Init+0x84>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a7a      	ldr	r2, [pc, #488]	; (80037dc <HAL_I2C_Init+0x260>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	bf94      	ite	ls
 80035f8:	2301      	movls	r3, #1
 80035fa:	2300      	movhi	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e006      	b.n	800360e <HAL_I2C_Init+0x92>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a77      	ldr	r2, [pc, #476]	; (80037e0 <HAL_I2C_Init+0x264>)
 8003604:	4293      	cmp	r3, r2
 8003606:	bf94      	ite	ls
 8003608:	2301      	movls	r3, #1
 800360a:	2300      	movhi	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e0db      	b.n	80037ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4a72      	ldr	r2, [pc, #456]	; (80037e4 <HAL_I2C_Init+0x268>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	0c9b      	lsrs	r3, r3, #18
 8003620:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a64      	ldr	r2, [pc, #400]	; (80037d8 <HAL_I2C_Init+0x25c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d802      	bhi.n	8003650 <HAL_I2C_Init+0xd4>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	3301      	adds	r3, #1
 800364e:	e009      	b.n	8003664 <HAL_I2C_Init+0xe8>
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	4a63      	ldr	r2, [pc, #396]	; (80037e8 <HAL_I2C_Init+0x26c>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	099b      	lsrs	r3, r3, #6
 8003662:	3301      	adds	r3, #1
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	430b      	orrs	r3, r1
 800366a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003676:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4956      	ldr	r1, [pc, #344]	; (80037d8 <HAL_I2C_Init+0x25c>)
 8003680:	428b      	cmp	r3, r1
 8003682:	d80d      	bhi.n	80036a0 <HAL_I2C_Init+0x124>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1e59      	subs	r1, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	2b04      	cmp	r3, #4
 800369a:	bf38      	it	cc
 800369c:	2304      	movcc	r3, #4
 800369e:	e04f      	b.n	8003740 <HAL_I2C_Init+0x1c4>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_I2C_Init+0x150>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e012      	b.n	80036f2 <HAL_I2C_Init+0x176>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e58      	subs	r0, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	0099      	lsls	r1, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Init+0x17e>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e022      	b.n	8003740 <HAL_I2C_Init+0x1c4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10e      	bne.n	8003720 <HAL_I2C_Init+0x1a4>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1e58      	subs	r0, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	440b      	add	r3, r1
 8003710:	fbb0 f3f3 	udiv	r3, r0, r3
 8003714:	3301      	adds	r3, #1
 8003716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371e:	e00f      	b.n	8003740 <HAL_I2C_Init+0x1c4>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e58      	subs	r0, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	0099      	lsls	r1, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	fbb0 f3f3 	udiv	r3, r0, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	6809      	ldr	r1, [r1, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800376e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6911      	ldr	r1, [r2, #16]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	000186a0 	.word	0x000186a0
 80037dc:	001e847f 	.word	0x001e847f
 80037e0:	003d08ff 	.word	0x003d08ff
 80037e4:	431bde83 	.word	0x431bde83
 80037e8:	10624dd3 	.word	0x10624dd3

080037ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e128      	b.n	8003a50 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a90      	ldr	r2, [pc, #576]	; (8003a58 <HAL_I2S_Init+0x26c>)
 8003816:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7fd f94f 	bl	8000abc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003834:	f023 030f 	bic.w	r3, r3, #15
 8003838:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2202      	movs	r2, #2
 8003840:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d060      	beq.n	800390c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003852:	2310      	movs	r3, #16
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	e001      	b.n	800385c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003858:	2320      	movs	r3, #32
 800385a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b20      	cmp	r3, #32
 8003862:	d802      	bhi.n	800386a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800386a:	2001      	movs	r0, #1
 800386c:	f001 f9a2 	bl	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003870:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800387a:	d125      	bne.n	80038c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d010      	beq.n	80038a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	fbb2 f2f3 	udiv	r2, r2, r3
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	461a      	mov	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a0:	3305      	adds	r3, #5
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	e01f      	b.n	80038e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	461a      	mov	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	3305      	adds	r3, #5
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	e00e      	b.n	80038e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	461a      	mov	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e2:	3305      	adds	r3, #5
 80038e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4a5c      	ldr	r2, [pc, #368]	; (8003a5c <HAL_I2S_Init+0x270>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	08db      	lsrs	r3, r3, #3
 80038f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	e003      	b.n	8003914 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800390c:	2302      	movs	r3, #2
 800390e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d902      	bls.n	8003920 <HAL_I2S_Init+0x134>
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	2bff      	cmp	r3, #255	; 0xff
 800391e:	d907      	bls.n	8003930 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	f043 0210 	orr.w	r2, r3, #16
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e08f      	b.n	8003a50 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	ea42 0103 	orr.w	r1, r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	430a      	orrs	r2, r1
 8003942:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800394e:	f023 030f 	bic.w	r3, r3, #15
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6851      	ldr	r1, [r2, #4]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6892      	ldr	r2, [r2, #8]
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68d2      	ldr	r2, [r2, #12]
 8003960:	4311      	orrs	r1, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6992      	ldr	r2, [r2, #24]
 8003966:	430a      	orrs	r2, r1
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003972:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d161      	bne.n	8003a40 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <HAL_I2S_Init+0x274>)
 8003980:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a37      	ldr	r2, [pc, #220]	; (8003a64 <HAL_I2S_Init+0x278>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_I2S_Init+0x1a4>
 800398c:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <HAL_I2S_Init+0x27c>)
 800398e:	e001      	b.n	8003994 <HAL_I2S_Init+0x1a8>
 8003990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	4932      	ldr	r1, [pc, #200]	; (8003a64 <HAL_I2S_Init+0x278>)
 800399c:	428a      	cmp	r2, r1
 800399e:	d101      	bne.n	80039a4 <HAL_I2S_Init+0x1b8>
 80039a0:	4a31      	ldr	r2, [pc, #196]	; (8003a68 <HAL_I2S_Init+0x27c>)
 80039a2:	e001      	b.n	80039a8 <HAL_I2S_Init+0x1bc>
 80039a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80039a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039ac:	f023 030f 	bic.w	r3, r3, #15
 80039b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2b      	ldr	r2, [pc, #172]	; (8003a64 <HAL_I2S_Init+0x278>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <HAL_I2S_Init+0x1d4>
 80039bc:	4b2a      	ldr	r3, [pc, #168]	; (8003a68 <HAL_I2S_Init+0x27c>)
 80039be:	e001      	b.n	80039c4 <HAL_I2S_Init+0x1d8>
 80039c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c4:	2202      	movs	r2, #2
 80039c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a25      	ldr	r2, [pc, #148]	; (8003a64 <HAL_I2S_Init+0x278>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d101      	bne.n	80039d6 <HAL_I2S_Init+0x1ea>
 80039d2:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <HAL_I2S_Init+0x27c>)
 80039d4:	e001      	b.n	80039da <HAL_I2S_Init+0x1ee>
 80039d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e6:	d003      	beq.n	80039f0 <HAL_I2S_Init+0x204>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d103      	bne.n	80039f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80039f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	e001      	b.n	80039fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	b299      	uxth	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003a12:	4303      	orrs	r3, r0
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	430b      	orrs	r3, r1
 8003a18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	897b      	ldrh	r3, [r7, #10]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a28:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a0d      	ldr	r2, [pc, #52]	; (8003a64 <HAL_I2S_Init+0x278>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d101      	bne.n	8003a38 <HAL_I2S_Init+0x24c>
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <HAL_I2S_Init+0x27c>)
 8003a36:	e001      	b.n	8003a3c <HAL_I2S_Init+0x250>
 8003a38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a3c:	897a      	ldrh	r2, [r7, #10]
 8003a3e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	08003b63 	.word	0x08003b63
 8003a5c:	cccccccd 	.word	0xcccccccd
 8003a60:	08003c79 	.word	0x08003c79
 8003a64:	40003800 	.word	0x40003800
 8003a68:	40003400 	.word	0x40003400

08003a6c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	881a      	ldrh	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	1c9a      	adds	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10e      	bne.n	8003afc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff ffb8 	bl	8003a6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003afc:	bf00      	nop
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	b292      	uxth	r2, r2
 8003b18:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	1c9a      	adds	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10e      	bne.n	8003b5a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b4a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff93 	bl	8003a80 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d13a      	bne.n	8003bf4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d109      	bne.n	8003b9c <I2S_IRQHandler+0x3a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	d102      	bne.n	8003b9c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff ffb4 	bl	8003b04 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d126      	bne.n	8003bf4 <I2S_IRQHandler+0x92>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d11f      	bne.n	8003bf4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bc2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f043 0202 	orr.w	r2, r3, #2
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ff50 	bl	8003a94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d136      	bne.n	8003c6e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d109      	bne.n	8003c1e <I2S_IRQHandler+0xbc>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c14:	2b80      	cmp	r3, #128	; 0x80
 8003c16:	d102      	bne.n	8003c1e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ff45 	bl	8003aa8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d122      	bne.n	8003c6e <I2S_IRQHandler+0x10c>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d11b      	bne.n	8003c6e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c44:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c60:	f043 0204 	orr.w	r2, r3, #4
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ff13 	bl	8003a94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c6e:	bf00      	nop
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4aa2      	ldr	r2, [pc, #648]	; (8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d101      	bne.n	8003c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003c92:	4ba2      	ldr	r3, [pc, #648]	; (8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c94:	e001      	b.n	8003c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a9b      	ldr	r2, [pc, #620]	; (8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d101      	bne.n	8003cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003cb0:	4b9a      	ldr	r3, [pc, #616]	; (8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cb2:	e001      	b.n	8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc4:	d004      	beq.n	8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 8099 	bne.w	8003e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d107      	bne.n	8003cea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f925 	bl	8003f34 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d107      	bne.n	8003d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9c8 	bl	8004094 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	d13a      	bne.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d035      	beq.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a7e      	ldr	r2, [pc, #504]	; (8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d101      	bne.n	8003d26 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d22:	4b7e      	ldr	r3, [pc, #504]	; (8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d24:	e001      	b.n	8003d2a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4979      	ldr	r1, [pc, #484]	; (8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d32:	428b      	cmp	r3, r1
 8003d34:	d101      	bne.n	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d36:	4b79      	ldr	r3, [pc, #484]	; (8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d38:	e001      	b.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d42:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f043 0202 	orr.w	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fe88 	bl	8003a94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	f040 80be 	bne.w	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80b8 	beq.w	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003daa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a59      	ldr	r2, [pc, #356]	; (8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d101      	bne.n	8003dba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003db6:	4b59      	ldr	r3, [pc, #356]	; (8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003db8:	e001      	b.n	8003dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4954      	ldr	r1, [pc, #336]	; (8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dc6:	428b      	cmp	r3, r1
 8003dc8:	d101      	bne.n	8003dce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003dca:	4b54      	ldr	r3, [pc, #336]	; (8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dcc:	e001      	b.n	8003dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003dce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dd6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	f043 0204 	orr.w	r2, r3, #4
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fe4a 	bl	8003a94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e00:	e084      	b.n	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d107      	bne.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8be 	bl	8003f98 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d107      	bne.n	8003e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f8fd 	bl	8004030 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	2b40      	cmp	r3, #64	; 0x40
 8003e3e:	d12f      	bne.n	8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d02a      	beq.n	8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e58:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2e      	ldr	r2, [pc, #184]	; (8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d101      	bne.n	8003e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e64:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e66:	e001      	b.n	8003e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4929      	ldr	r1, [pc, #164]	; (8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e74:	428b      	cmp	r3, r1
 8003e76:	d101      	bne.n	8003e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003e78:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e7a:	e001      	b.n	8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003e7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	f043 0202 	orr.w	r2, r3, #2
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fdfa 	bl	8003a94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d131      	bne.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02c      	beq.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a17      	ldr	r2, [pc, #92]	; (8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ebe:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ec0:	e001      	b.n	8003ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4912      	ldr	r1, [pc, #72]	; (8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ece:	428b      	cmp	r3, r1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003ed2:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ed4:	e001      	b.n	8003eda <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ede:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003eee:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	f043 0204 	orr.w	r2, r3, #4
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff fdc5 	bl	8003a94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f0a:	e000      	b.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f0c:	bf00      	nop
}
 8003f0e:	bf00      	nop
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40003800 	.word	0x40003800
 8003f1c:	40003400 	.word	0x40003400

08003f20 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	1c99      	adds	r1, r3, #2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6251      	str	r1, [r2, #36]	; 0x24
 8003f46:	881a      	ldrh	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d113      	bne.n	8003f8e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ffc9 	bl	8003f20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	1c99      	adds	r1, r3, #2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6251      	str	r1, [r2, #36]	; 0x24
 8003faa:	8819      	ldrh	r1, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <I2SEx_TxISR_I2SExt+0x90>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <I2SEx_TxISR_I2SExt+0x22>
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	; (800402c <I2SEx_TxISR_I2SExt+0x94>)
 8003fb8:	e001      	b.n	8003fbe <I2SEx_TxISR_I2SExt+0x26>
 8003fba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fbe:	460a      	mov	r2, r1
 8003fc0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d121      	bne.n	800401e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <I2SEx_TxISR_I2SExt+0x90>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d101      	bne.n	8003fe8 <I2SEx_TxISR_I2SExt+0x50>
 8003fe4:	4b11      	ldr	r3, [pc, #68]	; (800402c <I2SEx_TxISR_I2SExt+0x94>)
 8003fe6:	e001      	b.n	8003fec <I2SEx_TxISR_I2SExt+0x54>
 8003fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	490d      	ldr	r1, [pc, #52]	; (8004028 <I2SEx_TxISR_I2SExt+0x90>)
 8003ff4:	428b      	cmp	r3, r1
 8003ff6:	d101      	bne.n	8003ffc <I2SEx_TxISR_I2SExt+0x64>
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <I2SEx_TxISR_I2SExt+0x94>)
 8003ffa:	e001      	b.n	8004000 <I2SEx_TxISR_I2SExt+0x68>
 8003ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004000:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004004:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff ff81 	bl	8003f20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40003800 	.word	0x40003800
 800402c:	40003400 	.word	0x40003400

08004030 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68d8      	ldr	r0, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	1c99      	adds	r1, r3, #2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004048:	b282      	uxth	r2, r0
 800404a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d113      	bne.n	800408c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004072:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff ff4a 	bl	8003f20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800408c:	bf00      	nop
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a20      	ldr	r2, [pc, #128]	; (8004124 <I2SEx_RxISR_I2SExt+0x90>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <I2SEx_RxISR_I2SExt+0x16>
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <I2SEx_RxISR_I2SExt+0x94>)
 80040a8:	e001      	b.n	80040ae <I2SEx_RxISR_I2SExt+0x1a>
 80040aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ae:	68d8      	ldr	r0, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	1c99      	adds	r1, r3, #2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040ba:	b282      	uxth	r2, r0
 80040bc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d121      	bne.n	800411a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a12      	ldr	r2, [pc, #72]	; (8004124 <I2SEx_RxISR_I2SExt+0x90>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d101      	bne.n	80040e4 <I2SEx_RxISR_I2SExt+0x50>
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <I2SEx_RxISR_I2SExt+0x94>)
 80040e2:	e001      	b.n	80040e8 <I2SEx_RxISR_I2SExt+0x54>
 80040e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	490d      	ldr	r1, [pc, #52]	; (8004124 <I2SEx_RxISR_I2SExt+0x90>)
 80040f0:	428b      	cmp	r3, r1
 80040f2:	d101      	bne.n	80040f8 <I2SEx_RxISR_I2SExt+0x64>
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <I2SEx_RxISR_I2SExt+0x94>)
 80040f6:	e001      	b.n	80040fc <I2SEx_RxISR_I2SExt+0x68>
 80040f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004100:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d106      	bne.n	800411a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff ff03 	bl	8003f20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40003800 	.word	0x40003800
 8004128:	40003400 	.word	0x40003400

0800412c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e25b      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d075      	beq.n	8004236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800414a:	4ba3      	ldr	r3, [pc, #652]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b04      	cmp	r3, #4
 8004154:	d00c      	beq.n	8004170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004156:	4ba0      	ldr	r3, [pc, #640]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800415e:	2b08      	cmp	r3, #8
 8004160:	d112      	bne.n	8004188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004162:	4b9d      	ldr	r3, [pc, #628]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800416e:	d10b      	bne.n	8004188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	4b99      	ldr	r3, [pc, #612]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d05b      	beq.n	8004234 <HAL_RCC_OscConfig+0x108>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d157      	bne.n	8004234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e236      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004190:	d106      	bne.n	80041a0 <HAL_RCC_OscConfig+0x74>
 8004192:	4b91      	ldr	r3, [pc, #580]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a90      	ldr	r2, [pc, #576]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e01d      	b.n	80041dc <HAL_RCC_OscConfig+0xb0>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x98>
 80041aa:	4b8b      	ldr	r3, [pc, #556]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a8a      	ldr	r2, [pc, #552]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	4b88      	ldr	r3, [pc, #544]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a87      	ldr	r2, [pc, #540]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e00b      	b.n	80041dc <HAL_RCC_OscConfig+0xb0>
 80041c4:	4b84      	ldr	r3, [pc, #528]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a83      	ldr	r2, [pc, #524]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80041ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	4b81      	ldr	r3, [pc, #516]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a80      	ldr	r2, [pc, #512]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80041d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d013      	beq.n	800420c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fc fec0 	bl	8000f68 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ec:	f7fc febc 	bl	8000f68 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	; 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e1fb      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	4b76      	ldr	r3, [pc, #472]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0xc0>
 800420a:	e014      	b.n	8004236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420c:	f7fc feac 	bl	8000f68 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004214:	f7fc fea8 	bl	8000f68 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b64      	cmp	r3, #100	; 0x64
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e1e7      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004226:	4b6c      	ldr	r3, [pc, #432]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0xe8>
 8004232:	e000      	b.n	8004236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d063      	beq.n	800430a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004242:	4b65      	ldr	r3, [pc, #404]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00b      	beq.n	8004266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800424e:	4b62      	ldr	r3, [pc, #392]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004256:	2b08      	cmp	r3, #8
 8004258:	d11c      	bne.n	8004294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800425a:	4b5f      	ldr	r3, [pc, #380]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d116      	bne.n	8004294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004266:	4b5c      	ldr	r3, [pc, #368]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_RCC_OscConfig+0x152>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d001      	beq.n	800427e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e1bb      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427e:	4b56      	ldr	r3, [pc, #344]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	4952      	ldr	r1, [pc, #328]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 800428e:	4313      	orrs	r3, r2
 8004290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004292:	e03a      	b.n	800430a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d020      	beq.n	80042de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800429c:	4b4f      	ldr	r3, [pc, #316]	; (80043dc <HAL_RCC_OscConfig+0x2b0>)
 800429e:	2201      	movs	r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fc fe61 	bl	8000f68 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042aa:	f7fc fe5d 	bl	8000f68 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e19c      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042bc:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c8:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4940      	ldr	r1, [pc, #256]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	600b      	str	r3, [r1, #0]
 80042dc:	e015      	b.n	800430a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042de:	4b3f      	ldr	r3, [pc, #252]	; (80043dc <HAL_RCC_OscConfig+0x2b0>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fc fe40 	bl	8000f68 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ec:	f7fc fe3c 	bl	8000f68 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e17b      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fe:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d030      	beq.n	8004378 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d016      	beq.n	800434c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800431e:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <HAL_RCC_OscConfig+0x2b4>)
 8004320:	2201      	movs	r2, #1
 8004322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fc fe20 	bl	8000f68 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800432c:	f7fc fe1c 	bl	8000f68 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e15b      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433e:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x200>
 800434a:	e015      	b.n	8004378 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800434c:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <HAL_RCC_OscConfig+0x2b4>)
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004352:	f7fc fe09 	bl	8000f68 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800435a:	f7fc fe05 	bl	8000f68 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e144      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 800436e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f0      	bne.n	800435a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80a0 	beq.w	80044c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004386:	2300      	movs	r3, #0
 8004388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438a:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	4a0e      	ldr	r2, [pc, #56]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	; 0x40
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_RCC_OscConfig+0x2b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d121      	bne.n	8004406 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <HAL_RCC_OscConfig+0x2b8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <HAL_RCC_OscConfig+0x2b8>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ce:	f7fc fdcb 	bl	8000f68 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	e011      	b.n	80043fa <HAL_RCC_OscConfig+0x2ce>
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800
 80043dc:	42470000 	.word	0x42470000
 80043e0:	42470e80 	.word	0x42470e80
 80043e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e8:	f7fc fdbe 	bl	8000f68 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e0fd      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fa:	4b81      	ldr	r3, [pc, #516]	; (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d106      	bne.n	800441c <HAL_RCC_OscConfig+0x2f0>
 800440e:	4b7d      	ldr	r3, [pc, #500]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	4a7c      	ldr	r2, [pc, #496]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	6713      	str	r3, [r2, #112]	; 0x70
 800441a:	e01c      	b.n	8004456 <HAL_RCC_OscConfig+0x32a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b05      	cmp	r3, #5
 8004422:	d10c      	bne.n	800443e <HAL_RCC_OscConfig+0x312>
 8004424:	4b77      	ldr	r3, [pc, #476]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	4a76      	ldr	r2, [pc, #472]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 800442a:	f043 0304 	orr.w	r3, r3, #4
 800442e:	6713      	str	r3, [r2, #112]	; 0x70
 8004430:	4b74      	ldr	r3, [pc, #464]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	4a73      	ldr	r2, [pc, #460]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	6713      	str	r3, [r2, #112]	; 0x70
 800443c:	e00b      	b.n	8004456 <HAL_RCC_OscConfig+0x32a>
 800443e:	4b71      	ldr	r3, [pc, #452]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	4a70      	ldr	r2, [pc, #448]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	6713      	str	r3, [r2, #112]	; 0x70
 800444a:	4b6e      	ldr	r3, [pc, #440]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a6d      	ldr	r2, [pc, #436]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 8004450:	f023 0304 	bic.w	r3, r3, #4
 8004454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d015      	beq.n	800448a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445e:	f7fc fd83 	bl	8000f68 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004464:	e00a      	b.n	800447c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004466:	f7fc fd7f 	bl	8000f68 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f241 3288 	movw	r2, #5000	; 0x1388
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e0bc      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447c:	4b61      	ldr	r3, [pc, #388]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0ee      	beq.n	8004466 <HAL_RCC_OscConfig+0x33a>
 8004488:	e014      	b.n	80044b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448a:	f7fc fd6d 	bl	8000f68 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004490:	e00a      	b.n	80044a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004492:	f7fc fd69 	bl	8000f68 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e0a6      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a8:	4b56      	ldr	r3, [pc, #344]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1ee      	bne.n	8004492 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d105      	bne.n	80044c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ba:	4b52      	ldr	r3, [pc, #328]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	4a51      	ldr	r2, [pc, #324]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 80044c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8092 	beq.w	80045f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044d0:	4b4c      	ldr	r3, [pc, #304]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d05c      	beq.n	8004596 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d141      	bne.n	8004568 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e4:	4b48      	ldr	r3, [pc, #288]	; (8004608 <HAL_RCC_OscConfig+0x4dc>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ea:	f7fc fd3d 	bl	8000f68 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f2:	f7fc fd39 	bl	8000f68 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e078      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004504:	4b3f      	ldr	r3, [pc, #252]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f0      	bne.n	80044f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	019b      	lsls	r3, r3, #6
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004526:	085b      	lsrs	r3, r3, #1
 8004528:	3b01      	subs	r3, #1
 800452a:	041b      	lsls	r3, r3, #16
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	061b      	lsls	r3, r3, #24
 8004534:	4933      	ldr	r1, [pc, #204]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 8004536:	4313      	orrs	r3, r2
 8004538:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800453a:	4b33      	ldr	r3, [pc, #204]	; (8004608 <HAL_RCC_OscConfig+0x4dc>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004540:	f7fc fd12 	bl	8000f68 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004548:	f7fc fd0e 	bl	8000f68 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e04d      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455a:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x41c>
 8004566:	e045      	b.n	80045f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004568:	4b27      	ldr	r3, [pc, #156]	; (8004608 <HAL_RCC_OscConfig+0x4dc>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456e:	f7fc fcfb 	bl	8000f68 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004576:	f7fc fcf7 	bl	8000f68 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e036      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f0      	bne.n	8004576 <HAL_RCC_OscConfig+0x44a>
 8004594:	e02e      	b.n	80045f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e029      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045a2:	4b18      	ldr	r3, [pc, #96]	; (8004604 <HAL_RCC_OscConfig+0x4d8>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d11c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d115      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045ca:	4013      	ands	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10d      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045de:	429a      	cmp	r2, r3
 80045e0:	d106      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40007000 	.word	0x40007000
 8004604:	40023800 	.word	0x40023800
 8004608:	42470060 	.word	0x42470060

0800460c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0cc      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004620:	4b68      	ldr	r3, [pc, #416]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d90c      	bls.n	8004648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462e:	4b65      	ldr	r3, [pc, #404]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004636:	4b63      	ldr	r3, [pc, #396]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d001      	beq.n	8004648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0b8      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004660:	4b59      	ldr	r3, [pc, #356]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4a58      	ldr	r2, [pc, #352]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800466a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004678:	4b53      	ldr	r3, [pc, #332]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4a52      	ldr	r2, [pc, #328]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004684:	4b50      	ldr	r3, [pc, #320]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	494d      	ldr	r1, [pc, #308]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d044      	beq.n	800472c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d107      	bne.n	80046ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d119      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e07f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d003      	beq.n	80046ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ca:	4b3f      	ldr	r3, [pc, #252]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e06f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046da:	4b3b      	ldr	r3, [pc, #236]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e067      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ea:	4b37      	ldr	r3, [pc, #220]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f023 0203 	bic.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4934      	ldr	r1, [pc, #208]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046fc:	f7fc fc34 	bl	8000f68 <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004702:	e00a      	b.n	800471a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004704:	f7fc fc30 	bl	8000f68 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e04f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471a:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 020c 	and.w	r2, r3, #12
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	429a      	cmp	r2, r3
 800472a:	d1eb      	bne.n	8004704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d20c      	bcs.n	8004754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e032      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004760:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4916      	ldr	r1, [pc, #88]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	490e      	ldr	r1, [pc, #56]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004792:	f000 f821 	bl	80047d8 <HAL_RCC_GetSysClockFreq>
 8004796:	4601      	mov	r1, r0
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <HAL_RCC_ClockConfig+0x1c0>)
 80047a4:	5cd3      	ldrb	r3, [r2, r3]
 80047a6:	fa21 f303 	lsr.w	r3, r1, r3
 80047aa:	4a09      	ldr	r2, [pc, #36]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fc fb94 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40023c00 	.word	0x40023c00
 80047c8:	40023800 	.word	0x40023800
 80047cc:	08008fbc 	.word	0x08008fbc
 80047d0:	20000010 	.word	0x20000010
 80047d4:	20000014 	.word	0x20000014

080047d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	2300      	movs	r3, #0
 80047e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ee:	4b63      	ldr	r3, [pc, #396]	; (800497c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d007      	beq.n	800480a <HAL_RCC_GetSysClockFreq+0x32>
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d008      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x38>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f040 80b4 	bne.w	800496c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004804:	4b5e      	ldr	r3, [pc, #376]	; (8004980 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004806:	60bb      	str	r3, [r7, #8]
       break;
 8004808:	e0b3      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480a:	4b5e      	ldr	r3, [pc, #376]	; (8004984 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800480c:	60bb      	str	r3, [r7, #8]
      break;
 800480e:	e0b0      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004810:	4b5a      	ldr	r3, [pc, #360]	; (800497c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004818:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481a:	4b58      	ldr	r3, [pc, #352]	; (800497c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d04a      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004826:	4b55      	ldr	r3, [pc, #340]	; (800497c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	099b      	lsrs	r3, r3, #6
 800482c:	f04f 0400 	mov.w	r4, #0
 8004830:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	ea03 0501 	and.w	r5, r3, r1
 800483c:	ea04 0602 	and.w	r6, r4, r2
 8004840:	4629      	mov	r1, r5
 8004842:	4632      	mov	r2, r6
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	f04f 0400 	mov.w	r4, #0
 800484c:	0154      	lsls	r4, r2, #5
 800484e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004852:	014b      	lsls	r3, r1, #5
 8004854:	4619      	mov	r1, r3
 8004856:	4622      	mov	r2, r4
 8004858:	1b49      	subs	r1, r1, r5
 800485a:	eb62 0206 	sbc.w	r2, r2, r6
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	f04f 0400 	mov.w	r4, #0
 8004866:	0194      	lsls	r4, r2, #6
 8004868:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800486c:	018b      	lsls	r3, r1, #6
 800486e:	1a5b      	subs	r3, r3, r1
 8004870:	eb64 0402 	sbc.w	r4, r4, r2
 8004874:	f04f 0100 	mov.w	r1, #0
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	00e2      	lsls	r2, r4, #3
 800487e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004882:	00d9      	lsls	r1, r3, #3
 8004884:	460b      	mov	r3, r1
 8004886:	4614      	mov	r4, r2
 8004888:	195b      	adds	r3, r3, r5
 800488a:	eb44 0406 	adc.w	r4, r4, r6
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	0262      	lsls	r2, r4, #9
 8004898:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800489c:	0259      	lsls	r1, r3, #9
 800489e:	460b      	mov	r3, r1
 80048a0:	4614      	mov	r4, r2
 80048a2:	4618      	mov	r0, r3
 80048a4:	4621      	mov	r1, r4
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f04f 0400 	mov.w	r4, #0
 80048ac:	461a      	mov	r2, r3
 80048ae:	4623      	mov	r3, r4
 80048b0:	f7fb fc8a 	bl	80001c8 <__aeabi_uldivmod>
 80048b4:	4603      	mov	r3, r0
 80048b6:	460c      	mov	r4, r1
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e049      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048bc:	4b2f      	ldr	r3, [pc, #188]	; (800497c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	099b      	lsrs	r3, r3, #6
 80048c2:	f04f 0400 	mov.w	r4, #0
 80048c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	ea03 0501 	and.w	r5, r3, r1
 80048d2:	ea04 0602 	and.w	r6, r4, r2
 80048d6:	4629      	mov	r1, r5
 80048d8:	4632      	mov	r2, r6
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	f04f 0400 	mov.w	r4, #0
 80048e2:	0154      	lsls	r4, r2, #5
 80048e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048e8:	014b      	lsls	r3, r1, #5
 80048ea:	4619      	mov	r1, r3
 80048ec:	4622      	mov	r2, r4
 80048ee:	1b49      	subs	r1, r1, r5
 80048f0:	eb62 0206 	sbc.w	r2, r2, r6
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	f04f 0400 	mov.w	r4, #0
 80048fc:	0194      	lsls	r4, r2, #6
 80048fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004902:	018b      	lsls	r3, r1, #6
 8004904:	1a5b      	subs	r3, r3, r1
 8004906:	eb64 0402 	sbc.w	r4, r4, r2
 800490a:	f04f 0100 	mov.w	r1, #0
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	00e2      	lsls	r2, r4, #3
 8004914:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004918:	00d9      	lsls	r1, r3, #3
 800491a:	460b      	mov	r3, r1
 800491c:	4614      	mov	r4, r2
 800491e:	195b      	adds	r3, r3, r5
 8004920:	eb44 0406 	adc.w	r4, r4, r6
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	02a2      	lsls	r2, r4, #10
 800492e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004932:	0299      	lsls	r1, r3, #10
 8004934:	460b      	mov	r3, r1
 8004936:	4614      	mov	r4, r2
 8004938:	4618      	mov	r0, r3
 800493a:	4621      	mov	r1, r4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f04f 0400 	mov.w	r4, #0
 8004942:	461a      	mov	r2, r3
 8004944:	4623      	mov	r3, r4
 8004946:	f7fb fc3f 	bl	80001c8 <__aeabi_uldivmod>
 800494a:	4603      	mov	r3, r0
 800494c:	460c      	mov	r4, r1
 800494e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	3301      	adds	r3, #1
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	60bb      	str	r3, [r7, #8]
      break;
 800496a:	e002      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800496c:	4b04      	ldr	r3, [pc, #16]	; (8004980 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800496e:	60bb      	str	r3, [r7, #8]
      break;
 8004970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004972:	68bb      	ldr	r3, [r7, #8]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800497c:	40023800 	.word	0x40023800
 8004980:	00f42400 	.word	0x00f42400
 8004984:	007a1200 	.word	0x007a1200

08004988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800498c:	4b03      	ldr	r3, [pc, #12]	; (800499c <HAL_RCC_GetHCLKFreq+0x14>)
 800498e:	681b      	ldr	r3, [r3, #0]
}
 8004990:	4618      	mov	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000010 	.word	0x20000010

080049a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049a4:	f7ff fff0 	bl	8004988 <HAL_RCC_GetHCLKFreq>
 80049a8:	4601      	mov	r1, r0
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	0a9b      	lsrs	r3, r3, #10
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	4a03      	ldr	r2, [pc, #12]	; (80049c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049bc:	4618      	mov	r0, r3
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40023800 	.word	0x40023800
 80049c4:	08008fcc 	.word	0x08008fcc

080049c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049cc:	f7ff ffdc 	bl	8004988 <HAL_RCC_GetHCLKFreq>
 80049d0:	4601      	mov	r1, r0
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	0b5b      	lsrs	r3, r3, #13
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	4a03      	ldr	r2, [pc, #12]	; (80049ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80049de:	5cd3      	ldrb	r3, [r2, r3]
 80049e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40023800 	.word	0x40023800
 80049ec:	08008fcc 	.word	0x08008fcc

080049f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d105      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d035      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a18:	4b62      	ldr	r3, [pc, #392]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a1e:	f7fc faa3 	bl	8000f68 <HAL_GetTick>
 8004a22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a26:	f7fc fa9f 	bl	8000f68 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e0b0      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a38:	4b5b      	ldr	r3, [pc, #364]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f0      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	019a      	lsls	r2, r3, #6
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	071b      	lsls	r3, r3, #28
 8004a50:	4955      	ldr	r1, [pc, #340]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a58:	4b52      	ldr	r3, [pc, #328]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a5e:	f7fc fa83 	bl	8000f68 <HAL_GetTick>
 8004a62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a66:	f7fc fa7f 	bl	8000f68 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e090      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a78:	4b4b      	ldr	r3, [pc, #300]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8083 	beq.w	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	4b44      	ldr	r3, [pc, #272]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a43      	ldr	r2, [pc, #268]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa2:	4b41      	ldr	r3, [pc, #260]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004aae:	4b3f      	ldr	r3, [pc, #252]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a3e      	ldr	r2, [pc, #248]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004aba:	f7fc fa55 	bl	8000f68 <HAL_GetTick>
 8004abe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ac2:	f7fc fa51 	bl	8000f68 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e062      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ad4:	4b35      	ldr	r3, [pc, #212]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0f0      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ae0:	4b31      	ldr	r3, [pc, #196]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d02f      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d028      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004afe:	4b2a      	ldr	r3, [pc, #168]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b08:	4b29      	ldr	r3, [pc, #164]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b0e:	4b28      	ldr	r3, [pc, #160]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b14:	4a24      	ldr	r2, [pc, #144]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b1a:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d114      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b26:	f7fc fa1f 	bl	8000f68 <HAL_GetTick>
 8004b2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7fc fa1b 	bl	8000f68 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e02a      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ee      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b5c:	d10d      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b5e:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b72:	490d      	ldr	r1, [pc, #52]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	608b      	str	r3, [r1, #8]
 8004b78:	e005      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b80:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b84:	6093      	str	r3, [r2, #8]
 8004b86:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b92:	4905      	ldr	r1, [pc, #20]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	42470068 	.word	0x42470068
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	40007000 	.word	0x40007000
 8004bb0:	42470e40 	.word	0x42470e40

08004bb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d13d      	bne.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004bd2:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bda:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d12f      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004be6:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004be8:	617b      	str	r3, [r7, #20]
          break;
 8004bea:	e02f      	b.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bec:	4b1b      	ldr	r3, [pc, #108]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf8:	d108      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bfa:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c02:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	e007      	b.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c0c:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c22:	099b      	lsrs	r3, r3, #6
 8004c24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
 8004c2e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c36:	0f1b      	lsrs	r3, r3, #28
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	617b      	str	r3, [r7, #20]
          break;
 8004c44:	e002      	b.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
          break;
 8004c4a:	bf00      	nop
        }
      }
      break;
 8004c4c:	bf00      	nop
    }
  }
  return frequency;
 8004c4e:	697b      	ldr	r3, [r7, #20]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	00bb8000 	.word	0x00bb8000
 8004c64:	007a1200 	.word	0x007a1200
 8004c68:	00f42400 	.word	0x00f42400

08004c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e056      	b.n	8004d2c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fb ff77 	bl	8000b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	ea42 0103 	orr.w	r1, r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	0c1b      	lsrs	r3, r3, #16
 8004cfc:	f003 0104 	and.w	r1, r3, #4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e03f      	b.n	8004dc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fb ff5e 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2224      	movs	r2, #36	; 0x24
 8004d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fb4b 	bl	8005414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695a      	ldr	r2, [r3, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b088      	sub	sp, #32
 8004dd2:	af02      	add	r7, sp, #8
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	f040 8083 	bne.w	8004ef6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_UART_Transmit+0x2e>
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e07b      	b.n	8004ef8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Transmit+0x40>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e074      	b.n	8004ef8 <HAL_UART_Transmit+0x12a>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2221      	movs	r2, #33	; 0x21
 8004e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004e24:	f7fc f8a0 	bl	8000f68 <HAL_GetTick>
 8004e28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	88fa      	ldrh	r2, [r7, #6]
 8004e2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	88fa      	ldrh	r2, [r7, #6]
 8004e34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004e3e:	e042      	b.n	8004ec6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e56:	d122      	bne.n	8004e9e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2180      	movs	r1, #128	; 0x80
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f96a 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e042      	b.n	8004ef8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e84:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	3302      	adds	r3, #2
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	e017      	b.n	8004ec6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	e013      	b.n	8004ec6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2180      	movs	r1, #128	; 0x80
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f947 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e01f      	b.n	8004ef8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	60ba      	str	r2, [r7, #8]
 8004ebe:	781a      	ldrb	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1b7      	bne.n	8004e40 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2140      	movs	r1, #64	; 0x40
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 f92e 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e006      	b.n	8004ef8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e000      	b.n	8004ef8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004ef6:	2302      	movs	r3, #2
  }
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10d      	bne.n	8004f52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_UART_IRQHandler+0x52>
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f9e0 	bl	8005310 <UART_Receive_IT>
      return;
 8004f50:	e0d1      	b.n	80050f6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80b0 	beq.w	80050ba <HAL_UART_IRQHandler+0x1ba>
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <HAL_UART_IRQHandler+0x70>
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 80a5 	beq.w	80050ba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_UART_IRQHandler+0x90>
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f88:	f043 0201 	orr.w	r2, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_UART_IRQHandler+0xb0>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa8:	f043 0202 	orr.w	r2, r3, #2
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_UART_IRQHandler+0xd0>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc8:	f043 0204 	orr.w	r2, r3, #4
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00f      	beq.n	8004ffa <HAL_UART_IRQHandler+0xfa>
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d104      	bne.n	8004fee <HAL_UART_IRQHandler+0xee>
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	f043 0208 	orr.w	r2, r3, #8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d078      	beq.n	80050f4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <HAL_UART_IRQHandler+0x11c>
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f97a 	bl	8005310 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d102      	bne.n	8005044 <HAL_UART_IRQHandler+0x144>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d031      	beq.n	80050a8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f8c3 	bl	80051d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d123      	bne.n	80050a0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695a      	ldr	r2, [r3, #20]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005066:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506c:	2b00      	cmp	r3, #0
 800506e:	d013      	beq.n	8005098 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005074:	4a21      	ldr	r2, [pc, #132]	; (80050fc <HAL_UART_IRQHandler+0x1fc>)
 8005076:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	4618      	mov	r0, r3
 800507e:	f7fc f961 	bl	8001344 <HAL_DMA_Abort_IT>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d016      	beq.n	80050b6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005092:	4610      	mov	r0, r2
 8005094:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005096:	e00e      	b.n	80050b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f845 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509e:	e00a      	b.n	80050b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f841 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a6:	e006      	b.n	80050b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f83d 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80050b4:	e01e      	b.n	80050f4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b6:	bf00      	nop
    return;
 80050b8:	e01c      	b.n	80050f4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d008      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1d6>
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8b0 	bl	8005234 <UART_Transmit_IT>
    return;
 80050d4:	e00f      	b.n	80050f6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <HAL_UART_IRQHandler+0x1f6>
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f8f8 	bl	80052e0 <UART_EndTransmit_IT>
    return;
 80050f0:	bf00      	nop
 80050f2:	e000      	b.n	80050f6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80050f4:	bf00      	nop
  }
}
 80050f6:	3720      	adds	r7, #32
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	0800520d 	.word	0x0800520d

08005100 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514c:	e02c      	b.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005154:	d028      	beq.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <UART_WaitOnFlagUntilTimeout+0x30>
 800515c:	f7fb ff04 	bl	8000f68 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	429a      	cmp	r2, r3
 800516a:	d21d      	bcs.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800517a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695a      	ldr	r2, [r3, #20]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e00f      	b.n	80051c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4013      	ands	r3, r2
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	bf0c      	ite	eq
 80051b8:	2301      	moveq	r3, #1
 80051ba:	2300      	movne	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d0c3      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7ff ff7e 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b21      	cmp	r3, #33	; 0x21
 8005246:	d144      	bne.n	80052d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005250:	d11a      	bne.n	8005288 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005266:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d105      	bne.n	800527c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	1c9a      	adds	r2, r3, #2
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	621a      	str	r2, [r3, #32]
 800527a:	e00e      	b.n	800529a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	621a      	str	r2, [r3, #32]
 8005286:	e008      	b.n	800529a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	1c59      	adds	r1, r3, #1
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6211      	str	r1, [r2, #32]
 8005292:	781a      	ldrb	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4619      	mov	r1, r3
 80052a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10f      	bne.n	80052ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e000      	b.n	80052d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff fefd 	bl	8005100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b22      	cmp	r3, #34	; 0x22
 8005322:	d171      	bne.n	8005408 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532c:	d123      	bne.n	8005376 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10e      	bne.n	800535a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	1c9a      	adds	r2, r3, #2
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	629a      	str	r2, [r3, #40]	; 0x28
 8005358:	e029      	b.n	80053ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	b29b      	uxth	r3, r3
 8005362:	b2db      	uxtb	r3, r3
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28
 8005374:	e01b      	b.n	80053ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10a      	bne.n	8005394 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6858      	ldr	r0, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	1c59      	adds	r1, r3, #1
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6291      	str	r1, [r2, #40]	; 0x28
 800538e:	b2c2      	uxtb	r2, r0
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e00c      	b.n	80053ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	b2da      	uxtb	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a0:	1c58      	adds	r0, r3, #1
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	6288      	str	r0, [r1, #40]	; 0x28
 80053a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	4619      	mov	r1, r3
 80053bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d120      	bne.n	8005404 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0220 	bic.w	r2, r2, #32
 80053d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695a      	ldr	r2, [r3, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff fe8a 	bl	8005114 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	e002      	b.n	800540a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	e000      	b.n	800540a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005408:	2302      	movs	r3, #2
  }
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005456:	f023 030c 	bic.w	r3, r3, #12
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	68f9      	ldr	r1, [r7, #12]
 8005460:	430b      	orrs	r3, r1
 8005462:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005482:	f040 818b 	bne.w	800579c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4ac1      	ldr	r2, [pc, #772]	; (8005790 <UART_SetConfig+0x37c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d005      	beq.n	800549c <UART_SetConfig+0x88>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4abf      	ldr	r2, [pc, #764]	; (8005794 <UART_SetConfig+0x380>)
 8005496:	4293      	cmp	r3, r2
 8005498:	f040 80bd 	bne.w	8005616 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800549c:	f7ff fa94 	bl	80049c8 <HAL_RCC_GetPCLK2Freq>
 80054a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	461d      	mov	r5, r3
 80054a6:	f04f 0600 	mov.w	r6, #0
 80054aa:	46a8      	mov	r8, r5
 80054ac:	46b1      	mov	r9, r6
 80054ae:	eb18 0308 	adds.w	r3, r8, r8
 80054b2:	eb49 0409 	adc.w	r4, r9, r9
 80054b6:	4698      	mov	r8, r3
 80054b8:	46a1      	mov	r9, r4
 80054ba:	eb18 0805 	adds.w	r8, r8, r5
 80054be:	eb49 0906 	adc.w	r9, r9, r6
 80054c2:	f04f 0100 	mov.w	r1, #0
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054d6:	4688      	mov	r8, r1
 80054d8:	4691      	mov	r9, r2
 80054da:	eb18 0005 	adds.w	r0, r8, r5
 80054de:	eb49 0106 	adc.w	r1, r9, r6
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	461d      	mov	r5, r3
 80054e8:	f04f 0600 	mov.w	r6, #0
 80054ec:	196b      	adds	r3, r5, r5
 80054ee:	eb46 0406 	adc.w	r4, r6, r6
 80054f2:	461a      	mov	r2, r3
 80054f4:	4623      	mov	r3, r4
 80054f6:	f7fa fe67 	bl	80001c8 <__aeabi_uldivmod>
 80054fa:	4603      	mov	r3, r0
 80054fc:	460c      	mov	r4, r1
 80054fe:	461a      	mov	r2, r3
 8005500:	4ba5      	ldr	r3, [pc, #660]	; (8005798 <UART_SetConfig+0x384>)
 8005502:	fba3 2302 	umull	r2, r3, r3, r2
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	461d      	mov	r5, r3
 8005510:	f04f 0600 	mov.w	r6, #0
 8005514:	46a9      	mov	r9, r5
 8005516:	46b2      	mov	sl, r6
 8005518:	eb19 0309 	adds.w	r3, r9, r9
 800551c:	eb4a 040a 	adc.w	r4, sl, sl
 8005520:	4699      	mov	r9, r3
 8005522:	46a2      	mov	sl, r4
 8005524:	eb19 0905 	adds.w	r9, r9, r5
 8005528:	eb4a 0a06 	adc.w	sl, sl, r6
 800552c:	f04f 0100 	mov.w	r1, #0
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005538:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800553c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005540:	4689      	mov	r9, r1
 8005542:	4692      	mov	sl, r2
 8005544:	eb19 0005 	adds.w	r0, r9, r5
 8005548:	eb4a 0106 	adc.w	r1, sl, r6
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	461d      	mov	r5, r3
 8005552:	f04f 0600 	mov.w	r6, #0
 8005556:	196b      	adds	r3, r5, r5
 8005558:	eb46 0406 	adc.w	r4, r6, r6
 800555c:	461a      	mov	r2, r3
 800555e:	4623      	mov	r3, r4
 8005560:	f7fa fe32 	bl	80001c8 <__aeabi_uldivmod>
 8005564:	4603      	mov	r3, r0
 8005566:	460c      	mov	r4, r1
 8005568:	461a      	mov	r2, r3
 800556a:	4b8b      	ldr	r3, [pc, #556]	; (8005798 <UART_SetConfig+0x384>)
 800556c:	fba3 1302 	umull	r1, r3, r3, r2
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	2164      	movs	r1, #100	; 0x64
 8005574:	fb01 f303 	mul.w	r3, r1, r3
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	3332      	adds	r3, #50	; 0x32
 800557e:	4a86      	ldr	r2, [pc, #536]	; (8005798 <UART_SetConfig+0x384>)
 8005580:	fba2 2303 	umull	r2, r3, r2, r3
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800558c:	4498      	add	r8, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	461d      	mov	r5, r3
 8005592:	f04f 0600 	mov.w	r6, #0
 8005596:	46a9      	mov	r9, r5
 8005598:	46b2      	mov	sl, r6
 800559a:	eb19 0309 	adds.w	r3, r9, r9
 800559e:	eb4a 040a 	adc.w	r4, sl, sl
 80055a2:	4699      	mov	r9, r3
 80055a4:	46a2      	mov	sl, r4
 80055a6:	eb19 0905 	adds.w	r9, r9, r5
 80055aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80055ae:	f04f 0100 	mov.w	r1, #0
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055c2:	4689      	mov	r9, r1
 80055c4:	4692      	mov	sl, r2
 80055c6:	eb19 0005 	adds.w	r0, r9, r5
 80055ca:	eb4a 0106 	adc.w	r1, sl, r6
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	461d      	mov	r5, r3
 80055d4:	f04f 0600 	mov.w	r6, #0
 80055d8:	196b      	adds	r3, r5, r5
 80055da:	eb46 0406 	adc.w	r4, r6, r6
 80055de:	461a      	mov	r2, r3
 80055e0:	4623      	mov	r3, r4
 80055e2:	f7fa fdf1 	bl	80001c8 <__aeabi_uldivmod>
 80055e6:	4603      	mov	r3, r0
 80055e8:	460c      	mov	r4, r1
 80055ea:	461a      	mov	r2, r3
 80055ec:	4b6a      	ldr	r3, [pc, #424]	; (8005798 <UART_SetConfig+0x384>)
 80055ee:	fba3 1302 	umull	r1, r3, r3, r2
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2164      	movs	r1, #100	; 0x64
 80055f6:	fb01 f303 	mul.w	r3, r1, r3
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	3332      	adds	r3, #50	; 0x32
 8005600:	4a65      	ldr	r2, [pc, #404]	; (8005798 <UART_SetConfig+0x384>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	f003 0207 	and.w	r2, r3, #7
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4442      	add	r2, r8
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	e26f      	b.n	8005af6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005616:	f7ff f9c3 	bl	80049a0 <HAL_RCC_GetPCLK1Freq>
 800561a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	461d      	mov	r5, r3
 8005620:	f04f 0600 	mov.w	r6, #0
 8005624:	46a8      	mov	r8, r5
 8005626:	46b1      	mov	r9, r6
 8005628:	eb18 0308 	adds.w	r3, r8, r8
 800562c:	eb49 0409 	adc.w	r4, r9, r9
 8005630:	4698      	mov	r8, r3
 8005632:	46a1      	mov	r9, r4
 8005634:	eb18 0805 	adds.w	r8, r8, r5
 8005638:	eb49 0906 	adc.w	r9, r9, r6
 800563c:	f04f 0100 	mov.w	r1, #0
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005648:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800564c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005650:	4688      	mov	r8, r1
 8005652:	4691      	mov	r9, r2
 8005654:	eb18 0005 	adds.w	r0, r8, r5
 8005658:	eb49 0106 	adc.w	r1, r9, r6
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	461d      	mov	r5, r3
 8005662:	f04f 0600 	mov.w	r6, #0
 8005666:	196b      	adds	r3, r5, r5
 8005668:	eb46 0406 	adc.w	r4, r6, r6
 800566c:	461a      	mov	r2, r3
 800566e:	4623      	mov	r3, r4
 8005670:	f7fa fdaa 	bl	80001c8 <__aeabi_uldivmod>
 8005674:	4603      	mov	r3, r0
 8005676:	460c      	mov	r4, r1
 8005678:	461a      	mov	r2, r3
 800567a:	4b47      	ldr	r3, [pc, #284]	; (8005798 <UART_SetConfig+0x384>)
 800567c:	fba3 2302 	umull	r2, r3, r3, r2
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	461d      	mov	r5, r3
 800568a:	f04f 0600 	mov.w	r6, #0
 800568e:	46a9      	mov	r9, r5
 8005690:	46b2      	mov	sl, r6
 8005692:	eb19 0309 	adds.w	r3, r9, r9
 8005696:	eb4a 040a 	adc.w	r4, sl, sl
 800569a:	4699      	mov	r9, r3
 800569c:	46a2      	mov	sl, r4
 800569e:	eb19 0905 	adds.w	r9, r9, r5
 80056a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80056a6:	f04f 0100 	mov.w	r1, #0
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056ba:	4689      	mov	r9, r1
 80056bc:	4692      	mov	sl, r2
 80056be:	eb19 0005 	adds.w	r0, r9, r5
 80056c2:	eb4a 0106 	adc.w	r1, sl, r6
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	461d      	mov	r5, r3
 80056cc:	f04f 0600 	mov.w	r6, #0
 80056d0:	196b      	adds	r3, r5, r5
 80056d2:	eb46 0406 	adc.w	r4, r6, r6
 80056d6:	461a      	mov	r2, r3
 80056d8:	4623      	mov	r3, r4
 80056da:	f7fa fd75 	bl	80001c8 <__aeabi_uldivmod>
 80056de:	4603      	mov	r3, r0
 80056e0:	460c      	mov	r4, r1
 80056e2:	461a      	mov	r2, r3
 80056e4:	4b2c      	ldr	r3, [pc, #176]	; (8005798 <UART_SetConfig+0x384>)
 80056e6:	fba3 1302 	umull	r1, r3, r3, r2
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	2164      	movs	r1, #100	; 0x64
 80056ee:	fb01 f303 	mul.w	r3, r1, r3
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	3332      	adds	r3, #50	; 0x32
 80056f8:	4a27      	ldr	r2, [pc, #156]	; (8005798 <UART_SetConfig+0x384>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005706:	4498      	add	r8, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	461d      	mov	r5, r3
 800570c:	f04f 0600 	mov.w	r6, #0
 8005710:	46a9      	mov	r9, r5
 8005712:	46b2      	mov	sl, r6
 8005714:	eb19 0309 	adds.w	r3, r9, r9
 8005718:	eb4a 040a 	adc.w	r4, sl, sl
 800571c:	4699      	mov	r9, r3
 800571e:	46a2      	mov	sl, r4
 8005720:	eb19 0905 	adds.w	r9, r9, r5
 8005724:	eb4a 0a06 	adc.w	sl, sl, r6
 8005728:	f04f 0100 	mov.w	r1, #0
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005734:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005738:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800573c:	4689      	mov	r9, r1
 800573e:	4692      	mov	sl, r2
 8005740:	eb19 0005 	adds.w	r0, r9, r5
 8005744:	eb4a 0106 	adc.w	r1, sl, r6
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	461d      	mov	r5, r3
 800574e:	f04f 0600 	mov.w	r6, #0
 8005752:	196b      	adds	r3, r5, r5
 8005754:	eb46 0406 	adc.w	r4, r6, r6
 8005758:	461a      	mov	r2, r3
 800575a:	4623      	mov	r3, r4
 800575c:	f7fa fd34 	bl	80001c8 <__aeabi_uldivmod>
 8005760:	4603      	mov	r3, r0
 8005762:	460c      	mov	r4, r1
 8005764:	461a      	mov	r2, r3
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <UART_SetConfig+0x384>)
 8005768:	fba3 1302 	umull	r1, r3, r3, r2
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	2164      	movs	r1, #100	; 0x64
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	3332      	adds	r3, #50	; 0x32
 800577a:	4a07      	ldr	r2, [pc, #28]	; (8005798 <UART_SetConfig+0x384>)
 800577c:	fba2 2303 	umull	r2, r3, r2, r3
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	f003 0207 	and.w	r2, r3, #7
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4442      	add	r2, r8
 800578c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800578e:	e1b2      	b.n	8005af6 <UART_SetConfig+0x6e2>
 8005790:	40011000 	.word	0x40011000
 8005794:	40011400 	.word	0x40011400
 8005798:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4ad7      	ldr	r2, [pc, #860]	; (8005b00 <UART_SetConfig+0x6ec>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d005      	beq.n	80057b2 <UART_SetConfig+0x39e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4ad6      	ldr	r2, [pc, #856]	; (8005b04 <UART_SetConfig+0x6f0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	f040 80d1 	bne.w	8005954 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80057b2:	f7ff f909 	bl	80049c8 <HAL_RCC_GetPCLK2Freq>
 80057b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	469a      	mov	sl, r3
 80057bc:	f04f 0b00 	mov.w	fp, #0
 80057c0:	46d0      	mov	r8, sl
 80057c2:	46d9      	mov	r9, fp
 80057c4:	eb18 0308 	adds.w	r3, r8, r8
 80057c8:	eb49 0409 	adc.w	r4, r9, r9
 80057cc:	4698      	mov	r8, r3
 80057ce:	46a1      	mov	r9, r4
 80057d0:	eb18 080a 	adds.w	r8, r8, sl
 80057d4:	eb49 090b 	adc.w	r9, r9, fp
 80057d8:	f04f 0100 	mov.w	r1, #0
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057ec:	4688      	mov	r8, r1
 80057ee:	4691      	mov	r9, r2
 80057f0:	eb1a 0508 	adds.w	r5, sl, r8
 80057f4:	eb4b 0609 	adc.w	r6, fp, r9
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	4619      	mov	r1, r3
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	f04f 0400 	mov.w	r4, #0
 800580a:	0094      	lsls	r4, r2, #2
 800580c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005810:	008b      	lsls	r3, r1, #2
 8005812:	461a      	mov	r2, r3
 8005814:	4623      	mov	r3, r4
 8005816:	4628      	mov	r0, r5
 8005818:	4631      	mov	r1, r6
 800581a:	f7fa fcd5 	bl	80001c8 <__aeabi_uldivmod>
 800581e:	4603      	mov	r3, r0
 8005820:	460c      	mov	r4, r1
 8005822:	461a      	mov	r2, r3
 8005824:	4bb8      	ldr	r3, [pc, #736]	; (8005b08 <UART_SetConfig+0x6f4>)
 8005826:	fba3 2302 	umull	r2, r3, r3, r2
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	469b      	mov	fp, r3
 8005834:	f04f 0c00 	mov.w	ip, #0
 8005838:	46d9      	mov	r9, fp
 800583a:	46e2      	mov	sl, ip
 800583c:	eb19 0309 	adds.w	r3, r9, r9
 8005840:	eb4a 040a 	adc.w	r4, sl, sl
 8005844:	4699      	mov	r9, r3
 8005846:	46a2      	mov	sl, r4
 8005848:	eb19 090b 	adds.w	r9, r9, fp
 800584c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005850:	f04f 0100 	mov.w	r1, #0
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800585c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005860:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005864:	4689      	mov	r9, r1
 8005866:	4692      	mov	sl, r2
 8005868:	eb1b 0509 	adds.w	r5, fp, r9
 800586c:	eb4c 060a 	adc.w	r6, ip, sl
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4619      	mov	r1, r3
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	f04f 0400 	mov.w	r4, #0
 8005882:	0094      	lsls	r4, r2, #2
 8005884:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005888:	008b      	lsls	r3, r1, #2
 800588a:	461a      	mov	r2, r3
 800588c:	4623      	mov	r3, r4
 800588e:	4628      	mov	r0, r5
 8005890:	4631      	mov	r1, r6
 8005892:	f7fa fc99 	bl	80001c8 <__aeabi_uldivmod>
 8005896:	4603      	mov	r3, r0
 8005898:	460c      	mov	r4, r1
 800589a:	461a      	mov	r2, r3
 800589c:	4b9a      	ldr	r3, [pc, #616]	; (8005b08 <UART_SetConfig+0x6f4>)
 800589e:	fba3 1302 	umull	r1, r3, r3, r2
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	2164      	movs	r1, #100	; 0x64
 80058a6:	fb01 f303 	mul.w	r3, r1, r3
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	3332      	adds	r3, #50	; 0x32
 80058b0:	4a95      	ldr	r2, [pc, #596]	; (8005b08 <UART_SetConfig+0x6f4>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058bc:	4498      	add	r8, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	469b      	mov	fp, r3
 80058c2:	f04f 0c00 	mov.w	ip, #0
 80058c6:	46d9      	mov	r9, fp
 80058c8:	46e2      	mov	sl, ip
 80058ca:	eb19 0309 	adds.w	r3, r9, r9
 80058ce:	eb4a 040a 	adc.w	r4, sl, sl
 80058d2:	4699      	mov	r9, r3
 80058d4:	46a2      	mov	sl, r4
 80058d6:	eb19 090b 	adds.w	r9, r9, fp
 80058da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058de:	f04f 0100 	mov.w	r1, #0
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058f2:	4689      	mov	r9, r1
 80058f4:	4692      	mov	sl, r2
 80058f6:	eb1b 0509 	adds.w	r5, fp, r9
 80058fa:	eb4c 060a 	adc.w	r6, ip, sl
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4619      	mov	r1, r3
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	f04f 0400 	mov.w	r4, #0
 8005910:	0094      	lsls	r4, r2, #2
 8005912:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005916:	008b      	lsls	r3, r1, #2
 8005918:	461a      	mov	r2, r3
 800591a:	4623      	mov	r3, r4
 800591c:	4628      	mov	r0, r5
 800591e:	4631      	mov	r1, r6
 8005920:	f7fa fc52 	bl	80001c8 <__aeabi_uldivmod>
 8005924:	4603      	mov	r3, r0
 8005926:	460c      	mov	r4, r1
 8005928:	461a      	mov	r2, r3
 800592a:	4b77      	ldr	r3, [pc, #476]	; (8005b08 <UART_SetConfig+0x6f4>)
 800592c:	fba3 1302 	umull	r1, r3, r3, r2
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	2164      	movs	r1, #100	; 0x64
 8005934:	fb01 f303 	mul.w	r3, r1, r3
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	3332      	adds	r3, #50	; 0x32
 800593e:	4a72      	ldr	r2, [pc, #456]	; (8005b08 <UART_SetConfig+0x6f4>)
 8005940:	fba2 2303 	umull	r2, r3, r2, r3
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	f003 020f 	and.w	r2, r3, #15
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4442      	add	r2, r8
 8005950:	609a      	str	r2, [r3, #8]
 8005952:	e0d0      	b.n	8005af6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005954:	f7ff f824 	bl	80049a0 <HAL_RCC_GetPCLK1Freq>
 8005958:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	469a      	mov	sl, r3
 800595e:	f04f 0b00 	mov.w	fp, #0
 8005962:	46d0      	mov	r8, sl
 8005964:	46d9      	mov	r9, fp
 8005966:	eb18 0308 	adds.w	r3, r8, r8
 800596a:	eb49 0409 	adc.w	r4, r9, r9
 800596e:	4698      	mov	r8, r3
 8005970:	46a1      	mov	r9, r4
 8005972:	eb18 080a 	adds.w	r8, r8, sl
 8005976:	eb49 090b 	adc.w	r9, r9, fp
 800597a:	f04f 0100 	mov.w	r1, #0
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005986:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800598a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800598e:	4688      	mov	r8, r1
 8005990:	4691      	mov	r9, r2
 8005992:	eb1a 0508 	adds.w	r5, sl, r8
 8005996:	eb4b 0609 	adc.w	r6, fp, r9
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	4619      	mov	r1, r3
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	f04f 0400 	mov.w	r4, #0
 80059ac:	0094      	lsls	r4, r2, #2
 80059ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059b2:	008b      	lsls	r3, r1, #2
 80059b4:	461a      	mov	r2, r3
 80059b6:	4623      	mov	r3, r4
 80059b8:	4628      	mov	r0, r5
 80059ba:	4631      	mov	r1, r6
 80059bc:	f7fa fc04 	bl	80001c8 <__aeabi_uldivmod>
 80059c0:	4603      	mov	r3, r0
 80059c2:	460c      	mov	r4, r1
 80059c4:	461a      	mov	r2, r3
 80059c6:	4b50      	ldr	r3, [pc, #320]	; (8005b08 <UART_SetConfig+0x6f4>)
 80059c8:	fba3 2302 	umull	r2, r3, r3, r2
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	469b      	mov	fp, r3
 80059d6:	f04f 0c00 	mov.w	ip, #0
 80059da:	46d9      	mov	r9, fp
 80059dc:	46e2      	mov	sl, ip
 80059de:	eb19 0309 	adds.w	r3, r9, r9
 80059e2:	eb4a 040a 	adc.w	r4, sl, sl
 80059e6:	4699      	mov	r9, r3
 80059e8:	46a2      	mov	sl, r4
 80059ea:	eb19 090b 	adds.w	r9, r9, fp
 80059ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059f2:	f04f 0100 	mov.w	r1, #0
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a06:	4689      	mov	r9, r1
 8005a08:	4692      	mov	sl, r2
 8005a0a:	eb1b 0509 	adds.w	r5, fp, r9
 8005a0e:	eb4c 060a 	adc.w	r6, ip, sl
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4619      	mov	r1, r3
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	f04f 0400 	mov.w	r4, #0
 8005a24:	0094      	lsls	r4, r2, #2
 8005a26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a2a:	008b      	lsls	r3, r1, #2
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4623      	mov	r3, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	4631      	mov	r1, r6
 8005a34:	f7fa fbc8 	bl	80001c8 <__aeabi_uldivmod>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4b32      	ldr	r3, [pc, #200]	; (8005b08 <UART_SetConfig+0x6f4>)
 8005a40:	fba3 1302 	umull	r1, r3, r3, r2
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	2164      	movs	r1, #100	; 0x64
 8005a48:	fb01 f303 	mul.w	r3, r1, r3
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	3332      	adds	r3, #50	; 0x32
 8005a52:	4a2d      	ldr	r2, [pc, #180]	; (8005b08 <UART_SetConfig+0x6f4>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a5e:	4498      	add	r8, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	469b      	mov	fp, r3
 8005a64:	f04f 0c00 	mov.w	ip, #0
 8005a68:	46d9      	mov	r9, fp
 8005a6a:	46e2      	mov	sl, ip
 8005a6c:	eb19 0309 	adds.w	r3, r9, r9
 8005a70:	eb4a 040a 	adc.w	r4, sl, sl
 8005a74:	4699      	mov	r9, r3
 8005a76:	46a2      	mov	sl, r4
 8005a78:	eb19 090b 	adds.w	r9, r9, fp
 8005a7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a80:	f04f 0100 	mov.w	r1, #0
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a94:	4689      	mov	r9, r1
 8005a96:	4692      	mov	sl, r2
 8005a98:	eb1b 0509 	adds.w	r5, fp, r9
 8005a9c:	eb4c 060a 	adc.w	r6, ip, sl
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	f04f 0400 	mov.w	r4, #0
 8005ab2:	0094      	lsls	r4, r2, #2
 8005ab4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ab8:	008b      	lsls	r3, r1, #2
 8005aba:	461a      	mov	r2, r3
 8005abc:	4623      	mov	r3, r4
 8005abe:	4628      	mov	r0, r5
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	f7fa fb81 	bl	80001c8 <__aeabi_uldivmod>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	460c      	mov	r4, r1
 8005aca:	461a      	mov	r2, r3
 8005acc:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <UART_SetConfig+0x6f4>)
 8005ace:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	2164      	movs	r1, #100	; 0x64
 8005ad6:	fb01 f303 	mul.w	r3, r1, r3
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	3332      	adds	r3, #50	; 0x32
 8005ae0:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <UART_SetConfig+0x6f4>)
 8005ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	f003 020f 	and.w	r2, r3, #15
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4442      	add	r2, r8
 8005af2:	609a      	str	r2, [r3, #8]
}
 8005af4:	e7ff      	b.n	8005af6 <UART_SetConfig+0x6e2>
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b00:	40011000 	.word	0x40011000
 8005b04:	40011400 	.word	0x40011400
 8005b08:	51eb851f 	.word	0x51eb851f

08005b0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	f107 001c 	add.w	r0, r7, #28
 8005b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d122      	bne.n	8005b6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d105      	bne.n	8005b5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f94a 	bl	8005df8 <USB_CoreReset>
 8005b64:	4603      	mov	r3, r0
 8005b66:	73fb      	strb	r3, [r7, #15]
 8005b68:	e01a      	b.n	8005ba0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f93e 	bl	8005df8 <USB_CoreReset>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
 8005b92:	e005      	b.n	8005ba0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d10b      	bne.n	8005bbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f043 0206 	orr.w	r2, r3, #6
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bca:	b004      	add	sp, #16
 8005bcc:	4770      	bx	lr

08005bce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f043 0201 	orr.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f023 0201 	bic.w	r2, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d106      	bne.n	8005c3e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60da      	str	r2, [r3, #12]
 8005c3c:	e00b      	b.n	8005c56 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c3e:	78fb      	ldrb	r3, [r7, #3]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d106      	bne.n	8005c52 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	60da      	str	r2, [r3, #12]
 8005c50:	e001      	b.n	8005c56 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e003      	b.n	8005c5e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c56:	2032      	movs	r0, #50	; 0x32
 8005c58:	f7fb f992 	bl	8000f80 <HAL_Delay>

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	019b      	lsls	r3, r3, #6
 8005c7a:	f043 0220 	orr.w	r2, r3, #32
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3301      	adds	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4a09      	ldr	r2, [pc, #36]	; (8005cb0 <USB_FlushTxFifo+0x48>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d901      	bls.n	8005c94 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e006      	b.n	8005ca2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d0f0      	beq.n	8005c82 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	00030d40 	.word	0x00030d40

08005cb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2210      	movs	r2, #16
 8005cc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <USB_FlushRxFifo+0x40>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d901      	bls.n	8005cd8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e006      	b.n	8005ce6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	d0f0      	beq.n	8005cc6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	00030d40 	.word	0x00030d40

08005cf8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b089      	sub	sp, #36	; 0x24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	4611      	mov	r1, r2
 8005d04:	461a      	mov	r2, r3
 8005d06:	460b      	mov	r3, r1
 8005d08:	71fb      	strb	r3, [r7, #7]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005d16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d11a      	bne.n	8005d54 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d1e:	88bb      	ldrh	r3, [r7, #4]
 8005d20:	3303      	adds	r3, #3
 8005d22:	089b      	lsrs	r3, r3, #2
 8005d24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d26:	2300      	movs	r3, #0
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	e00f      	b.n	8005d4c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	031a      	lsls	r2, r3, #12
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d38:	461a      	mov	r2, r3
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3304      	adds	r3, #4
 8005d44:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d3eb      	bcc.n	8005d2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3724      	adds	r7, #36	; 0x24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b089      	sub	sp, #36	; 0x24
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	3303      	adds	r3, #3
 8005d7c:	089b      	lsrs	r3, r3, #2
 8005d7e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005d80:	2300      	movs	r3, #0
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	e00b      	b.n	8005d9e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	3304      	adds	r3, #4
 8005d96:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	61bb      	str	r3, [r7, #24]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d3ef      	bcc.n	8005d86 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005da6:	69fb      	ldr	r3, [r7, #28]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3724      	adds	r7, #36	; 0x24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f003 0301 	and.w	r3, r3, #1
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <USB_CoreReset+0x64>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e01b      	b.n	8005e4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	daf2      	bge.n	8005e04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f043 0201 	orr.w	r2, r3, #1
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3301      	adds	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4a09      	ldr	r2, [pc, #36]	; (8005e5c <USB_CoreReset+0x64>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d901      	bls.n	8005e40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e006      	b.n	8005e4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d0f0      	beq.n	8005e2e <USB_CoreReset+0x36>

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	00030d40 	.word	0x00030d40

08005e60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e60:	b084      	sub	sp, #16
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	f107 001c 	add.w	r0, r7, #28
 8005e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	2300      	movs	r3, #0
 8005e80:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d018      	beq.n	8005ee4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d10a      	bne.n	8005ece <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ec6:	f043 0304 	orr.w	r3, r3, #4
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	e014      	b.n	8005ef8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005edc:	f023 0304 	bic.w	r3, r3, #4
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e009      	b.n	8005ef8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ef2:	f023 0304 	bic.w	r3, r3, #4
 8005ef6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005ef8:	2110      	movs	r1, #16
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff feb4 	bl	8005c68 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff fed7 	bl	8005cb4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	e015      	b.n	8005f38 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f1e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d3e5      	bcc.n	8005f0c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005f40:	2101      	movs	r1, #1
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f8ac 	bl	80060a0 <USB_DriveVbus>

  HAL_Delay(200U);
 8005f48:	20c8      	movs	r0, #200	; 0xc8
 8005f4a:	f7fb f819 	bl	8000f80 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f5a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00b      	beq.n	8005f80 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f6e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a14      	ldr	r2, [pc, #80]	; (8005fc4 <USB_HostInit+0x164>)
 8005f74:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <USB_HostInit+0x168>)
 8005f7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005f7e:	e009      	b.n	8005f94 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a10      	ldr	r2, [pc, #64]	; (8005fcc <USB_HostInit+0x16c>)
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a10      	ldr	r2, [pc, #64]	; (8005fd0 <USB_HostInit+0x170>)
 8005f90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d105      	bne.n	8005fa6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f043 0210 	orr.w	r2, r3, #16
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <USB_HostInit+0x174>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fbe:	b004      	add	sp, #16
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	01000200 	.word	0x01000200
 8005fc8:	00e00300 	.word	0x00e00300
 8005fcc:	00600080 	.word	0x00600080
 8005fd0:	004000e0 	.word	0x004000e0
 8005fd4:	a3200008 	.word	0xa3200008

08005fd8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006010:	4313      	orrs	r3, r2
 8006012:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d107      	bne.n	800602a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006020:	461a      	mov	r2, r3
 8006022:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006026:	6053      	str	r3, [r2, #4]
 8006028:	e009      	b.n	800603e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d106      	bne.n	800603e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006036:	461a      	mov	r2, r3
 8006038:	f241 7370 	movw	r3, #6000	; 0x1770
 800603c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800606c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800607c:	2064      	movs	r0, #100	; 0x64
 800607e:	f7fa ff7f 	bl	8000f80 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800608a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800608e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006090:	200a      	movs	r0, #10
 8006092:	f7fa ff75 	bl	8000f80 <HAL_Delay>

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d109      	bne.n	80060e4 <USB_DriveVbus+0x44>
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d106      	bne.n	80060e4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060e2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ee:	d109      	bne.n	8006104 <USB_DriveVbus+0x64>
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006102:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006112:	b480      	push	{r7}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	0c5b      	lsrs	r3, r3, #17
 8006130:	f003 0303 	and.w	r3, r3, #3
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	b29b      	uxth	r3, r3
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	4608      	mov	r0, r1
 800616e:	4611      	mov	r1, r2
 8006170:	461a      	mov	r2, r3
 8006172:	4603      	mov	r3, r0
 8006174:	70fb      	strb	r3, [r7, #3]
 8006176:	460b      	mov	r3, r1
 8006178:	70bb      	strb	r3, [r7, #2]
 800617a:	4613      	mov	r3, r2
 800617c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	4413      	add	r3, r2
 800618e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006192:	461a      	mov	r2, r3
 8006194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006198:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800619a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d87e      	bhi.n	80062a0 <USB_HC_Init+0x13c>
 80061a2:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <USB_HC_Init+0x44>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061b9 	.word	0x080061b9
 80061ac:	08006263 	.word	0x08006263
 80061b0:	080061b9 	.word	0x080061b9
 80061b4:	08006225 	.word	0x08006225
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c4:	461a      	mov	r2, r3
 80061c6:	f240 439d 	movw	r3, #1181	; 0x49d
 80061ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80061cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	da10      	bge.n	80061f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	78fa      	ldrb	r2, [r7, #3]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80061f4:	e057      	b.n	80062a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d051      	beq.n	80062a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006202:	78fb      	ldrb	r3, [r7, #3]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4413      	add	r3, r2
 800620a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	78fa      	ldrb	r2, [r7, #3]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	440a      	add	r2, r1
 8006218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800621c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006220:	60d3      	str	r3, [r2, #12]
      break;
 8006222:	e040      	b.n	80062a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4413      	add	r3, r2
 800622c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006230:	461a      	mov	r2, r3
 8006232:	f240 639d 	movw	r3, #1693	; 0x69d
 8006236:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006238:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800623c:	2b00      	cmp	r3, #0
 800623e:	da34      	bge.n	80062aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4413      	add	r3, r2
 8006248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	78fa      	ldrb	r2, [r7, #3]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	440a      	add	r2, r1
 8006256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800625a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800625e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006260:	e023      	b.n	80062aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	461a      	mov	r2, r3
 8006270:	f240 2325 	movw	r3, #549	; 0x225
 8006274:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006276:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800627a:	2b00      	cmp	r3, #0
 800627c:	da17      	bge.n	80062ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	4413      	add	r3, r2
 8006286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	440a      	add	r2, r1
 8006294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006298:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800629c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800629e:	e006      	b.n	80062ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	75fb      	strb	r3, [r7, #23]
      break;
 80062a4:	e004      	b.n	80062b0 <USB_HC_Init+0x14c>
      break;
 80062a6:	bf00      	nop
 80062a8:	e002      	b.n	80062b0 <USB_HC_Init+0x14c>
      break;
 80062aa:	bf00      	nop
 80062ac:	e000      	b.n	80062b0 <USB_HC_Init+0x14c>
      break;
 80062ae:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b6:	699a      	ldr	r2, [r3, #24]
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	2101      	movs	r1, #1
 80062c0:	fa01 f303 	lsl.w	r3, r1, r3
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062ca:	4313      	orrs	r3, r2
 80062cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80062da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	da03      	bge.n	80062ea <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80062e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062e6:	613b      	str	r3, [r7, #16]
 80062e8:	e001      	b.n	80062ee <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80062ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d103      	bne.n	80062fe <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	e001      	b.n	8006302 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006302:	787b      	ldrb	r3, [r7, #1]
 8006304:	059b      	lsls	r3, r3, #22
 8006306:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800630a:	78bb      	ldrb	r3, [r7, #2]
 800630c:	02db      	lsls	r3, r3, #11
 800630e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006312:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006314:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006318:	049b      	lsls	r3, r3, #18
 800631a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800631e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006320:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006322:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006326:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	0159      	lsls	r1, r3, #5
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	440b      	add	r3, r1
 8006334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006338:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800633e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006340:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006344:	2b03      	cmp	r3, #3
 8006346:	d10f      	bne.n	8006368 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4413      	add	r3, r2
 8006350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	78fa      	ldrb	r2, [r7, #3]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	440a      	add	r2, r1
 800635e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006362:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006366:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006368:	7dfb      	ldrb	r3, [r7, #23]
}
 800636a:	4618      	mov	r0, r3
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop

08006378 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08c      	sub	sp, #48	; 0x30
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	4613      	mov	r3, r2
 8006384:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006394:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d028      	beq.n	80063f4 <USB_HC_StartXfer+0x7c>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	791b      	ldrb	r3, [r3, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d124      	bne.n	80063f4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10b      	bne.n	80063c8 <USB_HC_StartXfer+0x50>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	795b      	ldrb	r3, [r3, #5]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d107      	bne.n	80063c8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	4619      	mov	r1, r3
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 fa30 	bl	8006824 <USB_DoPing>
      return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e114      	b.n	80065f2 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d112      	bne.n	80063f4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	6a3a      	ldr	r2, [r7, #32]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80063ec:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2200      	movs	r2, #0
 80063f2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d018      	beq.n	800642e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	8912      	ldrh	r2, [r2, #8]
 8006404:	4413      	add	r3, r2
 8006406:	3b01      	subs	r3, #1
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	8912      	ldrh	r2, [r2, #8]
 800640c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006410:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006412:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006414:	8b7b      	ldrh	r3, [r7, #26]
 8006416:	429a      	cmp	r2, r3
 8006418:	d90b      	bls.n	8006432 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800641a:	8b7b      	ldrh	r3, [r7, #26]
 800641c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800641e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	8912      	ldrh	r2, [r2, #8]
 8006424:	fb02 f203 	mul.w	r2, r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	611a      	str	r2, [r3, #16]
 800642c:	e001      	b.n	8006432 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800642e:	2301      	movs	r3, #1
 8006430:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	78db      	ldrb	r3, [r3, #3]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d006      	beq.n	8006448 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800643a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	8912      	ldrh	r2, [r2, #8]
 8006440:	fb02 f203 	mul.w	r2, r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006452:	04d9      	lsls	r1, r3, #19
 8006454:	4b69      	ldr	r3, [pc, #420]	; (80065fc <USB_HC_StartXfer+0x284>)
 8006456:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006458:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	7a9b      	ldrb	r3, [r3, #10]
 800645e:	075b      	lsls	r3, r3, #29
 8006460:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006464:	69f9      	ldr	r1, [r7, #28]
 8006466:	0148      	lsls	r0, r1, #5
 8006468:	6a39      	ldr	r1, [r7, #32]
 800646a:	4401      	add	r1, r0
 800646c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006470:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006472:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	68d9      	ldr	r1, [r3, #12]
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	4413      	add	r3, r2
 8006486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648a:	460a      	mov	r2, r1
 800648c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	bf0c      	ite	eq
 800649e:	2301      	moveq	r3, #1
 80064a0:	2300      	movne	r3, #0
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	6a3a      	ldr	r2, [r7, #32]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	7e7b      	ldrb	r3, [r7, #25]
 80064d6:	075b      	lsls	r3, r3, #29
 80064d8:	69f9      	ldr	r1, [r7, #28]
 80064da:	0148      	lsls	r0, r1, #5
 80064dc:	6a39      	ldr	r1, [r7, #32]
 80064de:	4401      	add	r1, r0
 80064e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80064e4:	4313      	orrs	r3, r2
 80064e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a42      	ldr	r2, [pc, #264]	; (8006600 <USB_HC_StartXfer+0x288>)
 80064f8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064fa:	4b41      	ldr	r3, [pc, #260]	; (8006600 <USB_HC_StartXfer+0x288>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006502:	4a3f      	ldr	r2, [pc, #252]	; (8006600 <USB_HC_StartXfer+0x288>)
 8006504:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	78db      	ldrb	r3, [r3, #3]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d006      	beq.n	800651c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800650e:	4b3c      	ldr	r3, [pc, #240]	; (8006600 <USB_HC_StartXfer+0x288>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006516:	4a3a      	ldr	r2, [pc, #232]	; (8006600 <USB_HC_StartXfer+0x288>)
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	e005      	b.n	8006528 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800651c:	4b38      	ldr	r3, [pc, #224]	; (8006600 <USB_HC_StartXfer+0x288>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006524:	4a36      	ldr	r2, [pc, #216]	; (8006600 <USB_HC_StartXfer+0x288>)
 8006526:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006528:	4b35      	ldr	r3, [pc, #212]	; (8006600 <USB_HC_StartXfer+0x288>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006530:	4a33      	ldr	r2, [pc, #204]	; (8006600 <USB_HC_StartXfer+0x288>)
 8006532:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	4413      	add	r3, r2
 800653c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006540:	461a      	mov	r2, r3
 8006542:	4b2f      	ldr	r3, [pc, #188]	; (8006600 <USB_HC_StartXfer+0x288>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	e04f      	b.n	80065f2 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	78db      	ldrb	r3, [r3, #3]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d14a      	bne.n	80065f0 <USB_HC_StartXfer+0x278>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d046      	beq.n	80065f0 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	79db      	ldrb	r3, [r3, #7]
 8006566:	2b03      	cmp	r3, #3
 8006568:	d830      	bhi.n	80065cc <USB_HC_StartXfer+0x254>
 800656a:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <USB_HC_StartXfer+0x1f8>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	08006581 	.word	0x08006581
 8006574:	080065a5 	.word	0x080065a5
 8006578:	08006581 	.word	0x08006581
 800657c:	080065a5 	.word	0x080065a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	3303      	adds	r3, #3
 8006586:	089b      	lsrs	r3, r3, #2
 8006588:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800658a:	8afa      	ldrh	r2, [r7, #22]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	b29b      	uxth	r3, r3
 8006592:	429a      	cmp	r2, r3
 8006594:	d91c      	bls.n	80065d0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f043 0220 	orr.w	r2, r3, #32
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80065a2:	e015      	b.n	80065d0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	3303      	adds	r3, #3
 80065aa:	089b      	lsrs	r3, r3, #2
 80065ac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80065ae:	8afa      	ldrh	r2, [r7, #22]
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d90a      	bls.n	80065d4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80065ca:	e003      	b.n	80065d4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80065cc:	bf00      	nop
 80065ce:	e002      	b.n	80065d6 <USB_HC_StartXfer+0x25e>
        break;
 80065d0:	bf00      	nop
 80065d2:	e000      	b.n	80065d6 <USB_HC_StartXfer+0x25e>
        break;
 80065d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	68d9      	ldr	r1, [r3, #12]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	785a      	ldrb	r2, [r3, #1]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	b298      	uxth	r0, r3
 80065e4:	2300      	movs	r3, #0
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	4603      	mov	r3, r0
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7ff fb84 	bl	8005cf8 <USB_WritePacket>
  }

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3728      	adds	r7, #40	; 0x28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	1ff80000 	.word	0x1ff80000
 8006600:	200000c0 	.word	0x200000c0

08006604 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	b29b      	uxth	r3, r3
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006626:	b480      	push	{r7}
 8006628:	b087      	sub	sp, #28
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	4413      	add	r3, r2
 8006646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	0c9b      	lsrs	r3, r3, #18
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <USB_HC_Halt+0x3a>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d16c      	bne.n	800673a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4413      	add	r3, r2
 8006668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	440a      	add	r2, r1
 8006676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800667a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800667e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d143      	bne.n	8006714 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4413      	add	r3, r2
 8006694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	0151      	lsls	r1, r2, #5
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	440a      	add	r2, r1
 80066c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066ea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	3301      	adds	r3, #1
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066f8:	d81d      	bhi.n	8006736 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4413      	add	r3, r2
 8006702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800670c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006710:	d0ec      	beq.n	80066ec <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006712:	e080      	b.n	8006816 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	4413      	add	r3, r2
 800671c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	440a      	add	r2, r1
 800672a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800672e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006732:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006734:	e06f      	b.n	8006816 <USB_HC_Halt+0x1f0>
          break;
 8006736:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006738:	e06d      	b.n	8006816 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	440a      	add	r2, r1
 8006750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006754:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006758:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d143      	bne.n	80067f2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	4413      	add	r3, r2
 8006772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	440a      	add	r2, r1
 8006780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006788:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	4413      	add	r3, r2
 8006792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067a8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067c8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	3301      	adds	r3, #1
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067d6:	d81d      	bhi.n	8006814 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ee:	d0ec      	beq.n	80067ca <USB_HC_Halt+0x1a4>
 80067f0:	e011      	b.n	8006816 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	440a      	add	r2, r1
 8006808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800680c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	e000      	b.n	8006816 <USB_HC_Halt+0x1f0>
          break;
 8006814:	bf00      	nop
    }
  }

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006838:	2301      	movs	r3, #1
 800683a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	04da      	lsls	r2, r3, #19
 8006840:	4b15      	ldr	r3, [pc, #84]	; (8006898 <USB_DoPing+0x74>)
 8006842:	4013      	ands	r3, r2
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	440a      	add	r2, r1
 800684c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006850:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006854:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	4413      	add	r3, r2
 800685e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800686c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006874:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006882:	461a      	mov	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	1ff80000 	.word	0x1ff80000

0800689c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff f99f 	bl	8005bf0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80068b2:	2110      	movs	r1, #16
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff f9d7 	bl	8005c68 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff f9fa 	bl	8005cb4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80068c0:	2300      	movs	r3, #0
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	e01f      	b.n	8006906 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fa:	461a      	mov	r2, r3
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	3301      	adds	r3, #1
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	2b0f      	cmp	r3, #15
 800690a:	d9dc      	bls.n	80068c6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800690c:	2300      	movs	r3, #0
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	e034      	b.n	800697c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006928:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006930:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006938:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4413      	add	r3, r2
 8006942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006946:	461a      	mov	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	3301      	adds	r3, #1
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006958:	d80c      	bhi.n	8006974 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800696c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006970:	d0ec      	beq.n	800694c <USB_StopHost+0xb0>
 8006972:	e000      	b.n	8006976 <USB_StopHost+0xda>
        break;
 8006974:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	3301      	adds	r3, #1
 800697a:	613b      	str	r3, [r7, #16]
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b0f      	cmp	r3, #15
 8006980:	d9c7      	bls.n	8006912 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006988:	461a      	mov	r2, r3
 800698a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800698e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006996:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff f918 	bl	8005bce <USB_EnableGlobalInt>

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80069a8:	b590      	push	{r4, r7, lr}
 80069aa:	b089      	sub	sp, #36	; 0x24
 80069ac:	af04      	add	r7, sp, #16
 80069ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80069b0:	2301      	movs	r3, #1
 80069b2:	2202      	movs	r2, #2
 80069b4:	2102      	movs	r1, #2
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fc68 	bl	800728c <USBH_FindInterface>
 80069bc:	4603      	mov	r3, r0
 80069be:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2bff      	cmp	r3, #255	; 0xff
 80069c4:	d002      	beq.n	80069cc <USBH_CDC_InterfaceInit+0x24>
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d901      	bls.n	80069d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069cc:	2302      	movs	r3, #2
 80069ce:	e13d      	b.n	8006c4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fc3d 	bl	8007254 <USBH_SelectInterface>
 80069da:	4603      	mov	r3, r0
 80069dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80069e4:	2302      	movs	r3, #2
 80069e6:	e131      	b.n	8006c4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80069ee:	2050      	movs	r0, #80	; 0x50
 80069f0:	f002 fa04 	bl	8008dfc <malloc>
 80069f4:	4603      	mov	r3, r0
 80069f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e11f      	b.n	8006c4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006a0c:	2250      	movs	r2, #80	; 0x50
 8006a0e:	2100      	movs	r1, #0
 8006a10:	68b8      	ldr	r0, [r7, #8]
 8006a12:	f002 fa03 	bl	8008e1c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	211a      	movs	r1, #26
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	4413      	add	r3, r2
 8006a22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	b25b      	sxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	da15      	bge.n	8006a5a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	211a      	movs	r1, #26
 8006a34:	fb01 f303 	mul.w	r3, r1, r3
 8006a38:	4413      	add	r3, r2
 8006a3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	211a      	movs	r1, #26
 8006a4a:	fb01 f303 	mul.w	r3, r1, r3
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a54:	881a      	ldrh	r2, [r3, #0]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 fe36 	bl	80086d2 <USBH_AllocPipe>
 8006a66:	4603      	mov	r3, r0
 8006a68:	461a      	mov	r2, r3
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	7819      	ldrb	r1, [r3, #0]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	7858      	ldrb	r0, [r3, #1]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	8952      	ldrh	r2, [r2, #10]
 8006a86:	9202      	str	r2, [sp, #8]
 8006a88:	2203      	movs	r2, #3
 8006a8a:	9201      	str	r2, [sp, #4]
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	4623      	mov	r3, r4
 8006a90:	4602      	mov	r2, r0
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fdee 	bl	8008674 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f002 f8fb 	bl	8008c9c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	210a      	movs	r1, #10
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fbed 	bl	800728c <USBH_FindInterface>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	2bff      	cmp	r3, #255	; 0xff
 8006aba:	d002      	beq.n	8006ac2 <USBH_CDC_InterfaceInit+0x11a>
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d901      	bls.n	8006ac6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e0c2      	b.n	8006c4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	211a      	movs	r1, #26
 8006acc:	fb01 f303 	mul.w	r3, r1, r3
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	b25b      	sxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	da16      	bge.n	8006b0c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	211a      	movs	r1, #26
 8006ae4:	fb01 f303 	mul.w	r3, r1, r3
 8006ae8:	4413      	add	r3, r2
 8006aea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006aee:	781a      	ldrb	r2, [r3, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	211a      	movs	r1, #26
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b04:	881a      	ldrh	r2, [r3, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	835a      	strh	r2, [r3, #26]
 8006b0a:	e015      	b.n	8006b38 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	211a      	movs	r1, #26
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	4413      	add	r3, r2
 8006b18:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b1c:	781a      	ldrb	r2, [r3, #0]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	211a      	movs	r1, #26
 8006b28:	fb01 f303 	mul.w	r3, r1, r3
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b32:	881a      	ldrh	r2, [r3, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	211a      	movs	r1, #26
 8006b3e:	fb01 f303 	mul.w	r3, r1, r3
 8006b42:	4413      	add	r3, r2
 8006b44:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	b25b      	sxtb	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	da16      	bge.n	8006b7e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	211a      	movs	r1, #26
 8006b56:	fb01 f303 	mul.w	r3, r1, r3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b60:	781a      	ldrb	r2, [r3, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	211a      	movs	r1, #26
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b76:	881a      	ldrh	r2, [r3, #0]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	835a      	strh	r2, [r3, #26]
 8006b7c:	e015      	b.n	8006baa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	211a      	movs	r1, #26
 8006b84:	fb01 f303 	mul.w	r3, r1, r3
 8006b88:	4413      	add	r3, r2
 8006b8a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b8e:	781a      	ldrb	r2, [r3, #0]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	211a      	movs	r1, #26
 8006b9a:	fb01 f303 	mul.w	r3, r1, r3
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006ba4:	881a      	ldrh	r2, [r3, #0]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	7b9b      	ldrb	r3, [r3, #14]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 fd8e 	bl	80086d2 <USBH_AllocPipe>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	7bdb      	ldrb	r3, [r3, #15]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 fd84 	bl	80086d2 <USBH_AllocPipe>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	461a      	mov	r2, r3
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	7b59      	ldrb	r1, [r3, #13]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	7b98      	ldrb	r0, [r3, #14]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	8b12      	ldrh	r2, [r2, #24]
 8006bea:	9202      	str	r2, [sp, #8]
 8006bec:	2202      	movs	r2, #2
 8006bee:	9201      	str	r2, [sp, #4]
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	4623      	mov	r3, r4
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 fd3c 	bl	8008674 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	7b19      	ldrb	r1, [r3, #12]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	7bd8      	ldrb	r0, [r3, #15]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	8b52      	ldrh	r2, [r2, #26]
 8006c14:	9202      	str	r2, [sp, #8]
 8006c16:	2202      	movs	r2, #2
 8006c18:	9201      	str	r2, [sp, #4]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	4602      	mov	r2, r0
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fd27 	bl	8008674 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	7b5b      	ldrb	r3, [r3, #13]
 8006c32:	2200      	movs	r2, #0
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f002 f830 	bl	8008c9c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	7b1b      	ldrb	r3, [r3, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f002 f829 	bl	8008c9c <USBH_LL_SetToggle>

  return USBH_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd90      	pop	{r4, r7, pc}

08006c54 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00e      	beq.n	8006c8c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fd1c 	bl	80086b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 fd47 	bl	8008714 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	7b1b      	ldrb	r3, [r3, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00e      	beq.n	8006cb2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	7b1b      	ldrb	r3, [r3, #12]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 fd09 	bl	80086b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	7b1b      	ldrb	r3, [r3, #12]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fd34 	bl	8008714 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	7b5b      	ldrb	r3, [r3, #13]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00e      	beq.n	8006cd8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	7b5b      	ldrb	r3, [r3, #13]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 fcf6 	bl	80086b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	7b5b      	ldrb	r3, [r3, #13]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fd21 	bl	8008714 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f002 f88d 	bl	8008e0c <free>
    phost->pActiveClass->pData = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3340      	adds	r3, #64	; 0x40
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f8b1 	bl	8006e86 <GetLineCoding>
 8006d24:	4603      	mov	r3, r0
 8006d26:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d105      	bne.n	8006d3a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d34:	2102      	movs	r1, #2
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d877      	bhi.n	8006e58 <USBH_CDC_Process+0x114>
 8006d68:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <USBH_CDC_Process+0x2c>)
 8006d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6e:	bf00      	nop
 8006d70:	08006d85 	.word	0x08006d85
 8006d74:	08006d8b 	.word	0x08006d8b
 8006d78:	08006dbb 	.word	0x08006dbb
 8006d7c:	08006e2f 	.word	0x08006e2f
 8006d80:	08006e3d 	.word	0x08006e3d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
      break;
 8006d88:	e06d      	b.n	8006e66 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f897 	bl	8006ec4 <SetLineCoding>
 8006d96:	4603      	mov	r3, r0
 8006d98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006da8:	e058      	b.n	8006e5c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d055      	beq.n	8006e5c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2204      	movs	r2, #4
 8006db4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006db8:	e050      	b.n	8006e5c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	3340      	adds	r3, #64	; 0x40
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f860 	bl	8006e86 <GetLineCoding>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d126      	bne.n	8006e1e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de2:	791b      	ldrb	r3, [r3, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d13b      	bne.n	8006e60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d133      	bne.n	8006e60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e02:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d12b      	bne.n	8006e60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e10:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d124      	bne.n	8006e60 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f95a 	bl	80070d0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e1c:	e020      	b.n	8006e60 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e1e:	7bbb      	ldrb	r3, [r7, #14]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d01d      	beq.n	8006e60 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2204      	movs	r2, #4
 8006e28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e2c:	e018      	b.n	8006e60 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f867 	bl	8006f02 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f8dc 	bl	8006ff2 <CDC_ProcessReception>
      break;
 8006e3a:	e014      	b.n	8006e66 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 ffe5 	bl	8007e0e <USBH_ClrFeature>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006e56:	e005      	b.n	8006e64 <USBH_CDC_Process+0x120>

    default:
      break;
 8006e58:	bf00      	nop
 8006e5a:	e004      	b.n	8006e66 <USBH_CDC_Process+0x122>
      break;
 8006e5c:	bf00      	nop
 8006e5e:	e002      	b.n	8006e66 <USBH_CDC_Process+0x122>
      break;
 8006e60:	bf00      	nop
 8006e62:	e000      	b.n	8006e66 <USBH_CDC_Process+0x122>
      break;
 8006e64:	bf00      	nop

  }

  return status;
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	22a1      	movs	r2, #161	; 0xa1
 8006e94:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2221      	movs	r2, #33	; 0x21
 8006e9a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2207      	movs	r2, #7
 8006eac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 f98a 	bl	80081ce <USBH_CtlReq>
 8006eba:	4603      	mov	r3, r0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2221      	movs	r2, #33	; 0x21
 8006ed2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2207      	movs	r2, #7
 8006eea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2207      	movs	r2, #7
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 f96b 	bl	80081ce <USBH_CtlReq>
 8006ef8:	4603      	mov	r3, r0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b086      	sub	sp, #24
 8006f06:	af02      	add	r7, sp, #8
 8006f08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f14:	2300      	movs	r3, #0
 8006f16:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d002      	beq.n	8006f28 <CDC_ProcessTransmission+0x26>
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d025      	beq.n	8006f72 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006f26:	e060      	b.n	8006fea <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	8b12      	ldrh	r2, [r2, #24]
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d90c      	bls.n	8006f4e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	69d9      	ldr	r1, [r3, #28]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8b1a      	ldrh	r2, [r3, #24]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	7b58      	ldrb	r0, [r3, #13]
 8006f40:	2301      	movs	r3, #1
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	4603      	mov	r3, r0
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fb51 	bl	80085ee <USBH_BulkSendData>
 8006f4c:	e00c      	b.n	8006f68 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	7b58      	ldrb	r0, [r3, #13]
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	4603      	mov	r3, r0
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 fb43 	bl	80085ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f70:	e03b      	b.n	8006fea <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	7b5b      	ldrb	r3, [r3, #13]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 fe65 	bl	8008c48 <USBH_LL_GetURBState>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f82:	7afb      	ldrb	r3, [r7, #11]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d128      	bne.n	8006fda <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	8b12      	ldrh	r2, [r2, #24]
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d90e      	bls.n	8006fb2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	8b12      	ldrh	r2, [r2, #24]
 8006f9c:	1a9a      	subs	r2, r3, r2
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	8b12      	ldrh	r2, [r2, #24]
 8006faa:	441a      	add	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	61da      	str	r2, [r3, #28]
 8006fb0:	e002      	b.n	8006fb8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d004      	beq.n	8006fca <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fc8:	e00e      	b.n	8006fe8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f868 	bl	80070a8 <USBH_CDC_TransmitCallback>
      break;
 8006fd8:	e006      	b.n	8006fe8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8006fda:	7afb      	ldrb	r3, [r7, #11]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d103      	bne.n	8006fe8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fe8:	bf00      	nop
  }
}
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b086      	sub	sp, #24
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007004:	2300      	movs	r3, #0
 8007006:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800700e:	2b03      	cmp	r3, #3
 8007010:	d002      	beq.n	8007018 <CDC_ProcessReception+0x26>
 8007012:	2b04      	cmp	r3, #4
 8007014:	d00e      	beq.n	8007034 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007016:	e043      	b.n	80070a0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	6a19      	ldr	r1, [r3, #32]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	8b5a      	ldrh	r2, [r3, #26]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	7b1b      	ldrb	r3, [r3, #12]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 fb07 	bl	8008638 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2204      	movs	r2, #4
 800702e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007032:	e035      	b.n	80070a0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	7b1b      	ldrb	r3, [r3, #12]
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 fe04 	bl	8008c48 <USBH_LL_GetURBState>
 8007040:	4603      	mov	r3, r0
 8007042:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007044:	7cfb      	ldrb	r3, [r7, #19]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d129      	bne.n	800709e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	7b1b      	ldrb	r3, [r3, #12]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 fd67 	bl	8008b24 <USBH_LL_GetLastXferSize>
 8007056:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	429a      	cmp	r2, r3
 8007060:	d016      	beq.n	8007090 <CDC_ProcessReception+0x9e>
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	8b5b      	ldrh	r3, [r3, #26]
 8007066:	461a      	mov	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4293      	cmp	r3, r2
 800706c:	d910      	bls.n	8007090 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	1ad2      	subs	r2, r2, r3
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6a1a      	ldr	r2, [r3, #32]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	441a      	add	r2, r3
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2203      	movs	r2, #3
 800708a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800708e:	e006      	b.n	800709e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f80f 	bl	80070bc <USBH_CDC_ReceiveCallback>
      break;
 800709e:	bf00      	nop
  }
}
 80070a0:	bf00      	nop
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	4613      	mov	r3, r2
 80070f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80070f8:	2302      	movs	r3, #2
 80070fa:	e029      	b.n	8007150 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	79fa      	ldrb	r2, [r7, #7]
 8007100:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 f81f 	bl	8007158 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f001 fc39 	bl	80089c0 <USBH_LL_Init>

  return USBH_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e009      	b.n	800717e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	33e0      	adds	r3, #224	; 0xe0
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	2200      	movs	r2, #0
 8007176:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3301      	adds	r3, #1
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b0e      	cmp	r3, #14
 8007182:	d9f2      	bls.n	800716a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	e009      	b.n	800719e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007194:	2200      	movs	r2, #0
 8007196:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3301      	adds	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a4:	d3f1      	bcc.n	800718a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2240      	movs	r2, #64	; 0x40
 80071ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d016      	beq.n	8007242 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10e      	bne.n	800723c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007224:	1c59      	adds	r1, r3, #1
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	33de      	adds	r3, #222	; 0xde
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]
 800723a:	e004      	b.n	8007246 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800723c:	2302      	movs	r3, #2
 800723e:	73fb      	strb	r3, [r7, #15]
 8007240:	e001      	b.n	8007246 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007242:	2302      	movs	r3, #2
 8007244:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800726a:	78fa      	ldrb	r2, [r7, #3]
 800726c:	429a      	cmp	r2, r3
 800726e:	d204      	bcs.n	800727a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	78fa      	ldrb	r2, [r7, #3]
 8007274:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007278:	e001      	b.n	800727e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800727a:	2302      	movs	r3, #2
 800727c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800727e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	4608      	mov	r0, r1
 8007296:	4611      	mov	r1, r2
 8007298:	461a      	mov	r2, r3
 800729a:	4603      	mov	r3, r0
 800729c:	70fb      	strb	r3, [r7, #3]
 800729e:	460b      	mov	r3, r1
 80072a0:	70bb      	strb	r3, [r7, #2]
 80072a2:	4613      	mov	r3, r2
 80072a4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80072b4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072b6:	e025      	b.n	8007304 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	221a      	movs	r2, #26
 80072bc:	fb02 f303 	mul.w	r3, r2, r3
 80072c0:	3308      	adds	r3, #8
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	3302      	adds	r3, #2
 80072c8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	795b      	ldrb	r3, [r3, #5]
 80072ce:	78fa      	ldrb	r2, [r7, #3]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d002      	beq.n	80072da <USBH_FindInterface+0x4e>
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	2bff      	cmp	r3, #255	; 0xff
 80072d8:	d111      	bne.n	80072fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072de:	78ba      	ldrb	r2, [r7, #2]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d002      	beq.n	80072ea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072e4:	78bb      	ldrb	r3, [r7, #2]
 80072e6:	2bff      	cmp	r3, #255	; 0xff
 80072e8:	d109      	bne.n	80072fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072ee:	787a      	ldrb	r2, [r7, #1]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d002      	beq.n	80072fa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072f4:	787b      	ldrb	r3, [r7, #1]
 80072f6:	2bff      	cmp	r3, #255	; 0xff
 80072f8:	d101      	bne.n	80072fe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	e006      	b.n	800730c <USBH_FindInterface+0x80>
    }
    if_ix++;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	3301      	adds	r3, #1
 8007302:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d9d6      	bls.n	80072b8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800730a:	23ff      	movs	r3, #255	; 0xff
}
 800730c:	4618      	mov	r0, r3
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 fb89 	bl	8008a38 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007326:	2101      	movs	r1, #1
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 fca0 	bl	8008c6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b088      	sub	sp, #32
 800733c:	af04      	add	r7, sp, #16
 800733e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007340:	2302      	movs	r3, #2
 8007342:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b01      	cmp	r3, #1
 8007352:	d102      	bne.n	800735a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2203      	movs	r2, #3
 8007358:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b0b      	cmp	r3, #11
 8007362:	f200 81b3 	bhi.w	80076cc <USBH_Process+0x394>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <USBH_Process+0x34>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	0800739d 	.word	0x0800739d
 8007370:	080073cf 	.word	0x080073cf
 8007374:	08007437 	.word	0x08007437
 8007378:	08007667 	.word	0x08007667
 800737c:	080076cd 	.word	0x080076cd
 8007380:	080074db 	.word	0x080074db
 8007384:	0800760d 	.word	0x0800760d
 8007388:	08007511 	.word	0x08007511
 800738c:	08007531 	.word	0x08007531
 8007390:	08007551 	.word	0x08007551
 8007394:	0800757f 	.word	0x0800757f
 8007398:	0800764f 	.word	0x0800764f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8193 	beq.w	80076d0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80073b0:	20c8      	movs	r0, #200	; 0xc8
 80073b2:	f001 fca6 	bl	8008d02 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 fb99 	bl	8008aee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073cc:	e180      	b.n	80076d0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d107      	bne.n	80073e8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073e6:	e182      	b.n	80076ee <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073f2:	d914      	bls.n	800741e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073fa:	3301      	adds	r3, #1
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800740a:	2b03      	cmp	r3, #3
 800740c:	d903      	bls.n	8007416 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	220d      	movs	r2, #13
 8007412:	701a      	strb	r2, [r3, #0]
      break;
 8007414:	e16b      	b.n	80076ee <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
      break;
 800741c:	e167      	b.n	80076ee <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007424:	f103 020a 	add.w	r2, r3, #10
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800742e:	200a      	movs	r0, #10
 8007430:	f001 fc67 	bl	8008d02 <USBH_Delay>
      break;
 8007434:	e15b      	b.n	80076ee <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007446:	2104      	movs	r1, #4
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800744c:	2064      	movs	r0, #100	; 0x64
 800744e:	f001 fc58 	bl	8008d02 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 fb26 	bl	8008aa4 <USBH_LL_GetSpeed>
 8007458:	4603      	mov	r3, r0
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2205      	movs	r2, #5
 8007466:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007468:	2100      	movs	r1, #0
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 f931 	bl	80086d2 <USBH_AllocPipe>
 8007470:	4603      	mov	r3, r0
 8007472:	461a      	mov	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007478:	2180      	movs	r1, #128	; 0x80
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 f929 	bl	80086d2 <USBH_AllocPipe>
 8007480:	4603      	mov	r3, r0
 8007482:	461a      	mov	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	7919      	ldrb	r1, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800749c:	b292      	uxth	r2, r2
 800749e:	9202      	str	r2, [sp, #8]
 80074a0:	2200      	movs	r2, #0
 80074a2:	9201      	str	r2, [sp, #4]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	4603      	mov	r3, r0
 80074a8:	2280      	movs	r2, #128	; 0x80
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 f8e2 	bl	8008674 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	7959      	ldrb	r1, [r3, #5]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80074c4:	b292      	uxth	r2, r2
 80074c6:	9202      	str	r2, [sp, #8]
 80074c8:	2200      	movs	r2, #0
 80074ca:	9201      	str	r2, [sp, #4]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	4603      	mov	r3, r0
 80074d0:	2200      	movs	r2, #0
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 f8ce 	bl	8008674 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074d8:	e109      	b.n	80076ee <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f90c 	bl	80076f8 <USBH_HandleEnum>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f040 80f3 	bne.w	80076d4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d103      	bne.n	8007508 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2208      	movs	r2, #8
 8007504:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007506:	e0e5      	b.n	80076d4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2207      	movs	r2, #7
 800750c:	701a      	strb	r2, [r3, #0]
      break;
 800750e:	e0e1      	b.n	80076d4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 80de 	beq.w	80076d8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007522:	2101      	movs	r1, #1
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2208      	movs	r2, #8
 800752c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800752e:	e0d3      	b.n	80076d8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007536:	b29b      	uxth	r3, r3
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fc20 	bl	8007d80 <USBH_SetCfg>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	f040 80ca 	bne.w	80076dc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2209      	movs	r2, #9
 800754c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800754e:	e0c5      	b.n	80076dc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00b      	beq.n	8007576 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800755e:	2101      	movs	r1, #1
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fc30 	bl	8007dc6 <USBH_SetFeature>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	f040 80b9 	bne.w	80076e0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	220a      	movs	r2, #10
 8007572:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007574:	e0b4      	b.n	80076e0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	220a      	movs	r2, #10
 800757a:	701a      	strb	r2, [r3, #0]
      break;
 800757c:	e0b0      	b.n	80076e0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80ad 	beq.w	80076e4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
 8007596:	e016      	b.n	80075c6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007598:	7bfa      	ldrb	r2, [r7, #15]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	32de      	adds	r2, #222	; 0xde
 800759e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a2:	791a      	ldrb	r2, [r3, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d108      	bne.n	80075c0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80075ae:	7bfa      	ldrb	r2, [r7, #15]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	32de      	adds	r2, #222	; 0xde
 80075b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80075be:	e005      	b.n	80075cc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	3301      	adds	r3, #1
 80075c4:	73fb      	strb	r3, [r7, #15]
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0e5      	beq.n	8007598 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d016      	beq.n	8007604 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d109      	bne.n	80075fc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2206      	movs	r2, #6
 80075ec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075f4:	2103      	movs	r1, #3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075fa:	e073      	b.n	80076e4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	220d      	movs	r2, #13
 8007600:	701a      	strb	r2, [r3, #0]
      break;
 8007602:	e06f      	b.n	80076e4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	220d      	movs	r2, #13
 8007608:	701a      	strb	r2, [r3, #0]
      break;
 800760a:	e06b      	b.n	80076e4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007612:	2b00      	cmp	r3, #0
 8007614:	d017      	beq.n	8007646 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
 8007622:	4603      	mov	r3, r0
 8007624:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d103      	bne.n	8007636 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	220b      	movs	r2, #11
 8007632:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007634:	e058      	b.n	80076e8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007636:	7bbb      	ldrb	r3, [r7, #14]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b02      	cmp	r3, #2
 800763c:	d154      	bne.n	80076e8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	220d      	movs	r2, #13
 8007642:	701a      	strb	r2, [r3, #0]
      break;
 8007644:	e050      	b.n	80076e8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	220d      	movs	r2, #13
 800764a:	701a      	strb	r2, [r3, #0]
      break;
 800764c:	e04c      	b.n	80076e8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d049      	beq.n	80076ec <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	4798      	blx	r3
      }
      break;
 8007664:	e042      	b.n	80076ec <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff fd72 	bl	8007158 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007698:	2b00      	cmp	r3, #0
 800769a:	d005      	beq.n	80076a8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076a2:	2105      	movs	r1, #5
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d107      	bne.n	80076c4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff fe2b 	bl	8007318 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076c2:	e014      	b.n	80076ee <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 f9b7 	bl	8008a38 <USBH_LL_Start>
      break;
 80076ca:	e010      	b.n	80076ee <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80076cc:	bf00      	nop
 80076ce:	e00e      	b.n	80076ee <USBH_Process+0x3b6>
      break;
 80076d0:	bf00      	nop
 80076d2:	e00c      	b.n	80076ee <USBH_Process+0x3b6>
      break;
 80076d4:	bf00      	nop
 80076d6:	e00a      	b.n	80076ee <USBH_Process+0x3b6>
    break;
 80076d8:	bf00      	nop
 80076da:	e008      	b.n	80076ee <USBH_Process+0x3b6>
      break;
 80076dc:	bf00      	nop
 80076de:	e006      	b.n	80076ee <USBH_Process+0x3b6>
      break;
 80076e0:	bf00      	nop
 80076e2:	e004      	b.n	80076ee <USBH_Process+0x3b6>
      break;
 80076e4:	bf00      	nop
 80076e6:	e002      	b.n	80076ee <USBH_Process+0x3b6>
      break;
 80076e8:	bf00      	nop
 80076ea:	e000      	b.n	80076ee <USBH_Process+0x3b6>
      break;
 80076ec:	bf00      	nop
  }
  return USBH_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af04      	add	r7, sp, #16
 80076fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007700:	2301      	movs	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007704:	2301      	movs	r3, #1
 8007706:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	2b07      	cmp	r3, #7
 800770e:	f200 81c1 	bhi.w	8007a94 <USBH_HandleEnum+0x39c>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <USBH_HandleEnum+0x20>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	08007739 	.word	0x08007739
 800771c:	080077f7 	.word	0x080077f7
 8007720:	08007861 	.word	0x08007861
 8007724:	080078ef 	.word	0x080078ef
 8007728:	08007959 	.word	0x08007959
 800772c:	080079c9 	.word	0x080079c9
 8007730:	08007a0f 	.word	0x08007a0f
 8007734:	08007a55 	.word	0x08007a55
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007738:	2108      	movs	r1, #8
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa50 	bl	8007be0 <USBH_Get_DevDesc>
 8007740:	4603      	mov	r3, r0
 8007742:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d130      	bne.n	80077ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	7919      	ldrb	r1, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800776e:	b292      	uxth	r2, r2
 8007770:	9202      	str	r2, [sp, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	9201      	str	r2, [sp, #4]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	4603      	mov	r3, r0
 800777a:	2280      	movs	r2, #128	; 0x80
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 ff79 	bl	8008674 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	7959      	ldrb	r1, [r3, #5]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007796:	b292      	uxth	r2, r2
 8007798:	9202      	str	r2, [sp, #8]
 800779a:	2200      	movs	r2, #0
 800779c:	9201      	str	r2, [sp, #4]
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	4603      	mov	r3, r0
 80077a2:	2200      	movs	r2, #0
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 ff65 	bl	8008674 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077aa:	e175      	b.n	8007a98 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	f040 8172 	bne.w	8007a98 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ba:	3301      	adds	r3, #1
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d903      	bls.n	80077d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	220d      	movs	r2, #13
 80077d2:	701a      	strb	r2, [r3, #0]
      break;
 80077d4:	e160      	b.n	8007a98 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	795b      	ldrb	r3, [r3, #5]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 ff99 	bl	8008714 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	791b      	ldrb	r3, [r3, #4]
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 ff93 	bl	8008714 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	701a      	strb	r2, [r3, #0]
      break;
 80077f4:	e150      	b.n	8007a98 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80077f6:	2112      	movs	r1, #18
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f9f1 	bl	8007be0 <USBH_Get_DevDesc>
 80077fe:	4603      	mov	r3, r0
 8007800:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800780e:	e145      	b.n	8007a9c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	2b03      	cmp	r3, #3
 8007814:	f040 8142 	bne.w	8007a9c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800781e:	3301      	adds	r3, #1
 8007820:	b2da      	uxtb	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800782e:	2b03      	cmp	r3, #3
 8007830:	d903      	bls.n	800783a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	220d      	movs	r2, #13
 8007836:	701a      	strb	r2, [r3, #0]
      break;
 8007838:	e130      	b.n	8007a9c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	795b      	ldrb	r3, [r3, #5]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 ff67 	bl	8008714 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	791b      	ldrb	r3, [r3, #4]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 ff61 	bl	8008714 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
      break;
 800785e:	e11d      	b.n	8007a9c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007860:	2101      	movs	r1, #1
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa68 	bl	8007d38 <USBH_SetAddress>
 8007868:	4603      	mov	r3, r0
 800786a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d132      	bne.n	80078d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007872:	2002      	movs	r0, #2
 8007874:	f001 fa45 	bl	8008d02 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2203      	movs	r2, #3
 8007884:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	7919      	ldrb	r1, [r3, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800789a:	b292      	uxth	r2, r2
 800789c:	9202      	str	r2, [sp, #8]
 800789e:	2200      	movs	r2, #0
 80078a0:	9201      	str	r2, [sp, #4]
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	4603      	mov	r3, r0
 80078a6:	2280      	movs	r2, #128	; 0x80
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fee3 	bl	8008674 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	7959      	ldrb	r1, [r3, #5]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078c2:	b292      	uxth	r2, r2
 80078c4:	9202      	str	r2, [sp, #8]
 80078c6:	2200      	movs	r2, #0
 80078c8:	9201      	str	r2, [sp, #4]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	4603      	mov	r3, r0
 80078ce:	2200      	movs	r2, #0
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fecf 	bl	8008674 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078d6:	e0e3      	b.n	8007aa0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	2b03      	cmp	r3, #3
 80078dc:	f040 80e0 	bne.w	8007aa0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	220d      	movs	r2, #13
 80078e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	705a      	strb	r2, [r3, #1]
      break;
 80078ec:	e0d8      	b.n	8007aa0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80078ee:	2109      	movs	r1, #9
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f99d 	bl	8007c30 <USBH_Get_CfgDesc>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d103      	bne.n	8007908 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2204      	movs	r2, #4
 8007904:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007906:	e0cd      	b.n	8007aa4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b03      	cmp	r3, #3
 800790c:	f040 80ca 	bne.w	8007aa4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007916:	3301      	adds	r3, #1
 8007918:	b2da      	uxtb	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007926:	2b03      	cmp	r3, #3
 8007928:	d903      	bls.n	8007932 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	220d      	movs	r2, #13
 800792e:	701a      	strb	r2, [r3, #0]
      break;
 8007930:	e0b8      	b.n	8007aa4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	795b      	ldrb	r3, [r3, #5]
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 feeb 	bl	8008714 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	791b      	ldrb	r3, [r3, #4]
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fee5 	bl	8008714 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	701a      	strb	r2, [r3, #0]
      break;
 8007956:	e0a5      	b.n	8007aa4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f965 	bl	8007c30 <USBH_Get_CfgDesc>
 8007966:	4603      	mov	r3, r0
 8007968:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d103      	bne.n	8007978 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2205      	movs	r2, #5
 8007974:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007976:	e097      	b.n	8007aa8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	2b03      	cmp	r3, #3
 800797c:	f040 8094 	bne.w	8007aa8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007986:	3301      	adds	r3, #1
 8007988:	b2da      	uxtb	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007996:	2b03      	cmp	r3, #3
 8007998:	d903      	bls.n	80079a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	220d      	movs	r2, #13
 800799e:	701a      	strb	r2, [r3, #0]
      break;
 80079a0:	e082      	b.n	8007aa8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	795b      	ldrb	r3, [r3, #5]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 feb3 	bl	8008714 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	791b      	ldrb	r3, [r3, #4]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fead 	bl	8008714 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	701a      	strb	r2, [r3, #0]
      break;
 80079c6:	e06f      	b.n	8007aa8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d019      	beq.n	8007a06 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079de:	23ff      	movs	r3, #255	; 0xff
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f949 	bl	8007c78 <USBH_Get_StringDesc>
 80079e6:	4603      	mov	r3, r0
 80079e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d103      	bne.n	80079f8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2206      	movs	r2, #6
 80079f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079f6:	e059      	b.n	8007aac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d156      	bne.n	8007aac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2206      	movs	r2, #6
 8007a02:	705a      	strb	r2, [r3, #1]
      break;
 8007a04:	e052      	b.n	8007aac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2206      	movs	r2, #6
 8007a0a:	705a      	strb	r2, [r3, #1]
      break;
 8007a0c:	e04e      	b.n	8007aac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d019      	beq.n	8007a4c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a24:	23ff      	movs	r3, #255	; 0xff
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f926 	bl	8007c78 <USBH_Get_StringDesc>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d103      	bne.n	8007a3e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2207      	movs	r2, #7
 8007a3a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a3c:	e038      	b.n	8007ab0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d135      	bne.n	8007ab0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2207      	movs	r2, #7
 8007a48:	705a      	strb	r2, [r3, #1]
      break;
 8007a4a:	e031      	b.n	8007ab0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2207      	movs	r2, #7
 8007a50:	705a      	strb	r2, [r3, #1]
      break;
 8007a52:	e02d      	b.n	8007ab0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d017      	beq.n	8007a8e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a6a:	23ff      	movs	r3, #255	; 0xff
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f903 	bl	8007c78 <USBH_Get_StringDesc>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a80:	e018      	b.n	8007ab4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d115      	bne.n	8007ab4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a8c:	e012      	b.n	8007ab4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73fb      	strb	r3, [r7, #15]
      break;
 8007a92:	e00f      	b.n	8007ab4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007a94:	bf00      	nop
 8007a96:	e00e      	b.n	8007ab6 <USBH_HandleEnum+0x3be>
      break;
 8007a98:	bf00      	nop
 8007a9a:	e00c      	b.n	8007ab6 <USBH_HandleEnum+0x3be>
      break;
 8007a9c:	bf00      	nop
 8007a9e:	e00a      	b.n	8007ab6 <USBH_HandleEnum+0x3be>
      break;
 8007aa0:	bf00      	nop
 8007aa2:	e008      	b.n	8007ab6 <USBH_HandleEnum+0x3be>
      break;
 8007aa4:	bf00      	nop
 8007aa6:	e006      	b.n	8007ab6 <USBH_HandleEnum+0x3be>
      break;
 8007aa8:	bf00      	nop
 8007aaa:	e004      	b.n	8007ab6 <USBH_HandleEnum+0x3be>
      break;
 8007aac:	bf00      	nop
 8007aae:	e002      	b.n	8007ab6 <USBH_HandleEnum+0x3be>
      break;
 8007ab0:	bf00      	nop
 8007ab2:	e000      	b.n	8007ab6 <USBH_HandleEnum+0x3be>
      break;
 8007ab4:	bf00      	nop
  }
  return Status;
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b082      	sub	sp, #8
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f804 	bl	8007b02 <USBH_HandleSof>
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b0b      	cmp	r3, #11
 8007b12:	d10a      	bne.n	8007b2a <USBH_HandleSof+0x28>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3
  }
}
 8007b2a:	bf00      	nop
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007b42:	bf00      	nop
}
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b5e:	bf00      	nop
}
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 ff58 	bl	8008a6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	791b      	ldrb	r3, [r3, #4]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fda5 	bl	8008714 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	795b      	ldrb	r3, [r3, #5]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fd9f 	bl	8008714 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af02      	add	r7, sp, #8
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007bf2:	78fb      	ldrb	r3, [r7, #3]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bfe:	2100      	movs	r1, #0
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f864 	bl	8007cce <USBH_GetDescriptor>
 8007c06:	4603      	mov	r3, r0
 8007c08:	73fb      	strb	r3, [r7, #15]
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10a      	bne.n	8007c26 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c1c:	78fa      	ldrb	r2, [r7, #3]
 8007c1e:	b292      	uxth	r2, r2
 8007c20:	4619      	mov	r1, r3
 8007c22:	f000 f918 	bl	8007e56 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	331c      	adds	r3, #28
 8007c40:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007c42:	887b      	ldrh	r3, [r7, #2]
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f83d 	bl	8007cce <USBH_GetDescriptor>
 8007c54:	4603      	mov	r3, r0
 8007c56:	72fb      	strb	r3, [r7, #11]
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d107      	bne.n	8007c6e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c64:	887a      	ldrh	r2, [r7, #2]
 8007c66:	68f9      	ldr	r1, [r7, #12]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 f964 	bl	8007f36 <USBH_ParseCfgDesc>
  }

  return status;
 8007c6e:	7afb      	ldrb	r3, [r7, #11]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af02      	add	r7, sp, #8
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	607a      	str	r2, [r7, #4]
 8007c82:	461a      	mov	r2, r3
 8007c84:	460b      	mov	r3, r1
 8007c86:	72fb      	strb	r3, [r7, #11]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c94:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007c9c:	893b      	ldrh	r3, [r7, #8]
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 f812 	bl	8007cce <USBH_GetDescriptor>
 8007caa:	4603      	mov	r3, r0
 8007cac:	75fb      	strb	r3, [r7, #23]
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d107      	bne.n	8007cc4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cba:	893a      	ldrh	r2, [r7, #8]
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fa37 	bl	8008132 <USBH_ParseStringDesc>
  }

  return status;
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	72fb      	strb	r3, [r7, #11]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	789b      	ldrb	r3, [r3, #2]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d11c      	bne.n	8007d22 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2206      	movs	r2, #6
 8007cf8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	893a      	ldrh	r2, [r7, #8]
 8007cfe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007d00:	893b      	ldrh	r3, [r7, #8]
 8007d02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d0a:	d104      	bne.n	8007d16 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f240 4209 	movw	r2, #1033	; 0x409
 8007d12:	829a      	strh	r2, [r3, #20]
 8007d14:	e002      	b.n	8007d1c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8b3a      	ldrh	r2, [r7, #24]
 8007d20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007d22:	8b3b      	ldrh	r3, [r7, #24]
 8007d24:	461a      	mov	r2, r3
 8007d26:	6879      	ldr	r1, [r7, #4]
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 fa50 	bl	80081ce <USBH_CtlReq>
 8007d2e:	4603      	mov	r3, r0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	789b      	ldrb	r3, [r3, #2]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d10f      	bne.n	8007d6c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2205      	movs	r2, #5
 8007d56:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2100      	movs	r1, #0
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fa2c 	bl	80081ce <USBH_CtlReq>
 8007d76:	4603      	mov	r3, r0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	789b      	ldrb	r3, [r3, #2]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d10e      	bne.n	8007db2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2209      	movs	r2, #9
 8007d9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	887a      	ldrh	r2, [r7, #2]
 8007da4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007db2:	2200      	movs	r2, #0
 8007db4:	2100      	movs	r1, #0
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa09 	bl	80081ce <USBH_CtlReq>
 8007dbc:	4603      	mov	r3, r0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	789b      	ldrb	r3, [r3, #2]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d10f      	bne.n	8007dfa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2203      	movs	r2, #3
 8007de4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f9e5 	bl	80081ce <USBH_CtlReq>
 8007e04:	4603      	mov	r3, r0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	460b      	mov	r3, r1
 8007e18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	789b      	ldrb	r3, [r3, #2]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d10f      	bne.n	8007e42 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2202      	movs	r2, #2
 8007e26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e34:	78fb      	ldrb	r3, [r7, #3]
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007e42:	2200      	movs	r2, #0
 8007e44:	2100      	movs	r1, #0
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f9c1 	bl	80081ce <USBH_CtlReq>
 8007e4c:	4603      	mov	r3, r0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b085      	sub	sp, #20
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	4613      	mov	r3, r2
 8007e62:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	781a      	ldrb	r2, [r3, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	785a      	ldrb	r2, [r3, #1]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	3302      	adds	r3, #2
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	3303      	adds	r3, #3
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	021b      	lsls	r3, r3, #8
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	791a      	ldrb	r2, [r3, #4]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	795a      	ldrb	r2, [r3, #5]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	799a      	ldrb	r2, [r3, #6]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	79da      	ldrb	r2, [r3, #7]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	d939      	bls.n	8007f2a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	3308      	adds	r3, #8
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	3309      	adds	r3, #9
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	330a      	adds	r3, #10
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	330b      	adds	r3, #11
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	021b      	lsls	r3, r3, #8
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	330c      	adds	r3, #12
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	330d      	adds	r3, #13
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	021b      	lsls	r3, r3, #8
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	4313      	orrs	r3, r2
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	7b9a      	ldrb	r2, [r3, #14]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	7bda      	ldrb	r2, [r3, #15]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	7c1a      	ldrb	r2, [r3, #16]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	7c5a      	ldrb	r2, [r3, #17]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	745a      	strb	r2, [r3, #17]
  }
}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b08a      	sub	sp, #40	; 0x28
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	4613      	mov	r3, r2
 8007f42:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	781a      	ldrb	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	785a      	ldrb	r2, [r3, #1]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	3302      	adds	r3, #2
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	3303      	adds	r3, #3
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	791a      	ldrb	r2, [r3, #4]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	795a      	ldrb	r2, [r3, #5]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	799a      	ldrb	r2, [r3, #6]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	79da      	ldrb	r2, [r3, #7]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	7a1a      	ldrb	r2, [r3, #8]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	2b09      	cmp	r3, #9
 8007fb0:	d95f      	bls.n	8008072 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007fb2:	2309      	movs	r3, #9
 8007fb4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fba:	e051      	b.n	8008060 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fbc:	f107 0316 	add.w	r3, r7, #22
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fc4:	f000 f8e8 	bl	8008198 <USBH_GetNextDesc>
 8007fc8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	785b      	ldrb	r3, [r3, #1]
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d146      	bne.n	8008060 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007fd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fd6:	221a      	movs	r2, #26
 8007fd8:	fb02 f303 	mul.w	r3, r2, r3
 8007fdc:	3308      	adds	r3, #8
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	3302      	adds	r3, #2
 8007fe4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007fe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fe8:	69f8      	ldr	r0, [r7, #28]
 8007fea:	f000 f846 	bl	800807a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ff8:	e022      	b.n	8008040 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ffa:	f107 0316 	add.w	r3, r7, #22
 8007ffe:	4619      	mov	r1, r3
 8008000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008002:	f000 f8c9 	bl	8008198 <USBH_GetNextDesc>
 8008006:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b05      	cmp	r3, #5
 800800e:	d117      	bne.n	8008040 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008010:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008014:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008018:	3201      	adds	r2, #1
 800801a:	00d2      	lsls	r2, r2, #3
 800801c:	211a      	movs	r1, #26
 800801e:	fb01 f303 	mul.w	r3, r1, r3
 8008022:	4413      	add	r3, r2
 8008024:	3308      	adds	r3, #8
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4413      	add	r3, r2
 800802a:	3304      	adds	r3, #4
 800802c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800802e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008030:	69b8      	ldr	r0, [r7, #24]
 8008032:	f000 f851 	bl	80080d8 <USBH_ParseEPDesc>
            ep_ix++;
 8008036:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800803a:	3301      	adds	r3, #1
 800803c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	791b      	ldrb	r3, [r3, #4]
 8008044:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008048:	429a      	cmp	r2, r3
 800804a:	d204      	bcs.n	8008056 <USBH_ParseCfgDesc+0x120>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	885a      	ldrh	r2, [r3, #2]
 8008050:	8afb      	ldrh	r3, [r7, #22]
 8008052:	429a      	cmp	r2, r3
 8008054:	d8d1      	bhi.n	8007ffa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008056:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800805a:	3301      	adds	r3, #1
 800805c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008064:	2b01      	cmp	r3, #1
 8008066:	d804      	bhi.n	8008072 <USBH_ParseCfgDesc+0x13c>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	885a      	ldrh	r2, [r3, #2]
 800806c:	8afb      	ldrh	r3, [r7, #22]
 800806e:	429a      	cmp	r2, r3
 8008070:	d8a4      	bhi.n	8007fbc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008072:	bf00      	nop
 8008074:	3728      	adds	r7, #40	; 0x28
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781a      	ldrb	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	785a      	ldrb	r2, [r3, #1]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	789a      	ldrb	r2, [r3, #2]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	78da      	ldrb	r2, [r3, #3]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	791a      	ldrb	r2, [r3, #4]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	795a      	ldrb	r2, [r3, #5]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	799a      	ldrb	r2, [r3, #6]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	79da      	ldrb	r2, [r3, #7]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	7a1a      	ldrb	r2, [r3, #8]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	721a      	strb	r2, [r3, #8]
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781a      	ldrb	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	785a      	ldrb	r2, [r3, #1]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	789a      	ldrb	r2, [r3, #2]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	78da      	ldrb	r2, [r3, #3]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	3304      	adds	r3, #4
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	b29a      	uxth	r2, r3
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	3305      	adds	r3, #5
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	b29b      	uxth	r3, r3
 8008112:	021b      	lsls	r3, r3, #8
 8008114:	b29b      	uxth	r3, r3
 8008116:	4313      	orrs	r3, r2
 8008118:	b29a      	uxth	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	799a      	ldrb	r2, [r3, #6]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	719a      	strb	r2, [r3, #6]
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008132:	b480      	push	{r7}
 8008134:	b087      	sub	sp, #28
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	4613      	mov	r3, r2
 800813e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b03      	cmp	r3, #3
 8008148:	d120      	bne.n	800818c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	1e9a      	subs	r2, r3, #2
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	4293      	cmp	r3, r2
 8008154:	bf28      	it	cs
 8008156:	4613      	movcs	r3, r2
 8008158:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3302      	adds	r3, #2
 800815e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008160:	2300      	movs	r3, #0
 8008162:	82fb      	strh	r3, [r7, #22]
 8008164:	e00b      	b.n	800817e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008166:	8afb      	ldrh	r3, [r7, #22]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	4413      	add	r3, r2
 800816c:	781a      	ldrb	r2, [r3, #0]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	3301      	adds	r3, #1
 8008176:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008178:	8afb      	ldrh	r3, [r7, #22]
 800817a:	3302      	adds	r3, #2
 800817c:	82fb      	strh	r3, [r7, #22]
 800817e:	8afa      	ldrh	r2, [r7, #22]
 8008180:	8abb      	ldrh	r3, [r7, #20]
 8008182:	429a      	cmp	r2, r3
 8008184:	d3ef      	bcc.n	8008166 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2200      	movs	r2, #0
 800818a:	701a      	strb	r2, [r3, #0]
  }
}
 800818c:	bf00      	nop
 800818e:	371c      	adds	r7, #28
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	881a      	ldrh	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	4413      	add	r3, r2
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4413      	add	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80081c0:	68fb      	ldr	r3, [r7, #12]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b086      	sub	sp, #24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	4613      	mov	r3, r2
 80081da:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80081dc:	2301      	movs	r3, #1
 80081de:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	789b      	ldrb	r3, [r3, #2]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d002      	beq.n	80081ee <USBH_CtlReq+0x20>
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d00f      	beq.n	800820c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80081ec:	e027      	b.n	800823e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	88fa      	ldrh	r2, [r7, #6]
 80081f8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2202      	movs	r2, #2
 8008204:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008206:	2301      	movs	r3, #1
 8008208:	75fb      	strb	r3, [r7, #23]
      break;
 800820a:	e018      	b.n	800823e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f81b 	bl	8008248 <USBH_HandleControl>
 8008212:	4603      	mov	r3, r0
 8008214:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <USBH_CtlReq+0x54>
 800821c:	7dfb      	ldrb	r3, [r7, #23]
 800821e:	2b03      	cmp	r3, #3
 8008220:	d106      	bne.n	8008230 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2201      	movs	r2, #1
 8008226:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	761a      	strb	r2, [r3, #24]
      break;
 800822e:	e005      	b.n	800823c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d102      	bne.n	800823c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	709a      	strb	r2, [r3, #2]
      break;
 800823c:	bf00      	nop
  }
  return status;
 800823e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af02      	add	r7, sp, #8
 800824e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008250:	2301      	movs	r3, #1
 8008252:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008254:	2300      	movs	r3, #0
 8008256:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	7e1b      	ldrb	r3, [r3, #24]
 800825c:	3b01      	subs	r3, #1
 800825e:	2b0a      	cmp	r3, #10
 8008260:	f200 8158 	bhi.w	8008514 <USBH_HandleControl+0x2cc>
 8008264:	a201      	add	r2, pc, #4	; (adr r2, 800826c <USBH_HandleControl+0x24>)
 8008266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826a:	bf00      	nop
 800826c:	08008299 	.word	0x08008299
 8008270:	080082b3 	.word	0x080082b3
 8008274:	0800831d 	.word	0x0800831d
 8008278:	08008343 	.word	0x08008343
 800827c:	0800837b 	.word	0x0800837b
 8008280:	080083a7 	.word	0x080083a7
 8008284:	080083f9 	.word	0x080083f9
 8008288:	0800841b 	.word	0x0800841b
 800828c:	08008457 	.word	0x08008457
 8008290:	0800847f 	.word	0x0800847f
 8008294:	080084bd 	.word	0x080084bd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f103 0110 	add.w	r1, r3, #16
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	795b      	ldrb	r3, [r3, #5]
 80082a2:	461a      	mov	r2, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f945 	bl	8008534 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2202      	movs	r2, #2
 80082ae:	761a      	strb	r2, [r3, #24]
      break;
 80082b0:	e13b      	b.n	800852a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	795b      	ldrb	r3, [r3, #5]
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fcc5 	bl	8008c48 <USBH_LL_GetURBState>
 80082be:	4603      	mov	r3, r0
 80082c0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d11e      	bne.n	8008306 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7c1b      	ldrb	r3, [r3, #16]
 80082cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082d0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	8adb      	ldrh	r3, [r3, #22]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80082da:	7b7b      	ldrb	r3, [r7, #13]
 80082dc:	2b80      	cmp	r3, #128	; 0x80
 80082de:	d103      	bne.n	80082e8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2203      	movs	r2, #3
 80082e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082e6:	e117      	b.n	8008518 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2205      	movs	r2, #5
 80082ec:	761a      	strb	r2, [r3, #24]
      break;
 80082ee:	e113      	b.n	8008518 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80082f0:	7b7b      	ldrb	r3, [r7, #13]
 80082f2:	2b80      	cmp	r3, #128	; 0x80
 80082f4:	d103      	bne.n	80082fe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2209      	movs	r2, #9
 80082fa:	761a      	strb	r2, [r3, #24]
      break;
 80082fc:	e10c      	b.n	8008518 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2207      	movs	r2, #7
 8008302:	761a      	strb	r2, [r3, #24]
      break;
 8008304:	e108      	b.n	8008518 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	2b04      	cmp	r3, #4
 800830a:	d003      	beq.n	8008314 <USBH_HandleControl+0xcc>
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	2b02      	cmp	r3, #2
 8008310:	f040 8102 	bne.w	8008518 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	220b      	movs	r2, #11
 8008318:	761a      	strb	r2, [r3, #24]
      break;
 800831a:	e0fd      	b.n	8008518 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008322:	b29a      	uxth	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6899      	ldr	r1, [r3, #8]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	899a      	ldrh	r2, [r3, #12]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	791b      	ldrb	r3, [r3, #4]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f93c 	bl	80085b2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2204      	movs	r2, #4
 800833e:	761a      	strb	r2, [r3, #24]
      break;
 8008340:	e0f3      	b.n	800852a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	791b      	ldrb	r3, [r3, #4]
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fc7d 	bl	8008c48 <USBH_LL_GetURBState>
 800834e:	4603      	mov	r3, r0
 8008350:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d102      	bne.n	800835e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2209      	movs	r2, #9
 800835c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b05      	cmp	r3, #5
 8008362:	d102      	bne.n	800836a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008364:	2303      	movs	r3, #3
 8008366:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008368:	e0d8      	b.n	800851c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	2b04      	cmp	r3, #4
 800836e:	f040 80d5 	bne.w	800851c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	220b      	movs	r2, #11
 8008376:	761a      	strb	r2, [r3, #24]
      break;
 8008378:	e0d0      	b.n	800851c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6899      	ldr	r1, [r3, #8]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	899a      	ldrh	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	7958      	ldrb	r0, [r3, #5]
 8008386:	2301      	movs	r3, #1
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	4603      	mov	r3, r0
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f8eb 	bl	8008568 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008398:	b29a      	uxth	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2206      	movs	r2, #6
 80083a2:	761a      	strb	r2, [r3, #24]
      break;
 80083a4:	e0c1      	b.n	800852a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	795b      	ldrb	r3, [r3, #5]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fc4b 	bl	8008c48 <USBH_LL_GetURBState>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d103      	bne.n	80083c4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2207      	movs	r2, #7
 80083c0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083c2:	e0ad      	b.n	8008520 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	2b05      	cmp	r3, #5
 80083c8:	d105      	bne.n	80083d6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	220c      	movs	r2, #12
 80083ce:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80083d0:	2303      	movs	r3, #3
 80083d2:	73fb      	strb	r3, [r7, #15]
      break;
 80083d4:	e0a4      	b.n	8008520 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d103      	bne.n	80083e4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2205      	movs	r2, #5
 80083e0:	761a      	strb	r2, [r3, #24]
      break;
 80083e2:	e09d      	b.n	8008520 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	f040 809a 	bne.w	8008520 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	220b      	movs	r2, #11
 80083f0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80083f2:	2302      	movs	r3, #2
 80083f4:	73fb      	strb	r3, [r7, #15]
      break;
 80083f6:	e093      	b.n	8008520 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	791b      	ldrb	r3, [r3, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	2100      	movs	r1, #0
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f8d6 	bl	80085b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800840c:	b29a      	uxth	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2208      	movs	r2, #8
 8008416:	761a      	strb	r2, [r3, #24]

      break;
 8008418:	e087      	b.n	800852a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	791b      	ldrb	r3, [r3, #4]
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fc11 	bl	8008c48 <USBH_LL_GetURBState>
 8008426:	4603      	mov	r3, r0
 8008428:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d105      	bne.n	800843c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	220d      	movs	r2, #13
 8008434:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800843a:	e073      	b.n	8008524 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	2b04      	cmp	r3, #4
 8008440:	d103      	bne.n	800844a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	220b      	movs	r2, #11
 8008446:	761a      	strb	r2, [r3, #24]
      break;
 8008448:	e06c      	b.n	8008524 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b05      	cmp	r3, #5
 800844e:	d169      	bne.n	8008524 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008450:	2303      	movs	r3, #3
 8008452:	73fb      	strb	r3, [r7, #15]
      break;
 8008454:	e066      	b.n	8008524 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	795a      	ldrb	r2, [r3, #5]
 800845a:	2301      	movs	r3, #1
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	4613      	mov	r3, r2
 8008460:	2200      	movs	r2, #0
 8008462:	2100      	movs	r1, #0
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f87f 	bl	8008568 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008470:	b29a      	uxth	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	220a      	movs	r2, #10
 800847a:	761a      	strb	r2, [r3, #24]
      break;
 800847c:	e055      	b.n	800852a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	795b      	ldrb	r3, [r3, #5]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fbdf 	bl	8008c48 <USBH_LL_GetURBState>
 800848a:	4603      	mov	r3, r0
 800848c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d105      	bne.n	80084a0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	220d      	movs	r2, #13
 800849c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800849e:	e043      	b.n	8008528 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d103      	bne.n	80084ae <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2209      	movs	r2, #9
 80084aa:	761a      	strb	r2, [r3, #24]
      break;
 80084ac:	e03c      	b.n	8008528 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
 80084b0:	2b04      	cmp	r3, #4
 80084b2:	d139      	bne.n	8008528 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	220b      	movs	r2, #11
 80084b8:	761a      	strb	r2, [r3, #24]
      break;
 80084ba:	e035      	b.n	8008528 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	7e5b      	ldrb	r3, [r3, #25]
 80084c0:	3301      	adds	r3, #1
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	765a      	strb	r2, [r3, #25]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	7e5b      	ldrb	r3, [r3, #25]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d806      	bhi.n	80084de <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80084dc:	e025      	b.n	800852a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084e4:	2106      	movs	r1, #6
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	795b      	ldrb	r3, [r3, #5]
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f90c 	bl	8008714 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	791b      	ldrb	r3, [r3, #4]
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f906 	bl	8008714 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800850e:	2302      	movs	r3, #2
 8008510:	73fb      	strb	r3, [r7, #15]
      break;
 8008512:	e00a      	b.n	800852a <USBH_HandleControl+0x2e2>

    default:
      break;
 8008514:	bf00      	nop
 8008516:	e008      	b.n	800852a <USBH_HandleControl+0x2e2>
      break;
 8008518:	bf00      	nop
 800851a:	e006      	b.n	800852a <USBH_HandleControl+0x2e2>
      break;
 800851c:	bf00      	nop
 800851e:	e004      	b.n	800852a <USBH_HandleControl+0x2e2>
      break;
 8008520:	bf00      	nop
 8008522:	e002      	b.n	800852a <USBH_HandleControl+0x2e2>
      break;
 8008524:	bf00      	nop
 8008526:	e000      	b.n	800852a <USBH_HandleControl+0x2e2>
      break;
 8008528:	bf00      	nop
  }

  return status;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af04      	add	r7, sp, #16
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	4613      	mov	r3, r2
 8008540:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008542:	79f9      	ldrb	r1, [r7, #7]
 8008544:	2300      	movs	r3, #0
 8008546:	9303      	str	r3, [sp, #12]
 8008548:	2308      	movs	r3, #8
 800854a:	9302      	str	r3, [sp, #8]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	2300      	movs	r3, #0
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	2300      	movs	r3, #0
 8008556:	2200      	movs	r2, #0
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 fb44 	bl	8008be6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af04      	add	r7, sp, #16
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	4611      	mov	r1, r2
 8008574:	461a      	mov	r2, r3
 8008576:	460b      	mov	r3, r1
 8008578:	80fb      	strh	r3, [r7, #6]
 800857a:	4613      	mov	r3, r2
 800857c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800858c:	7979      	ldrb	r1, [r7, #5]
 800858e:	7e3b      	ldrb	r3, [r7, #24]
 8008590:	9303      	str	r3, [sp, #12]
 8008592:	88fb      	ldrh	r3, [r7, #6]
 8008594:	9302      	str	r3, [sp, #8]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	2301      	movs	r3, #1
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	2300      	movs	r3, #0
 80085a0:	2200      	movs	r2, #0
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 fb1f 	bl	8008be6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b088      	sub	sp, #32
 80085b6:	af04      	add	r7, sp, #16
 80085b8:	60f8      	str	r0, [r7, #12]
 80085ba:	60b9      	str	r1, [r7, #8]
 80085bc:	4611      	mov	r1, r2
 80085be:	461a      	mov	r2, r3
 80085c0:	460b      	mov	r3, r1
 80085c2:	80fb      	strh	r3, [r7, #6]
 80085c4:	4613      	mov	r3, r2
 80085c6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085c8:	7979      	ldrb	r1, [r7, #5]
 80085ca:	2300      	movs	r3, #0
 80085cc:	9303      	str	r3, [sp, #12]
 80085ce:	88fb      	ldrh	r3, [r7, #6]
 80085d0:	9302      	str	r3, [sp, #8]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	2301      	movs	r3, #1
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	2300      	movs	r3, #0
 80085dc:	2201      	movs	r2, #1
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f000 fb01 	bl	8008be6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80085e4:	2300      	movs	r3, #0

}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b088      	sub	sp, #32
 80085f2:	af04      	add	r7, sp, #16
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	4611      	mov	r1, r2
 80085fa:	461a      	mov	r2, r3
 80085fc:	460b      	mov	r3, r1
 80085fe:	80fb      	strh	r3, [r7, #6]
 8008600:	4613      	mov	r3, r2
 8008602:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008612:	7979      	ldrb	r1, [r7, #5]
 8008614:	7e3b      	ldrb	r3, [r7, #24]
 8008616:	9303      	str	r3, [sp, #12]
 8008618:	88fb      	ldrh	r3, [r7, #6]
 800861a:	9302      	str	r3, [sp, #8]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	9301      	str	r3, [sp, #4]
 8008620:	2301      	movs	r3, #1
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	2302      	movs	r3, #2
 8008626:	2200      	movs	r2, #0
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 fadc 	bl	8008be6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af04      	add	r7, sp, #16
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	4611      	mov	r1, r2
 8008644:	461a      	mov	r2, r3
 8008646:	460b      	mov	r3, r1
 8008648:	80fb      	strh	r3, [r7, #6]
 800864a:	4613      	mov	r3, r2
 800864c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800864e:	7979      	ldrb	r1, [r7, #5]
 8008650:	2300      	movs	r3, #0
 8008652:	9303      	str	r3, [sp, #12]
 8008654:	88fb      	ldrh	r3, [r7, #6]
 8008656:	9302      	str	r3, [sp, #8]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	9301      	str	r3, [sp, #4]
 800865c:	2301      	movs	r3, #1
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	2302      	movs	r3, #2
 8008662:	2201      	movs	r2, #1
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 fabe 	bl	8008be6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af04      	add	r7, sp, #16
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	4608      	mov	r0, r1
 800867e:	4611      	mov	r1, r2
 8008680:	461a      	mov	r2, r3
 8008682:	4603      	mov	r3, r0
 8008684:	70fb      	strb	r3, [r7, #3]
 8008686:	460b      	mov	r3, r1
 8008688:	70bb      	strb	r3, [r7, #2]
 800868a:	4613      	mov	r3, r2
 800868c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800868e:	7878      	ldrb	r0, [r7, #1]
 8008690:	78ba      	ldrb	r2, [r7, #2]
 8008692:	78f9      	ldrb	r1, [r7, #3]
 8008694:	8b3b      	ldrh	r3, [r7, #24]
 8008696:	9302      	str	r3, [sp, #8]
 8008698:	7d3b      	ldrb	r3, [r7, #20]
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	7c3b      	ldrb	r3, [r7, #16]
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	4603      	mov	r3, r0
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fa51 	bl	8008b4a <USBH_LL_OpenPipe>

  return USBH_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b082      	sub	sp, #8
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa70 	bl	8008ba8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	460b      	mov	r3, r1
 80086dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f836 	bl	8008750 <USBH_GetFreePipe>
 80086e4:	4603      	mov	r3, r0
 80086e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80086e8:	89fb      	ldrh	r3, [r7, #14]
 80086ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d00a      	beq.n	8008708 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	89fb      	ldrh	r3, [r7, #14]
 80086f6:	f003 030f 	and.w	r3, r3, #15
 80086fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	33e0      	adds	r3, #224	; 0xe0
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008708:	89fb      	ldrh	r3, [r7, #14]
 800870a:	b2db      	uxtb	r3, r3
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	2b0a      	cmp	r3, #10
 8008724:	d80d      	bhi.n	8008742 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	33e0      	adds	r3, #224	; 0xe0
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008738:	6879      	ldr	r1, [r7, #4]
 800873a:	33e0      	adds	r3, #224	; 0xe0
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	440b      	add	r3, r1
 8008740:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]
 8008760:	e00f      	b.n	8008782 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	33e0      	adds	r3, #224	; 0xe0
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d102      	bne.n	800877c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	b29b      	uxth	r3, r3
 800877a:	e007      	b.n	800878c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	3301      	adds	r3, #1
 8008780:	73fb      	strb	r3, [r7, #15]
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	2b0a      	cmp	r3, #10
 8008786:	d9ec      	bls.n	8008762 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008788:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800879c:	2201      	movs	r2, #1
 800879e:	490e      	ldr	r1, [pc, #56]	; (80087d8 <MX_USB_HOST_Init+0x40>)
 80087a0:	480e      	ldr	r0, [pc, #56]	; (80087dc <MX_USB_HOST_Init+0x44>)
 80087a2:	f7fe fc9f 	bl	80070e4 <USBH_Init>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80087ac:	f7f8 f912 	bl	80009d4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80087b0:	490b      	ldr	r1, [pc, #44]	; (80087e0 <MX_USB_HOST_Init+0x48>)
 80087b2:	480a      	ldr	r0, [pc, #40]	; (80087dc <MX_USB_HOST_Init+0x44>)
 80087b4:	f7fe fd24 	bl	8007200 <USBH_RegisterClass>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80087be:	f7f8 f909 	bl	80009d4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80087c2:	4806      	ldr	r0, [pc, #24]	; (80087dc <MX_USB_HOST_Init+0x44>)
 80087c4:	f7fe fda8 	bl	8007318 <USBH_Start>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80087ce:	f7f8 f901 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80087d2:	bf00      	nop
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	080087f9 	.word	0x080087f9
 80087dc:	20000274 	.word	0x20000274
 80087e0:	2000001c 	.word	0x2000001c

080087e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80087e8:	4802      	ldr	r0, [pc, #8]	; (80087f4 <MX_USB_HOST_Process+0x10>)
 80087ea:	f7fe fda5 	bl	8007338 <USBH_Process>
}
 80087ee:	bf00      	nop
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20000274 	.word	0x20000274

080087f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008804:	78fb      	ldrb	r3, [r7, #3]
 8008806:	3b01      	subs	r3, #1
 8008808:	2b04      	cmp	r3, #4
 800880a:	d819      	bhi.n	8008840 <USBH_UserProcess+0x48>
 800880c:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <USBH_UserProcess+0x1c>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	08008841 	.word	0x08008841
 8008818:	08008831 	.word	0x08008831
 800881c:	08008841 	.word	0x08008841
 8008820:	08008839 	.word	0x08008839
 8008824:	08008829 	.word	0x08008829
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008828:	4b09      	ldr	r3, [pc, #36]	; (8008850 <USBH_UserProcess+0x58>)
 800882a:	2203      	movs	r2, #3
 800882c:	701a      	strb	r2, [r3, #0]
  break;
 800882e:	e008      	b.n	8008842 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008830:	4b07      	ldr	r3, [pc, #28]	; (8008850 <USBH_UserProcess+0x58>)
 8008832:	2202      	movs	r2, #2
 8008834:	701a      	strb	r2, [r3, #0]
  break;
 8008836:	e004      	b.n	8008842 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008838:	4b05      	ldr	r3, [pc, #20]	; (8008850 <USBH_UserProcess+0x58>)
 800883a:	2201      	movs	r2, #1
 800883c:	701a      	strb	r2, [r3, #0]
  break;
 800883e:	e000      	b.n	8008842 <USBH_UserProcess+0x4a>

  default:
  break;
 8008840:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	200000c4 	.word	0x200000c4

08008854 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b08a      	sub	sp, #40	; 0x28
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800885c:	f107 0314 	add.w	r3, r7, #20
 8008860:	2200      	movs	r2, #0
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	605a      	str	r2, [r3, #4]
 8008866:	609a      	str	r2, [r3, #8]
 8008868:	60da      	str	r2, [r3, #12]
 800886a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008874:	d147      	bne.n	8008906 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008876:	2300      	movs	r3, #0
 8008878:	613b      	str	r3, [r7, #16]
 800887a:	4b25      	ldr	r3, [pc, #148]	; (8008910 <HAL_HCD_MspInit+0xbc>)
 800887c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887e:	4a24      	ldr	r2, [pc, #144]	; (8008910 <HAL_HCD_MspInit+0xbc>)
 8008880:	f043 0301 	orr.w	r3, r3, #1
 8008884:	6313      	str	r3, [r2, #48]	; 0x30
 8008886:	4b22      	ldr	r3, [pc, #136]	; (8008910 <HAL_HCD_MspInit+0xbc>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	613b      	str	r3, [r7, #16]
 8008890:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008898:	2300      	movs	r3, #0
 800889a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800889c:	2300      	movs	r3, #0
 800889e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80088a0:	f107 0314 	add.w	r3, r7, #20
 80088a4:	4619      	mov	r1, r3
 80088a6:	481b      	ldr	r0, [pc, #108]	; (8008914 <HAL_HCD_MspInit+0xc0>)
 80088a8:	f7f8 ffa8 	bl	80017fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80088ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80088b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b2:	2302      	movs	r3, #2
 80088b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ba:	2300      	movs	r3, #0
 80088bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088be:	230a      	movs	r3, #10
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088c2:	f107 0314 	add.w	r3, r7, #20
 80088c6:	4619      	mov	r1, r3
 80088c8:	4812      	ldr	r0, [pc, #72]	; (8008914 <HAL_HCD_MspInit+0xc0>)
 80088ca:	f7f8 ff97 	bl	80017fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088ce:	4b10      	ldr	r3, [pc, #64]	; (8008910 <HAL_HCD_MspInit+0xbc>)
 80088d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d2:	4a0f      	ldr	r2, [pc, #60]	; (8008910 <HAL_HCD_MspInit+0xbc>)
 80088d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d8:	6353      	str	r3, [r2, #52]	; 0x34
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <HAL_HCD_MspInit+0xbc>)
 80088e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e2:	4a0b      	ldr	r2, [pc, #44]	; (8008910 <HAL_HCD_MspInit+0xbc>)
 80088e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088e8:	6453      	str	r3, [r2, #68]	; 0x44
 80088ea:	4b09      	ldr	r3, [pc, #36]	; (8008910 <HAL_HCD_MspInit+0xbc>)
 80088ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088f6:	2200      	movs	r2, #0
 80088f8:	2100      	movs	r1, #0
 80088fa:	2043      	movs	r0, #67	; 0x43
 80088fc:	f7f8 fc3d 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008900:	2043      	movs	r0, #67	; 0x43
 8008902:	f7f8 fc56 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008906:	bf00      	nop
 8008908:	3728      	adds	r7, #40	; 0x28
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	40023800 	.word	0x40023800
 8008914:	40020000 	.word	0x40020000

08008918 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff f8d9 	bl	8007ade <USBH_LL_IncTimer>
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008942:	4618      	mov	r0, r3
 8008944:	f7ff f911 	bl	8007b6a <USBH_LL_Connect>
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff f91a 	bl	8007b98 <USBH_LL_Disconnect>
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
 8008978:	4613      	mov	r3, r2
 800897a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff f8cb 	bl	8007b32 <USBH_LL_PortEnabled>
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff f8cb 	bl	8007b4e <USBH_LL_PortDisabled>
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d12a      	bne.n	8008a28 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80089d2:	4a18      	ldr	r2, [pc, #96]	; (8008a34 <USBH_LL_Init+0x74>)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a15      	ldr	r2, [pc, #84]	; (8008a34 <USBH_LL_Init+0x74>)
 80089de:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089e2:	4b14      	ldr	r3, [pc, #80]	; (8008a34 <USBH_LL_Init+0x74>)
 80089e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089e8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80089ea:	4b12      	ldr	r3, [pc, #72]	; (8008a34 <USBH_LL_Init+0x74>)
 80089ec:	2208      	movs	r2, #8
 80089ee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80089f0:	4b10      	ldr	r3, [pc, #64]	; (8008a34 <USBH_LL_Init+0x74>)
 80089f2:	2201      	movs	r2, #1
 80089f4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089f6:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <USBH_LL_Init+0x74>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80089fc:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <USBH_LL_Init+0x74>)
 80089fe:	2202      	movs	r2, #2
 8008a00:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a02:	4b0c      	ldr	r3, [pc, #48]	; (8008a34 <USBH_LL_Init+0x74>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a08:	480a      	ldr	r0, [pc, #40]	; (8008a34 <USBH_LL_Init+0x74>)
 8008a0a:	f7f9 f8c5 	bl	8001b98 <HAL_HCD_Init>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a14:	f7f7 ffde 	bl	80009d4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a18:	4806      	ldr	r0, [pc, #24]	; (8008a34 <USBH_LL_Init+0x74>)
 8008a1a:	f7f9 fcc9 	bl	80023b0 <HAL_HCD_GetCurrentFrame>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7ff f84c 	bl	8007ac0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	2000064c 	.word	0x2000064c

08008a38 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7f9 fc36 	bl	80022c0 <HAL_HCD_Start>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 f95c 	bl	8008d18 <USBH_Get_USB_Status>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7f9 fc3e 	bl	8002306 <HAL_HCD_Stop>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 f941 	bl	8008d18 <USBH_Get_USB_Status>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008aac:	2301      	movs	r3, #1
 8008aae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7f9 fc88 	bl	80023cc <HAL_HCD_GetCurrentSpeed>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d007      	beq.n	8008ad2 <USBH_LL_GetSpeed+0x2e>
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d302      	bcc.n	8008acc <USBH_LL_GetSpeed+0x28>
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d006      	beq.n	8008ad8 <USBH_LL_GetSpeed+0x34>
 8008aca:	e008      	b.n	8008ade <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad0:	e008      	b.n	8008ae4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad6:	e005      	b.n	8008ae4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008ad8:	2302      	movs	r3, #2
 8008ada:	73fb      	strb	r3, [r7, #15]
    break;
 8008adc:	e002      	b.n	8008ae4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae2:	bf00      	nop
  }
  return  speed;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7f9 fc1b 	bl	8002340 <HAL_HCD_ResetPort>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f901 	bl	8008d18 <USBH_Get_USB_Status>
 8008b16:	4603      	mov	r3, r0
 8008b18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b36:	78fa      	ldrb	r2, [r7, #3]
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7f9 fc23 	bl	8002386 <HAL_HCD_HC_GetXferCount>
 8008b40:	4603      	mov	r3, r0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b4a:	b590      	push	{r4, r7, lr}
 8008b4c:	b089      	sub	sp, #36	; 0x24
 8008b4e:	af04      	add	r7, sp, #16
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	4608      	mov	r0, r1
 8008b54:	4611      	mov	r1, r2
 8008b56:	461a      	mov	r2, r3
 8008b58:	4603      	mov	r3, r0
 8008b5a:	70fb      	strb	r3, [r7, #3]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70bb      	strb	r3, [r7, #2]
 8008b60:	4613      	mov	r3, r2
 8008b62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b72:	787c      	ldrb	r4, [r7, #1]
 8008b74:	78ba      	ldrb	r2, [r7, #2]
 8008b76:	78f9      	ldrb	r1, [r7, #3]
 8008b78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b7a:	9302      	str	r3, [sp, #8]
 8008b7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	4623      	mov	r3, r4
 8008b8a:	f7f9 f867 	bl	8001c5c <HAL_HCD_HC_Init>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 f8bf 	bl	8008d18 <USBH_Get_USB_Status>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd90      	pop	{r4, r7, pc}

08008ba8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7f9 f8e0 	bl	8001d8c <HAL_HCD_HC_Halt>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 f8a0 	bl	8008d18 <USBH_Get_USB_Status>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008be6:	b590      	push	{r4, r7, lr}
 8008be8:	b089      	sub	sp, #36	; 0x24
 8008bea:	af04      	add	r7, sp, #16
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	4608      	mov	r0, r1
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	70fb      	strb	r3, [r7, #3]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70bb      	strb	r3, [r7, #2]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c0e:	787c      	ldrb	r4, [r7, #1]
 8008c10:	78ba      	ldrb	r2, [r7, #2]
 8008c12:	78f9      	ldrb	r1, [r7, #3]
 8008c14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c18:	9303      	str	r3, [sp, #12]
 8008c1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c1c:	9302      	str	r3, [sp, #8]
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	9301      	str	r3, [sp, #4]
 8008c22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	4623      	mov	r3, r4
 8008c2a:	f7f9 f8d3 	bl	8001dd4 <HAL_HCD_HC_SubmitRequest>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 f86f 	bl	8008d18 <USBH_Get_USB_Status>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd90      	pop	{r4, r7, pc}

08008c48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7f9 fb7c 	bl	800235c <HAL_HCD_HC_GetURBState>
 8008c64:	4603      	mov	r3, r0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d103      	bne.n	8008c8c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c84:	78fb      	ldrb	r3, [r7, #3]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 f872 	bl	8008d70 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c8c:	20c8      	movs	r0, #200	; 0xc8
 8008c8e:	f7f8 f977 	bl	8000f80 <HAL_Delay>
  return USBH_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	70fb      	strb	r3, [r7, #3]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cb2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008cb4:	78fa      	ldrb	r2, [r7, #3]
 8008cb6:	68f9      	ldr	r1, [r7, #12]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	440b      	add	r3, r1
 8008cc2:	333b      	adds	r3, #59	; 0x3b
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008cca:	78fa      	ldrb	r2, [r7, #3]
 8008ccc:	68f9      	ldr	r1, [r7, #12]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	00db      	lsls	r3, r3, #3
 8008cd6:	440b      	add	r3, r1
 8008cd8:	3350      	adds	r3, #80	; 0x50
 8008cda:	78ba      	ldrb	r2, [r7, #2]
 8008cdc:	701a      	strb	r2, [r3, #0]
 8008cde:	e009      	b.n	8008cf4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008ce0:	78fa      	ldrb	r2, [r7, #3]
 8008ce2:	68f9      	ldr	r1, [r7, #12]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	440b      	add	r3, r1
 8008cee:	3351      	adds	r3, #81	; 0x51
 8008cf0:	78ba      	ldrb	r2, [r7, #2]
 8008cf2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7f8 f938 	bl	8000f80 <HAL_Delay>
}
 8008d10:	bf00      	nop
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d26:	79fb      	ldrb	r3, [r7, #7]
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d817      	bhi.n	8008d5c <USBH_Get_USB_Status+0x44>
 8008d2c:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <USBH_Get_USB_Status+0x1c>)
 8008d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d32:	bf00      	nop
 8008d34:	08008d45 	.word	0x08008d45
 8008d38:	08008d4b 	.word	0x08008d4b
 8008d3c:	08008d51 	.word	0x08008d51
 8008d40:	08008d57 	.word	0x08008d57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]
    break;
 8008d48:	e00b      	b.n	8008d62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d4e:	e008      	b.n	8008d62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d50:	2301      	movs	r3, #1
 8008d52:	73fb      	strb	r3, [r7, #15]
    break;
 8008d54:	e005      	b.n	8008d62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d56:	2302      	movs	r3, #2
 8008d58:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5a:	e002      	b.n	8008d62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d60:	bf00      	nop
  }
  return usb_status;
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d102      	bne.n	8008d8a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008d84:	2301      	movs	r3, #1
 8008d86:	73fb      	strb	r3, [r7, #15]
 8008d88:	e001      	b.n	8008d8e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
 8008d90:	461a      	mov	r2, r3
 8008d92:	2101      	movs	r1, #1
 8008d94:	4803      	ldr	r0, [pc, #12]	; (8008da4 <MX_DriverVbusFS+0x34>)
 8008d96:	f7f8 fecb 	bl	8001b30 <HAL_GPIO_WritePin>
}
 8008d9a:	bf00      	nop
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	40020800 	.word	0x40020800

08008da8 <__errno>:
 8008da8:	4b01      	ldr	r3, [pc, #4]	; (8008db0 <__errno+0x8>)
 8008daa:	6818      	ldr	r0, [r3, #0]
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	2000003c 	.word	0x2000003c

08008db4 <__libc_init_array>:
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	4e0d      	ldr	r6, [pc, #52]	; (8008dec <__libc_init_array+0x38>)
 8008db8:	4c0d      	ldr	r4, [pc, #52]	; (8008df0 <__libc_init_array+0x3c>)
 8008dba:	1ba4      	subs	r4, r4, r6
 8008dbc:	10a4      	asrs	r4, r4, #2
 8008dbe:	2500      	movs	r5, #0
 8008dc0:	42a5      	cmp	r5, r4
 8008dc2:	d109      	bne.n	8008dd8 <__libc_init_array+0x24>
 8008dc4:	4e0b      	ldr	r6, [pc, #44]	; (8008df4 <__libc_init_array+0x40>)
 8008dc6:	4c0c      	ldr	r4, [pc, #48]	; (8008df8 <__libc_init_array+0x44>)
 8008dc8:	f000 f8ea 	bl	8008fa0 <_init>
 8008dcc:	1ba4      	subs	r4, r4, r6
 8008dce:	10a4      	asrs	r4, r4, #2
 8008dd0:	2500      	movs	r5, #0
 8008dd2:	42a5      	cmp	r5, r4
 8008dd4:	d105      	bne.n	8008de2 <__libc_init_array+0x2e>
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ddc:	4798      	blx	r3
 8008dde:	3501      	adds	r5, #1
 8008de0:	e7ee      	b.n	8008dc0 <__libc_init_array+0xc>
 8008de2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008de6:	4798      	blx	r3
 8008de8:	3501      	adds	r5, #1
 8008dea:	e7f2      	b.n	8008dd2 <__libc_init_array+0x1e>
 8008dec:	08008fe4 	.word	0x08008fe4
 8008df0:	08008fe4 	.word	0x08008fe4
 8008df4:	08008fe4 	.word	0x08008fe4
 8008df8:	08008fe8 	.word	0x08008fe8

08008dfc <malloc>:
 8008dfc:	4b02      	ldr	r3, [pc, #8]	; (8008e08 <malloc+0xc>)
 8008dfe:	4601      	mov	r1, r0
 8008e00:	6818      	ldr	r0, [r3, #0]
 8008e02:	f000 b861 	b.w	8008ec8 <_malloc_r>
 8008e06:	bf00      	nop
 8008e08:	2000003c 	.word	0x2000003c

08008e0c <free>:
 8008e0c:	4b02      	ldr	r3, [pc, #8]	; (8008e18 <free+0xc>)
 8008e0e:	4601      	mov	r1, r0
 8008e10:	6818      	ldr	r0, [r3, #0]
 8008e12:	f000 b80b 	b.w	8008e2c <_free_r>
 8008e16:	bf00      	nop
 8008e18:	2000003c 	.word	0x2000003c

08008e1c <memset>:
 8008e1c:	4402      	add	r2, r0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d100      	bne.n	8008e26 <memset+0xa>
 8008e24:	4770      	bx	lr
 8008e26:	f803 1b01 	strb.w	r1, [r3], #1
 8008e2a:	e7f9      	b.n	8008e20 <memset+0x4>

08008e2c <_free_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4605      	mov	r5, r0
 8008e30:	2900      	cmp	r1, #0
 8008e32:	d045      	beq.n	8008ec0 <_free_r+0x94>
 8008e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e38:	1f0c      	subs	r4, r1, #4
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bfb8      	it	lt
 8008e3e:	18e4      	addlt	r4, r4, r3
 8008e40:	f000 f8ac 	bl	8008f9c <__malloc_lock>
 8008e44:	4a1f      	ldr	r2, [pc, #124]	; (8008ec4 <_free_r+0x98>)
 8008e46:	6813      	ldr	r3, [r2, #0]
 8008e48:	4610      	mov	r0, r2
 8008e4a:	b933      	cbnz	r3, 8008e5a <_free_r+0x2e>
 8008e4c:	6063      	str	r3, [r4, #4]
 8008e4e:	6014      	str	r4, [r2, #0]
 8008e50:	4628      	mov	r0, r5
 8008e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e56:	f000 b8a2 	b.w	8008f9e <__malloc_unlock>
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	d90c      	bls.n	8008e78 <_free_r+0x4c>
 8008e5e:	6821      	ldr	r1, [r4, #0]
 8008e60:	1862      	adds	r2, r4, r1
 8008e62:	4293      	cmp	r3, r2
 8008e64:	bf04      	itt	eq
 8008e66:	681a      	ldreq	r2, [r3, #0]
 8008e68:	685b      	ldreq	r3, [r3, #4]
 8008e6a:	6063      	str	r3, [r4, #4]
 8008e6c:	bf04      	itt	eq
 8008e6e:	1852      	addeq	r2, r2, r1
 8008e70:	6022      	streq	r2, [r4, #0]
 8008e72:	6004      	str	r4, [r0, #0]
 8008e74:	e7ec      	b.n	8008e50 <_free_r+0x24>
 8008e76:	4613      	mov	r3, r2
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	b10a      	cbz	r2, 8008e80 <_free_r+0x54>
 8008e7c:	42a2      	cmp	r2, r4
 8008e7e:	d9fa      	bls.n	8008e76 <_free_r+0x4a>
 8008e80:	6819      	ldr	r1, [r3, #0]
 8008e82:	1858      	adds	r0, r3, r1
 8008e84:	42a0      	cmp	r0, r4
 8008e86:	d10b      	bne.n	8008ea0 <_free_r+0x74>
 8008e88:	6820      	ldr	r0, [r4, #0]
 8008e8a:	4401      	add	r1, r0
 8008e8c:	1858      	adds	r0, r3, r1
 8008e8e:	4282      	cmp	r2, r0
 8008e90:	6019      	str	r1, [r3, #0]
 8008e92:	d1dd      	bne.n	8008e50 <_free_r+0x24>
 8008e94:	6810      	ldr	r0, [r2, #0]
 8008e96:	6852      	ldr	r2, [r2, #4]
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	4401      	add	r1, r0
 8008e9c:	6019      	str	r1, [r3, #0]
 8008e9e:	e7d7      	b.n	8008e50 <_free_r+0x24>
 8008ea0:	d902      	bls.n	8008ea8 <_free_r+0x7c>
 8008ea2:	230c      	movs	r3, #12
 8008ea4:	602b      	str	r3, [r5, #0]
 8008ea6:	e7d3      	b.n	8008e50 <_free_r+0x24>
 8008ea8:	6820      	ldr	r0, [r4, #0]
 8008eaa:	1821      	adds	r1, r4, r0
 8008eac:	428a      	cmp	r2, r1
 8008eae:	bf04      	itt	eq
 8008eb0:	6811      	ldreq	r1, [r2, #0]
 8008eb2:	6852      	ldreq	r2, [r2, #4]
 8008eb4:	6062      	str	r2, [r4, #4]
 8008eb6:	bf04      	itt	eq
 8008eb8:	1809      	addeq	r1, r1, r0
 8008eba:	6021      	streq	r1, [r4, #0]
 8008ebc:	605c      	str	r4, [r3, #4]
 8008ebe:	e7c7      	b.n	8008e50 <_free_r+0x24>
 8008ec0:	bd38      	pop	{r3, r4, r5, pc}
 8008ec2:	bf00      	nop
 8008ec4:	200000c8 	.word	0x200000c8

08008ec8 <_malloc_r>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	1ccd      	adds	r5, r1, #3
 8008ecc:	f025 0503 	bic.w	r5, r5, #3
 8008ed0:	3508      	adds	r5, #8
 8008ed2:	2d0c      	cmp	r5, #12
 8008ed4:	bf38      	it	cc
 8008ed6:	250c      	movcc	r5, #12
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	4606      	mov	r6, r0
 8008edc:	db01      	blt.n	8008ee2 <_malloc_r+0x1a>
 8008ede:	42a9      	cmp	r1, r5
 8008ee0:	d903      	bls.n	8008eea <_malloc_r+0x22>
 8008ee2:	230c      	movs	r3, #12
 8008ee4:	6033      	str	r3, [r6, #0]
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	bd70      	pop	{r4, r5, r6, pc}
 8008eea:	f000 f857 	bl	8008f9c <__malloc_lock>
 8008eee:	4a21      	ldr	r2, [pc, #132]	; (8008f74 <_malloc_r+0xac>)
 8008ef0:	6814      	ldr	r4, [r2, #0]
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	b991      	cbnz	r1, 8008f1c <_malloc_r+0x54>
 8008ef6:	4c20      	ldr	r4, [pc, #128]	; (8008f78 <_malloc_r+0xb0>)
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	b91b      	cbnz	r3, 8008f04 <_malloc_r+0x3c>
 8008efc:	4630      	mov	r0, r6
 8008efe:	f000 f83d 	bl	8008f7c <_sbrk_r>
 8008f02:	6020      	str	r0, [r4, #0]
 8008f04:	4629      	mov	r1, r5
 8008f06:	4630      	mov	r0, r6
 8008f08:	f000 f838 	bl	8008f7c <_sbrk_r>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d124      	bne.n	8008f5a <_malloc_r+0x92>
 8008f10:	230c      	movs	r3, #12
 8008f12:	6033      	str	r3, [r6, #0]
 8008f14:	4630      	mov	r0, r6
 8008f16:	f000 f842 	bl	8008f9e <__malloc_unlock>
 8008f1a:	e7e4      	b.n	8008ee6 <_malloc_r+0x1e>
 8008f1c:	680b      	ldr	r3, [r1, #0]
 8008f1e:	1b5b      	subs	r3, r3, r5
 8008f20:	d418      	bmi.n	8008f54 <_malloc_r+0x8c>
 8008f22:	2b0b      	cmp	r3, #11
 8008f24:	d90f      	bls.n	8008f46 <_malloc_r+0x7e>
 8008f26:	600b      	str	r3, [r1, #0]
 8008f28:	50cd      	str	r5, [r1, r3]
 8008f2a:	18cc      	adds	r4, r1, r3
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f000 f836 	bl	8008f9e <__malloc_unlock>
 8008f32:	f104 000b 	add.w	r0, r4, #11
 8008f36:	1d23      	adds	r3, r4, #4
 8008f38:	f020 0007 	bic.w	r0, r0, #7
 8008f3c:	1ac3      	subs	r3, r0, r3
 8008f3e:	d0d3      	beq.n	8008ee8 <_malloc_r+0x20>
 8008f40:	425a      	negs	r2, r3
 8008f42:	50e2      	str	r2, [r4, r3]
 8008f44:	e7d0      	b.n	8008ee8 <_malloc_r+0x20>
 8008f46:	428c      	cmp	r4, r1
 8008f48:	684b      	ldr	r3, [r1, #4]
 8008f4a:	bf16      	itet	ne
 8008f4c:	6063      	strne	r3, [r4, #4]
 8008f4e:	6013      	streq	r3, [r2, #0]
 8008f50:	460c      	movne	r4, r1
 8008f52:	e7eb      	b.n	8008f2c <_malloc_r+0x64>
 8008f54:	460c      	mov	r4, r1
 8008f56:	6849      	ldr	r1, [r1, #4]
 8008f58:	e7cc      	b.n	8008ef4 <_malloc_r+0x2c>
 8008f5a:	1cc4      	adds	r4, r0, #3
 8008f5c:	f024 0403 	bic.w	r4, r4, #3
 8008f60:	42a0      	cmp	r0, r4
 8008f62:	d005      	beq.n	8008f70 <_malloc_r+0xa8>
 8008f64:	1a21      	subs	r1, r4, r0
 8008f66:	4630      	mov	r0, r6
 8008f68:	f000 f808 	bl	8008f7c <_sbrk_r>
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d0cf      	beq.n	8008f10 <_malloc_r+0x48>
 8008f70:	6025      	str	r5, [r4, #0]
 8008f72:	e7db      	b.n	8008f2c <_malloc_r+0x64>
 8008f74:	200000c8 	.word	0x200000c8
 8008f78:	200000cc 	.word	0x200000cc

08008f7c <_sbrk_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4c06      	ldr	r4, [pc, #24]	; (8008f98 <_sbrk_r+0x1c>)
 8008f80:	2300      	movs	r3, #0
 8008f82:	4605      	mov	r5, r0
 8008f84:	4608      	mov	r0, r1
 8008f86:	6023      	str	r3, [r4, #0]
 8008f88:	f7f7 ff12 	bl	8000db0 <_sbrk>
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	d102      	bne.n	8008f96 <_sbrk_r+0x1a>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	b103      	cbz	r3, 8008f96 <_sbrk_r+0x1a>
 8008f94:	602b      	str	r3, [r5, #0]
 8008f96:	bd38      	pop	{r3, r4, r5, pc}
 8008f98:	20000910 	.word	0x20000910

08008f9c <__malloc_lock>:
 8008f9c:	4770      	bx	lr

08008f9e <__malloc_unlock>:
 8008f9e:	4770      	bx	lr

08008fa0 <_init>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	bf00      	nop
 8008fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa6:	bc08      	pop	{r3}
 8008fa8:	469e      	mov	lr, r3
 8008faa:	4770      	bx	lr

08008fac <_fini>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr
