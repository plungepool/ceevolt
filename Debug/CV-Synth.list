
CV-Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e2c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08008fb4  08008fb4  00018fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd8  08008fd8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd8  08008fd8  00018fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe0  08008fe0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe0  08008fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000094  0800907c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  0800907c  00020884  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e9c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f0  00000000  00000000  00039f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0003d850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  0003e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f99  00000000  00000000  0003f830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158fc  00000000  00000000  000637c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb431  00000000  00000000  000790c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001444f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004834  00000000  00000000  0014454c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f9c 	.word	0x08008f9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08008f9c 	.word	0x08008f9c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a58:	f000 b96e 	b.w	8000d38 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468c      	mov	ip, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 8083 	bne.w	8000b8a <__udivmoddi4+0x116>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d947      	bls.n	8000b1a <__udivmoddi4+0xa6>
 8000a8a:	fab2 f282 	clz	r2, r2
 8000a8e:	b142      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a90:	f1c2 0020 	rsb	r0, r2, #32
 8000a94:	fa24 f000 	lsr.w	r0, r4, r0
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	4097      	lsls	r7, r2
 8000a9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000aa0:	4094      	lsls	r4, r2
 8000aa2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aa6:	0c23      	lsrs	r3, r4, #16
 8000aa8:	fbbc f6f8 	udiv	r6, ip, r8
 8000aac:	fa1f fe87 	uxth.w	lr, r7
 8000ab0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab8:	fb06 f10e 	mul.w	r1, r6, lr
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d909      	bls.n	8000ad4 <__udivmoddi4+0x60>
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ac6:	f080 8119 	bcs.w	8000cfc <__udivmoddi4+0x288>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 8116 	bls.w	8000cfc <__udivmoddi4+0x288>
 8000ad0:	3e02      	subs	r6, #2
 8000ad2:	443b      	add	r3, r7
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	45a6      	cmp	lr, r4
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x8c>
 8000aec:	193c      	adds	r4, r7, r4
 8000aee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000af2:	f080 8105 	bcs.w	8000d00 <__udivmoddi4+0x28c>
 8000af6:	45a6      	cmp	lr, r4
 8000af8:	f240 8102 	bls.w	8000d00 <__udivmoddi4+0x28c>
 8000afc:	3802      	subs	r0, #2
 8000afe:	443c      	add	r4, r7
 8000b00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b04:	eba4 040e 	sub.w	r4, r4, lr
 8000b08:	2600      	movs	r6, #0
 8000b0a:	b11d      	cbz	r5, 8000b14 <__udivmoddi4+0xa0>
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e9c5 4300 	strd	r4, r3, [r5]
 8000b14:	4631      	mov	r1, r6
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	b902      	cbnz	r2, 8000b1e <__udivmoddi4+0xaa>
 8000b1c:	deff      	udf	#255	; 0xff
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d150      	bne.n	8000bc8 <__udivmoddi4+0x154>
 8000b26:	1bcb      	subs	r3, r1, r7
 8000b28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b2c:	fa1f f887 	uxth.w	r8, r7
 8000b30:	2601      	movs	r6, #1
 8000b32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b36:	0c21      	lsrs	r1, r4, #16
 8000b38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b40:	fb08 f30c 	mul.w	r3, r8, ip
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0xe4>
 8000b48:	1879      	adds	r1, r7, r1
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0xe2>
 8000b50:	428b      	cmp	r3, r1
 8000b52:	f200 80e9 	bhi.w	8000d28 <__udivmoddi4+0x2b4>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1ac9      	subs	r1, r1, r3
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x10c>
 8000b70:	193c      	adds	r4, r7, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x10a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80d9 	bhi.w	8000d30 <__udivmoddi4+0x2bc>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e7bf      	b.n	8000b0a <__udivmoddi4+0x96>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0x12e>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	f000 80b1 	beq.w	8000cf6 <__udivmoddi4+0x282>
 8000b94:	2600      	movs	r6, #0
 8000b96:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	fab3 f683 	clz	r6, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d14a      	bne.n	8000c40 <__udivmoddi4+0x1cc>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d302      	bcc.n	8000bb4 <__udivmoddi4+0x140>
 8000bae:	4282      	cmp	r2, r0
 8000bb0:	f200 80b8 	bhi.w	8000d24 <__udivmoddi4+0x2b0>
 8000bb4:	1a84      	subs	r4, r0, r2
 8000bb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	468c      	mov	ip, r1
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d0a8      	beq.n	8000b14 <__udivmoddi4+0xa0>
 8000bc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000bc8:	f1c2 0320 	rsb	r3, r2, #32
 8000bcc:	fa20 f603 	lsr.w	r6, r0, r3
 8000bd0:	4097      	lsls	r7, r2
 8000bd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000bd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bda:	40d9      	lsrs	r1, r3
 8000bdc:	4330      	orrs	r0, r6
 8000bde:	0c03      	lsrs	r3, r0, #16
 8000be0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000be4:	fa1f f887 	uxth.w	r8, r7
 8000be8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f108 	mul.w	r1, r6, r8
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x19c>
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c02:	f080 808d 	bcs.w	8000d20 <__udivmoddi4+0x2ac>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 808a 	bls.w	8000d20 <__udivmoddi4+0x2ac>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	443b      	add	r3, r7
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b281      	uxth	r1, r0
 8000c14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c20:	fb00 f308 	mul.w	r3, r0, r8
 8000c24:	428b      	cmp	r3, r1
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x1c4>
 8000c28:	1879      	adds	r1, r7, r1
 8000c2a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c2e:	d273      	bcs.n	8000d18 <__udivmoddi4+0x2a4>
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d971      	bls.n	8000d18 <__udivmoddi4+0x2a4>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4439      	add	r1, r7
 8000c38:	1acb      	subs	r3, r1, r3
 8000c3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c3e:	e778      	b.n	8000b32 <__udivmoddi4+0xbe>
 8000c40:	f1c6 0c20 	rsb	ip, r6, #32
 8000c44:	fa03 f406 	lsl.w	r4, r3, r6
 8000c48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c4c:	431c      	orrs	r4, r3
 8000c4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c52:	fa01 f306 	lsl.w	r3, r1, r6
 8000c56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	0c3b      	lsrs	r3, r7, #16
 8000c62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c66:	fa1f f884 	uxth.w	r8, r4
 8000c6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c72:	fb09 fa08 	mul.w	sl, r9, r8
 8000c76:	458a      	cmp	sl, r1
 8000c78:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x220>
 8000c82:	1861      	adds	r1, r4, r1
 8000c84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c88:	d248      	bcs.n	8000d1c <__udivmoddi4+0x2a8>
 8000c8a:	458a      	cmp	sl, r1
 8000c8c:	d946      	bls.n	8000d1c <__udivmoddi4+0x2a8>
 8000c8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c92:	4421      	add	r1, r4
 8000c94:	eba1 010a 	sub.w	r1, r1, sl
 8000c98:	b2bf      	uxth	r7, r7
 8000c9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ca6:	fb00 f808 	mul.w	r8, r0, r8
 8000caa:	45b8      	cmp	r8, r7
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x24a>
 8000cae:	19e7      	adds	r7, r4, r7
 8000cb0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cb4:	d22e      	bcs.n	8000d14 <__udivmoddi4+0x2a0>
 8000cb6:	45b8      	cmp	r8, r7
 8000cb8:	d92c      	bls.n	8000d14 <__udivmoddi4+0x2a0>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4427      	add	r7, r4
 8000cbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cc2:	eba7 0708 	sub.w	r7, r7, r8
 8000cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cca:	454f      	cmp	r7, r9
 8000ccc:	46c6      	mov	lr, r8
 8000cce:	4649      	mov	r1, r9
 8000cd0:	d31a      	bcc.n	8000d08 <__udivmoddi4+0x294>
 8000cd2:	d017      	beq.n	8000d04 <__udivmoddi4+0x290>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x27a>
 8000cd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000cda:	eb67 0701 	sbc.w	r7, r7, r1
 8000cde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ce2:	40f2      	lsrs	r2, r6
 8000ce4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ce8:	40f7      	lsrs	r7, r6
 8000cea:	e9c5 2700 	strd	r2, r7, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	462e      	mov	r6, r5
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	e70b      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0x60>
 8000d00:	4618      	mov	r0, r3
 8000d02:	e6fd      	b.n	8000b00 <__udivmoddi4+0x8c>
 8000d04:	4543      	cmp	r3, r8
 8000d06:	d2e5      	bcs.n	8000cd4 <__udivmoddi4+0x260>
 8000d08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d10:	3801      	subs	r0, #1
 8000d12:	e7df      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e7d2      	b.n	8000cbe <__udivmoddi4+0x24a>
 8000d18:	4660      	mov	r0, ip
 8000d1a:	e78d      	b.n	8000c38 <__udivmoddi4+0x1c4>
 8000d1c:	4681      	mov	r9, r0
 8000d1e:	e7b9      	b.n	8000c94 <__udivmoddi4+0x220>
 8000d20:	4666      	mov	r6, ip
 8000d22:	e775      	b.n	8000c10 <__udivmoddi4+0x19c>
 8000d24:	4630      	mov	r0, r6
 8000d26:	e74a      	b.n	8000bbe <__udivmoddi4+0x14a>
 8000d28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d2c:	4439      	add	r1, r7
 8000d2e:	e713      	b.n	8000b58 <__udivmoddi4+0xe4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	e724      	b.n	8000b80 <__udivmoddi4+0x10c>
 8000d36:	bf00      	nop

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	0000      	movs	r0, r0
	...

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d44:	f000 fcf4 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d48:	f000 f8c4 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4c:	f000 f9d8 	bl	8001100 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d50:	f000 f9b6 	bl	80010c0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d54:	f000 f95c 	bl	8001010 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 8000d58:	f007 fd0c 	bl	8008774 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000d5c:	f000 f986 	bl	800106c <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000d60:	f000 f922 	bl	8000fa8 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  valByte = (uint8_t)((valVolt/3.0)*255);
 8000d64:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <main+0x178>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fb91 	bl	8000490 <__aeabi_f2d>
 8000d6e:	f04f 0200 	mov.w	r2, #0
 8000d72:	4b52      	ldr	r3, [pc, #328]	; (8000ebc <main+0x17c>)
 8000d74:	f7ff fd0e 	bl	8000794 <__aeabi_ddiv>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	4619      	mov	r1, r3
 8000d80:	a349      	add	r3, pc, #292	; (adr r3, 8000ea8 <main+0x168>)
 8000d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d86:	f7ff fbdb 	bl	8000540 <__aeabi_dmul>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	f7ff fde7 	bl	8000964 <__aeabi_d2uiz>
 8000d96:	4603      	mov	r3, r0
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <main+0x180>)
 8000d9c:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart2, RxData, 3);
 8000d9e:	2203      	movs	r2, #3
 8000da0:	4948      	ldr	r1, [pc, #288]	; (8000ec4 <main+0x184>)
 8000da2:	4849      	ldr	r0, [pc, #292]	; (8000ec8 <main+0x188>)
 8000da4:	f003 ff9e 	bl	8004ce4 <HAL_UART_Receive_DMA>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000da8:	2100      	movs	r1, #0
 8000daa:	4848      	ldr	r0, [pc, #288]	; (8000ecc <main+0x18c>)
 8000dac:	f000 fe89 	bl	8001ac2 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 255);
 8000db0:	23ff      	movs	r3, #255	; 0xff
 8000db2:	2208      	movs	r2, #8
 8000db4:	2100      	movs	r1, #0
 8000db6:	4845      	ldr	r0, [pc, #276]	; (8000ecc <main+0x18c>)
 8000db8:	f000 ff36 	bl	8001c28 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4843      	ldr	r0, [pc, #268]	; (8000ecc <main+0x18c>)
 8000dc0:	f000 fe7f 	bl	8001ac2 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, 255);
 8000dc4:	23ff      	movs	r3, #255	; 0xff
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	2110      	movs	r1, #16
 8000dca:	4840      	ldr	r0, [pc, #256]	; (8000ecc <main+0x18c>)
 8000dcc:	f000 ff2c 	bl	8001c28 <HAL_DAC_SetValue>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000dd0:	f007 fcf6 	bl	80087c0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    //DAC1 Pitch
    if (RxData[midi_pitch] > 120) { //Rounding off to 120 so 1v/oct scales properly
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <main+0x184>)
 8000dda:	5c9b      	ldrb	r3, [r3, r2]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b78      	cmp	r3, #120	; 0x78
 8000de0:	d904      	bls.n	8000dec <main+0xac>
        RxData[midi_pitch] = 120;
 8000de2:	2301      	movs	r3, #1
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <main+0x184>)
 8000de8:	2178      	movs	r1, #120	; 0x78
 8000dea:	5499      	strb	r1, [r3, r2]
    }
    valVolt = (RxData[midi_pitch] * 3.3) / 120; 	//Actual output from DAC is 2.85v not 3.3v but compensated with opamp
 8000dec:	2301      	movs	r3, #1
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b34      	ldr	r3, [pc, #208]	; (8000ec4 <main+0x184>)
 8000df2:	5c9b      	ldrb	r3, [r3, r2]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fb38 	bl	800046c <__aeabi_i2d>
 8000dfc:	a32c      	add	r3, pc, #176	; (adr r3, 8000eb0 <main+0x170>)
 8000dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e02:	f7ff fb9d 	bl	8000540 <__aeabi_dmul>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f04f 0200 	mov.w	r2, #0
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <main+0x190>)
 8000e14:	f7ff fcbe 	bl	8000794 <__aeabi_ddiv>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f7ff fdc0 	bl	80009a4 <__aeabi_d2f>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a24      	ldr	r2, [pc, #144]	; (8000eb8 <main+0x178>)
 8000e28:	6013      	str	r3, [r2, #0]
    valByte = (uint8_t)((valVolt/3.3)*255);			//Opamp R1 7.5K, R2 3K
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <main+0x178>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fb2e 	bl	8000490 <__aeabi_f2d>
 8000e34:	a31e      	add	r3, pc, #120	; (adr r3, 8000eb0 <main+0x170>)
 8000e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3a:	f7ff fcab 	bl	8000794 <__aeabi_ddiv>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	a318      	add	r3, pc, #96	; (adr r3, 8000ea8 <main+0x168>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fb78 	bl	8000540 <__aeabi_dmul>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4610      	mov	r0, r2
 8000e56:	4619      	mov	r1, r3
 8000e58:	f7ff fd84 	bl	8000964 <__aeabi_d2uiz>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <main+0x180>)
 8000e62:	701a      	strb	r2, [r3, #0]
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, valByte);
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <main+0x180>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2208      	movs	r2, #8
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <main+0x18c>)
 8000e6e:	f000 fedb 	bl	8001c28 <HAL_DAC_SetValue>

    //DAC2 Gate
    if (RxData[midi_status] == 0x90) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <main+0x184>)
 8000e78:	5c9b      	ldrb	r3, [r3, r2]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b90      	cmp	r3, #144	; 0x90
 8000e7e:	d105      	bne.n	8000e8c <main+0x14c>
    	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, 255);
 8000e80:	23ff      	movs	r3, #255	; 0xff
 8000e82:	2208      	movs	r2, #8
 8000e84:	2110      	movs	r1, #16
 8000e86:	4811      	ldr	r0, [pc, #68]	; (8000ecc <main+0x18c>)
 8000e88:	f000 fece 	bl	8001c28 <HAL_DAC_SetValue>
    }
    if (RxData[midi_status] == 0x80) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <main+0x184>)
 8000e92:	5c9b      	ldrb	r3, [r3, r2]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b80      	cmp	r3, #128	; 0x80
 8000e98:	d19a      	bne.n	8000dd0 <main+0x90>
    	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, 0);
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <main+0x18c>)
 8000ea2:	f000 fec1 	bl	8001c28 <HAL_DAC_SetValue>
    MX_USB_HOST_Process();
 8000ea6:	e793      	b.n	8000dd0 <main+0x90>
 8000ea8:	00000000 	.word	0x00000000
 8000eac:	406fe000 	.word	0x406fe000
 8000eb0:	66666666 	.word	0x66666666
 8000eb4:	400a6666 	.word	0x400a6666
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	40080000 	.word	0x40080000
 8000ec0:	2000018c 	.word	0x2000018c
 8000ec4:	20000190 	.word	0x20000190
 8000ec8:	20000194 	.word	0x20000194
 8000ecc:	20000178 	.word	0x20000178
 8000ed0:	405e0000 	.word	0x405e0000

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b094      	sub	sp, #80	; 0x50
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	2230      	movs	r2, #48	; 0x30
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f007 ff8a 	bl	8008dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <SystemClock_Config+0xcc>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <SystemClock_Config+0xcc>)
 8000f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f06:	6413      	str	r3, [r2, #64]	; 0x40
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <SystemClock_Config+0xcc>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <SystemClock_Config+0xd0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <SystemClock_Config+0xd0>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <SystemClock_Config+0xd0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f30:	2301      	movs	r3, #1
 8000f32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f44:	2304      	movs	r3, #4
 8000f46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f48:	2360      	movs	r3, #96	; 0x60
 8000f4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f50:	2304      	movs	r3, #4
 8000f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f003 fa09 	bl	8004370 <HAL_RCC_OscConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f64:	f000 f9ea 	bl	800133c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f68:	230f      	movs	r3, #15
 8000f6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2101      	movs	r1, #1
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 fc62 	bl	8004850 <HAL_RCC_ClockConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f92:	f000 f9d3 	bl	800133c <Error_Handler>
  }
}
 8000f96:	bf00      	nop
 8000f98:	3750      	adds	r7, #80	; 0x50
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000

08000fa8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_DAC_Init+0x60>)
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <MX_DAC_Init+0x64>)
 8000fba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fbc:	4812      	ldr	r0, [pc, #72]	; (8001008 <MX_DAC_Init+0x60>)
 8000fbe:	f000 fd5e 	bl	8001a7e <HAL_DAC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000fc8:	f000 f9b8 	bl	800133c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <MX_DAC_Init+0x60>)
 8000fdc:	f000 fdd7 	bl	8001b8e <HAL_DAC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fe6:	f000 f9a9 	bl	800133c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	2210      	movs	r2, #16
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_DAC_Init+0x60>)
 8000ff2:	f000 fdcc 	bl	8001b8e <HAL_DAC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000ffc:	f000 f99e 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000178 	.word	0x20000178
 800100c:	40007400 	.word	0x40007400

08001010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_I2C1_Init+0x50>)
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <MX_I2C1_Init+0x54>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_I2C1_Init+0x50>)
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <MX_I2C1_Init+0x58>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_I2C1_Init+0x50>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_I2C1_Init+0x50>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_I2C1_Init+0x50>)
 800102e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001032:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_I2C1_Init+0x50>)
 800104e:	f003 f84b 	bl	80040e8 <HAL_I2C_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001058:	f000 f970 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000124 	.word	0x20000124
 8001064:	40005400 	.word	0x40005400
 8001068:	000186a0 	.word	0x000186a0

0800106c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <MX_USART2_UART_Init+0x50>)
 8001074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001078:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800107c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 80010a4:	f003 fdd0 	bl	8004c48 <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ae:	f000 f945 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000194 	.word	0x20000194
 80010bc:	40004400 	.word	0x40004400

080010c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_DMA_Init+0x3c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <MX_DMA_Init+0x3c>)
 80010d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_DMA_Init+0x3c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2010      	movs	r0, #16
 80010e8:	f000 fc93 	bl	8001a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010ec:	2010      	movs	r0, #16
 80010ee:	f000 fcac 	bl	8001a4a <HAL_NVIC_EnableIRQ>

}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	4b81      	ldr	r3, [pc, #516]	; (8001320 <MX_GPIO_Init+0x220>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a80      	ldr	r2, [pc, #512]	; (8001320 <MX_GPIO_Init+0x220>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b7e      	ldr	r3, [pc, #504]	; (8001320 <MX_GPIO_Init+0x220>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	4b7a      	ldr	r3, [pc, #488]	; (8001320 <MX_GPIO_Init+0x220>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a79      	ldr	r2, [pc, #484]	; (8001320 <MX_GPIO_Init+0x220>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b77      	ldr	r3, [pc, #476]	; (8001320 <MX_GPIO_Init+0x220>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b73      	ldr	r3, [pc, #460]	; (8001320 <MX_GPIO_Init+0x220>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a72      	ldr	r2, [pc, #456]	; (8001320 <MX_GPIO_Init+0x220>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b70      	ldr	r3, [pc, #448]	; (8001320 <MX_GPIO_Init+0x220>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b6c      	ldr	r3, [pc, #432]	; (8001320 <MX_GPIO_Init+0x220>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a6b      	ldr	r2, [pc, #428]	; (8001320 <MX_GPIO_Init+0x220>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b69      	ldr	r3, [pc, #420]	; (8001320 <MX_GPIO_Init+0x220>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b65      	ldr	r3, [pc, #404]	; (8001320 <MX_GPIO_Init+0x220>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a64      	ldr	r2, [pc, #400]	; (8001320 <MX_GPIO_Init+0x220>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b62      	ldr	r3, [pc, #392]	; (8001320 <MX_GPIO_Init+0x220>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <MX_GPIO_Init+0x220>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a5d      	ldr	r2, [pc, #372]	; (8001320 <MX_GPIO_Init+0x220>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b5b      	ldr	r3, [pc, #364]	; (8001320 <MX_GPIO_Init+0x220>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2108      	movs	r1, #8
 80011c2:	4858      	ldr	r0, [pc, #352]	; (8001324 <MX_GPIO_Init+0x224>)
 80011c4:	f001 fa84 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2101      	movs	r1, #1
 80011cc:	4856      	ldr	r0, [pc, #344]	; (8001328 <MX_GPIO_Init+0x228>)
 80011ce:	f001 fa7f 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011d2:	2200      	movs	r2, #0
 80011d4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80011d8:	4854      	ldr	r0, [pc, #336]	; (800132c <MX_GPIO_Init+0x22c>)
 80011da:	f001 fa79 	bl	80026d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011de:	2308      	movs	r3, #8
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	484b      	ldr	r0, [pc, #300]	; (8001324 <MX_GPIO_Init+0x224>)
 80011f6:	f001 f8cf 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4845      	ldr	r0, [pc, #276]	; (8001328 <MX_GPIO_Init+0x228>)
 8001212:	f001 f8c1 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001216:	2308      	movs	r3, #8
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001226:	2305      	movs	r3, #5
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	483d      	ldr	r0, [pc, #244]	; (8001328 <MX_GPIO_Init+0x228>)
 8001232:	f001 f8b1 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001236:	2301      	movs	r3, #1
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800123a:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <MX_GPIO_Init+0x230>)
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	483a      	ldr	r0, [pc, #232]	; (8001334 <MX_GPIO_Init+0x234>)
 800124a:	f001 f8a5 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800124e:	23c0      	movs	r3, #192	; 0xc0
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800125e:	2305      	movs	r3, #5
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4832      	ldr	r0, [pc, #200]	; (8001334 <MX_GPIO_Init+0x234>)
 800126a:	f001 f895 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800126e:	2304      	movs	r3, #4
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	4619      	mov	r1, r3
 8001280:	482d      	ldr	r0, [pc, #180]	; (8001338 <MX_GPIO_Init+0x238>)
 8001282:	f001 f889 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001298:	2305      	movs	r3, #5
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4825      	ldr	r0, [pc, #148]	; (8001338 <MX_GPIO_Init+0x238>)
 80012a4:	f001 f878 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012a8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80012ac:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	481a      	ldr	r0, [pc, #104]	; (800132c <MX_GPIO_Init+0x22c>)
 80012c2:	f001 f869 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012c6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012d8:	2306      	movs	r3, #6
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	4811      	ldr	r0, [pc, #68]	; (8001328 <MX_GPIO_Init+0x228>)
 80012e4:	f001 f858 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80012e8:	2320      	movs	r3, #32
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	480c      	ldr	r0, [pc, #48]	; (800132c <MX_GPIO_Init+0x22c>)
 80012fc:	f001 f84c 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001300:	2302      	movs	r3, #2
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_GPIO_Init+0x230>)
 8001306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_GPIO_Init+0x224>)
 8001314:	f001 f840 	bl	8002398 <HAL_GPIO_Init>

}
 8001318:	bf00      	nop
 800131a:	3730      	adds	r7, #48	; 0x30
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40021000 	.word	0x40021000
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	10120000 	.word	0x10120000
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_MspInit+0x4c>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_MspInit+0x4c>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001386:	2007      	movs	r0, #7
 8001388:	f000 fb38 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_DAC_MspInit+0x7c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d127      	bne.n	800140a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_DAC_MspInit+0x80>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_DAC_MspInit+0x80>)
 80013c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_DAC_MspInit+0x80>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_DAC_MspInit+0x80>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_DAC_MspInit+0x80>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_DAC_MspInit+0x80>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013f2:	2330      	movs	r3, #48	; 0x30
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f6:	2303      	movs	r3, #3
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_DAC_MspInit+0x84>)
 8001406:	f000 ffc7 	bl	8002398 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40007400 	.word	0x40007400
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000

08001420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <HAL_I2C_MspInit+0x84>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12c      	bne.n	800149c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_I2C_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <HAL_I2C_MspInit+0x88>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_I2C_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800145e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001464:	2312      	movs	r3, #18
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001468:	2301      	movs	r3, #1
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001470:	2304      	movs	r3, #4
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	480c      	ldr	r0, [pc, #48]	; (80014ac <HAL_I2C_MspInit+0x8c>)
 800147c:	f000 ff8c 	bl	8002398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_I2C_MspInit+0x88>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_I2C_MspInit+0x88>)
 800148a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_I2C_MspInit+0x88>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40005400 	.word	0x40005400
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020400 	.word	0x40020400

080014b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a34      	ldr	r2, [pc, #208]	; (80015a0 <HAL_UART_MspInit+0xf0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d162      	bne.n	8001598 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <HAL_UART_MspInit+0xf4>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a32      	ldr	r2, [pc, #200]	; (80015a4 <HAL_UART_MspInit+0xf4>)
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_UART_MspInit+0xf4>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <HAL_UART_MspInit+0xf4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a2b      	ldr	r2, [pc, #172]	; (80015a4 <HAL_UART_MspInit+0xf4>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <HAL_UART_MspInit+0xf4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800150a:	230c      	movs	r3, #12
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800151a:	2307      	movs	r3, #7
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4820      	ldr	r0, [pc, #128]	; (80015a8 <HAL_UART_MspInit+0xf8>)
 8001526:	f000 ff37 	bl	8002398 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_UART_MspInit+0xfc>)
 800152c:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <HAL_UART_MspInit+0x100>)
 800152e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <HAL_UART_MspInit+0xfc>)
 8001532:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001536:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_UART_MspInit+0xfc>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_UART_MspInit+0xfc>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_UART_MspInit+0xfc>)
 8001546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_UART_MspInit+0xfc>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_UART_MspInit+0xfc>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_UART_MspInit+0xfc>)
 800155a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800155e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_UART_MspInit+0xfc>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_UART_MspInit+0xfc>)
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800156c:	480f      	ldr	r0, [pc, #60]	; (80015ac <HAL_UART_MspInit+0xfc>)
 800156e:	f000 fb81 	bl	8001c74 <HAL_DMA_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001578:	f7ff fee0 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_UART_MspInit+0xfc>)
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_UART_MspInit+0xfc>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2026      	movs	r0, #38	; 0x26
 800158e:	f000 fa40 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001592:	2026      	movs	r0, #38	; 0x26
 8001594:	f000 fa59 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40004400 	.word	0x40004400
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	200000c4 	.word	0x200000c4
 80015b0:	40026088 	.word	0x40026088

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001600:	f000 f8e8 	bl	80017d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA1_Stream5_IRQHandler+0x10>)
 800160e:	f000 fc59 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200000c4 	.word	0x200000c4

0800161c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <USART2_IRQHandler+0x10>)
 8001622:	f003 fbdf 	bl	8004de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000194 	.word	0x20000194

08001630 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <OTG_FS_IRQHandler+0x10>)
 8001636:	f001 faf3 	bl	8002c20 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200005b0 	.word	0x200005b0

08001644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <_sbrk+0x5c>)
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <_sbrk+0x60>)
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <_sbrk+0x64>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <_sbrk+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	d207      	bcs.n	8001684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001674:	f007 fb88 	bl	8008d88 <__errno>
 8001678:	4603      	mov	r3, r0
 800167a:	220c      	movs	r2, #12
 800167c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001682:	e009      	b.n	8001698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <_sbrk+0x64>)
 8001694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20020000 	.word	0x20020000
 80016a4:	00000400 	.word	0x00000400
 80016a8:	200000b0 	.word	0x200000b0
 80016ac:	20000888 	.word	0x20000888

080016b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <SystemInit+0x28>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <SystemInit+0x28>)
 80016bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SystemInit+0x28>)
 80016c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ca:	609a      	str	r2, [r3, #8]
#endif
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001714 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016e2:	e003      	b.n	80016ec <LoopCopyDataInit>

080016e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016ea:	3104      	adds	r1, #4

080016ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016f4:	d3f6      	bcc.n	80016e4 <CopyDataInit>
  ldr  r2, =_sbss
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016f8:	e002      	b.n	8001700 <LoopFillZerobss>

080016fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016fc:	f842 3b04 	str.w	r3, [r2], #4

08001700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001704:	d3f9      	bcc.n	80016fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001706:	f7ff ffd3 	bl	80016b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800170a:	f007 fb43 	bl	8008d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170e:	f7ff fb17 	bl	8000d40 <main>
  bx  lr    
 8001712:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001714:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001718:	08008fe8 	.word	0x08008fe8
  ldr  r0, =_sdata
 800171c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001720:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001724:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001728:	20000884 	.word	0x20000884

0800172c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC_IRQHandler>
	...

08001730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_Init+0x40>)
 800173a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_Init+0x40>)
 8001746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_Init+0x40>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f000 f94f 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175e:	2000      	movs	r0, #0
 8001760:	f000 f808 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001764:	f7ff fdf0 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023c00 	.word	0x40023c00

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x54>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_InitTick+0x58>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f967 	bl	8001a66 <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00e      	b.n	80017c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d80a      	bhi.n	80017be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a8:	2200      	movs	r2, #0
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b0:	f000 f92f 	bl	8001a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <HAL_InitTick+0x5c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e000      	b.n	80017c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000004 	.word	0x20000004
 80017cc:	2000000c 	.word	0x2000000c
 80017d0:	20000008 	.word	0x20000008

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	2000000c 	.word	0x2000000c
 80017f8:	200001d4 	.word	0x200001d4

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200001d4 	.word	0x200001d4

08001814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff ffee 	bl	80017fc <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800182c:	d005      	beq.n	800183a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_Delay+0x44>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183a:	bf00      	nop
 800183c:	f7ff ffde 	bl	80017fc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d8f7      	bhi.n	800183c <HAL_Delay+0x28>
  {
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000000c 	.word	0x2000000c

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4907      	ldr	r1, [pc, #28]	; (80018f8 <__NVIC_EnableIRQ+0x38>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	; (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	; 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c8:	d301      	bcc.n	80019ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00f      	b.n	80019ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <SysTick_Config+0x40>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d6:	210f      	movs	r1, #15
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019dc:	f7ff ff8e 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <SysTick_Config+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <SysTick_Config+0x40>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff29 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff3e 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff8e 	bl	8001950 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5d 	bl	80018fc <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff31 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa2 	bl	80019b8 <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e014      	b.n	8001aba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	791b      	ldrb	r3, [r3, #4]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d105      	bne.n	8001aa6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fc79 	bl	8001398 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	795b      	ldrb	r3, [r3, #5]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_DAC_Start+0x1e>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e050      	b.n	8001b82 <HAL_DAC_Start+0xc0>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2202      	movs	r2, #2
 8001aea:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6819      	ldr	r1, [r3, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	409a      	lsls	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d11a      	bne.n	8001b3c <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b1c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d127      	bne.n	8001b74 <HAL_DAC_Start+0xb2>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b38      	cmp	r3, #56	; 0x38
 8001b28:	d124      	bne.n	8001b74 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	e01b      	b.n	8001b74 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b46:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8001b52:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b5a:	d10b      	bne.n	8001b74 <HAL_DAC_Start+0xb2>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001b62:	d107      	bne.n	8001b74 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0202 	orr.w	r2, r2, #2
 8001b72:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b087      	sub	sp, #28
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	795b      	ldrb	r3, [r3, #5]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_DAC_ConfigChannel+0x20>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e036      	b.n	8001c1c <HAL_DAC_ConfigChannel+0x8e>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001bc2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6819      	ldr	r1, [r3, #0]
 8001bfc:	22c0      	movs	r2, #192	; 0xc0
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43da      	mvns	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d105      	bne.n	8001c52 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3308      	adds	r3, #8
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e004      	b.n	8001c5c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	3314      	adds	r3, #20
 8001c5a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff fdbc 	bl	80017fc <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e099      	b.n	8001dc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb0:	e00f      	b.n	8001cd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb2:	f7ff fda3 	bl	80017fc <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d908      	bls.n	8001cd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2203      	movs	r2, #3
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e078      	b.n	8001dc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e8      	bne.n	8001cb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <HAL_DMA_Init+0x158>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d107      	bne.n	8001d3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	4313      	orrs	r3, r2
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f023 0307 	bic.w	r3, r3, #7
 8001d52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d117      	bne.n	8001d96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00e      	beq.n	8001d96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 fa91 	bl	80022a0 <DMA_CheckFifoParam>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2240      	movs	r2, #64	; 0x40
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d92:	2301      	movs	r3, #1
 8001d94:	e016      	b.n	8001dc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fa48 	bl	8002234 <DMA_CalcBaseAndBitshift>
 8001da4:	4603      	mov	r3, r0
 8001da6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	223f      	movs	r2, #63	; 0x3f
 8001dae:	409a      	lsls	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	f010803f 	.word	0xf010803f

08001dd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_DMA_Start_IT+0x26>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e040      	b.n	8001e78 <HAL_DMA_Start_IT+0xa8>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d12f      	bne.n	8001e6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f9da 	bl	80021d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	223f      	movs	r2, #63	; 0x3f
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0216 	orr.w	r2, r2, #22
 8001e3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0208 	orr.w	r2, r2, #8
 8001e56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	e005      	b.n	8001e76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e72:	2302      	movs	r3, #2
 8001e74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d004      	beq.n	8001e9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2280      	movs	r2, #128	; 0x80
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00c      	b.n	8001eb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2205      	movs	r2, #5
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0201 	bic.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ed0:	4b92      	ldr	r3, [pc, #584]	; (800211c <HAL_DMA_IRQHandler+0x258>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a92      	ldr	r2, [pc, #584]	; (8002120 <HAL_DMA_IRQHandler+0x25c>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0a9b      	lsrs	r3, r3, #10
 8001edc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2208      	movs	r2, #8
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01a      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0204 	bic.w	r2, r2, #4
 8001f16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	2201      	movs	r2, #1
 8001f36:	409a      	lsls	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d012      	beq.n	8001f66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	2201      	movs	r2, #1
 8001f54:	409a      	lsls	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	f043 0202 	orr.w	r2, r3, #2
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d012      	beq.n	8001f9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00b      	beq.n	8001f9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	2204      	movs	r2, #4
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	f043 0204 	orr.w	r2, r3, #4
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d043      	beq.n	8002034 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d03c      	beq.n	8002034 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d018      	beq.n	8002006 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d108      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d024      	beq.n	8002034 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	4798      	blx	r3
 8001ff2:	e01f      	b.n	8002034 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
 8002004:	e016      	b.n	8002034 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d107      	bne.n	8002024 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0208 	bic.w	r2, r2, #8
 8002022:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2220      	movs	r2, #32
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 808e 	beq.w	8002162 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 8086 	beq.w	8002162 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2220      	movs	r2, #32
 800205c:	409a      	lsls	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b05      	cmp	r3, #5
 800206c:	d136      	bne.n	80020dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0216 	bic.w	r2, r2, #22
 800207c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800208c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <HAL_DMA_IRQHandler+0x1da>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0208 	bic.w	r2, r2, #8
 80020ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	223f      	movs	r2, #63	; 0x3f
 80020b4:	409a      	lsls	r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d07d      	beq.n	80021ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
        }
        return;
 80020da:	e078      	b.n	80021ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01c      	beq.n	8002124 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d108      	bne.n	800210a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d030      	beq.n	8002162 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	4798      	blx	r3
 8002108:	e02b      	b.n	8002162 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d027      	beq.n	8002162 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
 800211a:	e022      	b.n	8002162 <HAL_DMA_IRQHandler+0x29e>
 800211c:	20000004 	.word	0x20000004
 8002120:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0210 	bic.w	r2, r2, #16
 8002140:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	2b00      	cmp	r3, #0
 8002168:	d032      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d022      	beq.n	80021bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2205      	movs	r2, #5
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3301      	adds	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	429a      	cmp	r2, r3
 8002198:	d307      	bcc.n	80021aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f2      	bne.n	800218e <HAL_DMA_IRQHandler+0x2ca>
 80021a8:	e000      	b.n	80021ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
 80021cc:	e000      	b.n	80021d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021ce:	bf00      	nop
    }
  }
}
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop

080021d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d108      	bne.n	8002218 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002216:	e007      	b.n	8002228 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	60da      	str	r2, [r3, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3b10      	subs	r3, #16
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <DMA_CalcBaseAndBitshift+0x64>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800224e:	4a13      	ldr	r2, [pc, #76]	; (800229c <DMA_CalcBaseAndBitshift+0x68>)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d909      	bls.n	8002276 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800226a:	f023 0303 	bic.w	r3, r3, #3
 800226e:	1d1a      	adds	r2, r3, #4
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	659a      	str	r2, [r3, #88]	; 0x58
 8002274:	e007      	b.n	8002286 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800227e:	f023 0303 	bic.w	r3, r3, #3
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	aaaaaaab 	.word	0xaaaaaaab
 800229c:	08008fd0 	.word	0x08008fd0

080022a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d11f      	bne.n	80022fa <DMA_CheckFifoParam+0x5a>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d856      	bhi.n	800236e <DMA_CheckFifoParam+0xce>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <DMA_CheckFifoParam+0x28>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022d9 	.word	0x080022d9
 80022cc:	080022eb 	.word	0x080022eb
 80022d0:	080022d9 	.word	0x080022d9
 80022d4:	0800236f 	.word	0x0800236f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d046      	beq.n	8002372 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e8:	e043      	b.n	8002372 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022f2:	d140      	bne.n	8002376 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f8:	e03d      	b.n	8002376 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002302:	d121      	bne.n	8002348 <DMA_CheckFifoParam+0xa8>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d837      	bhi.n	800237a <DMA_CheckFifoParam+0xda>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <DMA_CheckFifoParam+0x70>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	08002321 	.word	0x08002321
 8002314:	08002327 	.word	0x08002327
 8002318:	08002321 	.word	0x08002321
 800231c:	08002339 	.word	0x08002339
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
      break;
 8002324:	e030      	b.n	8002388 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d025      	beq.n	800237e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002336:	e022      	b.n	800237e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002340:	d11f      	bne.n	8002382 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002346:	e01c      	b.n	8002382 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d903      	bls.n	8002356 <DMA_CheckFifoParam+0xb6>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d003      	beq.n	800235c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002354:	e018      	b.n	8002388 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      break;
 800235a:	e015      	b.n	8002388 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00e      	beq.n	8002386 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
      break;
 800236c:	e00b      	b.n	8002386 <DMA_CheckFifoParam+0xe6>
      break;
 800236e:	bf00      	nop
 8002370:	e00a      	b.n	8002388 <DMA_CheckFifoParam+0xe8>
      break;
 8002372:	bf00      	nop
 8002374:	e008      	b.n	8002388 <DMA_CheckFifoParam+0xe8>
      break;
 8002376:	bf00      	nop
 8002378:	e006      	b.n	8002388 <DMA_CheckFifoParam+0xe8>
      break;
 800237a:	bf00      	nop
 800237c:	e004      	b.n	8002388 <DMA_CheckFifoParam+0xe8>
      break;
 800237e:	bf00      	nop
 8002380:	e002      	b.n	8002388 <DMA_CheckFifoParam+0xe8>
      break;   
 8002382:	bf00      	nop
 8002384:	e000      	b.n	8002388 <DMA_CheckFifoParam+0xe8>
      break;
 8002386:	bf00      	nop
    }
  } 
  
  return status; 
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop

08002398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	e16b      	b.n	800268c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023b4:	2201      	movs	r2, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f040 815a 	bne.w	8002686 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d00b      	beq.n	80023f2 <HAL_GPIO_Init+0x5a>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023e6:	2b11      	cmp	r3, #17
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b12      	cmp	r3, #18
 80023f0:	d130      	bne.n	8002454 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002428:	2201      	movs	r2, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 0201 	and.w	r2, r3, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0xfc>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b12      	cmp	r3, #18
 8002492:	d123      	bne.n	80024dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	08da      	lsrs	r2, r3, #3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3208      	adds	r2, #8
 800249c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	220f      	movs	r2, #15
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	69b9      	ldr	r1, [r7, #24]
 80024d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0203 	and.w	r2, r3, #3
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80b4 	beq.w	8002686 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	4b60      	ldr	r3, [pc, #384]	; (80026a4 <HAL_GPIO_Init+0x30c>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	4a5f      	ldr	r2, [pc, #380]	; (80026a4 <HAL_GPIO_Init+0x30c>)
 8002528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800252c:	6453      	str	r3, [r2, #68]	; 0x44
 800252e:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <HAL_GPIO_Init+0x30c>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800253a:	4a5b      	ldr	r2, [pc, #364]	; (80026a8 <HAL_GPIO_Init+0x310>)
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	220f      	movs	r2, #15
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_GPIO_Init+0x314>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d02b      	beq.n	80025be <HAL_GPIO_Init+0x226>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a51      	ldr	r2, [pc, #324]	; (80026b0 <HAL_GPIO_Init+0x318>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d025      	beq.n	80025ba <HAL_GPIO_Init+0x222>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a50      	ldr	r2, [pc, #320]	; (80026b4 <HAL_GPIO_Init+0x31c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01f      	beq.n	80025b6 <HAL_GPIO_Init+0x21e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4f      	ldr	r2, [pc, #316]	; (80026b8 <HAL_GPIO_Init+0x320>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d019      	beq.n	80025b2 <HAL_GPIO_Init+0x21a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a4e      	ldr	r2, [pc, #312]	; (80026bc <HAL_GPIO_Init+0x324>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_GPIO_Init+0x216>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4d      	ldr	r2, [pc, #308]	; (80026c0 <HAL_GPIO_Init+0x328>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00d      	beq.n	80025aa <HAL_GPIO_Init+0x212>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4c      	ldr	r2, [pc, #304]	; (80026c4 <HAL_GPIO_Init+0x32c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <HAL_GPIO_Init+0x20e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4b      	ldr	r2, [pc, #300]	; (80026c8 <HAL_GPIO_Init+0x330>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_GPIO_Init+0x20a>
 800259e:	2307      	movs	r3, #7
 80025a0:	e00e      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025a2:	2308      	movs	r3, #8
 80025a4:	e00c      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025a6:	2306      	movs	r3, #6
 80025a8:	e00a      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025aa:	2305      	movs	r3, #5
 80025ac:	e008      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025b2:	2303      	movs	r3, #3
 80025b4:	e004      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025be:	2300      	movs	r3, #0
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f002 0203 	and.w	r2, r2, #3
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	4093      	lsls	r3, r2
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d0:	4935      	ldr	r1, [pc, #212]	; (80026a8 <HAL_GPIO_Init+0x310>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025de:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <HAL_GPIO_Init+0x334>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002602:	4a32      	ldr	r2, [pc, #200]	; (80026cc <HAL_GPIO_Init+0x334>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002608:	4b30      	ldr	r3, [pc, #192]	; (80026cc <HAL_GPIO_Init+0x334>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262c:	4a27      	ldr	r2, [pc, #156]	; (80026cc <HAL_GPIO_Init+0x334>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <HAL_GPIO_Init+0x334>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <HAL_GPIO_Init+0x334>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_GPIO_Init+0x334>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a12      	ldr	r2, [pc, #72]	; (80026cc <HAL_GPIO_Init+0x334>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	f67f ae90 	bls.w	80023b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40013800 	.word	0x40013800
 80026ac:	40020000 	.word	0x40020000
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40021400 	.word	0x40021400
 80026c4:	40021800 	.word	0x40021800
 80026c8:	40021c00 	.word	0x40021c00
 80026cc:	40013c00 	.word	0x40013c00

080026d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
 80026dc:	4613      	mov	r3, r2
 80026de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e0:	787b      	ldrb	r3, [r7, #1]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026ec:	e003      	b.n	80026f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ee:	887b      	ldrh	r3, [r7, #2]
 80026f0:	041a      	lsls	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	619a      	str	r2, [r3, #24]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002704:	b08f      	sub	sp, #60	; 0x3c
 8002706:	af0a      	add	r7, sp, #40	; 0x28
 8002708:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e054      	b.n	80027be <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f006 f87e 	bl	8008830 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2203      	movs	r2, #3
 8002738:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f003 fa40 	bl	8005bd8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	687e      	ldr	r6, [r7, #4]
 8002760:	466d      	mov	r5, sp
 8002762:	f106 0410 	add.w	r4, r6, #16
 8002766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002772:	e885 0003 	stmia.w	r5, {r0, r1}
 8002776:	1d33      	adds	r3, r6, #4
 8002778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800277a:	6838      	ldr	r0, [r7, #0]
 800277c:	f003 f9ba 	bl	8005af4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f003 fa37 	bl	8005bfa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	687e      	ldr	r6, [r7, #4]
 8002794:	466d      	mov	r5, sp
 8002796:	f106 0410 	add.w	r4, r6, #16
 800279a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800279c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80027aa:	1d33      	adds	r3, r6, #4
 80027ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ae:	6838      	ldr	r0, [r7, #0]
 80027b0:	f003 fb4a 	bl	8005e48 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027c6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80027c6:	b590      	push	{r4, r7, lr}
 80027c8:	b089      	sub	sp, #36	; 0x24
 80027ca:	af04      	add	r7, sp, #16
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	4608      	mov	r0, r1
 80027d0:	4611      	mov	r1, r2
 80027d2:	461a      	mov	r2, r3
 80027d4:	4603      	mov	r3, r0
 80027d6:	70fb      	strb	r3, [r7, #3]
 80027d8:	460b      	mov	r3, r1
 80027da:	70bb      	strb	r3, [r7, #2]
 80027dc:	4613      	mov	r3, r2
 80027de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_HCD_HC_Init+0x28>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e07f      	b.n	80028ee <HAL_HCD_HC_Init+0x128>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	333d      	adds	r3, #61	; 0x3d
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	440b      	add	r3, r1
 8002818:	3338      	adds	r3, #56	; 0x38
 800281a:	787a      	ldrb	r2, [r7, #1]
 800281c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	3340      	adds	r3, #64	; 0x40
 800282e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002830:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	3339      	adds	r3, #57	; 0x39
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	333f      	adds	r3, #63	; 0x3f
 8002856:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800285a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	78bb      	ldrb	r3, [r7, #2]
 8002860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002864:	b2d8      	uxtb	r0, r3
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	333a      	adds	r3, #58	; 0x3a
 8002874:	4602      	mov	r2, r0
 8002876:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002878:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800287c:	2b00      	cmp	r3, #0
 800287e:	da0a      	bge.n	8002896 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	333b      	adds	r3, #59	; 0x3b
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e009      	b.n	80028aa <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	333b      	adds	r3, #59	; 0x3b
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	440b      	add	r3, r1
 80028b8:	333c      	adds	r3, #60	; 0x3c
 80028ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80028be:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	787c      	ldrb	r4, [r7, #1]
 80028c6:	78ba      	ldrb	r2, [r7, #2]
 80028c8:	78f9      	ldrb	r1, [r7, #3]
 80028ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	4623      	mov	r3, r4
 80028dc:	f003 fc36 	bl	800614c <USB_HC_Init>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd90      	pop	{r4, r7, pc}

080028f6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_HCD_HC_Halt+0x1e>
 8002910:	2302      	movs	r3, #2
 8002912:	e00f      	b.n	8002934 <HAL_HCD_HC_Halt+0x3e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f003 fe70 	bl	800660a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002932:	7bfb      	ldrb	r3, [r7, #15]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	4608      	mov	r0, r1
 8002946:	4611      	mov	r1, r2
 8002948:	461a      	mov	r2, r3
 800294a:	4603      	mov	r3, r0
 800294c:	70fb      	strb	r3, [r7, #3]
 800294e:	460b      	mov	r3, r1
 8002950:	70bb      	strb	r3, [r7, #2]
 8002952:	4613      	mov	r3, r2
 8002954:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	333b      	adds	r3, #59	; 0x3b
 8002966:	78ba      	ldrb	r2, [r7, #2]
 8002968:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	333f      	adds	r3, #63	; 0x3f
 800297a:	787a      	ldrb	r2, [r7, #1]
 800297c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800297e:	7c3b      	ldrb	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d114      	bne.n	80029ae <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	3342      	adds	r3, #66	; 0x42
 8002994:	2203      	movs	r2, #3
 8002996:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	333d      	adds	r3, #61	; 0x3d
 80029a8:	7f3a      	ldrb	r2, [r7, #28]
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e009      	b.n	80029c2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	3342      	adds	r3, #66	; 0x42
 80029be:	2202      	movs	r2, #2
 80029c0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80029c2:	787b      	ldrb	r3, [r7, #1]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	f200 80d6 	bhi.w	8002b76 <HAL_HCD_HC_SubmitRequest+0x23a>
 80029ca:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80029cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	08002b61 	.word	0x08002b61
 80029d8:	08002a4d 	.word	0x08002a4d
 80029dc:	08002ad7 	.word	0x08002ad7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80029e0:	7c3b      	ldrb	r3, [r7, #16]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	f040 80c9 	bne.w	8002b7a <HAL_HCD_HC_SubmitRequest+0x23e>
 80029e8:	78bb      	ldrb	r3, [r7, #2]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 80c5 	bne.w	8002b7a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80029f0:	8b3b      	ldrh	r3, [r7, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	440b      	add	r3, r1
 8002a04:	3351      	adds	r3, #81	; 0x51
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	440b      	add	r3, r1
 8002a18:	3351      	adds	r3, #81	; 0x51
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3342      	adds	r3, #66	; 0x42
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a34:	e0a1      	b.n	8002b7a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	440b      	add	r3, r1
 8002a44:	3342      	adds	r3, #66	; 0x42
 8002a46:	2202      	movs	r2, #2
 8002a48:	701a      	strb	r2, [r3, #0]
      break;
 8002a4a:	e096      	b.n	8002b7a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002a4c:	78bb      	ldrb	r3, [r7, #2]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d120      	bne.n	8002a94 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	3351      	adds	r3, #81	; 0x51
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	3342      	adds	r3, #66	; 0x42
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002a7c:	e07e      	b.n	8002b7c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3342      	adds	r3, #66	; 0x42
 8002a8e:	2202      	movs	r2, #2
 8002a90:	701a      	strb	r2, [r3, #0]
      break;
 8002a92:	e073      	b.n	8002b7c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3350      	adds	r3, #80	; 0x50
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3342      	adds	r3, #66	; 0x42
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
      break;
 8002abe:	e05d      	b.n	8002b7c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	3342      	adds	r3, #66	; 0x42
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	701a      	strb	r2, [r3, #0]
      break;
 8002ad4:	e052      	b.n	8002b7c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002ad6:	78bb      	ldrb	r3, [r7, #2]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d120      	bne.n	8002b1e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	440b      	add	r3, r1
 8002aea:	3351      	adds	r3, #81	; 0x51
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10a      	bne.n	8002b08 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	440b      	add	r3, r1
 8002b00:	3342      	adds	r3, #66	; 0x42
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b06:	e039      	b.n	8002b7c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	3342      	adds	r3, #66	; 0x42
 8002b18:	2202      	movs	r2, #2
 8002b1a:	701a      	strb	r2, [r3, #0]
      break;
 8002b1c:	e02e      	b.n	8002b7c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3350      	adds	r3, #80	; 0x50
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	440b      	add	r3, r1
 8002b42:	3342      	adds	r3, #66	; 0x42
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
      break;
 8002b48:	e018      	b.n	8002b7c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	3342      	adds	r3, #66	; 0x42
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	701a      	strb	r2, [r3, #0]
      break;
 8002b5e:	e00d      	b.n	8002b7c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3342      	adds	r3, #66	; 0x42
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
      break;
 8002b74:	e002      	b.n	8002b7c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002b76:	bf00      	nop
 8002b78:	e000      	b.n	8002b7c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002b7a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	440b      	add	r3, r1
 8002b8a:	3344      	adds	r3, #68	; 0x44
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	8b39      	ldrh	r1, [r7, #24]
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4403      	add	r3, r0
 8002ba0:	3348      	adds	r3, #72	; 0x48
 8002ba2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	335c      	adds	r3, #92	; 0x5c
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	334c      	adds	r3, #76	; 0x4c
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	3339      	adds	r3, #57	; 0x39
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	335d      	adds	r3, #93	; 0x5d
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	3338      	adds	r3, #56	; 0x38
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	18d1      	adds	r1, r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f003 fba6 	bl	8006360 <USB_HC_StartXfer>
 8002c14:	4603      	mov	r3, r0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop

08002c20 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 f8c3 	bl	8005dc2 <USB_GetMode>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	f040 80ef 	bne.w	8002e22 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f003 f8a7 	bl	8005d9c <USB_ReadInterrupts>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80e5 	beq.w	8002e20 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 f89e 	bl	8005d9c <USB_ReadInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c6a:	d104      	bne.n	8002c76 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 f88e 	bl	8005d9c <USB_ReadInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8a:	d104      	bne.n	8002c96 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 f87e 	bl	8005d9c <USB_ReadInterrupts>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ca6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002caa:	d104      	bne.n	8002cb6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 f86e 	bl	8005d9c <USB_ReadInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d103      	bne.n	8002cd2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f003 f860 	bl	8005d9c <USB_ReadInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce6:	d115      	bne.n	8002d14 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002cf0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d108      	bne.n	8002d14 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f005 fe12 	bl	800892c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 f956 	bl	8005fc0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 f83f 	bl	8005d9c <USB_ReadInterrupts>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d28:	d102      	bne.n	8002d30 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f001 f968 	bl	8004000 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 f831 	bl	8005d9c <USB_ReadInterrupts>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d106      	bne.n	8002d52 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f005 fdd5 	bl	80088f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2208      	movs	r2, #8
 8002d50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 f820 	bl	8005d9c <USB_ReadInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d66:	d138      	bne.n	8002dda <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 fc3b 	bl	80065e8 <USB_HC_ReadInterrupt>
 8002d72:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e025      	b.n	8002dc6 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d018      	beq.n	8002dc0 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da4:	d106      	bne.n	8002db4 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	4619      	mov	r1, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f8cf 	bl	8002f50 <HCD_HC_IN_IRQHandler>
 8002db2:	e005      	b.n	8002dc0 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fcfd 	bl	80037ba <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3d4      	bcc.n	8002d7a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 ffdc 	bl	8005d9c <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d101      	bne.n	8002df2 <HAL_HCD_IRQHandler+0x1d2>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_HCD_IRQHandler+0x1d4>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d014      	beq.n	8002e22 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0210 	bic.w	r2, r2, #16
 8002e06:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f001 f84b 	bl	8003ea4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0210 	orr.w	r2, r2, #16
 8002e1c:	619a      	str	r2, [r3, #24]
 8002e1e:	e000      	b.n	8002e22 <HAL_HCD_IRQHandler+0x202>
      return;
 8002e20:	bf00      	nop
    }
  }
}
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_HCD_Start+0x16>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e013      	b.n	8002e66 <HAL_HCD_Start+0x3e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 feb3 	bl	8005bb6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2101      	movs	r1, #1
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 f916 	bl	8006088 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_HCD_Stop+0x16>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e00d      	b.n	8002ea0 <HAL_HCD_Stop+0x32>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 fcf5 	bl	8006880 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 f8bd 	bl	8006034 <USB_ResetPort>
 8002eba:	4603      	mov	r3, r0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	440b      	add	r3, r1
 8002ede:	335c      	adds	r3, #92	; 0x5c
 8002ee0:	781b      	ldrb	r3, [r3, #0]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	440b      	add	r3, r1
 8002f08:	334c      	adds	r3, #76	; 0x4c
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 f8ff 	bl	8006128 <USB_GetCurrentFrame>
 8002f2a:	4603      	mov	r3, r0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 f8da 	bl	80060fa <USB_GetHostSpeed>
 8002f46:	4603      	mov	r3, r0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d119      	bne.n	8002fb4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2304      	movs	r3, #4
 8002f90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	0151      	lsls	r1, r2, #5
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	440a      	add	r2, r1
 8002fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	60d3      	str	r3, [r2, #12]
 8002fb2:	e0ce      	b.n	8003152 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fca:	d12c      	bne.n	8003026 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fde:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	335d      	adds	r3, #93	; 0x5d
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	0151      	lsls	r1, r2, #5
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	440a      	add	r2, r1
 800300a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800300e:	f043 0302 	orr.w	r3, r3, #2
 8003012:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f003 faf3 	bl	800660a <USB_HC_Halt>
 8003024:	e095      	b.n	8003152 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b20      	cmp	r3, #32
 800303a:	d109      	bne.n	8003050 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003048:	461a      	mov	r2, r3
 800304a:	2320      	movs	r3, #32
 800304c:	6093      	str	r3, [r2, #8]
 800304e:	e080      	b.n	8003152 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b08      	cmp	r3, #8
 8003064:	d134      	bne.n	80030d0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	0151      	lsls	r1, r2, #5
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	440a      	add	r2, r1
 800307c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	335d      	adds	r3, #93	; 0x5d
 8003096:	2205      	movs	r2, #5
 8003098:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a6:	461a      	mov	r2, r3
 80030a8:	2310      	movs	r3, #16
 80030aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	2308      	movs	r3, #8
 80030bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 fa9e 	bl	800660a <USB_HC_Halt>
 80030ce:	e040      	b.n	8003152 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e6:	d134      	bne.n	8003152 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	0151      	lsls	r1, r2, #5
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	440a      	add	r2, r1
 80030fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f003 fa79 	bl	800660a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	461a      	mov	r2, r3
 8003126:	2310      	movs	r3, #16
 8003128:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	335d      	adds	r3, #93	; 0x5d
 800313a:	2208      	movs	r2, #8
 800313c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314a:	461a      	mov	r2, r3
 800314c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003150:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4413      	add	r3, r2
 800315a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003168:	d122      	bne.n	80031b0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	0151      	lsls	r1, r2, #5
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	440a      	add	r2, r1
 8003180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fa38 	bl	800660a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	461a      	mov	r2, r3
 80031a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ac:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80031ae:	e300      	b.n	80037b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	f040 80fd 	bne.w	80033c2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01b      	beq.n	8003208 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	3348      	adds	r3, #72	; 0x48
 80031e0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	0159      	lsls	r1, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	440b      	add	r3, r1
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80031f4:	1ad1      	subs	r1, r2, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4403      	add	r3, r0
 8003204:	334c      	adds	r3, #76	; 0x4c
 8003206:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	440b      	add	r3, r1
 8003216:	335d      	adds	r3, #93	; 0x5d
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	3358      	adds	r3, #88	; 0x58
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	461a      	mov	r2, r3
 800323e:	2301      	movs	r3, #1
 8003240:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	440b      	add	r3, r1
 8003250:	333f      	adds	r3, #63	; 0x3f
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	440b      	add	r3, r1
 8003266:	333f      	adds	r3, #63	; 0x3f
 8003268:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800326a:	2b02      	cmp	r3, #2
 800326c:	d121      	bne.n	80032b2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	0151      	lsls	r1, r2, #5
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	440a      	add	r2, r1
 8003284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003288:	f043 0302 	orr.w	r3, r3, #2
 800328c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f003 f9b6 	bl	800660a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032aa:	461a      	mov	r2, r3
 80032ac:	2310      	movs	r3, #16
 80032ae:	6093      	str	r3, [r2, #8]
 80032b0:	e070      	b.n	8003394 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	440b      	add	r3, r1
 80032c0:	333f      	adds	r3, #63	; 0x3f
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d12a      	bne.n	800331e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032e6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	440b      	add	r3, r1
 80032f6:	335c      	adds	r3, #92	; 0x5c
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	b2d8      	uxtb	r0, r3
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	440b      	add	r3, r1
 800330e:	335c      	adds	r3, #92	; 0x5c
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	4601      	mov	r1, r0
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f005 fb16 	bl	8008948 <HAL_HCD_HC_NotifyURBChange_Callback>
 800331c:	e03a      	b.n	8003394 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	333f      	adds	r3, #63	; 0x3f
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d12f      	bne.n	8003394 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	440b      	add	r3, r1
 8003342:	335c      	adds	r3, #92	; 0x5c
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	440b      	add	r3, r1
 8003356:	3350      	adds	r3, #80	; 0x50
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	f083 0301 	eor.w	r3, r3, #1
 800335e:	b2d8      	uxtb	r0, r3
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	440b      	add	r3, r1
 800336e:	3350      	adds	r3, #80	; 0x50
 8003370:	4602      	mov	r2, r0
 8003372:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	b2d8      	uxtb	r0, r3
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	440b      	add	r3, r1
 8003386:	335c      	adds	r3, #92	; 0x5c
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	4601      	mov	r1, r0
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f005 fada 	bl	8008948 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	3350      	adds	r3, #80	; 0x50
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	f083 0301 	eor.w	r3, r3, #1
 80033aa:	b2d8      	uxtb	r0, r3
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	3350      	adds	r3, #80	; 0x50
 80033bc:	4602      	mov	r2, r0
 80033be:	701a      	strb	r2, [r3, #0]
}
 80033c0:	e1f7      	b.n	80037b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	f040 811a 	bne.w	800360e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	0151      	lsls	r1, r2, #5
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	440a      	add	r2, r1
 80033f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033f4:	f023 0302 	bic.w	r3, r3, #2
 80033f8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	440b      	add	r3, r1
 8003408:	335d      	adds	r3, #93	; 0x5d
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d10a      	bne.n	8003426 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	335c      	adds	r3, #92	; 0x5c
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	e0d9      	b.n	80035da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	440b      	add	r3, r1
 8003434:	335d      	adds	r3, #93	; 0x5d
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b05      	cmp	r3, #5
 800343a:	d10a      	bne.n	8003452 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	440b      	add	r3, r1
 800344a:	335c      	adds	r3, #92	; 0x5c
 800344c:	2205      	movs	r2, #5
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	e0c3      	b.n	80035da <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	335d      	adds	r3, #93	; 0x5d
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b06      	cmp	r3, #6
 8003466:	d00a      	beq.n	800347e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	440b      	add	r3, r1
 8003476:	335d      	adds	r3, #93	; 0x5d
 8003478:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800347a:	2b08      	cmp	r3, #8
 800347c:	d156      	bne.n	800352c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	440b      	add	r3, r1
 800348c:	3358      	adds	r3, #88	; 0x58
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	1c59      	adds	r1, r3, #1
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4403      	add	r3, r0
 80034a0:	3358      	adds	r3, #88	; 0x58
 80034a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	3358      	adds	r3, #88	; 0x58
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d914      	bls.n	80034e4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	3358      	adds	r3, #88	; 0x58
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	440b      	add	r3, r1
 80034dc:	335c      	adds	r3, #92	; 0x5c
 80034de:	2204      	movs	r2, #4
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e009      	b.n	80034f8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	440b      	add	r3, r1
 80034f2:	335c      	adds	r3, #92	; 0x5c
 80034f4:	2202      	movs	r2, #2
 80034f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800350e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003516:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4413      	add	r3, r2
 8003520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003524:	461a      	mov	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e056      	b.n	80035da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	440b      	add	r3, r1
 800353a:	335d      	adds	r3, #93	; 0x5d
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b03      	cmp	r3, #3
 8003540:	d123      	bne.n	800358a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	335c      	adds	r3, #92	; 0x5c
 8003552:	2202      	movs	r2, #2
 8003554:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4413      	add	r3, r2
 800355e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800356c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003574:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003582:	461a      	mov	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	e027      	b.n	80035da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	440b      	add	r3, r1
 8003598:	335d      	adds	r3, #93	; 0x5d
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b07      	cmp	r3, #7
 800359e:	d11c      	bne.n	80035da <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	440b      	add	r3, r1
 80035ae:	3358      	adds	r3, #88	; 0x58
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4403      	add	r3, r0
 80035c2:	3358      	adds	r3, #88	; 0x58
 80035c4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	440b      	add	r3, r1
 80035d4:	335c      	adds	r3, #92	; 0x5c
 80035d6:	2204      	movs	r2, #4
 80035d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e6:	461a      	mov	r2, r3
 80035e8:	2302      	movs	r3, #2
 80035ea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	b2d8      	uxtb	r0, r3
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	440b      	add	r3, r1
 80035fe:	335c      	adds	r3, #92	; 0x5c
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	4601      	mov	r1, r0
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f005 f99e 	bl	8008948 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800360c:	e0d1      	b.n	80037b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b80      	cmp	r3, #128	; 0x80
 8003622:	d13e      	bne.n	80036a2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	440a      	add	r2, r1
 800363a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800363e:	f043 0302 	orr.w	r3, r3, #2
 8003642:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	440b      	add	r3, r1
 8003652:	3358      	adds	r3, #88	; 0x58
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4403      	add	r3, r0
 8003666:	3358      	adds	r3, #88	; 0x58
 8003668:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	440b      	add	r3, r1
 8003678:	335d      	adds	r3, #93	; 0x5d
 800367a:	2206      	movs	r2, #6
 800367c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f002 ffbe 	bl	800660a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369a:	461a      	mov	r2, r3
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	6093      	str	r3, [r2, #8]
}
 80036a0:	e087      	b.n	80037b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b10      	cmp	r3, #16
 80036b6:	d17c      	bne.n	80037b2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	440b      	add	r3, r1
 80036c6:	333f      	adds	r3, #63	; 0x3f
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d122      	bne.n	8003714 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	3358      	adds	r3, #88	; 0x58
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	0151      	lsls	r1, r2, #5
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	440a      	add	r2, r1
 80036f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f002 ff7c 	bl	800660a <USB_HC_Halt>
 8003712:	e045      	b.n	80037a0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	333f      	adds	r3, #63	; 0x3f
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	333f      	adds	r3, #63	; 0x3f
 800373a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800373c:	2b02      	cmp	r3, #2
 800373e:	d12f      	bne.n	80037a0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	440b      	add	r3, r1
 800374e:	3358      	adds	r3, #88	; 0x58
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d121      	bne.n	80037a0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	440b      	add	r3, r1
 800376a:	335d      	adds	r3, #93	; 0x5d
 800376c:	2203      	movs	r2, #3
 800376e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	0151      	lsls	r1, r2, #5
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	440a      	add	r2, r1
 8003786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800378a:	f043 0302 	orr.w	r3, r3, #2
 800378e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f002 ff35 	bl	800660a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	461a      	mov	r2, r3
 80037ae:	2310      	movs	r3, #16
 80037b0:	6093      	str	r3, [r2, #8]
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b086      	sub	sp, #24
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	460b      	mov	r3, r1
 80037c4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d119      	bne.n	800381e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f6:	461a      	mov	r2, r3
 80037f8:	2304      	movs	r3, #4
 80037fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	0151      	lsls	r1, r2, #5
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	440a      	add	r2, r1
 8003812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003816:	f043 0302 	orr.w	r3, r3, #2
 800381a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800381c:	e33e      	b.n	8003e9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b20      	cmp	r3, #32
 8003832:	d141      	bne.n	80038b8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	461a      	mov	r2, r3
 8003842:	2320      	movs	r3, #32
 8003844:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	440b      	add	r3, r1
 8003854:	333d      	adds	r3, #61	; 0x3d
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	f040 831f 	bne.w	8003e9c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	440b      	add	r3, r1
 800386c:	333d      	adds	r3, #61	; 0x3d
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	440b      	add	r3, r1
 8003880:	335c      	adds	r3, #92	; 0x5c
 8003882:	2202      	movs	r2, #2
 8003884:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4413      	add	r3, r2
 800388e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	0151      	lsls	r1, r2, #5
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	440a      	add	r2, r1
 800389c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038a0:	f043 0302 	orr.w	r3, r3, #2
 80038a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f002 feaa 	bl	800660a <USB_HC_Halt>
}
 80038b6:	e2f1      	b.n	8003e9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	d13f      	bne.n	800394e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	440b      	add	r3, r1
 80038dc:	335d      	adds	r3, #93	; 0x5d
 80038de:	2204      	movs	r2, #4
 80038e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	440b      	add	r3, r1
 80038f0:	333d      	adds	r3, #61	; 0x3d
 80038f2:	2201      	movs	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	440b      	add	r3, r1
 8003904:	3358      	adds	r3, #88	; 0x58
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	0151      	lsls	r1, r2, #5
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	440a      	add	r2, r1
 8003920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003924:	f043 0302 	orr.w	r3, r3, #2
 8003928:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f002 fe68 	bl	800660a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4413      	add	r3, r2
 8003942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003946:	461a      	mov	r2, r3
 8003948:	2340      	movs	r3, #64	; 0x40
 800394a:	6093      	str	r3, [r2, #8]
}
 800394c:	e2a6      	b.n	8003e9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4413      	add	r3, r2
 8003956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003964:	d122      	bne.n	80039ac <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4413      	add	r3, r2
 800396e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	0151      	lsls	r1, r2, #5
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	440a      	add	r2, r1
 800397c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	4611      	mov	r1, r2
 8003990:	4618      	mov	r0, r3
 8003992:	f002 fe3a 	bl	800660a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4413      	add	r3, r2
 800399e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a2:	461a      	mov	r2, r3
 80039a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039a8:	6093      	str	r3, [r2, #8]
}
 80039aa:	e277      	b.n	8003e9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d135      	bne.n	8003a2e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	440b      	add	r3, r1
 80039d0:	3358      	adds	r3, #88	; 0x58
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	0151      	lsls	r1, r2, #5
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	440a      	add	r2, r1
 80039ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039f0:	f043 0302 	orr.w	r3, r3, #2
 80039f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f002 fe02 	bl	800660a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a12:	461a      	mov	r2, r3
 8003a14:	2301      	movs	r3, #1
 8003a16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	440b      	add	r3, r1
 8003a26:	335d      	adds	r3, #93	; 0x5d
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
}
 8003a2c:	e236      	b.n	8003e9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d12b      	bne.n	8003a9c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a50:	461a      	mov	r2, r3
 8003a52:	2308      	movs	r3, #8
 8003a54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	0151      	lsls	r1, r2, #5
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	440a      	add	r2, r1
 8003a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a70:	f043 0302 	orr.w	r3, r3, #2
 8003a74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f002 fdc2 	bl	800660a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	440b      	add	r3, r1
 8003a94:	335d      	adds	r3, #93	; 0x5d
 8003a96:	2205      	movs	r2, #5
 8003a98:	701a      	strb	r2, [r3, #0]
}
 8003a9a:	e1ff      	b.n	8003e9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d155      	bne.n	8003b5e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	440b      	add	r3, r1
 8003ac0:	3358      	adds	r3, #88	; 0x58
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	440b      	add	r3, r1
 8003ad4:	335d      	adds	r3, #93	; 0x5d
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	440b      	add	r3, r1
 8003ae8:	333d      	adds	r3, #61	; 0x3d
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d114      	bne.n	8003b1a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	440b      	add	r3, r1
 8003afe:	333c      	adds	r3, #60	; 0x3c
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	440b      	add	r3, r1
 8003b14:	333d      	adds	r3, #61	; 0x3d
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	0151      	lsls	r1, r2, #5
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	440a      	add	r2, r1
 8003b30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b34:	f043 0302 	orr.w	r3, r3, #2
 8003b38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f002 fd60 	bl	800660a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b56:	461a      	mov	r2, r3
 8003b58:	2310      	movs	r3, #16
 8003b5a:	6093      	str	r3, [r2, #8]
}
 8003b5c:	e19e      	b.n	8003e9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d12b      	bne.n	8003bcc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b8e:	f043 0302 	orr.w	r3, r3, #2
 8003b92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f002 fd33 	bl	800660a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	440b      	add	r3, r1
 8003bb2:	335d      	adds	r3, #93	; 0x5d
 8003bb4:	2206      	movs	r2, #6
 8003bb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	6093      	str	r3, [r2, #8]
}
 8003bca:	e167      	b.n	8003e9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be2:	d135      	bne.n	8003c50 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	0151      	lsls	r1, r2, #5
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	440a      	add	r2, r1
 8003bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bfe:	f043 0302 	orr.w	r3, r3, #2
 8003c02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f002 fcfb 	bl	800660a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c20:	461a      	mov	r2, r3
 8003c22:	2310      	movs	r3, #16
 8003c24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c32:	461a      	mov	r2, r3
 8003c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	440b      	add	r3, r1
 8003c48:	335d      	adds	r3, #93	; 0x5d
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	701a      	strb	r2, [r3, #0]
}
 8003c4e:	e125      	b.n	8003e9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	f040 811a 	bne.w	8003e9c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	0151      	lsls	r1, r2, #5
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c82:	f023 0302 	bic.w	r3, r3, #2
 8003c86:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	440b      	add	r3, r1
 8003c96:	335d      	adds	r3, #93	; 0x5d
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d137      	bne.n	8003d0e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	440b      	add	r3, r1
 8003cac:	335c      	adds	r3, #92	; 0x5c
 8003cae:	2201      	movs	r2, #1
 8003cb0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	440b      	add	r3, r1
 8003cc0:	333f      	adds	r3, #63	; 0x3f
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d00b      	beq.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	333f      	adds	r3, #63	; 0x3f
 8003cd8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	f040 80c5 	bne.w	8003e6a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	3351      	adds	r3, #81	; 0x51
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	f083 0301 	eor.w	r3, r3, #1
 8003cf6:	b2d8      	uxtb	r0, r3
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	440b      	add	r3, r1
 8003d06:	3351      	adds	r3, #81	; 0x51
 8003d08:	4602      	mov	r2, r0
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e0ad      	b.n	8003e6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4613      	mov	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	440b      	add	r3, r1
 8003d1c:	335d      	adds	r3, #93	; 0x5d
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d10a      	bne.n	8003d3a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	440b      	add	r3, r1
 8003d32:	335c      	adds	r3, #92	; 0x5c
 8003d34:	2202      	movs	r2, #2
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	e097      	b.n	8003e6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	440b      	add	r3, r1
 8003d48:	335d      	adds	r3, #93	; 0x5d
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d10a      	bne.n	8003d66 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	440b      	add	r3, r1
 8003d5e:	335c      	adds	r3, #92	; 0x5c
 8003d60:	2202      	movs	r2, #2
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e081      	b.n	8003e6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	440b      	add	r3, r1
 8003d74:	335d      	adds	r3, #93	; 0x5d
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d10a      	bne.n	8003d92 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	440b      	add	r3, r1
 8003d8a:	335c      	adds	r3, #92	; 0x5c
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	e06b      	b.n	8003e6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	440b      	add	r3, r1
 8003da0:	335d      	adds	r3, #93	; 0x5d
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b06      	cmp	r3, #6
 8003da6:	d00a      	beq.n	8003dbe <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	440b      	add	r3, r1
 8003db6:	335d      	adds	r3, #93	; 0x5d
 8003db8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d155      	bne.n	8003e6a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	440b      	add	r3, r1
 8003dcc:	3358      	adds	r3, #88	; 0x58
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	1c59      	adds	r1, r3, #1
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4403      	add	r3, r0
 8003de0:	3358      	adds	r3, #88	; 0x58
 8003de2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	440b      	add	r3, r1
 8003df2:	3358      	adds	r3, #88	; 0x58
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d914      	bls.n	8003e24 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	440b      	add	r3, r1
 8003e08:	3358      	adds	r3, #88	; 0x58
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	440b      	add	r3, r1
 8003e1c:	335c      	adds	r3, #92	; 0x5c
 8003e1e:	2204      	movs	r2, #4
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	e009      	b.n	8003e38 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	440b      	add	r3, r1
 8003e32:	335c      	adds	r3, #92	; 0x5c
 8003e34:	2202      	movs	r2, #2
 8003e36:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e4e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e56:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e76:	461a      	mov	r2, r3
 8003e78:	2302      	movs	r3, #2
 8003e7a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	b2d8      	uxtb	r0, r3
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	440b      	add	r3, r1
 8003e8e:	335c      	adds	r3, #92	; 0x5c
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	4601      	mov	r1, r0
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f004 fd56 	bl	8008948 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e9c:	bf00      	nop
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	; 0x28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	0c5b      	lsrs	r3, r3, #17
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ed8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d004      	beq.n	8003eea <HCD_RXQLVL_IRQHandler+0x46>
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	f000 8082 	beq.w	8003fec <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ee8:	e083      	b.n	8003ff2 <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d07f      	beq.n	8003ff0 <HCD_RXQLVL_IRQHandler+0x14c>
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	440b      	add	r3, r1
 8003efe:	3344      	adds	r3, #68	; 0x44
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d074      	beq.n	8003ff0 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	440b      	add	r3, r1
 8003f18:	3344      	adds	r3, #68	; 0x44
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	b292      	uxth	r2, r2
 8003f20:	4619      	mov	r1, r3
 8003f22:	f001 ff12 	bl	8005d4a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	440b      	add	r3, r1
 8003f34:	3344      	adds	r3, #68	; 0x44
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	18d1      	adds	r1, r2, r3
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4403      	add	r3, r0
 8003f4a:	3344      	adds	r3, #68	; 0x44
 8003f4c:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	440b      	add	r3, r1
 8003f5c:	334c      	adds	r3, #76	; 0x4c
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	18d1      	adds	r1, r2, r3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4403      	add	r3, r0
 8003f72:	334c      	adds	r3, #76	; 0x4c
 8003f74:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HCD_RXQLVL_IRQHandler+0x158>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d031      	beq.n	8003ff0 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fa2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003faa:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	440b      	add	r3, r1
 8003fcc:	3350      	adds	r3, #80	; 0x50
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	f083 0301 	eor.w	r3, r3, #1
 8003fd4:	b2d8      	uxtb	r0, r3
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	440b      	add	r3, r1
 8003fe4:	3350      	adds	r3, #80	; 0x50
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	701a      	strb	r2, [r3, #0]
      break;
 8003fea:	e001      	b.n	8003ff0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8003ff0:	bf00      	nop
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	3728      	adds	r7, #40	; 0x28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	1ff80000 	.word	0x1ff80000

08004000 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800402c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b02      	cmp	r3, #2
 8004036:	d10b      	bne.n	8004050 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d102      	bne.n	8004048 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f004 fc64 	bl	8008910 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f043 0302 	orr.w	r3, r3, #2
 800404e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b08      	cmp	r3, #8
 8004058:	d132      	bne.n	80040c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f043 0308 	orr.w	r3, r3, #8
 8004060:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b04      	cmp	r3, #4
 800406a:	d126      	bne.n	80040ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d113      	bne.n	800409c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800407a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800407e:	d106      	bne.n	800408e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f001 ff9a 	bl	8005fc0 <USB_InitFSLSPClkSel>
 800408c:	e011      	b.n	80040b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2101      	movs	r1, #1
 8004094:	4618      	mov	r0, r3
 8004096:	f001 ff93 	bl	8005fc0 <USB_InitFSLSPClkSel>
 800409a:	e00a      	b.n	80040b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d106      	bne.n	80040b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040aa:	461a      	mov	r2, r3
 80040ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80040b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f004 fc56 	bl	8008964 <HAL_HCD_PortEnabled_Callback>
 80040b8:	e002      	b.n	80040c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f004 fc60 	bl	8008980 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d103      	bne.n	80040d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f043 0320 	orr.w	r3, r3, #32
 80040d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040d8:	461a      	mov	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6013      	str	r3, [r2, #0]
}
 80040de:	bf00      	nop
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e12b      	b.n	8004352 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fd f986 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2224      	movs	r2, #36	; 0x24
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800413a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800414a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800414c:	f000 fd54 	bl	8004bf8 <HAL_RCC_GetPCLK1Freq>
 8004150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4a81      	ldr	r2, [pc, #516]	; (800435c <HAL_I2C_Init+0x274>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d807      	bhi.n	800416c <HAL_I2C_Init+0x84>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a80      	ldr	r2, [pc, #512]	; (8004360 <HAL_I2C_Init+0x278>)
 8004160:	4293      	cmp	r3, r2
 8004162:	bf94      	ite	ls
 8004164:	2301      	movls	r3, #1
 8004166:	2300      	movhi	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e006      	b.n	800417a <HAL_I2C_Init+0x92>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4a7d      	ldr	r2, [pc, #500]	; (8004364 <HAL_I2C_Init+0x27c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	bf94      	ite	ls
 8004174:	2301      	movls	r3, #1
 8004176:	2300      	movhi	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e0e7      	b.n	8004352 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a78      	ldr	r2, [pc, #480]	; (8004368 <HAL_I2C_Init+0x280>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0c9b      	lsrs	r3, r3, #18
 800418c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a6a      	ldr	r2, [pc, #424]	; (800435c <HAL_I2C_Init+0x274>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d802      	bhi.n	80041bc <HAL_I2C_Init+0xd4>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3301      	adds	r3, #1
 80041ba:	e009      	b.n	80041d0 <HAL_I2C_Init+0xe8>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	4a69      	ldr	r2, [pc, #420]	; (800436c <HAL_I2C_Init+0x284>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	3301      	adds	r3, #1
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	495c      	ldr	r1, [pc, #368]	; (800435c <HAL_I2C_Init+0x274>)
 80041ec:	428b      	cmp	r3, r1
 80041ee:	d819      	bhi.n	8004224 <HAL_I2C_Init+0x13c>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1e59      	subs	r1, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80041fe:	1c59      	adds	r1, r3, #1
 8004200:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004204:	400b      	ands	r3, r1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_I2C_Init+0x138>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1e59      	subs	r1, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	fbb1 f3f3 	udiv	r3, r1, r3
 8004218:	3301      	adds	r3, #1
 800421a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421e:	e051      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 8004220:	2304      	movs	r3, #4
 8004222:	e04f      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d111      	bne.n	8004250 <HAL_I2C_Init+0x168>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1e58      	subs	r0, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	440b      	add	r3, r1
 800423a:	fbb0 f3f3 	udiv	r3, r0, r3
 800423e:	3301      	adds	r3, #1
 8004240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf0c      	ite	eq
 8004248:	2301      	moveq	r3, #1
 800424a:	2300      	movne	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e012      	b.n	8004276 <HAL_I2C_Init+0x18e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1e58      	subs	r0, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	0099      	lsls	r1, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	fbb0 f3f3 	udiv	r3, r0, r3
 8004266:	3301      	adds	r3, #1
 8004268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Init+0x196>
 800427a:	2301      	movs	r3, #1
 800427c:	e022      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10e      	bne.n	80042a4 <HAL_I2C_Init+0x1bc>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1e58      	subs	r0, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	440b      	add	r3, r1
 8004294:	fbb0 f3f3 	udiv	r3, r0, r3
 8004298:	3301      	adds	r3, #1
 800429a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a2:	e00f      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1e58      	subs	r0, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	0099      	lsls	r1, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ba:	3301      	adds	r3, #1
 80042bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	6809      	ldr	r1, [r1, #0]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6911      	ldr	r1, [r2, #16]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68d2      	ldr	r2, [r2, #12]
 80042fe:	4311      	orrs	r1, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	430b      	orrs	r3, r1
 8004306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	000186a0 	.word	0x000186a0
 8004360:	001e847f 	.word	0x001e847f
 8004364:	003d08ff 	.word	0x003d08ff
 8004368:	431bde83 	.word	0x431bde83
 800436c:	10624dd3 	.word	0x10624dd3

08004370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e25b      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d075      	beq.n	800447a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438e:	4ba3      	ldr	r3, [pc, #652]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b04      	cmp	r3, #4
 8004398:	d00c      	beq.n	80043b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439a:	4ba0      	ldr	r3, [pc, #640]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d112      	bne.n	80043cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a6:	4b9d      	ldr	r3, [pc, #628]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b2:	d10b      	bne.n	80043cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	4b99      	ldr	r3, [pc, #612]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d05b      	beq.n	8004478 <HAL_RCC_OscConfig+0x108>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d157      	bne.n	8004478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e236      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d106      	bne.n	80043e4 <HAL_RCC_OscConfig+0x74>
 80043d6:	4b91      	ldr	r3, [pc, #580]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a90      	ldr	r2, [pc, #576]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e01d      	b.n	8004420 <HAL_RCC_OscConfig+0xb0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0x98>
 80043ee:	4b8b      	ldr	r3, [pc, #556]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a8a      	ldr	r2, [pc, #552]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b88      	ldr	r3, [pc, #544]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a87      	ldr	r2, [pc, #540]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0xb0>
 8004408:	4b84      	ldr	r3, [pc, #528]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a83      	ldr	r2, [pc, #524]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800440e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b81      	ldr	r3, [pc, #516]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a80      	ldr	r2, [pc, #512]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800441a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d013      	beq.n	8004450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fd f9e8 	bl	80017fc <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004430:	f7fd f9e4 	bl	80017fc <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e1fb      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	4b76      	ldr	r3, [pc, #472]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0xc0>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fd f9d4 	bl	80017fc <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004458:	f7fd f9d0 	bl	80017fc <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1e7      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	4b6c      	ldr	r3, [pc, #432]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0xe8>
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d063      	beq.n	800454e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004486:	4b65      	ldr	r3, [pc, #404]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004492:	4b62      	ldr	r3, [pc, #392]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800449a:	2b08      	cmp	r3, #8
 800449c:	d11c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449e:	4b5f      	ldr	r3, [pc, #380]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d116      	bne.n	80044d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	4b5c      	ldr	r3, [pc, #368]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_RCC_OscConfig+0x152>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d001      	beq.n	80044c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1bb      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c2:	4b56      	ldr	r3, [pc, #344]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4952      	ldr	r1, [pc, #328]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	e03a      	b.n	800454e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e0:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <HAL_RCC_OscConfig+0x2b0>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e6:	f7fd f989 	bl	80017fc <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ee:	f7fd f985 	bl	80017fc <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e19c      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	4b46      	ldr	r3, [pc, #280]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450c:	4b43      	ldr	r3, [pc, #268]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4940      	ldr	r1, [pc, #256]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
 8004520:	e015      	b.n	800454e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004522:	4b3f      	ldr	r3, [pc, #252]	; (8004620 <HAL_RCC_OscConfig+0x2b0>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fd f968 	bl	80017fc <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004530:	f7fd f964 	bl	80017fc <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e17b      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	4b36      	ldr	r3, [pc, #216]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d030      	beq.n	80045bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004562:	4b30      	ldr	r3, [pc, #192]	; (8004624 <HAL_RCC_OscConfig+0x2b4>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fd f948 	bl	80017fc <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004570:	f7fd f944 	bl	80017fc <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e15b      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 8004584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x200>
 800458e:	e015      	b.n	80045bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004590:	4b24      	ldr	r3, [pc, #144]	; (8004624 <HAL_RCC_OscConfig+0x2b4>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004596:	f7fd f931 	bl	80017fc <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459e:	f7fd f92d 	bl	80017fc <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e144      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80045b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80a0 	beq.w	800470a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ca:	2300      	movs	r3, #0
 80045cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10f      	bne.n	80045fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	4b0f      	ldr	r3, [pc, #60]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	4a0e      	ldr	r2, [pc, #56]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f2:	60bb      	str	r3, [r7, #8]
 80045f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <HAL_RCC_OscConfig+0x2b8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d121      	bne.n	800464a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004606:	4b08      	ldr	r3, [pc, #32]	; (8004628 <HAL_RCC_OscConfig+0x2b8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a07      	ldr	r2, [pc, #28]	; (8004628 <HAL_RCC_OscConfig+0x2b8>)
 800460c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004612:	f7fd f8f3 	bl	80017fc <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004618:	e011      	b.n	800463e <HAL_RCC_OscConfig+0x2ce>
 800461a:	bf00      	nop
 800461c:	40023800 	.word	0x40023800
 8004620:	42470000 	.word	0x42470000
 8004624:	42470e80 	.word	0x42470e80
 8004628:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462c:	f7fd f8e6 	bl	80017fc <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e0fd      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463e:	4b81      	ldr	r3, [pc, #516]	; (8004844 <HAL_RCC_OscConfig+0x4d4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d106      	bne.n	8004660 <HAL_RCC_OscConfig+0x2f0>
 8004652:	4b7d      	ldr	r3, [pc, #500]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	4a7c      	ldr	r2, [pc, #496]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	6713      	str	r3, [r2, #112]	; 0x70
 800465e:	e01c      	b.n	800469a <HAL_RCC_OscConfig+0x32a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b05      	cmp	r3, #5
 8004666:	d10c      	bne.n	8004682 <HAL_RCC_OscConfig+0x312>
 8004668:	4b77      	ldr	r3, [pc, #476]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	4a76      	ldr	r2, [pc, #472]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 800466e:	f043 0304 	orr.w	r3, r3, #4
 8004672:	6713      	str	r3, [r2, #112]	; 0x70
 8004674:	4b74      	ldr	r3, [pc, #464]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a73      	ldr	r2, [pc, #460]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
 8004680:	e00b      	b.n	800469a <HAL_RCC_OscConfig+0x32a>
 8004682:	4b71      	ldr	r3, [pc, #452]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	4a70      	ldr	r2, [pc, #448]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	6713      	str	r3, [r2, #112]	; 0x70
 800468e:	4b6e      	ldr	r3, [pc, #440]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a6d      	ldr	r2, [pc, #436]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 8004694:	f023 0304 	bic.w	r3, r3, #4
 8004698:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d015      	beq.n	80046ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a2:	f7fd f8ab 	bl	80017fc <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fd f8a7 	bl	80017fc <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0bc      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c0:	4b61      	ldr	r3, [pc, #388]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ee      	beq.n	80046aa <HAL_RCC_OscConfig+0x33a>
 80046cc:	e014      	b.n	80046f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ce:	f7fd f895 	bl	80017fc <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d4:	e00a      	b.n	80046ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d6:	f7fd f891 	bl	80017fc <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e0a6      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ec:	4b56      	ldr	r3, [pc, #344]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1ee      	bne.n	80046d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fe:	4b52      	ldr	r3, [pc, #328]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	4a51      	ldr	r2, [pc, #324]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 8004704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004708:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8092 	beq.w	8004838 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004714:	4b4c      	ldr	r3, [pc, #304]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b08      	cmp	r3, #8
 800471e:	d05c      	beq.n	80047da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d141      	bne.n	80047ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004728:	4b48      	ldr	r3, [pc, #288]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472e:	f7fd f865 	bl	80017fc <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004736:	f7fd f861 	bl	80017fc <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e078      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004748:	4b3f      	ldr	r3, [pc, #252]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f0      	bne.n	8004736 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	019b      	lsls	r3, r3, #6
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	3b01      	subs	r3, #1
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	061b      	lsls	r3, r3, #24
 8004778:	4933      	ldr	r1, [pc, #204]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 800477a:	4313      	orrs	r3, r2
 800477c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477e:	4b33      	ldr	r3, [pc, #204]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fd f83a 	bl	80017fc <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800478c:	f7fd f836 	bl	80017fc <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e04d      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479e:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0x41c>
 80047aa:	e045      	b.n	8004838 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ac:	4b27      	ldr	r3, [pc, #156]	; (800484c <HAL_RCC_OscConfig+0x4dc>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b2:	f7fd f823 	bl	80017fc <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ba:	f7fd f81f 	bl	80017fc <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e036      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047cc:	4b1e      	ldr	r3, [pc, #120]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f0      	bne.n	80047ba <HAL_RCC_OscConfig+0x44a>
 80047d8:	e02e      	b.n	8004838 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e029      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047e6:	4b18      	ldr	r3, [pc, #96]	; (8004848 <HAL_RCC_OscConfig+0x4d8>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d11c      	bne.n	8004834 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d115      	bne.n	8004834 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800480e:	4013      	ands	r3, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004814:	4293      	cmp	r3, r2
 8004816:	d10d      	bne.n	8004834 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004822:	429a      	cmp	r2, r3
 8004824:	d106      	bne.n	8004834 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40007000 	.word	0x40007000
 8004848:	40023800 	.word	0x40023800
 800484c:	42470060 	.word	0x42470060

08004850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0cc      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004864:	4b68      	ldr	r3, [pc, #416]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d90c      	bls.n	800488c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b65      	ldr	r3, [pc, #404]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b63      	ldr	r3, [pc, #396]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0b8      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a4:	4b59      	ldr	r3, [pc, #356]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a58      	ldr	r2, [pc, #352]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048bc:	4b53      	ldr	r3, [pc, #332]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a52      	ldr	r2, [pc, #328]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c8:	4b50      	ldr	r3, [pc, #320]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	494d      	ldr	r1, [pc, #308]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d044      	beq.n	8004970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d107      	bne.n	80048fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b47      	ldr	r3, [pc, #284]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d119      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e07f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d003      	beq.n	800490e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490a:	2b03      	cmp	r3, #3
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490e:	4b3f      	ldr	r3, [pc, #252]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e06f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491e:	4b3b      	ldr	r3, [pc, #236]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e067      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492e:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f023 0203 	bic.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4934      	ldr	r1, [pc, #208]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	4313      	orrs	r3, r2
 800493e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004940:	f7fc ff5c 	bl	80017fc <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	e00a      	b.n	800495e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004948:	f7fc ff58 	bl	80017fc <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e04f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	4b2b      	ldr	r3, [pc, #172]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 020c 	and.w	r2, r3, #12
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	429a      	cmp	r2, r3
 800496e:	d1eb      	bne.n	8004948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004970:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d20c      	bcs.n	8004998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e032      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4916      	ldr	r1, [pc, #88]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	490e      	ldr	r1, [pc, #56]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049d6:	f000 f821 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 80049da:	4602      	mov	r2, r0
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	490a      	ldr	r1, [pc, #40]	; (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 80049e8:	5ccb      	ldrb	r3, [r1, r3]
 80049ea:	fa22 f303 	lsr.w	r3, r2, r3
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049f2:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fc febc 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40023c00 	.word	0x40023c00
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	08008fb8 	.word	0x08008fb8
 8004a14:	20000004 	.word	0x20000004
 8004a18:	20000008 	.word	0x20000008

08004a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	607b      	str	r3, [r7, #4]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a34:	4b67      	ldr	r3, [pc, #412]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 030c 	and.w	r3, r3, #12
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0x40>
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	f200 80bd 	bhi.w	8004bc0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x34>
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a4e:	e0b7      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a50:	4b61      	ldr	r3, [pc, #388]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a52:	60bb      	str	r3, [r7, #8]
       break;
 8004a54:	e0b7      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a56:	4b61      	ldr	r3, [pc, #388]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a58:	60bb      	str	r3, [r7, #8]
      break;
 8004a5a:	e0b4      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a5c:	4b5d      	ldr	r3, [pc, #372]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a66:	4b5b      	ldr	r3, [pc, #364]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d04d      	beq.n	8004b0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a72:	4b58      	ldr	r3, [pc, #352]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a82:	f04f 0100 	mov.w	r1, #0
 8004a86:	ea02 0800 	and.w	r8, r2, r0
 8004a8a:	ea03 0901 	and.w	r9, r3, r1
 8004a8e:	4640      	mov	r0, r8
 8004a90:	4649      	mov	r1, r9
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	014b      	lsls	r3, r1, #5
 8004a9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004aa0:	0142      	lsls	r2, r0, #5
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	ebb0 0008 	subs.w	r0, r0, r8
 8004aaa:	eb61 0109 	sbc.w	r1, r1, r9
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	018b      	lsls	r3, r1, #6
 8004ab8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004abc:	0182      	lsls	r2, r0, #6
 8004abe:	1a12      	subs	r2, r2, r0
 8004ac0:	eb63 0301 	sbc.w	r3, r3, r1
 8004ac4:	f04f 0000 	mov.w	r0, #0
 8004ac8:	f04f 0100 	mov.w	r1, #0
 8004acc:	00d9      	lsls	r1, r3, #3
 8004ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ad2:	00d0      	lsls	r0, r2, #3
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	eb12 0208 	adds.w	r2, r2, r8
 8004adc:	eb43 0309 	adc.w	r3, r3, r9
 8004ae0:	f04f 0000 	mov.w	r0, #0
 8004ae4:	f04f 0100 	mov.w	r1, #0
 8004ae8:	0259      	lsls	r1, r3, #9
 8004aea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004aee:	0250      	lsls	r0, r2, #9
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	f7fb ffa0 	bl	8000a44 <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4613      	mov	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e04a      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0e:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	099b      	lsrs	r3, r3, #6
 8004b14:	461a      	mov	r2, r3
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	ea02 0400 	and.w	r4, r2, r0
 8004b26:	ea03 0501 	and.w	r5, r3, r1
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	014b      	lsls	r3, r1, #5
 8004b38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b3c:	0142      	lsls	r2, r0, #5
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	1b00      	subs	r0, r0, r4
 8004b44:	eb61 0105 	sbc.w	r1, r1, r5
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	018b      	lsls	r3, r1, #6
 8004b52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b56:	0182      	lsls	r2, r0, #6
 8004b58:	1a12      	subs	r2, r2, r0
 8004b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b5e:	f04f 0000 	mov.w	r0, #0
 8004b62:	f04f 0100 	mov.w	r1, #0
 8004b66:	00d9      	lsls	r1, r3, #3
 8004b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b6c:	00d0      	lsls	r0, r2, #3
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	1912      	adds	r2, r2, r4
 8004b74:	eb45 0303 	adc.w	r3, r5, r3
 8004b78:	f04f 0000 	mov.w	r0, #0
 8004b7c:	f04f 0100 	mov.w	r1, #0
 8004b80:	0299      	lsls	r1, r3, #10
 8004b82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b86:	0290      	lsls	r0, r2, #10
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4619      	mov	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	f7fb ff54 	bl	8000a44 <__aeabi_uldivmod>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	0c1b      	lsrs	r3, r3, #16
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	60bb      	str	r3, [r7, #8]
      break;
 8004bbe:	e002      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bc2:	60bb      	str	r3, [r7, #8]
      break;
 8004bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	00f42400 	.word	0x00f42400
 8004bdc:	007a1200 	.word	0x007a1200

08004be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be4:	4b03      	ldr	r3, [pc, #12]	; (8004bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004be6:	681b      	ldr	r3, [r3, #0]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000004 	.word	0x20000004

08004bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bfc:	f7ff fff0 	bl	8004be0 <HAL_RCC_GetHCLKFreq>
 8004c00:	4602      	mov	r2, r0
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	0a9b      	lsrs	r3, r3, #10
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	4903      	ldr	r1, [pc, #12]	; (8004c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c0e:	5ccb      	ldrb	r3, [r1, r3]
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	08008fc8 	.word	0x08008fc8

08004c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c24:	f7ff ffdc 	bl	8004be0 <HAL_RCC_GetHCLKFreq>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	0b5b      	lsrs	r3, r3, #13
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	4903      	ldr	r1, [pc, #12]	; (8004c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c36:	5ccb      	ldrb	r3, [r1, r3]
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40023800 	.word	0x40023800
 8004c44:	08008fc8 	.word	0x08008fc8

08004c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e03f      	b.n	8004cda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc fc1e 	bl	80014b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2224      	movs	r2, #36	; 0x24
 8004c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fb95 	bl	80053bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695a      	ldr	r2, [r3, #20]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d166      	bne.n	8004dcc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <HAL_UART_Receive_DMA+0x26>
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e05f      	b.n	8004dce <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_UART_Receive_DMA+0x38>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e058      	b.n	8004dce <HAL_UART_Receive_DMA+0xea>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	88fa      	ldrh	r2, [r7, #6]
 8004d2e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2222      	movs	r2, #34	; 0x22
 8004d3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d42:	4a25      	ldr	r2, [pc, #148]	; (8004dd8 <HAL_UART_Receive_DMA+0xf4>)
 8004d44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	4a24      	ldr	r2, [pc, #144]	; (8004ddc <HAL_UART_Receive_DMA+0xf8>)
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d52:	4a23      	ldr	r2, [pc, #140]	; (8004de0 <HAL_UART_Receive_DMA+0xfc>)
 8004d54:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004d5e:	f107 0308 	add.w	r3, r7, #8
 8004d62:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	4619      	mov	r1, r3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	f7fd f82b 	bl	8001dd0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004da6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e000      	b.n	8004dce <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004dcc:	2302      	movs	r3, #2
  }
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	08005035 	.word	0x08005035
 8004ddc:	0800509d 	.word	0x0800509d
 8004de0:	080050b9 	.word	0x080050b9

08004de4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_UART_IRQHandler+0x52>
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa42 	bl	80052b8 <UART_Receive_IT>
      return;
 8004e34:	e0d0      	b.n	8004fd8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80b0 	beq.w	8004f9e <HAL_UART_IRQHandler+0x1ba>
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <HAL_UART_IRQHandler+0x70>
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 80a5 	beq.w	8004f9e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_UART_IRQHandler+0x90>
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6c:	f043 0201 	orr.w	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_UART_IRQHandler+0xb0>
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8c:	f043 0202 	orr.w	r2, r3, #2
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_UART_IRQHandler+0xd0>
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eac:	f043 0204 	orr.w	r2, r3, #4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00f      	beq.n	8004ede <HAL_UART_IRQHandler+0xfa>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d104      	bne.n	8004ed2 <HAL_UART_IRQHandler+0xee>
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	f043 0208 	orr.w	r2, r3, #8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d077      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d007      	beq.n	8004f00 <HAL_UART_IRQHandler+0x11c>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f9dc 	bl	80052b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	2300      	movne	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <HAL_UART_IRQHandler+0x144>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d031      	beq.n	8004f8c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f925 	bl	8005178 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d123      	bne.n	8004f84 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d013      	beq.n	8004f7c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	4a21      	ldr	r2, [pc, #132]	; (8004fe0 <HAL_UART_IRQHandler+0x1fc>)
 8004f5a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fc ff8d 	bl	8001e80 <HAL_DMA_Abort_IT>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d016      	beq.n	8004f9a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f76:	4610      	mov	r0, r2
 8004f78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7a:	e00e      	b.n	8004f9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f84f 	bl	8005020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f82:	e00a      	b.n	8004f9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f84b 	bl	8005020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8a:	e006      	b.n	8004f9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f847 	bl	8005020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004f98:	e01d      	b.n	8004fd6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9a:	bf00      	nop
    return;
 8004f9c:	e01b      	b.n	8004fd6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <HAL_UART_IRQHandler+0x1d6>
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f912 	bl	80051dc <UART_Transmit_IT>
    return;
 8004fb8:	e00e      	b.n	8004fd8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d009      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x1f4>
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f95a 	bl	8005288 <UART_EndTransmit_IT>
    return;
 8004fd4:	e000      	b.n	8004fd8 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004fd6:	bf00      	nop
  }
}
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	080051b5 	.word	0x080051b5

08004fe4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504c:	2b00      	cmp	r3, #0
 800504e:	d11e      	bne.n	800508e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005064:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695a      	ldr	r2, [r3, #20]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005084:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff ffb2 	bl	8004ff8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff ffae 	bl	800500c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d4:	2b80      	cmp	r3, #128	; 0x80
 80050d6:	bf0c      	ite	eq
 80050d8:	2301      	moveq	r3, #1
 80050da:	2300      	movne	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b21      	cmp	r3, #33	; 0x21
 80050ea:	d108      	bne.n	80050fe <UART_DMAError+0x46>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2200      	movs	r2, #0
 80050f6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80050f8:	68b8      	ldr	r0, [r7, #8]
 80050fa:	f000 f827 	bl	800514c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b40      	cmp	r3, #64	; 0x40
 800510a:	bf0c      	ite	eq
 800510c:	2301      	moveq	r3, #1
 800510e:	2300      	movne	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b22      	cmp	r3, #34	; 0x22
 800511e:	d108      	bne.n	8005132 <UART_DMAError+0x7a>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2200      	movs	r2, #0
 800512a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800512c:	68b8      	ldr	r0, [r7, #8]
 800512e:	f000 f823 	bl	8005178 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005136:	f043 0210 	orr.w	r2, r3, #16
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800513e:	68b8      	ldr	r0, [r7, #8]
 8005140:	f7ff ff6e 	bl	8005020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005162:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800518e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695a      	ldr	r2, [r3, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0201 	bic.w	r2, r2, #1
 800519e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff ff26 	bl	8005020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b21      	cmp	r3, #33	; 0x21
 80051ee:	d144      	bne.n	800527a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f8:	d11a      	bne.n	8005230 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800520e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d105      	bne.n	8005224 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	1c9a      	adds	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]
 8005222:	e00e      	b.n	8005242 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	621a      	str	r2, [r3, #32]
 800522e:	e008      	b.n	8005242 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	1c59      	adds	r1, r3, #1
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6211      	str	r1, [r2, #32]
 800523a:	781a      	ldrb	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29b      	uxth	r3, r3
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4619      	mov	r1, r3
 8005250:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10f      	bne.n	8005276 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005264:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005274:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e000      	b.n	800527c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff fe9b 	bl	8004fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b22      	cmp	r3, #34	; 0x22
 80052ca:	d171      	bne.n	80053b0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d4:	d123      	bne.n	800531e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10e      	bne.n	8005302 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	1c9a      	adds	r2, r3, #2
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005300:	e029      	b.n	8005356 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	b29b      	uxth	r3, r3
 800530a:	b2db      	uxtb	r3, r3
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	629a      	str	r2, [r3, #40]	; 0x28
 800531c:	e01b      	b.n	8005356 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6858      	ldr	r0, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	1c59      	adds	r1, r3, #1
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6291      	str	r1, [r2, #40]	; 0x28
 8005336:	b2c2      	uxtb	r2, r0
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	e00c      	b.n	8005356 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	1c58      	adds	r0, r3, #1
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	6288      	str	r0, [r1, #40]	; 0x28
 800534e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29b      	uxth	r3, r3
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4619      	mov	r1, r3
 8005364:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005366:	2b00      	cmp	r3, #0
 8005368:	d120      	bne.n	80053ac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0220 	bic.w	r2, r2, #32
 8005378:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005388:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0201 	bic.w	r2, r2, #1
 8005398:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff fe28 	bl	8004ff8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e002      	b.n	80053b2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e000      	b.n	80053b2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
  }
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c0:	b0bd      	sub	sp, #244	; 0xf4
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d8:	68d9      	ldr	r1, [r3, #12]
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	ea40 0301 	orr.w	r3, r0, r1
 80053e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005414:	f021 010c 	bic.w	r1, r1, #12
 8005418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005422:	430b      	orrs	r3, r1
 8005424:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005436:	6999      	ldr	r1, [r3, #24]
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	ea40 0301 	orr.w	r3, r0, r1
 8005442:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544e:	f040 81a5 	bne.w	800579c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	4bcd      	ldr	r3, [pc, #820]	; (8005790 <UART_SetConfig+0x3d4>)
 800545a:	429a      	cmp	r2, r3
 800545c:	d006      	beq.n	800546c <UART_SetConfig+0xb0>
 800545e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	4bcb      	ldr	r3, [pc, #812]	; (8005794 <UART_SetConfig+0x3d8>)
 8005466:	429a      	cmp	r2, r3
 8005468:	f040 80cb 	bne.w	8005602 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800546c:	f7ff fbd8 	bl	8004c20 <HAL_RCC_GetPCLK2Freq>
 8005470:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005474:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005478:	461c      	mov	r4, r3
 800547a:	f04f 0500 	mov.w	r5, #0
 800547e:	4622      	mov	r2, r4
 8005480:	462b      	mov	r3, r5
 8005482:	1891      	adds	r1, r2, r2
 8005484:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005488:	415b      	adcs	r3, r3
 800548a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800548e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005492:	1912      	adds	r2, r2, r4
 8005494:	eb45 0303 	adc.w	r3, r5, r3
 8005498:	f04f 0000 	mov.w	r0, #0
 800549c:	f04f 0100 	mov.w	r1, #0
 80054a0:	00d9      	lsls	r1, r3, #3
 80054a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054a6:	00d0      	lsls	r0, r2, #3
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	1911      	adds	r1, r2, r4
 80054ae:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80054b2:	416b      	adcs	r3, r5
 80054b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	461a      	mov	r2, r3
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	1891      	adds	r1, r2, r2
 80054c6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80054ca:	415b      	adcs	r3, r3
 80054cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054d0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80054d4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80054d8:	f7fb fab4 	bl	8000a44 <__aeabi_uldivmod>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4bad      	ldr	r3, [pc, #692]	; (8005798 <UART_SetConfig+0x3dc>)
 80054e2:	fba3 2302 	umull	r2, r3, r3, r2
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	011e      	lsls	r6, r3, #4
 80054ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054ee:	461c      	mov	r4, r3
 80054f0:	f04f 0500 	mov.w	r5, #0
 80054f4:	4622      	mov	r2, r4
 80054f6:	462b      	mov	r3, r5
 80054f8:	1891      	adds	r1, r2, r2
 80054fa:	67b9      	str	r1, [r7, #120]	; 0x78
 80054fc:	415b      	adcs	r3, r3
 80054fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005500:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005504:	1912      	adds	r2, r2, r4
 8005506:	eb45 0303 	adc.w	r3, r5, r3
 800550a:	f04f 0000 	mov.w	r0, #0
 800550e:	f04f 0100 	mov.w	r1, #0
 8005512:	00d9      	lsls	r1, r3, #3
 8005514:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005518:	00d0      	lsls	r0, r2, #3
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	1911      	adds	r1, r2, r4
 8005520:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005524:	416b      	adcs	r3, r5
 8005526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800552a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	461a      	mov	r2, r3
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	1891      	adds	r1, r2, r2
 8005538:	6739      	str	r1, [r7, #112]	; 0x70
 800553a:	415b      	adcs	r3, r3
 800553c:	677b      	str	r3, [r7, #116]	; 0x74
 800553e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005542:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005546:	f7fb fa7d 	bl	8000a44 <__aeabi_uldivmod>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4b92      	ldr	r3, [pc, #584]	; (8005798 <UART_SetConfig+0x3dc>)
 8005550:	fba3 1302 	umull	r1, r3, r3, r2
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	2164      	movs	r1, #100	; 0x64
 8005558:	fb01 f303 	mul.w	r3, r1, r3
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	3332      	adds	r3, #50	; 0x32
 8005562:	4a8d      	ldr	r2, [pc, #564]	; (8005798 <UART_SetConfig+0x3dc>)
 8005564:	fba2 2303 	umull	r2, r3, r2, r3
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005570:	441e      	add	r6, r3
 8005572:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005576:	4618      	mov	r0, r3
 8005578:	f04f 0100 	mov.w	r1, #0
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	1894      	adds	r4, r2, r2
 8005582:	66bc      	str	r4, [r7, #104]	; 0x68
 8005584:	415b      	adcs	r3, r3
 8005586:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005588:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800558c:	1812      	adds	r2, r2, r0
 800558e:	eb41 0303 	adc.w	r3, r1, r3
 8005592:	f04f 0400 	mov.w	r4, #0
 8005596:	f04f 0500 	mov.w	r5, #0
 800559a:	00dd      	lsls	r5, r3, #3
 800559c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055a0:	00d4      	lsls	r4, r2, #3
 80055a2:	4622      	mov	r2, r4
 80055a4:	462b      	mov	r3, r5
 80055a6:	1814      	adds	r4, r2, r0
 80055a8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80055ac:	414b      	adcs	r3, r1
 80055ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	461a      	mov	r2, r3
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	1891      	adds	r1, r2, r2
 80055c0:	6639      	str	r1, [r7, #96]	; 0x60
 80055c2:	415b      	adcs	r3, r3
 80055c4:	667b      	str	r3, [r7, #100]	; 0x64
 80055c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80055ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055ce:	f7fb fa39 	bl	8000a44 <__aeabi_uldivmod>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4b70      	ldr	r3, [pc, #448]	; (8005798 <UART_SetConfig+0x3dc>)
 80055d8:	fba3 1302 	umull	r1, r3, r3, r2
 80055dc:	095b      	lsrs	r3, r3, #5
 80055de:	2164      	movs	r1, #100	; 0x64
 80055e0:	fb01 f303 	mul.w	r3, r1, r3
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	3332      	adds	r3, #50	; 0x32
 80055ea:	4a6b      	ldr	r2, [pc, #428]	; (8005798 <UART_SetConfig+0x3dc>)
 80055ec:	fba2 2303 	umull	r2, r3, r2, r3
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	f003 0207 	and.w	r2, r3, #7
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4432      	add	r2, r6
 80055fe:	609a      	str	r2, [r3, #8]
 8005600:	e26d      	b.n	8005ade <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005602:	f7ff faf9 	bl	8004bf8 <HAL_RCC_GetPCLK1Freq>
 8005606:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800560a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800560e:	461c      	mov	r4, r3
 8005610:	f04f 0500 	mov.w	r5, #0
 8005614:	4622      	mov	r2, r4
 8005616:	462b      	mov	r3, r5
 8005618:	1891      	adds	r1, r2, r2
 800561a:	65b9      	str	r1, [r7, #88]	; 0x58
 800561c:	415b      	adcs	r3, r3
 800561e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005620:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005624:	1912      	adds	r2, r2, r4
 8005626:	eb45 0303 	adc.w	r3, r5, r3
 800562a:	f04f 0000 	mov.w	r0, #0
 800562e:	f04f 0100 	mov.w	r1, #0
 8005632:	00d9      	lsls	r1, r3, #3
 8005634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005638:	00d0      	lsls	r0, r2, #3
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	1911      	adds	r1, r2, r4
 8005640:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005644:	416b      	adcs	r3, r5
 8005646:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800564a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	461a      	mov	r2, r3
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	1891      	adds	r1, r2, r2
 8005658:	6539      	str	r1, [r7, #80]	; 0x50
 800565a:	415b      	adcs	r3, r3
 800565c:	657b      	str	r3, [r7, #84]	; 0x54
 800565e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005662:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005666:	f7fb f9ed 	bl	8000a44 <__aeabi_uldivmod>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	4b4a      	ldr	r3, [pc, #296]	; (8005798 <UART_SetConfig+0x3dc>)
 8005670:	fba3 2302 	umull	r2, r3, r3, r2
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	011e      	lsls	r6, r3, #4
 8005678:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800567c:	461c      	mov	r4, r3
 800567e:	f04f 0500 	mov.w	r5, #0
 8005682:	4622      	mov	r2, r4
 8005684:	462b      	mov	r3, r5
 8005686:	1891      	adds	r1, r2, r2
 8005688:	64b9      	str	r1, [r7, #72]	; 0x48
 800568a:	415b      	adcs	r3, r3
 800568c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800568e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005692:	1912      	adds	r2, r2, r4
 8005694:	eb45 0303 	adc.w	r3, r5, r3
 8005698:	f04f 0000 	mov.w	r0, #0
 800569c:	f04f 0100 	mov.w	r1, #0
 80056a0:	00d9      	lsls	r1, r3, #3
 80056a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056a6:	00d0      	lsls	r0, r2, #3
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	1911      	adds	r1, r2, r4
 80056ae:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80056b2:	416b      	adcs	r3, r5
 80056b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80056b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	461a      	mov	r2, r3
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	1891      	adds	r1, r2, r2
 80056c6:	6439      	str	r1, [r7, #64]	; 0x40
 80056c8:	415b      	adcs	r3, r3
 80056ca:	647b      	str	r3, [r7, #68]	; 0x44
 80056cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056d0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80056d4:	f7fb f9b6 	bl	8000a44 <__aeabi_uldivmod>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4b2e      	ldr	r3, [pc, #184]	; (8005798 <UART_SetConfig+0x3dc>)
 80056de:	fba3 1302 	umull	r1, r3, r3, r2
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	2164      	movs	r1, #100	; 0x64
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	3332      	adds	r3, #50	; 0x32
 80056f0:	4a29      	ldr	r2, [pc, #164]	; (8005798 <UART_SetConfig+0x3dc>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056fe:	441e      	add	r6, r3
 8005700:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005704:	4618      	mov	r0, r3
 8005706:	f04f 0100 	mov.w	r1, #0
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	1894      	adds	r4, r2, r2
 8005710:	63bc      	str	r4, [r7, #56]	; 0x38
 8005712:	415b      	adcs	r3, r3
 8005714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005716:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800571a:	1812      	adds	r2, r2, r0
 800571c:	eb41 0303 	adc.w	r3, r1, r3
 8005720:	f04f 0400 	mov.w	r4, #0
 8005724:	f04f 0500 	mov.w	r5, #0
 8005728:	00dd      	lsls	r5, r3, #3
 800572a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800572e:	00d4      	lsls	r4, r2, #3
 8005730:	4622      	mov	r2, r4
 8005732:	462b      	mov	r3, r5
 8005734:	1814      	adds	r4, r2, r0
 8005736:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800573a:	414b      	adcs	r3, r1
 800573c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	461a      	mov	r2, r3
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	1891      	adds	r1, r2, r2
 800574e:	6339      	str	r1, [r7, #48]	; 0x30
 8005750:	415b      	adcs	r3, r3
 8005752:	637b      	str	r3, [r7, #52]	; 0x34
 8005754:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005758:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800575c:	f7fb f972 	bl	8000a44 <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <UART_SetConfig+0x3dc>)
 8005766:	fba3 1302 	umull	r1, r3, r3, r2
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	2164      	movs	r1, #100	; 0x64
 800576e:	fb01 f303 	mul.w	r3, r1, r3
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	3332      	adds	r3, #50	; 0x32
 8005778:	4a07      	ldr	r2, [pc, #28]	; (8005798 <UART_SetConfig+0x3dc>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	f003 0207 	and.w	r2, r3, #7
 8005784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4432      	add	r2, r6
 800578c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800578e:	e1a6      	b.n	8005ade <UART_SetConfig+0x722>
 8005790:	40011000 	.word	0x40011000
 8005794:	40011400 	.word	0x40011400
 8005798:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800579c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4bd1      	ldr	r3, [pc, #836]	; (8005ae8 <UART_SetConfig+0x72c>)
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d006      	beq.n	80057b6 <UART_SetConfig+0x3fa>
 80057a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4bcf      	ldr	r3, [pc, #828]	; (8005aec <UART_SetConfig+0x730>)
 80057b0:	429a      	cmp	r2, r3
 80057b2:	f040 80ca 	bne.w	800594a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80057b6:	f7ff fa33 	bl	8004c20 <HAL_RCC_GetPCLK2Freq>
 80057ba:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057c2:	461c      	mov	r4, r3
 80057c4:	f04f 0500 	mov.w	r5, #0
 80057c8:	4622      	mov	r2, r4
 80057ca:	462b      	mov	r3, r5
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80057d0:	415b      	adcs	r3, r3
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057d8:	1912      	adds	r2, r2, r4
 80057da:	eb45 0303 	adc.w	r3, r5, r3
 80057de:	f04f 0000 	mov.w	r0, #0
 80057e2:	f04f 0100 	mov.w	r1, #0
 80057e6:	00d9      	lsls	r1, r3, #3
 80057e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057ec:	00d0      	lsls	r0, r2, #3
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	eb12 0a04 	adds.w	sl, r2, r4
 80057f6:	eb43 0b05 	adc.w	fp, r3, r5
 80057fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	4618      	mov	r0, r3
 8005802:	f04f 0100 	mov.w	r1, #0
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	008b      	lsls	r3, r1, #2
 8005810:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005814:	0082      	lsls	r2, r0, #2
 8005816:	4650      	mov	r0, sl
 8005818:	4659      	mov	r1, fp
 800581a:	f7fb f913 	bl	8000a44 <__aeabi_uldivmod>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4bb3      	ldr	r3, [pc, #716]	; (8005af0 <UART_SetConfig+0x734>)
 8005824:	fba3 2302 	umull	r2, r3, r3, r2
 8005828:	095b      	lsrs	r3, r3, #5
 800582a:	011e      	lsls	r6, r3, #4
 800582c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005830:	4618      	mov	r0, r3
 8005832:	f04f 0100 	mov.w	r1, #0
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	1894      	adds	r4, r2, r2
 800583c:	623c      	str	r4, [r7, #32]
 800583e:	415b      	adcs	r3, r3
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
 8005842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005846:	1812      	adds	r2, r2, r0
 8005848:	eb41 0303 	adc.w	r3, r1, r3
 800584c:	f04f 0400 	mov.w	r4, #0
 8005850:	f04f 0500 	mov.w	r5, #0
 8005854:	00dd      	lsls	r5, r3, #3
 8005856:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800585a:	00d4      	lsls	r4, r2, #3
 800585c:	4622      	mov	r2, r4
 800585e:	462b      	mov	r3, r5
 8005860:	1814      	adds	r4, r2, r0
 8005862:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005866:	414b      	adcs	r3, r1
 8005868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800586c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	4618      	mov	r0, r3
 8005874:	f04f 0100 	mov.w	r1, #0
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	008b      	lsls	r3, r1, #2
 8005882:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005886:	0082      	lsls	r2, r0, #2
 8005888:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800588c:	f7fb f8da 	bl	8000a44 <__aeabi_uldivmod>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4b96      	ldr	r3, [pc, #600]	; (8005af0 <UART_SetConfig+0x734>)
 8005896:	fba3 1302 	umull	r1, r3, r3, r2
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	2164      	movs	r1, #100	; 0x64
 800589e:	fb01 f303 	mul.w	r3, r1, r3
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	3332      	adds	r3, #50	; 0x32
 80058a8:	4a91      	ldr	r2, [pc, #580]	; (8005af0 <UART_SetConfig+0x734>)
 80058aa:	fba2 2303 	umull	r2, r3, r2, r3
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b4:	441e      	add	r6, r3
 80058b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058ba:	4618      	mov	r0, r3
 80058bc:	f04f 0100 	mov.w	r1, #0
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	1894      	adds	r4, r2, r2
 80058c6:	61bc      	str	r4, [r7, #24]
 80058c8:	415b      	adcs	r3, r3
 80058ca:	61fb      	str	r3, [r7, #28]
 80058cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058d0:	1812      	adds	r2, r2, r0
 80058d2:	eb41 0303 	adc.w	r3, r1, r3
 80058d6:	f04f 0400 	mov.w	r4, #0
 80058da:	f04f 0500 	mov.w	r5, #0
 80058de:	00dd      	lsls	r5, r3, #3
 80058e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058e4:	00d4      	lsls	r4, r2, #3
 80058e6:	4622      	mov	r2, r4
 80058e8:	462b      	mov	r3, r5
 80058ea:	1814      	adds	r4, r2, r0
 80058ec:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80058f0:	414b      	adcs	r3, r1
 80058f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f04f 0100 	mov.w	r1, #0
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	008b      	lsls	r3, r1, #2
 800590c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005910:	0082      	lsls	r2, r0, #2
 8005912:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005916:	f7fb f895 	bl	8000a44 <__aeabi_uldivmod>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4b74      	ldr	r3, [pc, #464]	; (8005af0 <UART_SetConfig+0x734>)
 8005920:	fba3 1302 	umull	r1, r3, r3, r2
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	2164      	movs	r1, #100	; 0x64
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	3332      	adds	r3, #50	; 0x32
 8005932:	4a6f      	ldr	r2, [pc, #444]	; (8005af0 <UART_SetConfig+0x734>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	f003 020f 	and.w	r2, r3, #15
 800593e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4432      	add	r2, r6
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	e0c9      	b.n	8005ade <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800594a:	f7ff f955 	bl	8004bf8 <HAL_RCC_GetPCLK1Freq>
 800594e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005952:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005956:	461c      	mov	r4, r3
 8005958:	f04f 0500 	mov.w	r5, #0
 800595c:	4622      	mov	r2, r4
 800595e:	462b      	mov	r3, r5
 8005960:	1891      	adds	r1, r2, r2
 8005962:	6139      	str	r1, [r7, #16]
 8005964:	415b      	adcs	r3, r3
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800596c:	1912      	adds	r2, r2, r4
 800596e:	eb45 0303 	adc.w	r3, r5, r3
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f04f 0100 	mov.w	r1, #0
 800597a:	00d9      	lsls	r1, r3, #3
 800597c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005980:	00d0      	lsls	r0, r2, #3
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	eb12 0804 	adds.w	r8, r2, r4
 800598a:	eb43 0905 	adc.w	r9, r3, r5
 800598e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	4618      	mov	r0, r3
 8005996:	f04f 0100 	mov.w	r1, #0
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	008b      	lsls	r3, r1, #2
 80059a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059a8:	0082      	lsls	r2, r0, #2
 80059aa:	4640      	mov	r0, r8
 80059ac:	4649      	mov	r1, r9
 80059ae:	f7fb f849 	bl	8000a44 <__aeabi_uldivmod>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4b4e      	ldr	r3, [pc, #312]	; (8005af0 <UART_SetConfig+0x734>)
 80059b8:	fba3 2302 	umull	r2, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	011e      	lsls	r6, r3, #4
 80059c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059c4:	4618      	mov	r0, r3
 80059c6:	f04f 0100 	mov.w	r1, #0
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	1894      	adds	r4, r2, r2
 80059d0:	60bc      	str	r4, [r7, #8]
 80059d2:	415b      	adcs	r3, r3
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059da:	1812      	adds	r2, r2, r0
 80059dc:	eb41 0303 	adc.w	r3, r1, r3
 80059e0:	f04f 0400 	mov.w	r4, #0
 80059e4:	f04f 0500 	mov.w	r5, #0
 80059e8:	00dd      	lsls	r5, r3, #3
 80059ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059ee:	00d4      	lsls	r4, r2, #3
 80059f0:	4622      	mov	r2, r4
 80059f2:	462b      	mov	r3, r5
 80059f4:	1814      	adds	r4, r2, r0
 80059f6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80059fa:	414b      	adcs	r3, r1
 80059fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f04f 0100 	mov.w	r1, #0
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	008b      	lsls	r3, r1, #2
 8005a16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a1a:	0082      	lsls	r2, r0, #2
 8005a1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a20:	f7fb f810 	bl	8000a44 <__aeabi_uldivmod>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4b31      	ldr	r3, [pc, #196]	; (8005af0 <UART_SetConfig+0x734>)
 8005a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	2164      	movs	r1, #100	; 0x64
 8005a32:	fb01 f303 	mul.w	r3, r1, r3
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	3332      	adds	r3, #50	; 0x32
 8005a3c:	4a2c      	ldr	r2, [pc, #176]	; (8005af0 <UART_SetConfig+0x734>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a48:	441e      	add	r6, r3
 8005a4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f04f 0100 	mov.w	r1, #0
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	1894      	adds	r4, r2, r2
 8005a5a:	603c      	str	r4, [r7, #0]
 8005a5c:	415b      	adcs	r3, r3
 8005a5e:	607b      	str	r3, [r7, #4]
 8005a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a64:	1812      	adds	r2, r2, r0
 8005a66:	eb41 0303 	adc.w	r3, r1, r3
 8005a6a:	f04f 0400 	mov.w	r4, #0
 8005a6e:	f04f 0500 	mov.w	r5, #0
 8005a72:	00dd      	lsls	r5, r3, #3
 8005a74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a78:	00d4      	lsls	r4, r2, #3
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	1814      	adds	r4, r2, r0
 8005a80:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005a84:	414b      	adcs	r3, r1
 8005a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f04f 0100 	mov.w	r1, #0
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	008b      	lsls	r3, r1, #2
 8005aa0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005aa4:	0082      	lsls	r2, r0, #2
 8005aa6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005aaa:	f7fa ffcb 	bl	8000a44 <__aeabi_uldivmod>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <UART_SetConfig+0x734>)
 8005ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	2164      	movs	r1, #100	; 0x64
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	3332      	adds	r3, #50	; 0x32
 8005ac6:	4a0a      	ldr	r2, [pc, #40]	; (8005af0 <UART_SetConfig+0x734>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	f003 020f 	and.w	r2, r3, #15
 8005ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4432      	add	r2, r6
 8005ada:	609a      	str	r2, [r3, #8]
}
 8005adc:	e7ff      	b.n	8005ade <UART_SetConfig+0x722>
 8005ade:	bf00      	nop
 8005ae0:	37f4      	adds	r7, #244	; 0xf4
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae8:	40011000 	.word	0x40011000
 8005aec:	40011400 	.word	0x40011400
 8005af0:	51eb851f 	.word	0x51eb851f

08005af4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005af4:	b084      	sub	sp, #16
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	f107 001c 	add.w	r0, r7, #28
 8005b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d122      	bne.n	8005b52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d105      	bne.n	8005b46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f94a 	bl	8005de0 <USB_CoreReset>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	73fb      	strb	r3, [r7, #15]
 8005b50:	e01a      	b.n	8005b88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f93e 	bl	8005de0 <USB_CoreReset>
 8005b64:	4603      	mov	r3, r0
 8005b66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38
 8005b7a:	e005      	b.n	8005b88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d10b      	bne.n	8005ba6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f043 0206 	orr.w	r2, r3, #6
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f043 0220 	orr.w	r2, r3, #32
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bb2:	b004      	add	sp, #16
 8005bb4:	4770      	bx	lr

08005bb6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f043 0201 	orr.w	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f023 0201 	bic.w	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	460b      	mov	r3, r1
 8005c04:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d106      	bne.n	8005c26 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60da      	str	r2, [r3, #12]
 8005c24:	e00b      	b.n	8005c3e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c26:	78fb      	ldrb	r3, [r7, #3]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60da      	str	r2, [r3, #12]
 8005c38:	e001      	b.n	8005c3e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e003      	b.n	8005c46 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c3e:	2032      	movs	r0, #50	; 0x32
 8005c40:	f7fb fde8 	bl	8001814 <HAL_Delay>

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	019b      	lsls	r3, r3, #6
 8005c62:	f043 0220 	orr.w	r2, r3, #32
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <USB_FlushTxFifo+0x48>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d901      	bls.n	8005c7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e006      	b.n	8005c8a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d0f0      	beq.n	8005c6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	00030d40 	.word	0x00030d40

08005c9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2210      	movs	r2, #16
 8005cac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4a09      	ldr	r2, [pc, #36]	; (8005cdc <USB_FlushRxFifo+0x40>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d901      	bls.n	8005cc0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e006      	b.n	8005cce <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b10      	cmp	r3, #16
 8005cca:	d0f0      	beq.n	8005cae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	00030d40 	.word	0x00030d40

08005ce0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b089      	sub	sp, #36	; 0x24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	4611      	mov	r1, r2
 8005cec:	461a      	mov	r2, r3
 8005cee:	460b      	mov	r3, r1
 8005cf0:	71fb      	strb	r3, [r7, #7]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005cfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d11a      	bne.n	8005d3c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d06:	88bb      	ldrh	r3, [r7, #4]
 8005d08:	3303      	adds	r3, #3
 8005d0a:	089b      	lsrs	r3, r3, #2
 8005d0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	e00f      	b.n	8005d34 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	031a      	lsls	r2, r3, #12
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d20:	461a      	mov	r2, r3
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	3301      	adds	r3, #1
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d3eb      	bcc.n	8005d14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3724      	adds	r7, #36	; 0x24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b089      	sub	sp, #36	; 0x24
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	4613      	mov	r3, r2
 8005d56:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	3303      	adds	r3, #3
 8005d64:	089b      	lsrs	r3, r3, #2
 8005d66:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	e00b      	b.n	8005d86 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	3301      	adds	r3, #1
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d3ef      	bcc.n	8005d6e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005d8e:	69fb      	ldr	r3, [r7, #28]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3724      	adds	r7, #36	; 0x24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4013      	ands	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005db4:	68fb      	ldr	r3, [r7, #12]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f003 0301 	and.w	r3, r3, #1
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3301      	adds	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4a13      	ldr	r2, [pc, #76]	; (8005e44 <USB_CoreReset+0x64>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d901      	bls.n	8005dfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e01b      	b.n	8005e36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	daf2      	bge.n	8005dec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f043 0201 	orr.w	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4a09      	ldr	r2, [pc, #36]	; (8005e44 <USB_CoreReset+0x64>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e006      	b.n	8005e36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d0f0      	beq.n	8005e16 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	00030d40 	.word	0x00030d40

08005e48 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e48:	b084      	sub	sp, #16
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	f107 001c 	add.w	r0, r7, #28
 8005e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e64:	461a      	mov	r2, r3
 8005e66:	2300      	movs	r3, #0
 8005e68:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d018      	beq.n	8005ecc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d10a      	bne.n	8005eb6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005eae:	f043 0304 	orr.w	r3, r3, #4
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	e014      	b.n	8005ee0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ec4:	f023 0304 	bic.w	r3, r3, #4
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	e009      	b.n	8005ee0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005eda:	f023 0304 	bic.w	r3, r3, #4
 8005ede:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005ee0:	2110      	movs	r1, #16
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff feb4 	bl	8005c50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff fed7 	bl	8005c9c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	e015      	b.n	8005f20 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f00:	461a      	mov	r2, r3
 8005f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f06:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f14:	461a      	mov	r2, r3
 8005f16:	2300      	movs	r3, #0
 8005f18:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d3e5      	bcc.n	8005ef4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005f28:	2101      	movs	r1, #1
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f8ac 	bl	8006088 <USB_DriveVbus>

  HAL_Delay(200U);
 8005f30:	20c8      	movs	r0, #200	; 0xc8
 8005f32:	f7fb fc6f 	bl	8001814 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f42:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f56:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a14      	ldr	r2, [pc, #80]	; (8005fac <USB_HostInit+0x164>)
 8005f5c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <USB_HostInit+0x168>)
 8005f62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005f66:	e009      	b.n	8005f7c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2280      	movs	r2, #128	; 0x80
 8005f6c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a10      	ldr	r2, [pc, #64]	; (8005fb4 <USB_HostInit+0x16c>)
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a10      	ldr	r2, [pc, #64]	; (8005fb8 <USB_HostInit+0x170>)
 8005f78:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d105      	bne.n	8005f8e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f043 0210 	orr.w	r2, r3, #16
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <USB_HostInit+0x174>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fa6:	b004      	add	sp, #16
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	01000200 	.word	0x01000200
 8005fb0:	00e00300 	.word	0x00e00300
 8005fb4:	00600080 	.word	0x00600080
 8005fb8:	004000e0 	.word	0x004000e0
 8005fbc:	a3200008 	.word	0xa3200008

08005fc0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fde:	f023 0303 	bic.w	r3, r3, #3
 8005fe2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	68f9      	ldr	r1, [r7, #12]
 8005ff4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d107      	bne.n	8006012 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006008:	461a      	mov	r2, r3
 800600a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800600e:	6053      	str	r3, [r2, #4]
 8006010:	e009      	b.n	8006026 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d106      	bne.n	8006026 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601e:	461a      	mov	r2, r3
 8006020:	f241 7370 	movw	r3, #6000	; 0x1770
 8006024:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006054:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800605e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006062:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006064:	2064      	movs	r0, #100	; 0x64
 8006066:	f7fb fbd5 	bl	8001814 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006076:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006078:	200a      	movs	r0, #10
 800607a:	f7fb fbcb 	bl	8001814 <HAL_Delay>

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d109      	bne.n	80060cc <USB_DriveVbus+0x44>
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d106      	bne.n	80060cc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060ca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d6:	d109      	bne.n	80060ec <USB_DriveVbus+0x64>
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b085      	sub	sp, #20
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	0c5b      	lsrs	r3, r3, #17
 8006118:	f003 0303 	and.w	r3, r3, #3
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	b29b      	uxth	r3, r3
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	4608      	mov	r0, r1
 8006156:	4611      	mov	r1, r2
 8006158:	461a      	mov	r2, r3
 800615a:	4603      	mov	r3, r0
 800615c:	70fb      	strb	r3, [r7, #3]
 800615e:	460b      	mov	r3, r1
 8006160:	70bb      	strb	r3, [r7, #2]
 8006162:	4613      	mov	r3, r2
 8006164:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	4413      	add	r3, r2
 8006176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617a:	461a      	mov	r2, r3
 800617c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006180:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006182:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006186:	2b03      	cmp	r3, #3
 8006188:	d87e      	bhi.n	8006288 <USB_HC_Init+0x13c>
 800618a:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <USB_HC_Init+0x44>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061a1 	.word	0x080061a1
 8006194:	0800624b 	.word	0x0800624b
 8006198:	080061a1 	.word	0x080061a1
 800619c:	0800620d 	.word	0x0800620d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ac:	461a      	mov	r2, r3
 80061ae:	f240 439d 	movw	r3, #1181	; 0x49d
 80061b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80061b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	da10      	bge.n	80061de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	0151      	lsls	r1, r2, #5
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	440a      	add	r2, r1
 80061d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061da:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80061dc:	e057      	b.n	800628e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d051      	beq.n	800628e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	78fa      	ldrb	r2, [r7, #3]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006204:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006208:	60d3      	str	r3, [r2, #12]
      break;
 800620a:	e040      	b.n	800628e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4413      	add	r3, r2
 8006214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006218:	461a      	mov	r2, r3
 800621a:	f240 639d 	movw	r3, #1693	; 0x69d
 800621e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006220:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006224:	2b00      	cmp	r3, #0
 8006226:	da34      	bge.n	8006292 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	78fa      	ldrb	r2, [r7, #3]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	440a      	add	r2, r1
 800623e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006246:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006248:	e023      	b.n	8006292 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4413      	add	r3, r2
 8006252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006256:	461a      	mov	r2, r3
 8006258:	f240 2325 	movw	r3, #549	; 0x225
 800625c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800625e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006262:	2b00      	cmp	r3, #0
 8006264:	da17      	bge.n	8006296 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4413      	add	r3, r2
 800626e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	78fa      	ldrb	r2, [r7, #3]
 8006276:	0151      	lsls	r1, r2, #5
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	440a      	add	r2, r1
 800627c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006280:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006284:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006286:	e006      	b.n	8006296 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	75fb      	strb	r3, [r7, #23]
      break;
 800628c:	e004      	b.n	8006298 <USB_HC_Init+0x14c>
      break;
 800628e:	bf00      	nop
 8006290:	e002      	b.n	8006298 <USB_HC_Init+0x14c>
      break;
 8006292:	bf00      	nop
 8006294:	e000      	b.n	8006298 <USB_HC_Init+0x14c>
      break;
 8006296:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800629e:	699a      	ldr	r2, [r3, #24]
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	2101      	movs	r1, #1
 80062a8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062b2:	4313      	orrs	r3, r2
 80062b4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80062c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	da03      	bge.n	80062d2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80062ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	e001      	b.n	80062d6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80062d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d103      	bne.n	80062e6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e001      	b.n	80062ea <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062ea:	787b      	ldrb	r3, [r7, #1]
 80062ec:	059b      	lsls	r3, r3, #22
 80062ee:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062f2:	78bb      	ldrb	r3, [r7, #2]
 80062f4:	02db      	lsls	r3, r3, #11
 80062f6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062fa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006300:	049b      	lsls	r3, r3, #18
 8006302:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006306:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006308:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800630a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800630e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	0159      	lsls	r1, r3, #5
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	440b      	add	r3, r1
 800631c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006320:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006326:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006328:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800632c:	2b03      	cmp	r3, #3
 800632e:	d10f      	bne.n	8006350 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4413      	add	r3, r2
 8006338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	78fa      	ldrb	r2, [r7, #3]
 8006340:	0151      	lsls	r1, r2, #5
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	440a      	add	r2, r1
 8006346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800634a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800634e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
}
 8006352:	4618      	mov	r0, r3
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop

08006360 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08c      	sub	sp, #48	; 0x30
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	4613      	mov	r3, r2
 800636c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	785b      	ldrb	r3, [r3, #1]
 8006376:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800637c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006386:	2b00      	cmp	r3, #0
 8006388:	d028      	beq.n	80063dc <USB_HC_StartXfer+0x7c>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	791b      	ldrb	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d124      	bne.n	80063dc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10b      	bne.n	80063b0 <USB_HC_StartXfer+0x50>
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	795b      	ldrb	r3, [r3, #5]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d107      	bne.n	80063b0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	4619      	mov	r1, r3
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fa2e 	bl	8006808 <USB_DoPing>
      return HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e113      	b.n	80065d8 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d112      	bne.n	80063dc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	6a3a      	ldr	r2, [r7, #32]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80063d4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2200      	movs	r2, #0
 80063da:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d018      	beq.n	8006416 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	8912      	ldrh	r2, [r2, #8]
 80063ec:	4413      	add	r3, r2
 80063ee:	3b01      	subs	r3, #1
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	8912      	ldrh	r2, [r2, #8]
 80063f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80063f8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80063fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063fc:	8b7b      	ldrh	r3, [r7, #26]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d90b      	bls.n	800641a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006402:	8b7b      	ldrh	r3, [r7, #26]
 8006404:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006406:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	8912      	ldrh	r2, [r2, #8]
 800640c:	fb02 f203 	mul.w	r2, r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	611a      	str	r2, [r3, #16]
 8006414:	e001      	b.n	800641a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006416:	2301      	movs	r3, #1
 8006418:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	78db      	ldrb	r3, [r3, #3]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d006      	beq.n	8006430 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006422:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	8912      	ldrh	r2, [r2, #8]
 8006428:	fb02 f203 	mul.w	r2, r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006438:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800643a:	04d9      	lsls	r1, r3, #19
 800643c:	4b68      	ldr	r3, [pc, #416]	; (80065e0 <USB_HC_StartXfer+0x280>)
 800643e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006440:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	7a9b      	ldrb	r3, [r3, #10]
 8006446:	075b      	lsls	r3, r3, #29
 8006448:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800644c:	69f9      	ldr	r1, [r7, #28]
 800644e:	0148      	lsls	r0, r1, #5
 8006450:	6a39      	ldr	r1, [r7, #32]
 8006452:	4401      	add	r1, r0
 8006454:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006458:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800645a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	68d9      	ldr	r1, [r3, #12]
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	4413      	add	r3, r2
 800646e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006472:	460a      	mov	r2, r1
 8006474:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	bf0c      	ite	eq
 8006486:	2301      	moveq	r3, #1
 8006488:	2300      	movne	r3, #0
 800648a:	b2db      	uxtb	r3, r3
 800648c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	6a3a      	ldr	r2, [r7, #32]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	7e7b      	ldrb	r3, [r7, #25]
 80064be:	075b      	lsls	r3, r3, #29
 80064c0:	69f9      	ldr	r1, [r7, #28]
 80064c2:	0148      	lsls	r0, r1, #5
 80064c4:	6a39      	ldr	r1, [r7, #32]
 80064c6:	4401      	add	r1, r0
 80064c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80064cc:	4313      	orrs	r3, r2
 80064ce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a41      	ldr	r2, [pc, #260]	; (80065e4 <USB_HC_StartXfer+0x284>)
 80064e0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064e2:	4b40      	ldr	r3, [pc, #256]	; (80065e4 <USB_HC_StartXfer+0x284>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064ea:	4a3e      	ldr	r2, [pc, #248]	; (80065e4 <USB_HC_StartXfer+0x284>)
 80064ec:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	78db      	ldrb	r3, [r3, #3]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d006      	beq.n	8006504 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80064f6:	4b3b      	ldr	r3, [pc, #236]	; (80065e4 <USB_HC_StartXfer+0x284>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064fe:	4a39      	ldr	r2, [pc, #228]	; (80065e4 <USB_HC_StartXfer+0x284>)
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	e005      	b.n	8006510 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006504:	4b37      	ldr	r3, [pc, #220]	; (80065e4 <USB_HC_StartXfer+0x284>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800650c:	4a35      	ldr	r2, [pc, #212]	; (80065e4 <USB_HC_StartXfer+0x284>)
 800650e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006510:	4b34      	ldr	r3, [pc, #208]	; (80065e4 <USB_HC_StartXfer+0x284>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006518:	4a32      	ldr	r2, [pc, #200]	; (80065e4 <USB_HC_StartXfer+0x284>)
 800651a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006528:	461a      	mov	r2, r3
 800652a:	4b2e      	ldr	r3, [pc, #184]	; (80065e4 <USB_HC_StartXfer+0x284>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	e04e      	b.n	80065d8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	78db      	ldrb	r3, [r3, #3]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d149      	bne.n	80065d6 <USB_HC_StartXfer+0x276>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d045      	beq.n	80065d6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	79db      	ldrb	r3, [r3, #7]
 800654e:	2b03      	cmp	r3, #3
 8006550:	d830      	bhi.n	80065b4 <USB_HC_StartXfer+0x254>
 8006552:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <USB_HC_StartXfer+0x1f8>)
 8006554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006558:	08006569 	.word	0x08006569
 800655c:	0800658d 	.word	0x0800658d
 8006560:	08006569 	.word	0x08006569
 8006564:	0800658d 	.word	0x0800658d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	3303      	adds	r3, #3
 800656e:	089b      	lsrs	r3, r3, #2
 8006570:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006572:	8afa      	ldrh	r2, [r7, #22]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	b29b      	uxth	r3, r3
 800657a:	429a      	cmp	r2, r3
 800657c:	d91c      	bls.n	80065b8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	f043 0220 	orr.w	r2, r3, #32
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	619a      	str	r2, [r3, #24]
        }
        break;
 800658a:	e015      	b.n	80065b8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	3303      	adds	r3, #3
 8006592:	089b      	lsrs	r3, r3, #2
 8006594:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006596:	8afa      	ldrh	r2, [r7, #22]
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d90a      	bls.n	80065bc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80065b2:	e003      	b.n	80065bc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80065b4:	bf00      	nop
 80065b6:	e002      	b.n	80065be <USB_HC_StartXfer+0x25e>
        break;
 80065b8:	bf00      	nop
 80065ba:	e000      	b.n	80065be <USB_HC_StartXfer+0x25e>
        break;
 80065bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	68d9      	ldr	r1, [r3, #12]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	785a      	ldrb	r2, [r3, #1]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2000      	movs	r0, #0
 80065ce:	9000      	str	r0, [sp, #0]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f7ff fb85 	bl	8005ce0 <USB_WritePacket>
  }

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3728      	adds	r7, #40	; 0x28
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	1ff80000 	.word	0x1ff80000
 80065e4:	200000b4 	.word	0x200000b4

080065e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	b29b      	uxth	r3, r3
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800660a:	b480      	push	{r7}
 800660c:	b087      	sub	sp, #28
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	460b      	mov	r3, r1
 8006614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4413      	add	r3, r2
 800662a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	0c9b      	lsrs	r3, r3, #18
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <USB_HC_Halt+0x3a>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d16c      	bne.n	800671e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	440a      	add	r2, r1
 800665a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006662:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d143      	bne.n	80066f8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	440a      	add	r2, r1
 8006686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800668a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800668e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	4413      	add	r3, r2
 8006698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066ce:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	3301      	adds	r3, #1
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066dc:	d81d      	bhi.n	800671a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066f4:	d0ec      	beq.n	80066d0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066f6:	e080      	b.n	80067fa <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	0151      	lsls	r1, r2, #5
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	440a      	add	r2, r1
 800670e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006716:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006718:	e06f      	b.n	80067fa <USB_HC_Halt+0x1f0>
          break;
 800671a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800671c:	e06d      	b.n	80067fa <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4413      	add	r3, r2
 8006726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	440a      	add	r2, r1
 8006734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006738:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800673c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d143      	bne.n	80067d6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	4413      	add	r3, r2
 8006756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	440a      	add	r2, r1
 8006764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006768:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800676c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	4413      	add	r3, r2
 8006776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	440a      	add	r2, r1
 8006784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800678c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	4413      	add	r3, r2
 8006796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	0151      	lsls	r1, r2, #5
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	440a      	add	r2, r1
 80067a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067ac:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	3301      	adds	r3, #1
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ba:	d81d      	bhi.n	80067f8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067d2:	d0ec      	beq.n	80067ae <USB_HC_Halt+0x1a4>
 80067d4:	e011      	b.n	80067fa <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	e000      	b.n	80067fa <USB_HC_Halt+0x1f0>
          break;
 80067f8:	bf00      	nop
    }
  }

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800681c:	2301      	movs	r3, #1
 800681e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	04da      	lsls	r2, r3, #19
 8006824:	4b15      	ldr	r3, [pc, #84]	; (800687c <USB_DoPing+0x74>)
 8006826:	4013      	ands	r3, r2
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	0151      	lsls	r1, r2, #5
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	440a      	add	r2, r1
 8006830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006838:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	4413      	add	r3, r2
 8006842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006850:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006858:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4413      	add	r3, r2
 8006862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006866:	461a      	mov	r2, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	1ff80000 	.word	0x1ff80000

08006880 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff f9a1 	bl	8005bd8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006896:	2110      	movs	r1, #16
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff f9d9 	bl	8005c50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7ff f9fc 	bl	8005c9c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80068a4:	2300      	movs	r3, #0
 80068a6:	613b      	str	r3, [r7, #16]
 80068a8:	e01f      	b.n	80068ea <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068de:	461a      	mov	r2, r3
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	3301      	adds	r3, #1
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b0f      	cmp	r3, #15
 80068ee:	d9dc      	bls.n	80068aa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	e034      	b.n	8006960 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800690c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006914:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800691c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692a:	461a      	mov	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	3301      	adds	r3, #1
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800693c:	d80c      	bhi.n	8006958 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006954:	d0ec      	beq.n	8006930 <USB_StopHost+0xb0>
 8006956:	e000      	b.n	800695a <USB_StopHost+0xda>
        break;
 8006958:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	3301      	adds	r3, #1
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	2b0f      	cmp	r3, #15
 8006964:	d9c7      	bls.n	80068f6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800696c:	461a      	mov	r2, r3
 800696e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006972:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800697a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff f91a 	bl	8005bb6 <USB_EnableGlobalInt>

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800698c:	b590      	push	{r4, r7, lr}
 800698e:	b089      	sub	sp, #36	; 0x24
 8006990:	af04      	add	r7, sp, #16
 8006992:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006994:	2301      	movs	r3, #1
 8006996:	2202      	movs	r2, #2
 8006998:	2102      	movs	r1, #2
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fc66 	bl	800726c <USBH_FindInterface>
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	2bff      	cmp	r3, #255	; 0xff
 80069a8:	d002      	beq.n	80069b0 <USBH_CDC_InterfaceInit+0x24>
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d901      	bls.n	80069b4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069b0:	2302      	movs	r3, #2
 80069b2:	e13d      	b.n	8006c30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fc3b 	bl	8007234 <USBH_SelectInterface>
 80069be:	4603      	mov	r3, r0
 80069c0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80069c8:	2302      	movs	r3, #2
 80069ca:	e131      	b.n	8006c30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80069d2:	2050      	movs	r0, #80	; 0x50
 80069d4:	f002 fa02 	bl	8008ddc <malloc>
 80069d8:	4603      	mov	r3, r0
 80069da:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069ec:	2302      	movs	r3, #2
 80069ee:	e11f      	b.n	8006c30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069f0:	2250      	movs	r2, #80	; 0x50
 80069f2:	2100      	movs	r1, #0
 80069f4:	68b8      	ldr	r0, [r7, #8]
 80069f6:	f002 fa01 	bl	8008dfc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	211a      	movs	r1, #26
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	4413      	add	r3, r2
 8006a06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	b25b      	sxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	da15      	bge.n	8006a3e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	211a      	movs	r1, #26
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a22:	781a      	ldrb	r2, [r3, #0]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	211a      	movs	r1, #26
 8006a2e:	fb01 f303 	mul.w	r3, r1, r3
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a38:	881a      	ldrh	r2, [r3, #0]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 fe32 	bl	80086ae <USBH_AllocPipe>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	7819      	ldrb	r1, [r3, #0]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	7858      	ldrb	r0, [r3, #1]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	8952      	ldrh	r2, [r2, #10]
 8006a6a:	9202      	str	r2, [sp, #8]
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	9201      	str	r2, [sp, #4]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	4623      	mov	r3, r4
 8006a74:	4602      	mov	r2, r0
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 fdea 	bl	8008650 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2200      	movs	r2, #0
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f002 f8f9 	bl	8008c7c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	210a      	movs	r1, #10
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fbeb 	bl	800726c <USBH_FindInterface>
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2bff      	cmp	r3, #255	; 0xff
 8006a9e:	d002      	beq.n	8006aa6 <USBH_CDC_InterfaceInit+0x11a>
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d901      	bls.n	8006aaa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e0c2      	b.n	8006c30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	211a      	movs	r1, #26
 8006ab0:	fb01 f303 	mul.w	r3, r1, r3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	b25b      	sxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	da16      	bge.n	8006af0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	211a      	movs	r1, #26
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ad2:	781a      	ldrb	r2, [r3, #0]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	211a      	movs	r1, #26
 8006ade:	fb01 f303 	mul.w	r3, r1, r3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ae8:	881a      	ldrh	r2, [r3, #0]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	835a      	strh	r2, [r3, #26]
 8006aee:	e015      	b.n	8006b1c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	211a      	movs	r1, #26
 8006af6:	fb01 f303 	mul.w	r3, r1, r3
 8006afa:	4413      	add	r3, r2
 8006afc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b00:	781a      	ldrb	r2, [r3, #0]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	211a      	movs	r1, #26
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b16:	881a      	ldrh	r2, [r3, #0]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	211a      	movs	r1, #26
 8006b22:	fb01 f303 	mul.w	r3, r1, r3
 8006b26:	4413      	add	r3, r2
 8006b28:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	b25b      	sxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	da16      	bge.n	8006b62 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	211a      	movs	r1, #26
 8006b3a:	fb01 f303 	mul.w	r3, r1, r3
 8006b3e:	4413      	add	r3, r2
 8006b40:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	211a      	movs	r1, #26
 8006b50:	fb01 f303 	mul.w	r3, r1, r3
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b5a:	881a      	ldrh	r2, [r3, #0]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	835a      	strh	r2, [r3, #26]
 8006b60:	e015      	b.n	8006b8e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	211a      	movs	r1, #26
 8006b68:	fb01 f303 	mul.w	r3, r1, r3
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b72:	781a      	ldrb	r2, [r3, #0]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	211a      	movs	r1, #26
 8006b7e:	fb01 f303 	mul.w	r3, r1, r3
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b88:	881a      	ldrh	r2, [r3, #0]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	7b9b      	ldrb	r3, [r3, #14]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 fd8a 	bl	80086ae <USBH_AllocPipe>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	7bdb      	ldrb	r3, [r3, #15]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 fd80 	bl	80086ae <USBH_AllocPipe>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	7b59      	ldrb	r1, [r3, #13]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	7b98      	ldrb	r0, [r3, #14]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	8b12      	ldrh	r2, [r2, #24]
 8006bce:	9202      	str	r2, [sp, #8]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	9201      	str	r2, [sp, #4]
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	4623      	mov	r3, r4
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 fd38 	bl	8008650 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	7b19      	ldrb	r1, [r3, #12]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	7bd8      	ldrb	r0, [r3, #15]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	8b52      	ldrh	r2, [r2, #26]
 8006bf8:	9202      	str	r2, [sp, #8]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	9201      	str	r2, [sp, #4]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	4623      	mov	r3, r4
 8006c02:	4602      	mov	r2, r0
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 fd23 	bl	8008650 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	7b5b      	ldrb	r3, [r3, #13]
 8006c16:	2200      	movs	r2, #0
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f002 f82e 	bl	8008c7c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	7b1b      	ldrb	r3, [r3, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f002 f827 	bl	8008c7c <USBH_LL_SetToggle>

  return USBH_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd90      	pop	{r4, r7, pc}

08006c38 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00e      	beq.n	8006c70 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 fd18 	bl	800868e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 fd43 	bl	80086f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	7b1b      	ldrb	r3, [r3, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00e      	beq.n	8006c96 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	7b1b      	ldrb	r3, [r3, #12]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fd05 	bl	800868e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	7b1b      	ldrb	r3, [r3, #12]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fd30 	bl	80086f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	7b5b      	ldrb	r3, [r3, #13]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00e      	beq.n	8006cbc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	7b5b      	ldrb	r3, [r3, #13]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 fcf2 	bl	800868e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	7b5b      	ldrb	r3, [r3, #13]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fd1d 	bl	80086f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00b      	beq.n	8006ce0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f002 f88b 	bl	8008dec <free>
    phost->pActiveClass->pData = 0U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cdc:	2200      	movs	r2, #0
 8006cde:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3340      	adds	r3, #64	; 0x40
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f8b1 	bl	8006e6a <GetLineCoding>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d0c:	7afb      	ldrb	r3, [r7, #11]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d105      	bne.n	8006d1e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d18:	2102      	movs	r1, #2
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d877      	bhi.n	8006e3c <USBH_CDC_Process+0x114>
 8006d4c:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <USBH_CDC_Process+0x2c>)
 8006d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d52:	bf00      	nop
 8006d54:	08006d69 	.word	0x08006d69
 8006d58:	08006d6f 	.word	0x08006d6f
 8006d5c:	08006d9f 	.word	0x08006d9f
 8006d60:	08006e13 	.word	0x08006e13
 8006d64:	08006e21 	.word	0x08006e21
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6c:	e06d      	b.n	8006e4a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f897 	bl	8006ea8 <SetLineCoding>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d8c:	e058      	b.n	8006e40 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d055      	beq.n	8006e40 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2204      	movs	r2, #4
 8006d98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006d9c:	e050      	b.n	8006e40 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	3340      	adds	r3, #64	; 0x40
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f860 	bl	8006e6a <GetLineCoding>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d126      	bne.n	8006e02 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc6:	791b      	ldrb	r3, [r3, #4]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d13b      	bne.n	8006e44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d133      	bne.n	8006e44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d12b      	bne.n	8006e44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d124      	bne.n	8006e44 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f958 	bl	80070b0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e00:	e020      	b.n	8006e44 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d01d      	beq.n	8006e44 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2204      	movs	r2, #4
 8006e0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e10:	e018      	b.n	8006e44 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f867 	bl	8006ee6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f8da 	bl	8006fd2 <CDC_ProcessReception>
      break;
 8006e1e:	e014      	b.n	8006e4a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e20:	2100      	movs	r1, #0
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 ffe3 	bl	8007dee <USBH_ClrFeature>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006e3a:	e005      	b.n	8006e48 <USBH_CDC_Process+0x120>

    default:
      break;
 8006e3c:	bf00      	nop
 8006e3e:	e004      	b.n	8006e4a <USBH_CDC_Process+0x122>
      break;
 8006e40:	bf00      	nop
 8006e42:	e002      	b.n	8006e4a <USBH_CDC_Process+0x122>
      break;
 8006e44:	bf00      	nop
 8006e46:	e000      	b.n	8006e4a <USBH_CDC_Process+0x122>
      break;
 8006e48:	bf00      	nop

  }

  return status;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	22a1      	movs	r2, #161	; 0xa1
 8006e78:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2221      	movs	r2, #33	; 0x21
 8006e7e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2207      	movs	r2, #7
 8006e90:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2207      	movs	r2, #7
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 f988 	bl	80081ae <USBH_CtlReq>
 8006e9e:	4603      	mov	r3, r0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2221      	movs	r2, #33	; 0x21
 8006eb6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2207      	movs	r2, #7
 8006ece:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2207      	movs	r2, #7
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 f969 	bl	80081ae <USBH_CtlReq>
 8006edc:	4603      	mov	r3, r0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af02      	add	r7, sp, #8
 8006eec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d002      	beq.n	8006f0c <CDC_ProcessTransmission+0x26>
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d023      	beq.n	8006f52 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006f0a:	e05e      	b.n	8006fca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	8b12      	ldrh	r2, [r2, #24]
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d90b      	bls.n	8006f30 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	69d9      	ldr	r1, [r3, #28]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8b1a      	ldrh	r2, [r3, #24]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	7b5b      	ldrb	r3, [r3, #13]
 8006f24:	2001      	movs	r0, #1
 8006f26:	9000      	str	r0, [sp, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 fb4e 	bl	80085ca <USBH_BulkSendData>
 8006f2e:	e00b      	b.n	8006f48 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	7b5b      	ldrb	r3, [r3, #13]
 8006f3e:	2001      	movs	r0, #1
 8006f40:	9000      	str	r0, [sp, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 fb41 	bl	80085ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f50:	e03b      	b.n	8006fca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	7b5b      	ldrb	r3, [r3, #13]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 fe65 	bl	8008c28 <USBH_LL_GetURBState>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f62:	7afb      	ldrb	r3, [r7, #11]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d128      	bne.n	8006fba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	8b12      	ldrh	r2, [r2, #24]
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d90e      	bls.n	8006f92 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	8b12      	ldrh	r2, [r2, #24]
 8006f7c:	1a9a      	subs	r2, r3, r2
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	8b12      	ldrh	r2, [r2, #24]
 8006f8a:	441a      	add	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	61da      	str	r2, [r3, #28]
 8006f90:	e002      	b.n	8006f98 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fa8:	e00e      	b.n	8006fc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f868 	bl	8007088 <USBH_CDC_TransmitCallback>
      break;
 8006fb8:	e006      	b.n	8006fc8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006fba:	7afb      	ldrb	r3, [r7, #11]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d103      	bne.n	8006fc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fc8:	bf00      	nop
  }
}
 8006fca:	bf00      	nop
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b086      	sub	sp, #24
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d002      	beq.n	8006ff8 <CDC_ProcessReception+0x26>
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d00e      	beq.n	8007014 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006ff6:	e043      	b.n	8007080 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	6a19      	ldr	r1, [r3, #32]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	8b5a      	ldrh	r2, [r3, #26]
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	7b1b      	ldrb	r3, [r3, #12]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 fb05 	bl	8008614 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2204      	movs	r2, #4
 800700e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007012:	e035      	b.n	8007080 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	7b1b      	ldrb	r3, [r3, #12]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fe04 	bl	8008c28 <USBH_LL_GetURBState>
 8007020:	4603      	mov	r3, r0
 8007022:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007024:	7cfb      	ldrb	r3, [r7, #19]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d129      	bne.n	800707e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	7b1b      	ldrb	r3, [r3, #12]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 fd67 	bl	8008b04 <USBH_LL_GetLastXferSize>
 8007036:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	429a      	cmp	r2, r3
 8007040:	d016      	beq.n	8007070 <CDC_ProcessReception+0x9e>
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	8b5b      	ldrh	r3, [r3, #26]
 8007046:	461a      	mov	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4293      	cmp	r3, r2
 800704c:	d910      	bls.n	8007070 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	1ad2      	subs	r2, r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	6a1a      	ldr	r2, [r3, #32]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	441a      	add	r2, r3
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2203      	movs	r2, #3
 800706a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800706e:	e006      	b.n	800707e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f80f 	bl	800709c <USBH_CDC_ReceiveCallback>
      break;
 800707e:	bf00      	nop
  }
}
 8007080:	bf00      	nop
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	4613      	mov	r3, r2
 80070d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80070d8:	2302      	movs	r3, #2
 80070da:	e029      	b.n	8007130 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	79fa      	ldrb	r2, [r7, #7]
 80070e0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f81f 	bl	8007138 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f001 fc37 	bl	800899c <USBH_LL_Init>

  return USBH_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	e009      	b.n	800715e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	33e0      	adds	r3, #224	; 0xe0
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3301      	adds	r3, #1
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b0e      	cmp	r3, #14
 8007162:	d9f2      	bls.n	800714a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e009      	b.n	800717e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007174:	2200      	movs	r2, #0
 8007176:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3301      	adds	r3, #1
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007184:	d3f1      	bcc.n	800716a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2240      	movs	r2, #64	; 0x40
 80071aa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d016      	beq.n	8007222 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10e      	bne.n	800721c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007204:	1c59      	adds	r1, r3, #1
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	33de      	adds	r3, #222	; 0xde
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]
 800721a:	e004      	b.n	8007226 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800721c:	2302      	movs	r3, #2
 800721e:	73fb      	strb	r3, [r7, #15]
 8007220:	e001      	b.n	8007226 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007222:	2302      	movs	r3, #2
 8007224:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007226:	7bfb      	ldrb	r3, [r7, #15]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800724a:	78fa      	ldrb	r2, [r7, #3]
 800724c:	429a      	cmp	r2, r3
 800724e:	d204      	bcs.n	800725a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	78fa      	ldrb	r2, [r7, #3]
 8007254:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007258:	e001      	b.n	800725e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800725a:	2302      	movs	r3, #2
 800725c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800725e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	4608      	mov	r0, r1
 8007276:	4611      	mov	r1, r2
 8007278:	461a      	mov	r2, r3
 800727a:	4603      	mov	r3, r0
 800727c:	70fb      	strb	r3, [r7, #3]
 800727e:	460b      	mov	r3, r1
 8007280:	70bb      	strb	r3, [r7, #2]
 8007282:	4613      	mov	r3, r2
 8007284:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800728a:	2300      	movs	r3, #0
 800728c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007294:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007296:	e025      	b.n	80072e4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	221a      	movs	r2, #26
 800729c:	fb02 f303 	mul.w	r3, r2, r3
 80072a0:	3308      	adds	r3, #8
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	4413      	add	r3, r2
 80072a6:	3302      	adds	r3, #2
 80072a8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	795b      	ldrb	r3, [r3, #5]
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d002      	beq.n	80072ba <USBH_FindInterface+0x4e>
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	2bff      	cmp	r3, #255	; 0xff
 80072b8:	d111      	bne.n	80072de <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072be:	78ba      	ldrb	r2, [r7, #2]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d002      	beq.n	80072ca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072c4:	78bb      	ldrb	r3, [r7, #2]
 80072c6:	2bff      	cmp	r3, #255	; 0xff
 80072c8:	d109      	bne.n	80072de <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072ce:	787a      	ldrb	r2, [r7, #1]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d002      	beq.n	80072da <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072d4:	787b      	ldrb	r3, [r7, #1]
 80072d6:	2bff      	cmp	r3, #255	; 0xff
 80072d8:	d101      	bne.n	80072de <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	e006      	b.n	80072ec <USBH_FindInterface+0x80>
    }
    if_ix++;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	3301      	adds	r3, #1
 80072e2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d9d6      	bls.n	8007298 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80072ea:	23ff      	movs	r3, #255	; 0xff
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 fb87 	bl	8008a14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007306:	2101      	movs	r1, #1
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 fca0 	bl	8008c4e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b088      	sub	sp, #32
 800731c:	af04      	add	r7, sp, #16
 800731e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007320:	2302      	movs	r3, #2
 8007322:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b01      	cmp	r3, #1
 8007332:	d102      	bne.n	800733a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2203      	movs	r2, #3
 8007338:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b0b      	cmp	r3, #11
 8007342:	f200 81b3 	bhi.w	80076ac <USBH_Process+0x394>
 8007346:	a201      	add	r2, pc, #4	; (adr r2, 800734c <USBH_Process+0x34>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	0800737d 	.word	0x0800737d
 8007350:	080073af 	.word	0x080073af
 8007354:	08007417 	.word	0x08007417
 8007358:	08007647 	.word	0x08007647
 800735c:	080076ad 	.word	0x080076ad
 8007360:	080074bb 	.word	0x080074bb
 8007364:	080075ed 	.word	0x080075ed
 8007368:	080074f1 	.word	0x080074f1
 800736c:	08007511 	.word	0x08007511
 8007370:	08007531 	.word	0x08007531
 8007374:	0800755f 	.word	0x0800755f
 8007378:	0800762f 	.word	0x0800762f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 8193 	beq.w	80076b0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007390:	20c8      	movs	r0, #200	; 0xc8
 8007392:	f001 fca6 	bl	8008ce2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 fb99 	bl	8008ace <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073ac:	e180      	b.n	80076b0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d107      	bne.n	80073c8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073c6:	e182      	b.n	80076ce <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073d2:	d914      	bls.n	80073fe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073da:	3301      	adds	r3, #1
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d903      	bls.n	80073f6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	220d      	movs	r2, #13
 80073f2:	701a      	strb	r2, [r3, #0]
      break;
 80073f4:	e16b      	b.n	80076ce <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
      break;
 80073fc:	e167      	b.n	80076ce <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007404:	f103 020a 	add.w	r2, r3, #10
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800740e:	200a      	movs	r0, #10
 8007410:	f001 fc67 	bl	8008ce2 <USBH_Delay>
      break;
 8007414:	e15b      	b.n	80076ce <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007426:	2104      	movs	r1, #4
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800742c:	2064      	movs	r0, #100	; 0x64
 800742e:	f001 fc58 	bl	8008ce2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 fb24 	bl	8008a80 <USBH_LL_GetSpeed>
 8007438:	4603      	mov	r3, r0
 800743a:	461a      	mov	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2205      	movs	r2, #5
 8007446:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007448:	2100      	movs	r1, #0
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 f92f 	bl	80086ae <USBH_AllocPipe>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007458:	2180      	movs	r1, #128	; 0x80
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f001 f927 	bl	80086ae <USBH_AllocPipe>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	7919      	ldrb	r1, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800747c:	b292      	uxth	r2, r2
 800747e:	9202      	str	r2, [sp, #8]
 8007480:	2200      	movs	r2, #0
 8007482:	9201      	str	r2, [sp, #4]
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	4603      	mov	r3, r0
 8007488:	2280      	movs	r2, #128	; 0x80
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 f8e0 	bl	8008650 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	7959      	ldrb	r1, [r3, #5]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80074a4:	b292      	uxth	r2, r2
 80074a6:	9202      	str	r2, [sp, #8]
 80074a8:	2200      	movs	r2, #0
 80074aa:	9201      	str	r2, [sp, #4]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	4603      	mov	r3, r0
 80074b0:	2200      	movs	r2, #0
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 f8cc 	bl	8008650 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074b8:	e109      	b.n	80076ce <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f90c 	bl	80076d8 <USBH_HandleEnum>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f040 80f3 	bne.w	80076b4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d103      	bne.n	80074e8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2208      	movs	r2, #8
 80074e4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074e6:	e0e5      	b.n	80076b4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2207      	movs	r2, #7
 80074ec:	701a      	strb	r2, [r3, #0]
      break;
 80074ee:	e0e1      	b.n	80076b4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 80de 	beq.w	80076b8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007502:	2101      	movs	r1, #1
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2208      	movs	r2, #8
 800750c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800750e:	e0d3      	b.n	80076b8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007516:	b29b      	uxth	r3, r3
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fc20 	bl	8007d60 <USBH_SetCfg>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	f040 80ca 	bne.w	80076bc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2209      	movs	r2, #9
 800752c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800752e:	e0c5      	b.n	80076bc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800753e:	2101      	movs	r1, #1
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fc30 	bl	8007da6 <USBH_SetFeature>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	f040 80b9 	bne.w	80076c0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	220a      	movs	r2, #10
 8007552:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007554:	e0b4      	b.n	80076c0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	220a      	movs	r2, #10
 800755a:	701a      	strb	r2, [r3, #0]
      break;
 800755c:	e0b0      	b.n	80076c0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 80ad 	beq.w	80076c4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]
 8007576:	e016      	b.n	80075a6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007578:	7bfa      	ldrb	r2, [r7, #15]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	32de      	adds	r2, #222	; 0xde
 800757e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007582:	791a      	ldrb	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800758a:	429a      	cmp	r2, r3
 800758c:	d108      	bne.n	80075a0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800758e:	7bfa      	ldrb	r2, [r7, #15]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	32de      	adds	r2, #222	; 0xde
 8007594:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800759e:	e005      	b.n	80075ac <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	3301      	adds	r3, #1
 80075a4:	73fb      	strb	r3, [r7, #15]
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0e5      	beq.n	8007578 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d016      	beq.n	80075e4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d109      	bne.n	80075dc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2206      	movs	r2, #6
 80075cc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075d4:	2103      	movs	r1, #3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075da:	e073      	b.n	80076c4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	220d      	movs	r2, #13
 80075e0:	701a      	strb	r2, [r3, #0]
      break;
 80075e2:	e06f      	b.n	80076c4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	220d      	movs	r2, #13
 80075e8:	701a      	strb	r2, [r3, #0]
      break;
 80075ea:	e06b      	b.n	80076c4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d017      	beq.n	8007626 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	4798      	blx	r3
 8007602:	4603      	mov	r3, r0
 8007604:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007606:	7bbb      	ldrb	r3, [r7, #14]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d103      	bne.n	8007616 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	220b      	movs	r2, #11
 8007612:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007614:	e058      	b.n	80076c8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d154      	bne.n	80076c8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	220d      	movs	r2, #13
 8007622:	701a      	strb	r2, [r3, #0]
      break;
 8007624:	e050      	b.n	80076c8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	220d      	movs	r2, #13
 800762a:	701a      	strb	r2, [r3, #0]
      break;
 800762c:	e04c      	b.n	80076c8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d049      	beq.n	80076cc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	4798      	blx	r3
      }
      break;
 8007644:	e042      	b.n	80076cc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff fd72 	bl	8007138 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d009      	beq.n	8007672 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007682:	2105      	movs	r1, #5
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	d107      	bne.n	80076a4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff fe2b 	bl	80072f8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076a2:	e014      	b.n	80076ce <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 f9b5 	bl	8008a14 <USBH_LL_Start>
      break;
 80076aa:	e010      	b.n	80076ce <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80076ac:	bf00      	nop
 80076ae:	e00e      	b.n	80076ce <USBH_Process+0x3b6>
      break;
 80076b0:	bf00      	nop
 80076b2:	e00c      	b.n	80076ce <USBH_Process+0x3b6>
      break;
 80076b4:	bf00      	nop
 80076b6:	e00a      	b.n	80076ce <USBH_Process+0x3b6>
    break;
 80076b8:	bf00      	nop
 80076ba:	e008      	b.n	80076ce <USBH_Process+0x3b6>
      break;
 80076bc:	bf00      	nop
 80076be:	e006      	b.n	80076ce <USBH_Process+0x3b6>
      break;
 80076c0:	bf00      	nop
 80076c2:	e004      	b.n	80076ce <USBH_Process+0x3b6>
      break;
 80076c4:	bf00      	nop
 80076c6:	e002      	b.n	80076ce <USBH_Process+0x3b6>
      break;
 80076c8:	bf00      	nop
 80076ca:	e000      	b.n	80076ce <USBH_Process+0x3b6>
      break;
 80076cc:	bf00      	nop
  }
  return USBH_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af04      	add	r7, sp, #16
 80076de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076e0:	2301      	movs	r3, #1
 80076e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	785b      	ldrb	r3, [r3, #1]
 80076ec:	2b07      	cmp	r3, #7
 80076ee:	f200 81c1 	bhi.w	8007a74 <USBH_HandleEnum+0x39c>
 80076f2:	a201      	add	r2, pc, #4	; (adr r2, 80076f8 <USBH_HandleEnum+0x20>)
 80076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f8:	08007719 	.word	0x08007719
 80076fc:	080077d7 	.word	0x080077d7
 8007700:	08007841 	.word	0x08007841
 8007704:	080078cf 	.word	0x080078cf
 8007708:	08007939 	.word	0x08007939
 800770c:	080079a9 	.word	0x080079a9
 8007710:	080079ef 	.word	0x080079ef
 8007714:	08007a35 	.word	0x08007a35
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007718:	2108      	movs	r1, #8
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa50 	bl	8007bc0 <USBH_Get_DevDesc>
 8007720:	4603      	mov	r3, r0
 8007722:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d130      	bne.n	800778c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	7919      	ldrb	r1, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800774e:	b292      	uxth	r2, r2
 8007750:	9202      	str	r2, [sp, #8]
 8007752:	2200      	movs	r2, #0
 8007754:	9201      	str	r2, [sp, #4]
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	4603      	mov	r3, r0
 800775a:	2280      	movs	r2, #128	; 0x80
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 ff77 	bl	8008650 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	7959      	ldrb	r1, [r3, #5]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007776:	b292      	uxth	r2, r2
 8007778:	9202      	str	r2, [sp, #8]
 800777a:	2200      	movs	r2, #0
 800777c:	9201      	str	r2, [sp, #4]
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	4603      	mov	r3, r0
 8007782:	2200      	movs	r2, #0
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 ff63 	bl	8008650 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800778a:	e175      	b.n	8007a78 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	2b03      	cmp	r3, #3
 8007790:	f040 8172 	bne.w	8007a78 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800779a:	3301      	adds	r3, #1
 800779c:	b2da      	uxtb	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d903      	bls.n	80077b6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	220d      	movs	r2, #13
 80077b2:	701a      	strb	r2, [r3, #0]
      break;
 80077b4:	e160      	b.n	8007a78 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	795b      	ldrb	r3, [r3, #5]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 ff97 	bl	80086f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	791b      	ldrb	r3, [r3, #4]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 ff91 	bl	80086f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]
      break;
 80077d4:	e150      	b.n	8007a78 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80077d6:	2112      	movs	r1, #18
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f9f1 	bl	8007bc0 <USBH_Get_DevDesc>
 80077de:	4603      	mov	r3, r0
 80077e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d103      	bne.n	80077f0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077ee:	e145      	b.n	8007a7c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	f040 8142 	bne.w	8007a7c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077fe:	3301      	adds	r3, #1
 8007800:	b2da      	uxtb	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800780e:	2b03      	cmp	r3, #3
 8007810:	d903      	bls.n	800781a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	220d      	movs	r2, #13
 8007816:	701a      	strb	r2, [r3, #0]
      break;
 8007818:	e130      	b.n	8007a7c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	795b      	ldrb	r3, [r3, #5]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 ff65 	bl	80086f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	791b      	ldrb	r3, [r3, #4]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 ff5f 	bl	80086f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	701a      	strb	r2, [r3, #0]
      break;
 800783e:	e11d      	b.n	8007a7c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007840:	2101      	movs	r1, #1
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fa68 	bl	8007d18 <USBH_SetAddress>
 8007848:	4603      	mov	r3, r0
 800784a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d132      	bne.n	80078b8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007852:	2002      	movs	r0, #2
 8007854:	f001 fa45 	bl	8008ce2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2203      	movs	r2, #3
 8007864:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7919      	ldrb	r1, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800787a:	b292      	uxth	r2, r2
 800787c:	9202      	str	r2, [sp, #8]
 800787e:	2200      	movs	r2, #0
 8007880:	9201      	str	r2, [sp, #4]
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	4603      	mov	r3, r0
 8007886:	2280      	movs	r2, #128	; 0x80
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fee1 	bl	8008650 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	7959      	ldrb	r1, [r3, #5]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078a2:	b292      	uxth	r2, r2
 80078a4:	9202      	str	r2, [sp, #8]
 80078a6:	2200      	movs	r2, #0
 80078a8:	9201      	str	r2, [sp, #4]
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	4603      	mov	r3, r0
 80078ae:	2200      	movs	r2, #0
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fecd 	bl	8008650 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078b6:	e0e3      	b.n	8007a80 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	f040 80e0 	bne.w	8007a80 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	220d      	movs	r2, #13
 80078c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	705a      	strb	r2, [r3, #1]
      break;
 80078cc:	e0d8      	b.n	8007a80 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80078ce:	2109      	movs	r1, #9
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f99d 	bl	8007c10 <USBH_Get_CfgDesc>
 80078d6:	4603      	mov	r3, r0
 80078d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d103      	bne.n	80078e8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2204      	movs	r2, #4
 80078e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078e6:	e0cd      	b.n	8007a84 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	f040 80ca 	bne.w	8007a84 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078f6:	3301      	adds	r3, #1
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007906:	2b03      	cmp	r3, #3
 8007908:	d903      	bls.n	8007912 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	220d      	movs	r2, #13
 800790e:	701a      	strb	r2, [r3, #0]
      break;
 8007910:	e0b8      	b.n	8007a84 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	795b      	ldrb	r3, [r3, #5]
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fee9 	bl	80086f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	791b      	ldrb	r3, [r3, #4]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fee3 	bl	80086f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
      break;
 8007936:	e0a5      	b.n	8007a84 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f965 	bl	8007c10 <USBH_Get_CfgDesc>
 8007946:	4603      	mov	r3, r0
 8007948:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d103      	bne.n	8007958 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2205      	movs	r2, #5
 8007954:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007956:	e097      	b.n	8007a88 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	2b03      	cmp	r3, #3
 800795c:	f040 8094 	bne.w	8007a88 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007966:	3301      	adds	r3, #1
 8007968:	b2da      	uxtb	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007976:	2b03      	cmp	r3, #3
 8007978:	d903      	bls.n	8007982 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	220d      	movs	r2, #13
 800797e:	701a      	strb	r2, [r3, #0]
      break;
 8007980:	e082      	b.n	8007a88 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	795b      	ldrb	r3, [r3, #5]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 feb1 	bl	80086f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	791b      	ldrb	r3, [r3, #4]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 feab 	bl	80086f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	701a      	strb	r2, [r3, #0]
      break;
 80079a6:	e06f      	b.n	8007a88 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d019      	beq.n	80079e6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079be:	23ff      	movs	r3, #255	; 0xff
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f949 	bl	8007c58 <USBH_Get_StringDesc>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2206      	movs	r2, #6
 80079d4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079d6:	e059      	b.n	8007a8c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d156      	bne.n	8007a8c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2206      	movs	r2, #6
 80079e2:	705a      	strb	r2, [r3, #1]
      break;
 80079e4:	e052      	b.n	8007a8c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2206      	movs	r2, #6
 80079ea:	705a      	strb	r2, [r3, #1]
      break;
 80079ec:	e04e      	b.n	8007a8c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d019      	beq.n	8007a2c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a04:	23ff      	movs	r3, #255	; 0xff
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f926 	bl	8007c58 <USBH_Get_StringDesc>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d103      	bne.n	8007a1e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2207      	movs	r2, #7
 8007a1a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a1c:	e038      	b.n	8007a90 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d135      	bne.n	8007a90 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2207      	movs	r2, #7
 8007a28:	705a      	strb	r2, [r3, #1]
      break;
 8007a2a:	e031      	b.n	8007a90 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2207      	movs	r2, #7
 8007a30:	705a      	strb	r2, [r3, #1]
      break;
 8007a32:	e02d      	b.n	8007a90 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d017      	beq.n	8007a6e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a4a:	23ff      	movs	r3, #255	; 0xff
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f903 	bl	8007c58 <USBH_Get_StringDesc>
 8007a52:	4603      	mov	r3, r0
 8007a54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a60:	e018      	b.n	8007a94 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d115      	bne.n	8007a94 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6c:	e012      	b.n	8007a94 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]
      break;
 8007a72:	e00f      	b.n	8007a94 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007a74:	bf00      	nop
 8007a76:	e00e      	b.n	8007a96 <USBH_HandleEnum+0x3be>
      break;
 8007a78:	bf00      	nop
 8007a7a:	e00c      	b.n	8007a96 <USBH_HandleEnum+0x3be>
      break;
 8007a7c:	bf00      	nop
 8007a7e:	e00a      	b.n	8007a96 <USBH_HandleEnum+0x3be>
      break;
 8007a80:	bf00      	nop
 8007a82:	e008      	b.n	8007a96 <USBH_HandleEnum+0x3be>
      break;
 8007a84:	bf00      	nop
 8007a86:	e006      	b.n	8007a96 <USBH_HandleEnum+0x3be>
      break;
 8007a88:	bf00      	nop
 8007a8a:	e004      	b.n	8007a96 <USBH_HandleEnum+0x3be>
      break;
 8007a8c:	bf00      	nop
 8007a8e:	e002      	b.n	8007a96 <USBH_HandleEnum+0x3be>
      break;
 8007a90:	bf00      	nop
 8007a92:	e000      	b.n	8007a96 <USBH_HandleEnum+0x3be>
      break;
 8007a94:	bf00      	nop
  }
  return Status;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f804 	bl	8007ae2 <USBH_HandleSof>
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b0b      	cmp	r3, #11
 8007af2:	d10a      	bne.n	8007b0a <USBH_HandleSof+0x28>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d005      	beq.n	8007b0a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	4798      	blx	r3
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007b22:	bf00      	nop
}
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b3e:	bf00      	nop
}
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 ff56 	bl	8008a4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	791b      	ldrb	r3, [r3, #4]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fda3 	bl	80086f0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	795b      	ldrb	r3, [r3, #5]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fd9d 	bl	80086f0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af02      	add	r7, sp, #8
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007bd2:	78fb      	ldrb	r3, [r7, #3]
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bde:	2100      	movs	r1, #0
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f864 	bl	8007cae <USBH_GetDescriptor>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73fb      	strb	r3, [r7, #15]
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10a      	bne.n	8007c06 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bfc:	78fa      	ldrb	r2, [r7, #3]
 8007bfe:	b292      	uxth	r2, r2
 8007c00:	4619      	mov	r1, r3
 8007c02:	f000 f918 	bl	8007e36 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	331c      	adds	r3, #28
 8007c20:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007c22:	887b      	ldrh	r3, [r7, #2]
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f83d 	bl	8007cae <USBH_GetDescriptor>
 8007c34:	4603      	mov	r3, r0
 8007c36:	72fb      	strb	r3, [r7, #11]
 8007c38:	7afb      	ldrb	r3, [r7, #11]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d107      	bne.n	8007c4e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c44:	887a      	ldrh	r2, [r7, #2]
 8007c46:	68f9      	ldr	r1, [r7, #12]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 f964 	bl	8007f16 <USBH_ParseCfgDesc>
  }

  return status;
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	607a      	str	r2, [r7, #4]
 8007c62:	461a      	mov	r2, r3
 8007c64:	460b      	mov	r3, r1
 8007c66:	72fb      	strb	r3, [r7, #11]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c74:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007c7c:	893b      	ldrh	r3, [r7, #8]
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	460b      	mov	r3, r1
 8007c82:	2100      	movs	r1, #0
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 f812 	bl	8007cae <USBH_GetDescriptor>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	75fb      	strb	r3, [r7, #23]
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d107      	bne.n	8007ca4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c9a:	893a      	ldrh	r2, [r7, #8]
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fa37 	bl	8008112 <USBH_ParseStringDesc>
  }

  return status;
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3718      	adds	r7, #24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	607b      	str	r3, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	72fb      	strb	r3, [r7, #11]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	789b      	ldrb	r3, [r3, #2]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d11c      	bne.n	8007d02 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007cc8:	7afb      	ldrb	r3, [r7, #11]
 8007cca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2206      	movs	r2, #6
 8007cd8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	893a      	ldrh	r2, [r7, #8]
 8007cde:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ce0:	893b      	ldrh	r3, [r7, #8]
 8007ce2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cea:	d104      	bne.n	8007cf6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f240 4209 	movw	r2, #1033	; 0x409
 8007cf2:	829a      	strh	r2, [r3, #20]
 8007cf4:	e002      	b.n	8007cfc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8b3a      	ldrh	r2, [r7, #24]
 8007d00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007d02:	8b3b      	ldrh	r3, [r7, #24]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fa50 	bl	80081ae <USBH_CtlReq>
 8007d0e:	4603      	mov	r3, r0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	460b      	mov	r3, r1
 8007d22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	789b      	ldrb	r3, [r3, #2]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d10f      	bne.n	8007d4c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2205      	movs	r2, #5
 8007d36:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d38:	78fb      	ldrb	r3, [r7, #3]
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2100      	movs	r1, #0
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fa2c 	bl	80081ae <USBH_CtlReq>
 8007d56:	4603      	mov	r3, r0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	789b      	ldrb	r3, [r3, #2]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d10e      	bne.n	8007d92 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2209      	movs	r2, #9
 8007d7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	887a      	ldrh	r2, [r7, #2]
 8007d84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007d92:	2200      	movs	r2, #0
 8007d94:	2100      	movs	r1, #0
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa09 	bl	80081ae <USBH_CtlReq>
 8007d9c:	4603      	mov	r3, r0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	789b      	ldrb	r3, [r3, #2]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d10f      	bne.n	8007dda <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2203      	movs	r2, #3
 8007dc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007dc6:	78fb      	ldrb	r3, [r7, #3]
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2100      	movs	r1, #0
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f9e5 	bl	80081ae <USBH_CtlReq>
 8007de4:	4603      	mov	r3, r0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	789b      	ldrb	r3, [r3, #2]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d10f      	bne.n	8007e22 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2202      	movs	r2, #2
 8007e06:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e14:	78fb      	ldrb	r3, [r7, #3]
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007e22:	2200      	movs	r2, #0
 8007e24:	2100      	movs	r1, #0
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9c1 	bl	80081ae <USBH_CtlReq>
 8007e2c:	4603      	mov	r3, r0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b085      	sub	sp, #20
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	4613      	mov	r3, r2
 8007e42:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	781a      	ldrb	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	785a      	ldrb	r2, [r3, #1]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	3302      	adds	r3, #2
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	3303      	adds	r3, #3
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	791a      	ldrb	r2, [r3, #4]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	795a      	ldrb	r2, [r3, #5]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	799a      	ldrb	r2, [r3, #6]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	79da      	ldrb	r2, [r3, #7]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007e90:	88fb      	ldrh	r3, [r7, #6]
 8007e92:	2b08      	cmp	r3, #8
 8007e94:	d939      	bls.n	8007f0a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	3308      	adds	r3, #8
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	3309      	adds	r3, #9
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	021b      	lsls	r3, r3, #8
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	330a      	adds	r3, #10
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	330b      	adds	r3, #11
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	021b      	lsls	r3, r3, #8
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	330c      	adds	r3, #12
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	330d      	adds	r3, #13
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	021b      	lsls	r3, r3, #8
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	7b9a      	ldrb	r2, [r3, #14]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	7bda      	ldrb	r2, [r3, #15]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	7c1a      	ldrb	r2, [r3, #16]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	7c5a      	ldrb	r2, [r3, #17]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	745a      	strb	r2, [r3, #17]
  }
}
 8007f0a:	bf00      	nop
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b08a      	sub	sp, #40	; 0x28
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	4613      	mov	r3, r2
 8007f22:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	781a      	ldrb	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	785a      	ldrb	r2, [r3, #1]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	3302      	adds	r3, #2
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	3303      	adds	r3, #3
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	791a      	ldrb	r2, [r3, #4]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	795a      	ldrb	r2, [r3, #5]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	799a      	ldrb	r2, [r3, #6]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	79da      	ldrb	r2, [r3, #7]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	7a1a      	ldrb	r2, [r3, #8]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f8c:	88fb      	ldrh	r3, [r7, #6]
 8007f8e:	2b09      	cmp	r3, #9
 8007f90:	d95f      	bls.n	8008052 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f92:	2309      	movs	r3, #9
 8007f94:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f9a:	e051      	b.n	8008040 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f9c:	f107 0316 	add.w	r3, r7, #22
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fa4:	f000 f8e8 	bl	8008178 <USBH_GetNextDesc>
 8007fa8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d146      	bne.n	8008040 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fb6:	221a      	movs	r2, #26
 8007fb8:	fb02 f303 	mul.w	r3, r2, r3
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	3302      	adds	r3, #2
 8007fc4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fc8:	69f8      	ldr	r0, [r7, #28]
 8007fca:	f000 f846 	bl	800805a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fd8:	e022      	b.n	8008020 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fda:	f107 0316 	add.w	r3, r7, #22
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fe2:	f000 f8c9 	bl	8008178 <USBH_GetNextDesc>
 8007fe6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b05      	cmp	r3, #5
 8007fee:	d117      	bne.n	8008020 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ff4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ff8:	3201      	adds	r2, #1
 8007ffa:	00d2      	lsls	r2, r2, #3
 8007ffc:	211a      	movs	r1, #26
 8007ffe:	fb01 f303 	mul.w	r3, r1, r3
 8008002:	4413      	add	r3, r2
 8008004:	3308      	adds	r3, #8
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	4413      	add	r3, r2
 800800a:	3304      	adds	r3, #4
 800800c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800800e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008010:	69b8      	ldr	r0, [r7, #24]
 8008012:	f000 f851 	bl	80080b8 <USBH_ParseEPDesc>
            ep_ix++;
 8008016:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800801a:	3301      	adds	r3, #1
 800801c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	791b      	ldrb	r3, [r3, #4]
 8008024:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008028:	429a      	cmp	r2, r3
 800802a:	d204      	bcs.n	8008036 <USBH_ParseCfgDesc+0x120>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	885a      	ldrh	r2, [r3, #2]
 8008030:	8afb      	ldrh	r3, [r7, #22]
 8008032:	429a      	cmp	r2, r3
 8008034:	d8d1      	bhi.n	8007fda <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008036:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800803a:	3301      	adds	r3, #1
 800803c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008044:	2b01      	cmp	r3, #1
 8008046:	d804      	bhi.n	8008052 <USBH_ParseCfgDesc+0x13c>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	885a      	ldrh	r2, [r3, #2]
 800804c:	8afb      	ldrh	r3, [r7, #22]
 800804e:	429a      	cmp	r2, r3
 8008050:	d8a4      	bhi.n	8007f9c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008052:	bf00      	nop
 8008054:	3728      	adds	r7, #40	; 0x28
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781a      	ldrb	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	785a      	ldrb	r2, [r3, #1]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	789a      	ldrb	r2, [r3, #2]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	78da      	ldrb	r2, [r3, #3]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	791a      	ldrb	r2, [r3, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	795a      	ldrb	r2, [r3, #5]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	799a      	ldrb	r2, [r3, #6]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	79da      	ldrb	r2, [r3, #7]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	7a1a      	ldrb	r2, [r3, #8]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	721a      	strb	r2, [r3, #8]
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781a      	ldrb	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	785a      	ldrb	r2, [r3, #1]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	789a      	ldrb	r2, [r3, #2]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	78da      	ldrb	r2, [r3, #3]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	3304      	adds	r3, #4
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	3305      	adds	r3, #5
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	021b      	lsls	r3, r3, #8
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	4313      	orrs	r3, r2
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	799a      	ldrb	r2, [r3, #6]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	719a      	strb	r2, [r3, #6]
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008112:	b480      	push	{r7}
 8008114:	b087      	sub	sp, #28
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	4613      	mov	r3, r2
 800811e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	2b03      	cmp	r3, #3
 8008128:	d120      	bne.n	800816c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	1e9a      	subs	r2, r3, #2
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	4293      	cmp	r3, r2
 8008134:	bf28      	it	cs
 8008136:	4613      	movcs	r3, r2
 8008138:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3302      	adds	r3, #2
 800813e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008140:	2300      	movs	r3, #0
 8008142:	82fb      	strh	r3, [r7, #22]
 8008144:	e00b      	b.n	800815e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008146:	8afb      	ldrh	r3, [r7, #22]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	781a      	ldrb	r2, [r3, #0]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	3301      	adds	r3, #1
 8008156:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008158:	8afb      	ldrh	r3, [r7, #22]
 800815a:	3302      	adds	r3, #2
 800815c:	82fb      	strh	r3, [r7, #22]
 800815e:	8afa      	ldrh	r2, [r7, #22]
 8008160:	8abb      	ldrh	r3, [r7, #20]
 8008162:	429a      	cmp	r2, r3
 8008164:	d3ef      	bcc.n	8008146 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2200      	movs	r2, #0
 800816a:	701a      	strb	r2, [r3, #0]
  }
}
 800816c:	bf00      	nop
 800816e:	371c      	adds	r7, #28
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	881a      	ldrh	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	4413      	add	r3, r2
 800818e:	b29a      	uxth	r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4413      	add	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80081a0:	68fb      	ldr	r3, [r7, #12]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b086      	sub	sp, #24
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	4613      	mov	r3, r2
 80081ba:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80081bc:	2301      	movs	r3, #1
 80081be:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	789b      	ldrb	r3, [r3, #2]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d002      	beq.n	80081ce <USBH_CtlReq+0x20>
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d00f      	beq.n	80081ec <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80081cc:	e027      	b.n	800821e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	88fa      	ldrh	r2, [r7, #6]
 80081d8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2202      	movs	r2, #2
 80081e4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081e6:	2301      	movs	r3, #1
 80081e8:	75fb      	strb	r3, [r7, #23]
      break;
 80081ea:	e018      	b.n	800821e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 f81b 	bl	8008228 <USBH_HandleControl>
 80081f2:	4603      	mov	r3, r0
 80081f4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <USBH_CtlReq+0x54>
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d106      	bne.n	8008210 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2201      	movs	r2, #1
 8008206:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	761a      	strb	r2, [r3, #24]
      break;
 800820e:	e005      	b.n	800821c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	2b02      	cmp	r3, #2
 8008214:	d102      	bne.n	800821c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	709a      	strb	r2, [r3, #2]
      break;
 800821c:	bf00      	nop
  }
  return status;
 800821e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af02      	add	r7, sp, #8
 800822e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008230:	2301      	movs	r3, #1
 8008232:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008234:	2300      	movs	r3, #0
 8008236:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	7e1b      	ldrb	r3, [r3, #24]
 800823c:	3b01      	subs	r3, #1
 800823e:	2b0a      	cmp	r3, #10
 8008240:	f200 8156 	bhi.w	80084f0 <USBH_HandleControl+0x2c8>
 8008244:	a201      	add	r2, pc, #4	; (adr r2, 800824c <USBH_HandleControl+0x24>)
 8008246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824a:	bf00      	nop
 800824c:	08008279 	.word	0x08008279
 8008250:	08008293 	.word	0x08008293
 8008254:	080082fd 	.word	0x080082fd
 8008258:	08008323 	.word	0x08008323
 800825c:	0800835b 	.word	0x0800835b
 8008260:	08008385 	.word	0x08008385
 8008264:	080083d7 	.word	0x080083d7
 8008268:	080083f9 	.word	0x080083f9
 800826c:	08008435 	.word	0x08008435
 8008270:	0800845b 	.word	0x0800845b
 8008274:	08008499 	.word	0x08008499
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f103 0110 	add.w	r1, r3, #16
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	795b      	ldrb	r3, [r3, #5]
 8008282:	461a      	mov	r2, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f943 	bl	8008510 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2202      	movs	r2, #2
 800828e:	761a      	strb	r2, [r3, #24]
      break;
 8008290:	e139      	b.n	8008506 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	795b      	ldrb	r3, [r3, #5]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fcc5 	bl	8008c28 <USBH_LL_GetURBState>
 800829e:	4603      	mov	r3, r0
 80082a0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d11e      	bne.n	80082e6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	7c1b      	ldrb	r3, [r3, #16]
 80082ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082b0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	8adb      	ldrh	r3, [r3, #22]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80082ba:	7b7b      	ldrb	r3, [r7, #13]
 80082bc:	2b80      	cmp	r3, #128	; 0x80
 80082be:	d103      	bne.n	80082c8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2203      	movs	r2, #3
 80082c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082c6:	e115      	b.n	80084f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2205      	movs	r2, #5
 80082cc:	761a      	strb	r2, [r3, #24]
      break;
 80082ce:	e111      	b.n	80084f4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80082d0:	7b7b      	ldrb	r3, [r7, #13]
 80082d2:	2b80      	cmp	r3, #128	; 0x80
 80082d4:	d103      	bne.n	80082de <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2209      	movs	r2, #9
 80082da:	761a      	strb	r2, [r3, #24]
      break;
 80082dc:	e10a      	b.n	80084f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2207      	movs	r2, #7
 80082e2:	761a      	strb	r2, [r3, #24]
      break;
 80082e4:	e106      	b.n	80084f4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d003      	beq.n	80082f4 <USBH_HandleControl+0xcc>
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	f040 8100 	bne.w	80084f4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	220b      	movs	r2, #11
 80082f8:	761a      	strb	r2, [r3, #24]
      break;
 80082fa:	e0fb      	b.n	80084f4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008302:	b29a      	uxth	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6899      	ldr	r1, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	899a      	ldrh	r2, [r3, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	791b      	ldrb	r3, [r3, #4]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f93a 	bl	800858e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2204      	movs	r2, #4
 800831e:	761a      	strb	r2, [r3, #24]
      break;
 8008320:	e0f1      	b.n	8008506 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	791b      	ldrb	r3, [r3, #4]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fc7d 	bl	8008c28 <USBH_LL_GetURBState>
 800832e:	4603      	mov	r3, r0
 8008330:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d102      	bne.n	800833e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2209      	movs	r2, #9
 800833c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b05      	cmp	r3, #5
 8008342:	d102      	bne.n	800834a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008344:	2303      	movs	r3, #3
 8008346:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008348:	e0d6      	b.n	80084f8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	2b04      	cmp	r3, #4
 800834e:	f040 80d3 	bne.w	80084f8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	220b      	movs	r2, #11
 8008356:	761a      	strb	r2, [r3, #24]
      break;
 8008358:	e0ce      	b.n	80084f8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6899      	ldr	r1, [r3, #8]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	899a      	ldrh	r2, [r3, #12]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	795b      	ldrb	r3, [r3, #5]
 8008366:	2001      	movs	r0, #1
 8008368:	9000      	str	r0, [sp, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f8ea 	bl	8008544 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2206      	movs	r2, #6
 8008380:	761a      	strb	r2, [r3, #24]
      break;
 8008382:	e0c0      	b.n	8008506 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	795b      	ldrb	r3, [r3, #5]
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fc4c 	bl	8008c28 <USBH_LL_GetURBState>
 8008390:	4603      	mov	r3, r0
 8008392:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d103      	bne.n	80083a2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2207      	movs	r2, #7
 800839e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083a0:	e0ac      	b.n	80084fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	2b05      	cmp	r3, #5
 80083a6:	d105      	bne.n	80083b4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	220c      	movs	r2, #12
 80083ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80083ae:	2303      	movs	r3, #3
 80083b0:	73fb      	strb	r3, [r7, #15]
      break;
 80083b2:	e0a3      	b.n	80084fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d103      	bne.n	80083c2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2205      	movs	r2, #5
 80083be:	761a      	strb	r2, [r3, #24]
      break;
 80083c0:	e09c      	b.n	80084fc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	f040 8099 	bne.w	80084fc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	220b      	movs	r2, #11
 80083ce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80083d0:	2302      	movs	r3, #2
 80083d2:	73fb      	strb	r3, [r7, #15]
      break;
 80083d4:	e092      	b.n	80084fc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	791b      	ldrb	r3, [r3, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	2100      	movs	r1, #0
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f8d5 	bl	800858e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2208      	movs	r2, #8
 80083f4:	761a      	strb	r2, [r3, #24]

      break;
 80083f6:	e086      	b.n	8008506 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	791b      	ldrb	r3, [r3, #4]
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fc12 	bl	8008c28 <USBH_LL_GetURBState>
 8008404:	4603      	mov	r3, r0
 8008406:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d105      	bne.n	800841a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	220d      	movs	r2, #13
 8008412:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008418:	e072      	b.n	8008500 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b04      	cmp	r3, #4
 800841e:	d103      	bne.n	8008428 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	220b      	movs	r2, #11
 8008424:	761a      	strb	r2, [r3, #24]
      break;
 8008426:	e06b      	b.n	8008500 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	2b05      	cmp	r3, #5
 800842c:	d168      	bne.n	8008500 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800842e:	2303      	movs	r3, #3
 8008430:	73fb      	strb	r3, [r7, #15]
      break;
 8008432:	e065      	b.n	8008500 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	795b      	ldrb	r3, [r3, #5]
 8008438:	2201      	movs	r2, #1
 800843a:	9200      	str	r2, [sp, #0]
 800843c:	2200      	movs	r2, #0
 800843e:	2100      	movs	r1, #0
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f87f 	bl	8008544 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800844c:	b29a      	uxth	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	220a      	movs	r2, #10
 8008456:	761a      	strb	r2, [r3, #24]
      break;
 8008458:	e055      	b.n	8008506 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	795b      	ldrb	r3, [r3, #5]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fbe1 	bl	8008c28 <USBH_LL_GetURBState>
 8008466:	4603      	mov	r3, r0
 8008468:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d105      	bne.n	800847c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	220d      	movs	r2, #13
 8008478:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800847a:	e043      	b.n	8008504 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d103      	bne.n	800848a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2209      	movs	r2, #9
 8008486:	761a      	strb	r2, [r3, #24]
      break;
 8008488:	e03c      	b.n	8008504 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800848a:	7bbb      	ldrb	r3, [r7, #14]
 800848c:	2b04      	cmp	r3, #4
 800848e:	d139      	bne.n	8008504 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	220b      	movs	r2, #11
 8008494:	761a      	strb	r2, [r3, #24]
      break;
 8008496:	e035      	b.n	8008504 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	7e5b      	ldrb	r3, [r3, #25]
 800849c:	3301      	adds	r3, #1
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	765a      	strb	r2, [r3, #25]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	7e5b      	ldrb	r3, [r3, #25]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d806      	bhi.n	80084ba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80084b8:	e025      	b.n	8008506 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084c0:	2106      	movs	r1, #6
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	795b      	ldrb	r3, [r3, #5]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f90c 	bl	80086f0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	791b      	ldrb	r3, [r3, #4]
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f906 	bl	80086f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80084ea:	2302      	movs	r3, #2
 80084ec:	73fb      	strb	r3, [r7, #15]
      break;
 80084ee:	e00a      	b.n	8008506 <USBH_HandleControl+0x2de>

    default:
      break;
 80084f0:	bf00      	nop
 80084f2:	e008      	b.n	8008506 <USBH_HandleControl+0x2de>
      break;
 80084f4:	bf00      	nop
 80084f6:	e006      	b.n	8008506 <USBH_HandleControl+0x2de>
      break;
 80084f8:	bf00      	nop
 80084fa:	e004      	b.n	8008506 <USBH_HandleControl+0x2de>
      break;
 80084fc:	bf00      	nop
 80084fe:	e002      	b.n	8008506 <USBH_HandleControl+0x2de>
      break;
 8008500:	bf00      	nop
 8008502:	e000      	b.n	8008506 <USBH_HandleControl+0x2de>
      break;
 8008504:	bf00      	nop
  }

  return status;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af04      	add	r7, sp, #16
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800851e:	79f9      	ldrb	r1, [r7, #7]
 8008520:	2300      	movs	r3, #0
 8008522:	9303      	str	r3, [sp, #12]
 8008524:	2308      	movs	r3, #8
 8008526:	9302      	str	r3, [sp, #8]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	2300      	movs	r3, #0
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	2300      	movs	r3, #0
 8008532:	2200      	movs	r2, #0
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 fb46 	bl	8008bc6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af04      	add	r7, sp, #16
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	4611      	mov	r1, r2
 8008550:	461a      	mov	r2, r3
 8008552:	460b      	mov	r3, r1
 8008554:	80fb      	strh	r3, [r7, #6]
 8008556:	4613      	mov	r3, r2
 8008558:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008568:	7979      	ldrb	r1, [r7, #5]
 800856a:	7e3b      	ldrb	r3, [r7, #24]
 800856c:	9303      	str	r3, [sp, #12]
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	9302      	str	r3, [sp, #8]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	2301      	movs	r3, #1
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	2300      	movs	r3, #0
 800857c:	2200      	movs	r2, #0
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 fb21 	bl	8008bc6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b088      	sub	sp, #32
 8008592:	af04      	add	r7, sp, #16
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	4611      	mov	r1, r2
 800859a:	461a      	mov	r2, r3
 800859c:	460b      	mov	r3, r1
 800859e:	80fb      	strh	r3, [r7, #6]
 80085a0:	4613      	mov	r3, r2
 80085a2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085a4:	7979      	ldrb	r1, [r7, #5]
 80085a6:	2300      	movs	r3, #0
 80085a8:	9303      	str	r3, [sp, #12]
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	9302      	str	r3, [sp, #8]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	2301      	movs	r3, #1
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	2300      	movs	r3, #0
 80085b8:	2201      	movs	r2, #1
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 fb03 	bl	8008bc6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80085c0:	2300      	movs	r3, #0

}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b088      	sub	sp, #32
 80085ce:	af04      	add	r7, sp, #16
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	4611      	mov	r1, r2
 80085d6:	461a      	mov	r2, r3
 80085d8:	460b      	mov	r3, r1
 80085da:	80fb      	strh	r3, [r7, #6]
 80085dc:	4613      	mov	r3, r2
 80085de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085ee:	7979      	ldrb	r1, [r7, #5]
 80085f0:	7e3b      	ldrb	r3, [r7, #24]
 80085f2:	9303      	str	r3, [sp, #12]
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	9302      	str	r3, [sp, #8]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	2301      	movs	r3, #1
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	2302      	movs	r3, #2
 8008602:	2200      	movs	r2, #0
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 fade 	bl	8008bc6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af04      	add	r7, sp, #16
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	4611      	mov	r1, r2
 8008620:	461a      	mov	r2, r3
 8008622:	460b      	mov	r3, r1
 8008624:	80fb      	strh	r3, [r7, #6]
 8008626:	4613      	mov	r3, r2
 8008628:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800862a:	7979      	ldrb	r1, [r7, #5]
 800862c:	2300      	movs	r3, #0
 800862e:	9303      	str	r3, [sp, #12]
 8008630:	88fb      	ldrh	r3, [r7, #6]
 8008632:	9302      	str	r3, [sp, #8]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	9301      	str	r3, [sp, #4]
 8008638:	2301      	movs	r3, #1
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	2302      	movs	r3, #2
 800863e:	2201      	movs	r2, #1
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 fac0 	bl	8008bc6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af04      	add	r7, sp, #16
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	4608      	mov	r0, r1
 800865a:	4611      	mov	r1, r2
 800865c:	461a      	mov	r2, r3
 800865e:	4603      	mov	r3, r0
 8008660:	70fb      	strb	r3, [r7, #3]
 8008662:	460b      	mov	r3, r1
 8008664:	70bb      	strb	r3, [r7, #2]
 8008666:	4613      	mov	r3, r2
 8008668:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800866a:	7878      	ldrb	r0, [r7, #1]
 800866c:	78ba      	ldrb	r2, [r7, #2]
 800866e:	78f9      	ldrb	r1, [r7, #3]
 8008670:	8b3b      	ldrh	r3, [r7, #24]
 8008672:	9302      	str	r3, [sp, #8]
 8008674:	7d3b      	ldrb	r3, [r7, #20]
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	7c3b      	ldrb	r3, [r7, #16]
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	4603      	mov	r3, r0
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fa53 	bl	8008b2a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fa72 	bl	8008b88 <USBH_LL_ClosePipe>

  return USBH_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f836 	bl	800872c <USBH_GetFreePipe>
 80086c0:	4603      	mov	r3, r0
 80086c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80086c4:	89fb      	ldrh	r3, [r7, #14]
 80086c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d00a      	beq.n	80086e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80086ce:	78fa      	ldrb	r2, [r7, #3]
 80086d0:	89fb      	ldrh	r3, [r7, #14]
 80086d2:	f003 030f 	and.w	r3, r3, #15
 80086d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	33e0      	adds	r3, #224	; 0xe0
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80086e4:	89fb      	ldrh	r3, [r7, #14]
 80086e6:	b2db      	uxtb	r3, r3
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80086fc:	78fb      	ldrb	r3, [r7, #3]
 80086fe:	2b0a      	cmp	r3, #10
 8008700:	d80d      	bhi.n	800871e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	33e0      	adds	r3, #224	; 0xe0
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008714:	6879      	ldr	r1, [r7, #4]
 8008716:	33e0      	adds	r3, #224	; 0xe0
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	440b      	add	r3, r1
 800871c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
 800873c:	e00f      	b.n	800875e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	33e0      	adds	r3, #224	; 0xe0
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d102      	bne.n	8008758 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	b29b      	uxth	r3, r3
 8008756:	e007      	b.n	8008768 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008758:	7bfb      	ldrb	r3, [r7, #15]
 800875a:	3301      	adds	r3, #1
 800875c:	73fb      	strb	r3, [r7, #15]
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	2b0a      	cmp	r3, #10
 8008762:	d9ec      	bls.n	800873e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008764:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008778:	2201      	movs	r2, #1
 800877a:	490e      	ldr	r1, [pc, #56]	; (80087b4 <MX_USB_HOST_Init+0x40>)
 800877c:	480e      	ldr	r0, [pc, #56]	; (80087b8 <MX_USB_HOST_Init+0x44>)
 800877e:	f7fe fca1 	bl	80070c4 <USBH_Init>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008788:	f7f8 fdd8 	bl	800133c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800878c:	490b      	ldr	r1, [pc, #44]	; (80087bc <MX_USB_HOST_Init+0x48>)
 800878e:	480a      	ldr	r0, [pc, #40]	; (80087b8 <MX_USB_HOST_Init+0x44>)
 8008790:	f7fe fd26 	bl	80071e0 <USBH_RegisterClass>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800879a:	f7f8 fdcf 	bl	800133c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800879e:	4806      	ldr	r0, [pc, #24]	; (80087b8 <MX_USB_HOST_Init+0x44>)
 80087a0:	f7fe fdaa 	bl	80072f8 <USBH_Start>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80087aa:	f7f8 fdc7 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80087ae:	bf00      	nop
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	080087d5 	.word	0x080087d5
 80087b8:	200001d8 	.word	0x200001d8
 80087bc:	20000010 	.word	0x20000010

080087c0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80087c4:	4802      	ldr	r0, [pc, #8]	; (80087d0 <MX_USB_HOST_Process+0x10>)
 80087c6:	f7fe fda7 	bl	8007318 <USBH_Process>
}
 80087ca:	bf00      	nop
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	200001d8 	.word	0x200001d8

080087d4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d819      	bhi.n	800881c <USBH_UserProcess+0x48>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <USBH_UserProcess+0x1c>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	0800881d 	.word	0x0800881d
 80087f4:	0800880d 	.word	0x0800880d
 80087f8:	0800881d 	.word	0x0800881d
 80087fc:	08008815 	.word	0x08008815
 8008800:	08008805 	.word	0x08008805
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008804:	4b09      	ldr	r3, [pc, #36]	; (800882c <USBH_UserProcess+0x58>)
 8008806:	2203      	movs	r2, #3
 8008808:	701a      	strb	r2, [r3, #0]
  break;
 800880a:	e008      	b.n	800881e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800880c:	4b07      	ldr	r3, [pc, #28]	; (800882c <USBH_UserProcess+0x58>)
 800880e:	2202      	movs	r2, #2
 8008810:	701a      	strb	r2, [r3, #0]
  break;
 8008812:	e004      	b.n	800881e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008814:	4b05      	ldr	r3, [pc, #20]	; (800882c <USBH_UserProcess+0x58>)
 8008816:	2201      	movs	r2, #1
 8008818:	701a      	strb	r2, [r3, #0]
  break;
 800881a:	e000      	b.n	800881e <USBH_UserProcess+0x4a>

  default:
  break;
 800881c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	200000b8 	.word	0x200000b8

08008830 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08a      	sub	sp, #40	; 0x28
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008838:	f107 0314 	add.w	r3, r7, #20
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	609a      	str	r2, [r3, #8]
 8008844:	60da      	str	r2, [r3, #12]
 8008846:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008850:	d147      	bne.n	80088e2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008852:	2300      	movs	r3, #0
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	4b25      	ldr	r3, [pc, #148]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	4a24      	ldr	r2, [pc, #144]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 800885c:	f043 0301 	orr.w	r3, r3, #1
 8008860:	6313      	str	r3, [r2, #48]	; 0x30
 8008862:	4b22      	ldr	r3, [pc, #136]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	613b      	str	r3, [r7, #16]
 800886c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800886e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008874:	2300      	movs	r3, #0
 8008876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008878:	2300      	movs	r3, #0
 800887a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800887c:	f107 0314 	add.w	r3, r7, #20
 8008880:	4619      	mov	r1, r3
 8008882:	481b      	ldr	r0, [pc, #108]	; (80088f0 <HAL_HCD_MspInit+0xc0>)
 8008884:	f7f9 fd88 	bl	8002398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008888:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800888c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800888e:	2302      	movs	r3, #2
 8008890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008892:	2300      	movs	r3, #0
 8008894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008896:	2300      	movs	r3, #0
 8008898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800889a:	230a      	movs	r3, #10
 800889c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800889e:	f107 0314 	add.w	r3, r7, #20
 80088a2:	4619      	mov	r1, r3
 80088a4:	4812      	ldr	r0, [pc, #72]	; (80088f0 <HAL_HCD_MspInit+0xc0>)
 80088a6:	f7f9 fd77 	bl	8002398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088aa:	4b10      	ldr	r3, [pc, #64]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 80088ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ae:	4a0f      	ldr	r2, [pc, #60]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 80088b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b4:	6353      	str	r3, [r2, #52]	; 0x34
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 80088bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088be:	4a0b      	ldr	r2, [pc, #44]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 80088c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088c4:	6453      	str	r3, [r2, #68]	; 0x44
 80088c6:	4b09      	ldr	r3, [pc, #36]	; (80088ec <HAL_HCD_MspInit+0xbc>)
 80088c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088d2:	2200      	movs	r2, #0
 80088d4:	2100      	movs	r1, #0
 80088d6:	2043      	movs	r0, #67	; 0x43
 80088d8:	f7f9 f89b 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088dc:	2043      	movs	r0, #67	; 0x43
 80088de:	f7f9 f8b4 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088e2:	bf00      	nop
 80088e4:	3728      	adds	r7, #40	; 0x28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	40023800 	.word	0x40023800
 80088f0:	40020000 	.word	0x40020000

080088f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008902:	4618      	mov	r0, r3
 8008904:	f7ff f8db 	bl	8007abe <USBH_LL_IncTimer>
}
 8008908:	bf00      	nop
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800891e:	4618      	mov	r0, r3
 8008920:	f7ff f913 	bl	8007b4a <USBH_LL_Connect>
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff f91c 	bl	8007b78 <USBH_LL_Disconnect>
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
 8008954:	4613      	mov	r3, r2
 8008956:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff f8cd 	bl	8007b12 <USBH_LL_PortEnabled>
}
 8008978:	bf00      	nop
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff f8cd 	bl	8007b2e <USBH_LL_PortDisabled>
}
 8008994:	bf00      	nop
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d12a      	bne.n	8008a04 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80089ae:	4a18      	ldr	r2, [pc, #96]	; (8008a10 <USBH_LL_Init+0x74>)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a15      	ldr	r2, [pc, #84]	; (8008a10 <USBH_LL_Init+0x74>)
 80089ba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089be:	4b14      	ldr	r3, [pc, #80]	; (8008a10 <USBH_LL_Init+0x74>)
 80089c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80089c6:	4b12      	ldr	r3, [pc, #72]	; (8008a10 <USBH_LL_Init+0x74>)
 80089c8:	2208      	movs	r2, #8
 80089ca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80089cc:	4b10      	ldr	r3, [pc, #64]	; (8008a10 <USBH_LL_Init+0x74>)
 80089ce:	2201      	movs	r2, #1
 80089d0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089d2:	4b0f      	ldr	r3, [pc, #60]	; (8008a10 <USBH_LL_Init+0x74>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80089d8:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <USBH_LL_Init+0x74>)
 80089da:	2202      	movs	r2, #2
 80089dc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089de:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <USBH_LL_Init+0x74>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80089e4:	480a      	ldr	r0, [pc, #40]	; (8008a10 <USBH_LL_Init+0x74>)
 80089e6:	f7f9 fe8c 	bl	8002702 <HAL_HCD_Init>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80089f0:	f7f8 fca4 	bl	800133c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80089f4:	4806      	ldr	r0, [pc, #24]	; (8008a10 <USBH_LL_Init+0x74>)
 80089f6:	f7fa fa8f 	bl	8002f18 <HAL_HCD_GetCurrentFrame>
 80089fa:	4603      	mov	r3, r0
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff f84e 	bl	8007aa0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	200005b0 	.word	0x200005b0

08008a14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fa f9fc 	bl	8002e28 <HAL_HCD_Start>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 f95e 	bl	8008cf8 <USBH_Get_USB_Status>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fa fa04 	bl	8002e6e <HAL_HCD_Stop>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 f943 	bl	8008cf8 <USBH_Get_USB_Status>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fa fa4e 	bl	8002f34 <HAL_HCD_GetCurrentSpeed>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d00c      	beq.n	8008ab8 <USBH_LL_GetSpeed+0x38>
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d80d      	bhi.n	8008abe <USBH_LL_GetSpeed+0x3e>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <USBH_LL_GetSpeed+0x2c>
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d003      	beq.n	8008ab2 <USBH_LL_GetSpeed+0x32>
 8008aaa:	e008      	b.n	8008abe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab0:	e008      	b.n	8008ac4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab6:	e005      	b.n	8008ac4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008ab8:	2302      	movs	r3, #2
 8008aba:	73fb      	strb	r3, [r7, #15]
    break;
 8008abc:	e002      	b.n	8008ac4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac2:	bf00      	nop
  }
  return  speed;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fa f9df 	bl	8002ea8 <HAL_HCD_ResetPort>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f901 	bl	8008cf8 <USBH_Get_USB_Status>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fa f9e7 	bl	8002eee <HAL_HCD_HC_GetXferCount>
 8008b20:	4603      	mov	r3, r0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b2a:	b590      	push	{r4, r7, lr}
 8008b2c:	b089      	sub	sp, #36	; 0x24
 8008b2e:	af04      	add	r7, sp, #16
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	4608      	mov	r0, r1
 8008b34:	4611      	mov	r1, r2
 8008b36:	461a      	mov	r2, r3
 8008b38:	4603      	mov	r3, r0
 8008b3a:	70fb      	strb	r3, [r7, #3]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70bb      	strb	r3, [r7, #2]
 8008b40:	4613      	mov	r3, r2
 8008b42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b52:	787c      	ldrb	r4, [r7, #1]
 8008b54:	78ba      	ldrb	r2, [r7, #2]
 8008b56:	78f9      	ldrb	r1, [r7, #3]
 8008b58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b5a:	9302      	str	r3, [sp, #8]
 8008b5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	4623      	mov	r3, r4
 8008b6a:	f7f9 fe2c 	bl	80027c6 <HAL_HCD_HC_Init>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 f8bf 	bl	8008cf8 <USBH_Get_USB_Status>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd90      	pop	{r4, r7, pc}

08008b88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7f9 fea5 	bl	80028f6 <HAL_HCD_HC_Halt>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 f8a0 	bl	8008cf8 <USBH_Get_USB_Status>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008bc6:	b590      	push	{r4, r7, lr}
 8008bc8:	b089      	sub	sp, #36	; 0x24
 8008bca:	af04      	add	r7, sp, #16
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	4608      	mov	r0, r1
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	70fb      	strb	r3, [r7, #3]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70bb      	strb	r3, [r7, #2]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bee:	787c      	ldrb	r4, [r7, #1]
 8008bf0:	78ba      	ldrb	r2, [r7, #2]
 8008bf2:	78f9      	ldrb	r1, [r7, #3]
 8008bf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bf8:	9303      	str	r3, [sp, #12]
 8008bfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bfc:	9302      	str	r3, [sp, #8]
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	4623      	mov	r3, r4
 8008c0a:	f7f9 fe97 	bl	800293c <HAL_HCD_HC_SubmitRequest>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 f86f 	bl	8008cf8 <USBH_Get_USB_Status>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd90      	pop	{r4, r7, pc}

08008c28 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c3a:	78fa      	ldrb	r2, [r7, #3]
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fa f940 	bl	8002ec4 <HAL_HCD_HC_GetURBState>
 8008c44:	4603      	mov	r3, r0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	460b      	mov	r3, r1
 8008c58:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d103      	bne.n	8008c6c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 f872 	bl	8008d50 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c6c:	20c8      	movs	r0, #200	; 0xc8
 8008c6e:	f7f8 fdd1 	bl	8001814 <HAL_Delay>
  return USBH_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c92:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c94:	78fa      	ldrb	r2, [r7, #3]
 8008c96:	68f9      	ldr	r1, [r7, #12]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	440b      	add	r3, r1
 8008ca2:	333b      	adds	r3, #59	; 0x3b
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008caa:	78fa      	ldrb	r2, [r7, #3]
 8008cac:	68f9      	ldr	r1, [r7, #12]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3350      	adds	r3, #80	; 0x50
 8008cba:	78ba      	ldrb	r2, [r7, #2]
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	e009      	b.n	8008cd4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008cc0:	78fa      	ldrb	r2, [r7, #3]
 8008cc2:	68f9      	ldr	r1, [r7, #12]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	440b      	add	r3, r1
 8008cce:	3351      	adds	r3, #81	; 0x51
 8008cd0:	78ba      	ldrb	r2, [r7, #2]
 8008cd2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b082      	sub	sp, #8
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7f8 fd92 	bl	8001814 <HAL_Delay>
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d817      	bhi.n	8008d3c <USBH_Get_USB_Status+0x44>
 8008d0c:	a201      	add	r2, pc, #4	; (adr r2, 8008d14 <USBH_Get_USB_Status+0x1c>)
 8008d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d12:	bf00      	nop
 8008d14:	08008d25 	.word	0x08008d25
 8008d18:	08008d2b 	.word	0x08008d2b
 8008d1c:	08008d31 	.word	0x08008d31
 8008d20:	08008d37 	.word	0x08008d37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
    break;
 8008d28:	e00b      	b.n	8008d42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2e:	e008      	b.n	8008d42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
    break;
 8008d34:	e005      	b.n	8008d42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d36:	2302      	movs	r3, #2
 8008d38:	73fb      	strb	r3, [r7, #15]
    break;
 8008d3a:	e002      	b.n	8008d42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d40:	bf00      	nop
  }
  return usb_status;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	4603      	mov	r3, r0
 8008d58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d5a:	79fb      	ldrb	r3, [r7, #7]
 8008d5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d5e:	79fb      	ldrb	r3, [r7, #7]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d102      	bne.n	8008d6a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008d64:	2301      	movs	r3, #1
 8008d66:	73fb      	strb	r3, [r7, #15]
 8008d68:	e001      	b.n	8008d6e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	461a      	mov	r2, r3
 8008d72:	2101      	movs	r1, #1
 8008d74:	4803      	ldr	r0, [pc, #12]	; (8008d84 <MX_DriverVbusFS+0x34>)
 8008d76:	f7f9 fcab 	bl	80026d0 <HAL_GPIO_WritePin>
}
 8008d7a:	bf00      	nop
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	40020800 	.word	0x40020800

08008d88 <__errno>:
 8008d88:	4b01      	ldr	r3, [pc, #4]	; (8008d90 <__errno+0x8>)
 8008d8a:	6818      	ldr	r0, [r3, #0]
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	20000030 	.word	0x20000030

08008d94 <__libc_init_array>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	4d0d      	ldr	r5, [pc, #52]	; (8008dcc <__libc_init_array+0x38>)
 8008d98:	4c0d      	ldr	r4, [pc, #52]	; (8008dd0 <__libc_init_array+0x3c>)
 8008d9a:	1b64      	subs	r4, r4, r5
 8008d9c:	10a4      	asrs	r4, r4, #2
 8008d9e:	2600      	movs	r6, #0
 8008da0:	42a6      	cmp	r6, r4
 8008da2:	d109      	bne.n	8008db8 <__libc_init_array+0x24>
 8008da4:	4d0b      	ldr	r5, [pc, #44]	; (8008dd4 <__libc_init_array+0x40>)
 8008da6:	4c0c      	ldr	r4, [pc, #48]	; (8008dd8 <__libc_init_array+0x44>)
 8008da8:	f000 f8f8 	bl	8008f9c <_init>
 8008dac:	1b64      	subs	r4, r4, r5
 8008dae:	10a4      	asrs	r4, r4, #2
 8008db0:	2600      	movs	r6, #0
 8008db2:	42a6      	cmp	r6, r4
 8008db4:	d105      	bne.n	8008dc2 <__libc_init_array+0x2e>
 8008db6:	bd70      	pop	{r4, r5, r6, pc}
 8008db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dbc:	4798      	blx	r3
 8008dbe:	3601      	adds	r6, #1
 8008dc0:	e7ee      	b.n	8008da0 <__libc_init_array+0xc>
 8008dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc6:	4798      	blx	r3
 8008dc8:	3601      	adds	r6, #1
 8008dca:	e7f2      	b.n	8008db2 <__libc_init_array+0x1e>
 8008dcc:	08008fe0 	.word	0x08008fe0
 8008dd0:	08008fe0 	.word	0x08008fe0
 8008dd4:	08008fe0 	.word	0x08008fe0
 8008dd8:	08008fe4 	.word	0x08008fe4

08008ddc <malloc>:
 8008ddc:	4b02      	ldr	r3, [pc, #8]	; (8008de8 <malloc+0xc>)
 8008dde:	4601      	mov	r1, r0
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	f000 b863 	b.w	8008eac <_malloc_r>
 8008de6:	bf00      	nop
 8008de8:	20000030 	.word	0x20000030

08008dec <free>:
 8008dec:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <free+0xc>)
 8008dee:	4601      	mov	r1, r0
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	f000 b80b 	b.w	8008e0c <_free_r>
 8008df6:	bf00      	nop
 8008df8:	20000030 	.word	0x20000030

08008dfc <memset>:
 8008dfc:	4402      	add	r2, r0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d100      	bne.n	8008e06 <memset+0xa>
 8008e04:	4770      	bx	lr
 8008e06:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0a:	e7f9      	b.n	8008e00 <memset+0x4>

08008e0c <_free_r>:
 8008e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e0e:	2900      	cmp	r1, #0
 8008e10:	d048      	beq.n	8008ea4 <_free_r+0x98>
 8008e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e16:	9001      	str	r0, [sp, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e1e:	bfb8      	it	lt
 8008e20:	18e4      	addlt	r4, r4, r3
 8008e22:	f000 f8ad 	bl	8008f80 <__malloc_lock>
 8008e26:	4a20      	ldr	r2, [pc, #128]	; (8008ea8 <_free_r+0x9c>)
 8008e28:	9801      	ldr	r0, [sp, #4]
 8008e2a:	6813      	ldr	r3, [r2, #0]
 8008e2c:	4615      	mov	r5, r2
 8008e2e:	b933      	cbnz	r3, 8008e3e <_free_r+0x32>
 8008e30:	6063      	str	r3, [r4, #4]
 8008e32:	6014      	str	r4, [r2, #0]
 8008e34:	b003      	add	sp, #12
 8008e36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e3a:	f000 b8a7 	b.w	8008f8c <__malloc_unlock>
 8008e3e:	42a3      	cmp	r3, r4
 8008e40:	d90b      	bls.n	8008e5a <_free_r+0x4e>
 8008e42:	6821      	ldr	r1, [r4, #0]
 8008e44:	1862      	adds	r2, r4, r1
 8008e46:	4293      	cmp	r3, r2
 8008e48:	bf04      	itt	eq
 8008e4a:	681a      	ldreq	r2, [r3, #0]
 8008e4c:	685b      	ldreq	r3, [r3, #4]
 8008e4e:	6063      	str	r3, [r4, #4]
 8008e50:	bf04      	itt	eq
 8008e52:	1852      	addeq	r2, r2, r1
 8008e54:	6022      	streq	r2, [r4, #0]
 8008e56:	602c      	str	r4, [r5, #0]
 8008e58:	e7ec      	b.n	8008e34 <_free_r+0x28>
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	b10b      	cbz	r3, 8008e64 <_free_r+0x58>
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	d9fa      	bls.n	8008e5a <_free_r+0x4e>
 8008e64:	6811      	ldr	r1, [r2, #0]
 8008e66:	1855      	adds	r5, r2, r1
 8008e68:	42a5      	cmp	r5, r4
 8008e6a:	d10b      	bne.n	8008e84 <_free_r+0x78>
 8008e6c:	6824      	ldr	r4, [r4, #0]
 8008e6e:	4421      	add	r1, r4
 8008e70:	1854      	adds	r4, r2, r1
 8008e72:	42a3      	cmp	r3, r4
 8008e74:	6011      	str	r1, [r2, #0]
 8008e76:	d1dd      	bne.n	8008e34 <_free_r+0x28>
 8008e78:	681c      	ldr	r4, [r3, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	6053      	str	r3, [r2, #4]
 8008e7e:	4421      	add	r1, r4
 8008e80:	6011      	str	r1, [r2, #0]
 8008e82:	e7d7      	b.n	8008e34 <_free_r+0x28>
 8008e84:	d902      	bls.n	8008e8c <_free_r+0x80>
 8008e86:	230c      	movs	r3, #12
 8008e88:	6003      	str	r3, [r0, #0]
 8008e8a:	e7d3      	b.n	8008e34 <_free_r+0x28>
 8008e8c:	6825      	ldr	r5, [r4, #0]
 8008e8e:	1961      	adds	r1, r4, r5
 8008e90:	428b      	cmp	r3, r1
 8008e92:	bf04      	itt	eq
 8008e94:	6819      	ldreq	r1, [r3, #0]
 8008e96:	685b      	ldreq	r3, [r3, #4]
 8008e98:	6063      	str	r3, [r4, #4]
 8008e9a:	bf04      	itt	eq
 8008e9c:	1949      	addeq	r1, r1, r5
 8008e9e:	6021      	streq	r1, [r4, #0]
 8008ea0:	6054      	str	r4, [r2, #4]
 8008ea2:	e7c7      	b.n	8008e34 <_free_r+0x28>
 8008ea4:	b003      	add	sp, #12
 8008ea6:	bd30      	pop	{r4, r5, pc}
 8008ea8:	200000bc 	.word	0x200000bc

08008eac <_malloc_r>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	1ccd      	adds	r5, r1, #3
 8008eb0:	f025 0503 	bic.w	r5, r5, #3
 8008eb4:	3508      	adds	r5, #8
 8008eb6:	2d0c      	cmp	r5, #12
 8008eb8:	bf38      	it	cc
 8008eba:	250c      	movcc	r5, #12
 8008ebc:	2d00      	cmp	r5, #0
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	db01      	blt.n	8008ec6 <_malloc_r+0x1a>
 8008ec2:	42a9      	cmp	r1, r5
 8008ec4:	d903      	bls.n	8008ece <_malloc_r+0x22>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	6033      	str	r3, [r6, #0]
 8008eca:	2000      	movs	r0, #0
 8008ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ece:	f000 f857 	bl	8008f80 <__malloc_lock>
 8008ed2:	4921      	ldr	r1, [pc, #132]	; (8008f58 <_malloc_r+0xac>)
 8008ed4:	680a      	ldr	r2, [r1, #0]
 8008ed6:	4614      	mov	r4, r2
 8008ed8:	b99c      	cbnz	r4, 8008f02 <_malloc_r+0x56>
 8008eda:	4f20      	ldr	r7, [pc, #128]	; (8008f5c <_malloc_r+0xb0>)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	b923      	cbnz	r3, 8008eea <_malloc_r+0x3e>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f000 f83c 	bl	8008f60 <_sbrk_r>
 8008ee8:	6038      	str	r0, [r7, #0]
 8008eea:	4629      	mov	r1, r5
 8008eec:	4630      	mov	r0, r6
 8008eee:	f000 f837 	bl	8008f60 <_sbrk_r>
 8008ef2:	1c43      	adds	r3, r0, #1
 8008ef4:	d123      	bne.n	8008f3e <_malloc_r+0x92>
 8008ef6:	230c      	movs	r3, #12
 8008ef8:	6033      	str	r3, [r6, #0]
 8008efa:	4630      	mov	r0, r6
 8008efc:	f000 f846 	bl	8008f8c <__malloc_unlock>
 8008f00:	e7e3      	b.n	8008eca <_malloc_r+0x1e>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	1b5b      	subs	r3, r3, r5
 8008f06:	d417      	bmi.n	8008f38 <_malloc_r+0x8c>
 8008f08:	2b0b      	cmp	r3, #11
 8008f0a:	d903      	bls.n	8008f14 <_malloc_r+0x68>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	441c      	add	r4, r3
 8008f10:	6025      	str	r5, [r4, #0]
 8008f12:	e004      	b.n	8008f1e <_malloc_r+0x72>
 8008f14:	6863      	ldr	r3, [r4, #4]
 8008f16:	42a2      	cmp	r2, r4
 8008f18:	bf0c      	ite	eq
 8008f1a:	600b      	streq	r3, [r1, #0]
 8008f1c:	6053      	strne	r3, [r2, #4]
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f000 f834 	bl	8008f8c <__malloc_unlock>
 8008f24:	f104 000b 	add.w	r0, r4, #11
 8008f28:	1d23      	adds	r3, r4, #4
 8008f2a:	f020 0007 	bic.w	r0, r0, #7
 8008f2e:	1ac2      	subs	r2, r0, r3
 8008f30:	d0cc      	beq.n	8008ecc <_malloc_r+0x20>
 8008f32:	1a1b      	subs	r3, r3, r0
 8008f34:	50a3      	str	r3, [r4, r2]
 8008f36:	e7c9      	b.n	8008ecc <_malloc_r+0x20>
 8008f38:	4622      	mov	r2, r4
 8008f3a:	6864      	ldr	r4, [r4, #4]
 8008f3c:	e7cc      	b.n	8008ed8 <_malloc_r+0x2c>
 8008f3e:	1cc4      	adds	r4, r0, #3
 8008f40:	f024 0403 	bic.w	r4, r4, #3
 8008f44:	42a0      	cmp	r0, r4
 8008f46:	d0e3      	beq.n	8008f10 <_malloc_r+0x64>
 8008f48:	1a21      	subs	r1, r4, r0
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f000 f808 	bl	8008f60 <_sbrk_r>
 8008f50:	3001      	adds	r0, #1
 8008f52:	d1dd      	bne.n	8008f10 <_malloc_r+0x64>
 8008f54:	e7cf      	b.n	8008ef6 <_malloc_r+0x4a>
 8008f56:	bf00      	nop
 8008f58:	200000bc 	.word	0x200000bc
 8008f5c:	200000c0 	.word	0x200000c0

08008f60 <_sbrk_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d06      	ldr	r5, [pc, #24]	; (8008f7c <_sbrk_r+0x1c>)
 8008f64:	2300      	movs	r3, #0
 8008f66:	4604      	mov	r4, r0
 8008f68:	4608      	mov	r0, r1
 8008f6a:	602b      	str	r3, [r5, #0]
 8008f6c:	f7f8 fb6a 	bl	8001644 <_sbrk>
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	d102      	bne.n	8008f7a <_sbrk_r+0x1a>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	b103      	cbz	r3, 8008f7a <_sbrk_r+0x1a>
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	bd38      	pop	{r3, r4, r5, pc}
 8008f7c:	20000874 	.word	0x20000874

08008f80 <__malloc_lock>:
 8008f80:	4801      	ldr	r0, [pc, #4]	; (8008f88 <__malloc_lock+0x8>)
 8008f82:	f000 b809 	b.w	8008f98 <__retarget_lock_acquire_recursive>
 8008f86:	bf00      	nop
 8008f88:	2000087c 	.word	0x2000087c

08008f8c <__malloc_unlock>:
 8008f8c:	4801      	ldr	r0, [pc, #4]	; (8008f94 <__malloc_unlock+0x8>)
 8008f8e:	f000 b804 	b.w	8008f9a <__retarget_lock_release_recursive>
 8008f92:	bf00      	nop
 8008f94:	2000087c 	.word	0x2000087c

08008f98 <__retarget_lock_acquire_recursive>:
 8008f98:	4770      	bx	lr

08008f9a <__retarget_lock_release_recursive>:
 8008f9a:	4770      	bx	lr

08008f9c <_init>:
 8008f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9e:	bf00      	nop
 8008fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa2:	bc08      	pop	{r3}
 8008fa4:	469e      	mov	lr, r3
 8008fa6:	4770      	bx	lr

08008fa8 <_fini>:
 8008fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008faa:	bf00      	nop
 8008fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fae:	bc08      	pop	{r3}
 8008fb0:	469e      	mov	lr, r3
 8008fb2:	4770      	bx	lr
